                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.9.0 #11195 (MINGW32)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl __size
                             20 	.globl __seek
                             21 	.globl __tell
                             22 	.globl _Close
                             23 	.globl _Open
                             24 	.globl _KeyboardHit
                             25 	.globl _PrintChar
                             26 	.globl _InputString
                             27 	.globl _InputChar
                             28 	.globl _Print
                             29 	.globl _strlen
                             30 	.globl _atol
                             31 	.globl _puts
                             32 	.globl _printf
                             33 	.globl _ucNagleOn
                             34 	.globl _ucNagleOff
                             35 	.globl _ucIsFw
                             36 	.globl _ucLocalUpdate
                             37 	.globl _lPort
                             38 	.globl _uiPort
                             39 	.globl _ucPort
                             40 	.globl _ucFile
                             41 	.globl _ucServer
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _strUsage
                             45 	.globl _responseOTASPIFF
                             46 	.globl _responseOTAFW
                             47 	.globl _responseWRBlock
                             48 	.globl _responseRSCERTUpdate
                             49 	.globl _responseRSFWUpdate
                             50 	.globl _apconfigurationResponse
                             51 	.globl _scanresResponse
                             52 	.globl _nagleoffResponse
                             53 	.globl _nagleonResponse
                             54 	.globl _scanResponse
                             55 	.globl _responseOK
                             56 	.globl _certificateDone
                             57 	.globl _endUpdate
                             58 	.globl _responseReady
                             59 ;--------------------------------------------------------
                             60 ; special function registers
                             61 ;--------------------------------------------------------
                     0006    62 _myPort6	=	0x0006
                     0007    63 _myPort7	=	0x0007
                             64 ;--------------------------------------------------------
                             65 ; ram data
                             66 ;--------------------------------------------------------
                             67 	.area _DATA
                     FC9E    68 _TickCount	=	0xfc9e
   0000                      69 _ucScan::
   0000                      70 	.ds 1
   0001                      71 _ucServer::
   0001                      72 	.ds 256
   0101                      73 _ucFile::
   0101                      74 	.ds 256
   0201                      75 _ucPort::
   0201                      76 	.ds 6
   0207                      77 _uiPort::
   0207                      78 	.ds 2
   0209                      79 _lPort::
   0209                      80 	.ds 4
   020D                      81 _ucLocalUpdate::
   020D                      82 	.ds 1
   020E                      83 _ucIsFw::
   020E                      84 	.ds 1
   020F                      85 _ucNagleOff::
   020F                      86 	.ds 1
   0210                      87 _ucNagleOn::
   0210                      88 	.ds 1
                             89 ;--------------------------------------------------------
                             90 ; ram data
                             91 ;--------------------------------------------------------
                             92 	.area _INITIALIZED
                             93 ;--------------------------------------------------------
                             94 ; absolute external ram data
                             95 ;--------------------------------------------------------
                             96 	.area _DABS (ABS)
                             97 ;--------------------------------------------------------
                             98 ; global & static initialisations
                             99 ;--------------------------------------------------------
                            100 	.area _HOME
                            101 	.area _GSINIT
                            102 	.area _GSFINAL
                            103 	.area _GSINIT
                            104 ;--------------------------------------------------------
                            105 ; Home
                            106 ;--------------------------------------------------------
                            107 	.area _HOME
                            108 	.area _HOME
                            109 ;--------------------------------------------------------
                            110 ; code
                            111 ;--------------------------------------------------------
                            112 	.area _CODE
                            113 ;../fusion-c/header/io.h:155: extern	unsigned long _tell(int fH) { return B8dH.rand_record; }
                            114 ;	---------------------------------
                            115 ; Function _tell
                            116 ; ---------------------------------
   0000                     117 __tell::
   0000 CDr00r00      [17]  118 	call	___sdcc_enter_ix
   0003 01r00r00      [10]  119 	ld	bc, #__buf8_fcbs+0
   0006 DD 5E 04      [19]  120 	ld	e, 4 (ix)
   0009 DD 56 05      [19]  121 	ld	d, 5 (ix)
   000C 6B            [ 4]  122 	ld	l, e
   000D 62            [ 4]  123 	ld	h, d
   000E 29            [11]  124 	add	hl, hl
   000F 29            [11]  125 	add	hl, hl
   0010 29            [11]  126 	add	hl, hl
   0011 19            [11]  127 	add	hl, de
   0012 29            [11]  128 	add	hl, hl
   0013 19            [11]  129 	add	hl, de
   0014 29            [11]  130 	add	hl, hl
   0015 09            [11]  131 	add	hl, bc
   0016 11 21 00      [10]  132 	ld	de, #0x0021
   0019 19            [11]  133 	add	hl, de
   001A 4E            [ 7]  134 	ld	c, (hl)
   001B 23            [ 6]  135 	inc	hl
   001C 46            [ 7]  136 	ld	b, (hl)
   001D 23            [ 6]  137 	inc	hl
   001E 5E            [ 7]  138 	ld	e, (hl)
   001F 23            [ 6]  139 	inc	hl
   0020 56            [ 7]  140 	ld	d, (hl)
   0021 69            [ 4]  141 	ld	l, c
   0022 60            [ 4]  142 	ld	h, b
   0023 DD E1         [14]  143 	pop	ix
   0025 C9            [10]  144 	ret
                            145 ;../fusion-c/header/io.h:157: extern	void 	_seek(int fH, long pos, int ot)
                            146 ;	---------------------------------
                            147 ; Function _seek
                            148 ; ---------------------------------
   0026                     149 __seek::
   0026 CDr00r00      [17]  150 	call	___sdcc_enter_ix
   0029 F5            [11]  151 	push	af
   002A F5            [11]  152 	push	af
   002B F5            [11]  153 	push	af
   002C F5            [11]  154 	push	af
                            155 ;../fusion-c/header/io.h:159: if(ot==SEEK_CUR) B8dH.rand_record+=pos;
   002D DD 4E 04      [19]  156 	ld	c, 4 (ix)
   0030 DD 46 05      [19]  157 	ld	b, 5 (ix)
   0033 69            [ 4]  158 	ld	l, c
   0034 60            [ 4]  159 	ld	h, b
   0035 29            [11]  160 	add	hl, hl
   0036 29            [11]  161 	add	hl, hl
   0037 29            [11]  162 	add	hl, hl
   0038 09            [11]  163 	add	hl, bc
   0039 29            [11]  164 	add	hl, hl
   003A 09            [11]  165 	add	hl, bc
   003B 29            [11]  166 	add	hl, hl
   003C EB            [ 4]  167 	ex	de, hl
   003D D5            [11]  168 	push	de
   003E 21 02 00      [10]  169 	ld	hl, #2
   0041 39            [11]  170 	add	hl, sp
   0042 EB            [ 4]  171 	ex	de, hl
   0043 21 10 00      [10]  172 	ld	hl, #16
   0046 39            [11]  173 	add	hl, sp
   0047 01 04 00      [10]  174 	ld	bc, #4
   004A ED B0         [21]  175 	ldir
   004C D1            [10]  176 	pop	de
   004D DD 7E 0A      [19]  177 	ld	a, 10 (ix)
   0050 3D            [ 4]  178 	dec	a
   0051 DD B6 0B      [19]  179 	or	a, 11 (ix)
   0054 20 3C         [12]  180 	jr	NZ,00102$
   0056 21r00r00      [10]  181 	ld	hl, #__buf8_fcbs+0
   0059 19            [11]  182 	add	hl, de
   005A EB            [ 4]  183 	ex	de, hl
   005B 21 21 00      [10]  184 	ld	hl, #0x0021
   005E 19            [11]  185 	add	hl, de
   005F EB            [ 4]  186 	ex	de, hl
   0060 6B            [ 4]  187 	ld	l, e
   0061 62            [ 4]  188 	ld	h, d
   0062 4E            [ 7]  189 	ld	c, (hl)
   0063 23            [ 6]  190 	inc	hl
   0064 46            [ 7]  191 	ld	b, (hl)
   0065 23            [ 6]  192 	inc	hl
   0066 23            [ 6]  193 	inc	hl
   0067 7E            [ 7]  194 	ld	a, (hl)
   0068 2B            [ 6]  195 	dec	hl
   0069 6E            [ 7]  196 	ld	l, (hl)
   006A 67            [ 4]  197 	ld	h, a
   006B 79            [ 4]  198 	ld	a, c
   006C DD 86 F8      [19]  199 	add	a, -8 (ix)
   006F DD 77 FC      [19]  200 	ld	-4 (ix), a
   0072 78            [ 4]  201 	ld	a, b
   0073 DD 8E F9      [19]  202 	adc	a, -7 (ix)
   0076 DD 77 FD      [19]  203 	ld	-3 (ix), a
   0079 7D            [ 4]  204 	ld	a, l
   007A DD 8E FA      [19]  205 	adc	a, -6 (ix)
   007D DD 77 FE      [19]  206 	ld	-2 (ix), a
   0080 7C            [ 4]  207 	ld	a, h
   0081 DD 8E FB      [19]  208 	adc	a, -5 (ix)
   0084 DD 77 FF      [19]  209 	ld	-1 (ix), a
   0087 21 04 00      [10]  210 	ld	hl, #0x0004
   008A 39            [11]  211 	add	hl, sp
   008B 01 04 00      [10]  212 	ld	bc, #0x0004
   008E ED B0         [21]  213 	ldir
   0090 18 5A         [12]  214 	jr	00104$
   0092                     215 00102$:
                            216 ;../fusion-c/header/io.h:160: else B8dH.rand_record = (ot==SEEK_END ? B8dH.file_size+pos : pos );
   0092 21r00r00      [10]  217 	ld	hl, #__buf8_fcbs+0
   0095 19            [11]  218 	add	hl, de
   0096 7D            [ 4]  219 	ld	a, l
   0097 C6 21         [ 7]  220 	add	a, #0x21
   0099 5F            [ 4]  221 	ld	e, a
   009A 7C            [ 4]  222 	ld	a, h
   009B CE 00         [ 7]  223 	adc	a, #0x00
   009D 57            [ 4]  224 	ld	d, a
   009E DD 7E 0A      [19]  225 	ld	a, 10 (ix)
   00A1 D6 02         [ 7]  226 	sub	a, #0x02
   00A3 DD B6 0B      [19]  227 	or	a, 11 (ix)
   00A6 20 2B         [12]  228 	jr	NZ,00106$
   00A8 01 10 00      [10]  229 	ld	bc, #0x0010
   00AB 09            [11]  230 	add	hl, bc
   00AC 4E            [ 7]  231 	ld	c, (hl)
   00AD 23            [ 6]  232 	inc	hl
   00AE 46            [ 7]  233 	ld	b, (hl)
   00AF 23            [ 6]  234 	inc	hl
   00B0 23            [ 6]  235 	inc	hl
   00B1 7E            [ 7]  236 	ld	a, (hl)
   00B2 2B            [ 6]  237 	dec	hl
   00B3 6E            [ 7]  238 	ld	l, (hl)
   00B4 67            [ 4]  239 	ld	h, a
   00B5 79            [ 4]  240 	ld	a, c
   00B6 DD 86 F8      [19]  241 	add	a, -8 (ix)
   00B9 DD 77 FC      [19]  242 	ld	-4 (ix), a
   00BC 78            [ 4]  243 	ld	a, b
   00BD DD 8E F9      [19]  244 	adc	a, -7 (ix)
   00C0 DD 77 FD      [19]  245 	ld	-3 (ix), a
   00C3 7D            [ 4]  246 	ld	a, l
   00C4 DD 8E FA      [19]  247 	adc	a, -6 (ix)
   00C7 DD 77 FE      [19]  248 	ld	-2 (ix), a
   00CA 7C            [ 4]  249 	ld	a, h
   00CB DD 8E FB      [19]  250 	adc	a, -5 (ix)
   00CE DD 77 FF      [19]  251 	ld	-1 (ix), a
   00D1 18 10         [12]  252 	jr	00107$
   00D3                     253 00106$:
   00D3 D5            [11]  254 	push	de
   00D4 21 06 00      [10]  255 	ld	hl, #6
   00D7 39            [11]  256 	add	hl, sp
   00D8 EB            [ 4]  257 	ex	de, hl
   00D9 21 10 00      [10]  258 	ld	hl, #16
   00DC 39            [11]  259 	add	hl, sp
   00DD 01 04 00      [10]  260 	ld	bc, #4
   00E0 ED B0         [21]  261 	ldir
   00E2 D1            [10]  262 	pop	de
   00E3                     263 00107$:
   00E3 21 04 00      [10]  264 	ld	hl, #0x0004
   00E6 39            [11]  265 	add	hl, sp
   00E7 01 04 00      [10]  266 	ld	bc, #0x0004
   00EA ED B0         [21]  267 	ldir
   00EC                     268 00104$:
                            269 ;../fusion-c/header/io.h:161: }
   00EC DD F9         [10]  270 	ld	sp, ix
   00EE DD E1         [14]  271 	pop	ix
   00F0 C9            [10]  272 	ret
                            273 ;../fusion-c/header/io.h:163: extern	unsigned long _size(int fH) { return B8dH.file_size; }
                            274 ;	---------------------------------
                            275 ; Function _size
                            276 ; ---------------------------------
   00F1                     277 __size::
   00F1 CDr00r00      [17]  278 	call	___sdcc_enter_ix
   00F4 01r00r00      [10]  279 	ld	bc, #__buf8_fcbs+0
   00F7 DD 5E 04      [19]  280 	ld	e, 4 (ix)
   00FA DD 56 05      [19]  281 	ld	d, 5 (ix)
   00FD 6B            [ 4]  282 	ld	l, e
   00FE 62            [ 4]  283 	ld	h, d
   00FF 29            [11]  284 	add	hl, hl
   0100 29            [11]  285 	add	hl, hl
   0101 29            [11]  286 	add	hl, hl
   0102 19            [11]  287 	add	hl, de
   0103 29            [11]  288 	add	hl, hl
   0104 19            [11]  289 	add	hl, de
   0105 29            [11]  290 	add	hl, hl
   0106 09            [11]  291 	add	hl, bc
   0107 11 10 00      [10]  292 	ld	de, #0x0010
   010A 19            [11]  293 	add	hl, de
   010B 4E            [ 7]  294 	ld	c, (hl)
   010C 23            [ 6]  295 	inc	hl
   010D 46            [ 7]  296 	ld	b, (hl)
   010E 23            [ 6]  297 	inc	hl
   010F 5E            [ 7]  298 	ld	e, (hl)
   0110 23            [ 6]  299 	inc	hl
   0111 56            [ 7]  300 	ld	d, (hl)
   0112 69            [ 4]  301 	ld	l, c
   0113 60            [ 4]  302 	ld	h, b
   0114 DD E1         [14]  303 	pop	ix
   0116 C9            [10]  304 	ret
                            305 ;src\CFG8266.c:124: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            306 ;	---------------------------------
                            307 ; Function MyRead
                            308 ; ---------------------------------
   0117                     309 _MyRead::
   0117 CDr00r00      [17]  310 	call	___sdcc_enter_ix
   011A 21 F2 FF      [10]  311 	ld	hl, #-14
   011D 39            [11]  312 	add	hl, sp
   011E F9            [ 6]  313 	ld	sp, hl
                            314 ;src\CFG8266.c:126: unsigned int iRet = 0;
   011F DD 36 FE 00   [19]  315 	ld	-2 (ix), #0x00
   0123 DD 36 FF 00   [19]  316 	ld	-1 (ix), #0x00
                            317 ;src\CFG8266.c:130: regs.Words.DE = (unsigned int) Buffer;
   0127 21 00 00      [10]  318 	ld	hl, #0
   012A 39            [11]  319 	add	hl, sp
   012B EB            [ 4]  320 	ex	de, hl
   012C 21 04 00      [10]  321 	ld	hl, #0x0004
   012F 19            [11]  322 	add	hl, de
   0130 DD 4E 06      [19]  323 	ld	c, 6 (ix)
   0133 DD 46 07      [19]  324 	ld	b, 7 (ix)
   0136 71            [ 7]  325 	ld	(hl), c
   0137 23            [ 6]  326 	inc	hl
   0138 70            [ 7]  327 	ld	(hl), b
                            328 ;src\CFG8266.c:131: regs.Words.HL = Size;
   0139 21 06 00      [10]  329 	ld	hl, #0x0006
   013C 19            [11]  330 	add	hl, de
   013D DD 7E 08      [19]  331 	ld	a, 8 (ix)
   0140 77            [ 7]  332 	ld	(hl), a
   0141 23            [ 6]  333 	inc	hl
   0142 DD 7E 09      [19]  334 	ld	a, 9 (ix)
   0145 77            [ 7]  335 	ld	(hl), a
                            336 ;src\CFG8266.c:132: regs.Bytes.B = (unsigned char)(Handle&0xff);
   0146 21 03 00      [10]  337 	ld	hl, #3
   0149 39            [11]  338 	add	hl, sp
   014A DD 7E 04      [19]  339 	ld	a, 4 (ix)
   014D 77            [ 7]  340 	ld	(hl), a
                            341 ;src\CFG8266.c:133: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   014E 21 00 00      [10]  342 	ld	hl, #0
   0151 39            [11]  343 	add	hl, sp
   0152 EB            [ 4]  344 	ex	de, hl
   0153 4B            [ 4]  345 	ld	c, e
   0154 42            [ 4]  346 	ld	b, d
   0155 D5            [11]  347 	push	de
   0156 11 02 02      [10]  348 	ld	de, #0x0202
   0159 D5            [11]  349 	push	de
   015A C5            [11]  350 	push	bc
   015B 3E 48         [ 7]  351 	ld	a, #0x48
   015D F5            [11]  352 	push	af
   015E 33            [ 6]  353 	inc	sp
   015F CDr00r00      [17]  354 	call	_DosCall
   0162 F1            [10]  355 	pop	af
   0163 F1            [10]  356 	pop	af
   0164 33            [ 6]  357 	inc	sp
   0165 D1            [10]  358 	pop	de
                            359 ;src\CFG8266.c:134: if (regs.Bytes.A == 0)
   0166 6B            [ 4]  360 	ld	l, e
   0167 62            [ 4]  361 	ld	h, d
   0168 23            [ 6]  362 	inc	hl
   0169 7E            [ 7]  363 	ld	a, (hl)
   016A B7            [ 4]  364 	or	a, a
   016B 20 0F         [12]  365 	jr	NZ,00102$
                            366 ;src\CFG8266.c:137: iRet = regs.Words.HL;
   016D D5            [11]  367 	push	de
   016E FD E1         [14]  368 	pop	iy
   0170 FD 7E 06      [19]  369 	ld	a, 6 (iy)
   0173 DD 77 FE      [19]  370 	ld	-2 (ix), a
   0176 FD 7E 07      [19]  371 	ld	a, 7 (iy)
   0179 DD 77 FF      [19]  372 	ld	-1 (ix), a
   017C                     373 00102$:
                            374 ;src\CFG8266.c:140: return iRet;
   017C DD 6E FE      [19]  375 	ld	l, -2 (ix)
   017F DD 66 FF      [19]  376 	ld	h, -1 (ix)
                            377 ;src\CFG8266.c:141: }
   0182 DD F9         [10]  378 	ld	sp, ix
   0184 DD E1         [14]  379 	pop	ix
   0186 C9            [10]  380 	ret
   0187                     381 _responseReady:
   0187 52                  382 	.db #0x52	; 82	'R'
   0188 65                  383 	.db #0x65	; 101	'e'
   0189 61                  384 	.db #0x61	; 97	'a'
   018A 64                  385 	.db #0x64	; 100	'd'
   018B 79                  386 	.db #0x79	; 121	'y'
   018C 0D                  387 	.db #0x0d	; 13
   018D 0A                  388 	.db #0x0a	; 10
   018E                     389 _endUpdate:
   018E 45                  390 	.db #0x45	; 69	'E'
   018F 00                  391 	.db #0x00	; 0
   0190                     392 _certificateDone:
   0190 49                  393 	.db #0x49	; 73	'I'
   0191 00                  394 	.db #0x00	; 0
   0192                     395 _responseOK:
   0192 4F                  396 	.db #0x4f	; 79	'O'
   0193 4B                  397 	.db #0x4b	; 75	'K'
   0194                     398 _scanResponse:
   0194 53                  399 	.db #0x53	; 83	'S'
   0195 00                  400 	.db #0x00	; 0
   0196                     401 _nagleonResponse:
   0196 44                  402 	.db #0x44	; 68	'D'
   0197 00                  403 	.db #0x00	; 0
   0198                     404 _nagleoffResponse:
   0198 4E                  405 	.db #0x4e	; 78	'N'
   0199 00                  406 	.db #0x00	; 0
   019A                     407 _scanresResponse:
   019A 73                  408 	.db #0x73	; 115	's'
   019B 00                  409 	.db #0x00	; 0
   019C                     410 _apconfigurationResponse:
   019C 41                  411 	.db #0x41	; 65	'A'
   019D 00                  412 	.db #0x00	; 0
   019E                     413 _responseRSFWUpdate:
   019E 5A                  414 	.db #0x5a	; 90	'Z'
   019F 00                  415 	.db #0x00	; 0
   01A0                     416 _responseRSCERTUpdate:
   01A0 59                  417 	.db #0x59	; 89	'Y'
   01A1 00                  418 	.db #0x00	; 0
   01A2                     419 _responseWRBlock:
   01A2 7A                  420 	.db #0x7a	; 122	'z'
   01A3 00                  421 	.db #0x00	; 0
   01A4                     422 _responseOTAFW:
   01A4 55                  423 	.db #0x55	; 85	'U'
   01A5 00                  424 	.db #0x00	; 0
   01A6                     425 _responseOTASPIFF:
   01A6 75                  426 	.db #0x75	; 117	'u'
   01A7 00                  427 	.db #0x00	; 0
   01A8                     428 _strUsage:
   01A8 55 73 61 67 65 3A   429 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   01E4 0A                  430 	.db 0x0a
   01E5 0A                  431 	.db 0x0a
   01E6 20 20 20 20 20 20   432 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   0222 6D 20 74 6F 20 74   433 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   0231 0A                  434 	.db 0x0a
   0232 0A                  435 	.db 0x0a
   0233 20 20 20 20 20 20   436 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   026F 79                  437 	.ascii "y"
   0270 0A                  438 	.db 0x0a
   0271 0A                  439 	.db 0x0a
   0272 20 20 20 20 20 20   440 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   02AA 0A                  441 	.db 0x0a
   02AB 0A                  442 	.db 0x0a
   02AC 20 20 20 20 20 20   443 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   02E8 6D 77 61 72 65 20   444 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   02F6 0A                  445 	.db 0x0a
   02F7 0A                  446 	.db 0x0a
   02F8 20 20 20 20 20 20   447 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   0334 63 61 74 65 73 20   448 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   0342 0A                  449 	.db 0x0a
   0343 45 78 2E 3A 20 20   450 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   036F 00                  451 	.db 0x00
                            452 ;src\CFG8266.c:144: unsigned int IsValidInput (char**argv, int argc)
                            453 ;	---------------------------------
                            454 ; Function IsValidInput
                            455 ; ---------------------------------
   0370                     456 _IsValidInput::
   0370 CDr00r00      [17]  457 	call	___sdcc_enter_ix
   0373 F5            [11]  458 	push	af
   0374 F5            [11]  459 	push	af
   0375 F5            [11]  460 	push	af
   0376 3B            [ 6]  461 	dec	sp
                            462 ;src\CFG8266.c:146: unsigned int ret = 1;
   0377 01 01 00      [10]  463 	ld	bc, #0x0001
                            464 ;src\CFG8266.c:147: unsigned char * Input = (unsigned char*)argv[0];
   037A DD 7E 04      [19]  465 	ld	a, 4 (ix)
   037D DD 77 F9      [19]  466 	ld	-7 (ix), a
   0380 DD 7E 05      [19]  467 	ld	a, 5 (ix)
   0383 DD 77 FA      [19]  468 	ld	-6 (ix), a
   0386 E1            [10]  469 	pop	hl
   0387 E5            [11]  470 	push	hl
   0388 7E            [ 7]  471 	ld	a, (hl)
   0389 DD 77 FB      [19]  472 	ld	-5 (ix), a
   038C 23            [ 6]  473 	inc	hl
   038D 7E            [ 7]  474 	ld	a, (hl)
   038E DD 77 FC      [19]  475 	ld	-4 (ix), a
                            476 ;src\CFG8266.c:149: ucScan = 0;
   0391 FD 21r00r00   [14]  477 	ld	iy, #_ucScan
   0395 FD 36 00 00   [19]  478 	ld	0 (iy), #0x00
                            479 ;src\CFG8266.c:151: if (argc)
   0399 DD 7E 07      [19]  480 	ld	a, 7 (ix)
   039C DD B6 06      [19]  481 	or	a, 6 (ix)
   039F CArDEr05      [10]  482 	jp	Z, 00150$
                            483 ;src\CFG8266.c:153: if ((argc==1)||(argc==2)||(argc==4))
   03A2 DD 7E 06      [19]  484 	ld	a, 6 (ix)
   03A5 3D            [ 4]  485 	dec	a
   03A6 DD B6 07      [19]  486 	or	a, 7 (ix)
   03A9 20 03         [12]  487 	jr	NZ, 00249$
   03AB 3E 01         [ 7]  488 	ld	a, #0x01
   03AD 20                  489 	.db	#0x20
   03AE                     490 00249$:
   03AE AF            [ 4]  491 	xor	a, a
   03AF                     492 00250$:
   03AF 57            [ 4]  493 	ld	d, a
   03B0 DD 7E 06      [19]  494 	ld	a, 6 (ix)
   03B3 D6 02         [ 7]  495 	sub	a, #0x02
   03B5 DD B6 07      [19]  496 	or	a, 7 (ix)
   03B8 20 03         [12]  497 	jr	NZ, 00251$
   03BA 3E 01         [ 7]  498 	ld	a, #0x01
   03BC 20                  499 	.db	#0x20
   03BD                     500 00251$:
   03BD AF            [ 4]  501 	xor	a, a
   03BE                     502 00252$:
   03BE 5F            [ 4]  503 	ld	e, a
   03BF 7A            [ 4]  504 	ld	a, d
   03C0 B7            [ 4]  505 	or	a,a
   03C1 20 0E         [12]  506 	jr	NZ,00144$
   03C3 B3            [ 4]  507 	or	a,e
   03C4 20 0B         [12]  508 	jr	NZ,00144$
   03C6 DD 7E 06      [19]  509 	ld	a, 6 (ix)
   03C9 D6 04         [ 7]  510 	sub	a, #0x04
   03CB DD B6 07      [19]  511 	or	a, 7 (ix)
   03CE C2rD9r05      [10]  512 	jp	NZ,00145$
   03D1                     513 00144$:
                            514 ;src\CFG8266.c:157: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03D1 DD 6E FB      [19]  515 	ld	l, -5 (ix)
   03D4 DD 66 FC      [19]  516 	ld	h, -4 (ix)
   03D7 7E            [ 7]  517 	ld	a, (hl)
   03D8 DD 77 FF      [19]  518 	ld	-1 (ix), a
   03DB DD 6E FB      [19]  519 	ld	l, -5 (ix)
   03DE DD 66 FC      [19]  520 	ld	h, -4 (ix)
   03E1 23            [ 6]  521 	inc	hl
                            522 ;src\CFG8266.c:169: Input = (unsigned char*)argv[1];
   03E2 DD 7E F9      [19]  523 	ld	a, -7 (ix)
   03E5 C6 02         [ 7]  524 	add	a, #0x02
   03E7 DD 77 FD      [19]  525 	ld	-3 (ix), a
   03EA DD 7E FA      [19]  526 	ld	a, -6 (ix)
   03ED CE 00         [ 7]  527 	adc	a, #0x00
   03EF DD 77 FE      [19]  528 	ld	-2 (ix), a
                            529 ;src\CFG8266.c:157: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03F2 DD 7E FF      [19]  530 	ld	a, -1 (ix)
   03F5 D6 2F         [ 7]  531 	sub	a, #0x2f
   03F7 20 03         [12]  532 	jr	NZ, 00255$
   03F9 3E 01         [ 7]  533 	ld	a, #0x01
   03FB 20                  534 	.db	#0x20
   03FC                     535 00255$:
   03FC AF            [ 4]  536 	xor	a, a
   03FD                     537 00256$:
   03FD DD 77 FF      [19]  538 	ld	-1 (ix), a
                            539 ;src\CFG8266.c:155: if ((argc==1)||(argc==2))
   0400 7A            [ 4]  540 	ld	a, d
   0401 B7            [ 4]  541 	or	a,a
   0402 20 04         [12]  542 	jr	NZ,00140$
   0404 B3            [ 4]  543 	or	a,e
   0405 CAr98r04      [10]  544 	jp	Z, 00141$
   0408                     545 00140$:
                            546 ;src\CFG8266.c:157: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0408 DD 7E FF      [19]  547 	ld	a, -1 (ix)
   040B B7            [ 4]  548 	or	a, a
   040C 28 11         [12]  549 	jr	Z,00120$
   040E 7E            [ 7]  550 	ld	a, (hl)
   040F FE 73         [ 7]  551 	cp	a, #0x73
   0411 28 04         [12]  552 	jr	Z,00119$
   0413 D6 53         [ 7]  553 	sub	a, #0x53
   0415 20 08         [12]  554 	jr	NZ,00120$
   0417                     555 00119$:
                            556 ;src\CFG8266.c:158: ucScan = 1;
   0417 21r00r00      [10]  557 	ld	hl,#_ucScan + 0
   041A 36 01         [10]  558 	ld	(hl), #0x01
   041C C3rE1r05      [10]  559 	jp	00151$
   041F                     560 00120$:
                            561 ;src\CFG8266.c:159: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   041F DD 7E FF      [19]  562 	ld	a, -1 (ix)
   0422 B7            [ 4]  563 	or	a, a
   0423 28 11         [12]  564 	jr	Z,00115$
   0425 7E            [ 7]  565 	ld	a, (hl)
   0426 FE 6E         [ 7]  566 	cp	a, #0x6e
   0428 28 04         [12]  567 	jr	Z,00114$
   042A D6 4E         [ 7]  568 	sub	a, #0x4e
   042C 20 08         [12]  569 	jr	NZ,00115$
   042E                     570 00114$:
                            571 ;src\CFG8266.c:160: ucNagleOff = 1;
   042E 21r0Fr02      [10]  572 	ld	hl,#_ucNagleOff + 0
   0431 36 01         [10]  573 	ld	(hl), #0x01
   0433 C3rE1r05      [10]  574 	jp	00151$
   0436                     575 00115$:
                            576 ;src\CFG8266.c:161: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0436 DD 7E FF      [19]  577 	ld	a, -1 (ix)
   0439 B7            [ 4]  578 	or	a, a
   043A 28 11         [12]  579 	jr	Z,00110$
   043C 7E            [ 7]  580 	ld	a, (hl)
   043D FE 6D         [ 7]  581 	cp	a, #0x6d
   043F 28 04         [12]  582 	jr	Z,00109$
   0441 D6 4D         [ 7]  583 	sub	a, #0x4d
   0443 20 08         [12]  584 	jr	NZ,00110$
   0445                     585 00109$:
                            586 ;src\CFG8266.c:162: ucNagleOn = 1;
   0445 21r10r02      [10]  587 	ld	hl,#_ucNagleOn + 0
   0448 36 01         [10]  588 	ld	(hl), #0x01
   044A C3rE1r05      [10]  589 	jp	00151$
   044D                     590 00110$:
                            591 ;src\CFG8266.c:165: strcpy (ucFile,Input);
   044D C5            [11]  592 	push	bc
   044E D5            [11]  593 	push	de
   044F 11r01r01      [10]  594 	ld	de, #_ucFile
   0452 DD 6E FB      [19]  595 	ld	l, -5 (ix)
   0455 DD 66 FC      [19]  596 	ld	h, -4 (ix)
   0458 AF            [ 4]  597 	xor	a, a
   0459                     598 00266$:
   0459 BE            [ 7]  599 	cp	a, (hl)
   045A ED A0         [16]  600 	ldi
   045C 20 FB         [12]  601 	jr	NZ, 00266$
   045E D1            [10]  602 	pop	de
   045F C1            [10]  603 	pop	bc
                            604 ;src\CFG8266.c:166: ucLocalUpdate = 1;
   0460 21r0Dr02      [10]  605 	ld	hl,#_ucLocalUpdate + 0
   0463 36 01         [10]  606 	ld	(hl), #0x01
                            607 ;src\CFG8266.c:167: if (argc==2)
   0465 7B            [ 4]  608 	ld	a, e
   0466 B7            [ 4]  609 	or	a, a
   0467 28 27         [12]  610 	jr	Z,00107$
                            611 ;src\CFG8266.c:169: Input = (unsigned char*)argv[1];
   0469 DD 6E FD      [19]  612 	ld	l, -3 (ix)
   046C DD 66 FE      [19]  613 	ld	h, -2 (ix)
   046F 5E            [ 7]  614 	ld	e, (hl)
   0470 23            [ 6]  615 	inc	hl
   0471 56            [ 7]  616 	ld	d, (hl)
                            617 ;src\CFG8266.c:170: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   0472 1A            [ 7]  618 	ld	a, (de)
   0473 D6 2F         [ 7]  619 	sub	a, #0x2f
   0475 20 13         [12]  620 	jr	NZ,00102$
   0477 EB            [ 4]  621 	ex	de,hl
   0478 23            [ 6]  622 	inc	hl
   0479 7E            [ 7]  623 	ld	a, (hl)
   047A FE 63         [ 7]  624 	cp	a, #0x63
   047C 28 04         [12]  625 	jr	Z,00101$
   047E D6 43         [ 7]  626 	sub	a, #0x43
   0480 20 08         [12]  627 	jr	NZ,00102$
   0482                     628 00101$:
                            629 ;src\CFG8266.c:171: ucIsFw=0;
   0482 21r0Er02      [10]  630 	ld	hl,#_ucIsFw + 0
   0485 36 00         [10]  631 	ld	(hl), #0x00
   0487 C3rE1r05      [10]  632 	jp	00151$
   048A                     633 00102$:
                            634 ;src\CFG8266.c:173: ret=0;
   048A 01 00 00      [10]  635 	ld	bc, #0x0000
   048D C3rE1r05      [10]  636 	jp	00151$
   0490                     637 00107$:
                            638 ;src\CFG8266.c:177: ucIsFw=1;
   0490 21r0Er02      [10]  639 	ld	hl,#_ucIsFw + 0
   0493 36 01         [10]  640 	ld	(hl), #0x01
   0495 C3rE1r05      [10]  641 	jp	00151$
   0498                     642 00141$:
                            643 ;src\CFG8266.c:185: Input = (unsigned char*)argv[2];
   0498 DD 7E F9      [19]  644 	ld	a, -7 (ix)
   049B C6 04         [ 7]  645 	add	a, #0x04
   049D 5F            [ 4]  646 	ld	e, a
   049E DD 7E FA      [19]  647 	ld	a, -6 (ix)
   04A1 CE 00         [ 7]  648 	adc	a, #0x00
   04A3 57            [ 4]  649 	ld	d, a
                            650 ;src\CFG8266.c:191: Input = (unsigned char*)argv[3];
   04A4 DD 7E F9      [19]  651 	ld	a, -7 (ix)
   04A7 C6 06         [ 7]  652 	add	a, #0x06
   04A9 DD 77 FB      [19]  653 	ld	-5 (ix), a
   04AC DD 7E FA      [19]  654 	ld	a, -6 (ix)
   04AF CE 00         [ 7]  655 	adc	a, #0x00
   04B1 DD 77 FC      [19]  656 	ld	-4 (ix), a
                            657 ;src\CFG8266.c:182: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   04B4 DD 7E FF      [19]  658 	ld	a, -1 (ix)
   04B7 B7            [ 4]  659 	or	a, a
   04B8 CAr45r05      [10]  660 	jp	Z, 00136$
   04BB 7E            [ 7]  661 	ld	a, (hl)
   04BC FE 75         [ 7]  662 	cp	a, #0x75
   04BE 28 05         [12]  663 	jr	Z,00135$
   04C0 D6 55         [ 7]  664 	sub	a, #0x55
   04C2 C2r45r05      [10]  665 	jp	NZ,00136$
   04C5                     666 00135$:
                            667 ;src\CFG8266.c:184: ucIsFw = 1;
   04C5 FD 21r0Er02   [14]  668 	ld	iy, #_ucIsFw
   04C9 FD 36 00 01   [19]  669 	ld	0 (iy), #0x01
                            670 ;src\CFG8266.c:185: Input = (unsigned char*)argv[2];
   04CD EB            [ 4]  671 	ex	de,hl
   04CE 5E            [ 7]  672 	ld	e, (hl)
   04CF 23            [ 6]  673 	inc	hl
   04D0 56            [ 7]  674 	ld	d, (hl)
                            675 ;src\CFG8266.c:186: if (strlen (Input)<7)
   04D1 C5            [11]  676 	push	bc
   04D2 D5            [11]  677 	push	de
   04D3 CDr00r00      [17]  678 	call	_strlen
   04D6 F1            [10]  679 	pop	af
   04D7 C1            [10]  680 	pop	bc
   04D8 7D            [ 4]  681 	ld	a, l
   04D9 D6 07         [ 7]  682 	sub	a, #0x07
   04DB 7C            [ 4]  683 	ld	a, h
   04DC DE 00         [ 7]  684 	sbc	a, #0x00
   04DE 30 5F         [12]  685 	jr	NC,00125$
                            686 ;src\CFG8266.c:188: strcpy(ucPort,Input);
   04E0 21r01r02      [10]  687 	ld	hl, #_ucPort
   04E3 C5            [11]  688 	push	bc
   04E4 EB            [ 4]  689 	ex	de, hl
   04E5 AF            [ 4]  690 	xor	a, a
   04E6                     691 00275$:
   04E6 BE            [ 7]  692 	cp	a, (hl)
   04E7 ED A0         [16]  693 	ldi
   04E9 20 FB         [12]  694 	jr	NZ, 00275$
   04EB C1            [10]  695 	pop	bc
                            696 ;src\CFG8266.c:189: Input = (unsigned char*)argv[1];
   04EC DD 6E FD      [19]  697 	ld	l, -3 (ix)
   04EF DD 66 FE      [19]  698 	ld	h, -2 (ix)
   04F2 5E            [ 7]  699 	ld	e, (hl)
   04F3 23            [ 6]  700 	inc	hl
   04F4 56            [ 7]  701 	ld	d, (hl)
                            702 ;src\CFG8266.c:190: strcpy(ucServer,Input);
   04F5 21r01r00      [10]  703 	ld	hl, #_ucServer+0
   04F8 C5            [11]  704 	push	bc
   04F9 EB            [ 4]  705 	ex	de, hl
   04FA AF            [ 4]  706 	xor	a, a
   04FB                     707 00276$:
   04FB BE            [ 7]  708 	cp	a, (hl)
   04FC ED A0         [16]  709 	ldi
   04FE 20 FB         [12]  710 	jr	NZ, 00276$
   0500 C1            [10]  711 	pop	bc
                            712 ;src\CFG8266.c:191: Input = (unsigned char*)argv[3];
   0501 DD 6E FB      [19]  713 	ld	l, -5 (ix)
   0504 DD 66 FC      [19]  714 	ld	h, -4 (ix)
   0507 5E            [ 7]  715 	ld	e, (hl)
   0508 23            [ 6]  716 	inc	hl
   0509 56            [ 7]  717 	ld	d, (hl)
                            718 ;src\CFG8266.c:192: strcpy(ucFile,Input);
   050A 21r01r01      [10]  719 	ld	hl, #_ucFile+0
   050D C5            [11]  720 	push	bc
   050E EB            [ 4]  721 	ex	de, hl
   050F AF            [ 4]  722 	xor	a, a
   0510                     723 00277$:
   0510 BE            [ 7]  724 	cp	a, (hl)
   0511 ED A0         [16]  725 	ldi
   0513 20 FB         [12]  726 	jr	NZ, 00277$
   0515 21r01r02      [10]  727 	ld	hl, #_ucPort
   0518 E5            [11]  728 	push	hl
   0519 CDr00r00      [17]  729 	call	_atol
   051C F1            [10]  730 	pop	af
   051D DD 75 FC      [19]  731 	ld	-4 (ix), l
   0520 DD 74 FD      [19]  732 	ld	-3 (ix), h
   0523 DD 73 FE      [19]  733 	ld	-2 (ix), e
   0526 DD 72 FF      [19]  734 	ld	-1 (ix), d
   0529 11r09r02      [10]  735 	ld	de, #_lPort
   052C 21 05 00      [10]  736 	ld	hl, #5
   052F 39            [11]  737 	add	hl, sp
   0530 01 04 00      [10]  738 	ld	bc, #4
   0533 ED B0         [21]  739 	ldir
   0535 C1            [10]  740 	pop	bc
                            741 ;src\CFG8266.c:194: uiPort = (lPort&0xffff);
   0536 2Ar09r02      [16]  742 	ld	hl, (_lPort)
   0539 22r07r02      [16]  743 	ld	(_uiPort), hl
   053C C3rE1r05      [10]  744 	jp	00151$
   053F                     745 00125$:
                            746 ;src\CFG8266.c:197: ret = 0;
   053F 01 00 00      [10]  747 	ld	bc, #0x0000
   0542 C3rE1r05      [10]  748 	jp	00151$
   0545                     749 00136$:
                            750 ;src\CFG8266.c:199: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   0545 DD 7E FF      [19]  751 	ld	a, -1 (ix)
   0548 B7            [ 4]  752 	or	a, a
   0549 CArD4r05      [10]  753 	jp	Z, 00131$
   054C 7E            [ 7]  754 	ld	a, (hl)
   054D FE 63         [ 7]  755 	cp	a, #0x63
   054F 28 05         [12]  756 	jr	Z,00130$
   0551 D6 43         [ 7]  757 	sub	a, #0x43
   0553 C2rD4r05      [10]  758 	jp	NZ,00131$
   0556                     759 00130$:
                            760 ;src\CFG8266.c:201: ucIsFw = 0;
   0556 FD 21r0Er02   [14]  761 	ld	iy, #_ucIsFw
   055A FD 36 00 00   [19]  762 	ld	0 (iy), #0x00
                            763 ;src\CFG8266.c:202: Input = (unsigned char*)argv[2];
   055E EB            [ 4]  764 	ex	de,hl
   055F 5E            [ 7]  765 	ld	e, (hl)
   0560 23            [ 6]  766 	inc	hl
   0561 56            [ 7]  767 	ld	d, (hl)
                            768 ;src\CFG8266.c:203: if (strlen (Input)<7)
   0562 C5            [11]  769 	push	bc
   0563 D5            [11]  770 	push	de
   0564 CDr00r00      [17]  771 	call	_strlen
   0567 F1            [10]  772 	pop	af
   0568 C1            [10]  773 	pop	bc
   0569 7D            [ 4]  774 	ld	a, l
   056A D6 07         [ 7]  775 	sub	a, #0x07
   056C 7C            [ 4]  776 	ld	a, h
   056D DE 00         [ 7]  777 	sbc	a, #0x00
   056F 30 5E         [12]  778 	jr	NC,00128$
                            779 ;src\CFG8266.c:205: strcpy(ucPort,Input);
   0571 21r01r02      [10]  780 	ld	hl, #_ucPort
   0574 C5            [11]  781 	push	bc
   0575 EB            [ 4]  782 	ex	de, hl
   0576 AF            [ 4]  783 	xor	a, a
   0577                     784 00281$:
   0577 BE            [ 7]  785 	cp	a, (hl)
   0578 ED A0         [16]  786 	ldi
   057A 20 FB         [12]  787 	jr	NZ, 00281$
   057C C1            [10]  788 	pop	bc
                            789 ;src\CFG8266.c:206: Input = (unsigned char*)argv[1];
   057D DD 6E FD      [19]  790 	ld	l, -3 (ix)
   0580 DD 66 FE      [19]  791 	ld	h, -2 (ix)
   0583 5E            [ 7]  792 	ld	e, (hl)
   0584 23            [ 6]  793 	inc	hl
   0585 56            [ 7]  794 	ld	d, (hl)
                            795 ;src\CFG8266.c:207: strcpy(ucServer,Input);
   0586 21r01r00      [10]  796 	ld	hl, #_ucServer+0
   0589 C5            [11]  797 	push	bc
   058A EB            [ 4]  798 	ex	de, hl
   058B AF            [ 4]  799 	xor	a, a
   058C                     800 00282$:
   058C BE            [ 7]  801 	cp	a, (hl)
   058D ED A0         [16]  802 	ldi
   058F 20 FB         [12]  803 	jr	NZ, 00282$
   0591 C1            [10]  804 	pop	bc
                            805 ;src\CFG8266.c:208: Input = (unsigned char*)argv[3];
   0592 DD 6E FB      [19]  806 	ld	l, -5 (ix)
   0595 DD 66 FC      [19]  807 	ld	h, -4 (ix)
   0598 5E            [ 7]  808 	ld	e, (hl)
   0599 23            [ 6]  809 	inc	hl
   059A 56            [ 7]  810 	ld	d, (hl)
                            811 ;src\CFG8266.c:209: strcpy(ucFile,Input);
   059B 21r01r01      [10]  812 	ld	hl, #_ucFile+0
   059E C5            [11]  813 	push	bc
   059F EB            [ 4]  814 	ex	de, hl
   05A0 AF            [ 4]  815 	xor	a, a
   05A1                     816 00283$:
   05A1 BE            [ 7]  817 	cp	a, (hl)
   05A2 ED A0         [16]  818 	ldi
   05A4 20 FB         [12]  819 	jr	NZ, 00283$
   05A6 21r01r02      [10]  820 	ld	hl, #_ucPort
   05A9 E5            [11]  821 	push	hl
   05AA CDr00r00      [17]  822 	call	_atol
   05AD F1            [10]  823 	pop	af
   05AE DD 75 FC      [19]  824 	ld	-4 (ix), l
   05B1 DD 74 FD      [19]  825 	ld	-3 (ix), h
   05B4 DD 73 FE      [19]  826 	ld	-2 (ix), e
   05B7 DD 72 FF      [19]  827 	ld	-1 (ix), d
   05BA 11r09r02      [10]  828 	ld	de, #_lPort
   05BD 21 05 00      [10]  829 	ld	hl, #5
   05C0 39            [11]  830 	add	hl, sp
   05C1 01 04 00      [10]  831 	ld	bc, #4
   05C4 ED B0         [21]  832 	ldir
   05C6 C1            [10]  833 	pop	bc
                            834 ;src\CFG8266.c:211: uiPort = (lPort&0xffff);
   05C7 2Ar09r02      [16]  835 	ld	hl, (_lPort)
   05CA 22r07r02      [16]  836 	ld	(_uiPort), hl
   05CD 18 12         [12]  837 	jr	00151$
   05CF                     838 00128$:
                            839 ;src\CFG8266.c:214: ret = 0;
   05CF 01 00 00      [10]  840 	ld	bc, #0x0000
   05D2 18 0D         [12]  841 	jr	00151$
   05D4                     842 00131$:
                            843 ;src\CFG8266.c:217: ret = 0;
   05D4 01 00 00      [10]  844 	ld	bc, #0x0000
   05D7 18 08         [12]  845 	jr	00151$
   05D9                     846 00145$:
                            847 ;src\CFG8266.c:221: ret = 0;
   05D9 01 00 00      [10]  848 	ld	bc, #0x0000
   05DC 18 03         [12]  849 	jr	00151$
   05DE                     850 00150$:
                            851 ;src\CFG8266.c:224: ret=0;
   05DE 01 00 00      [10]  852 	ld	bc, #0x0000
   05E1                     853 00151$:
                            854 ;src\CFG8266.c:226: return ret;
   05E1 69            [ 4]  855 	ld	l, c
   05E2 60            [ 4]  856 	ld	h, b
                            857 ;src\CFG8266.c:227: }
   05E3 DD F9         [10]  858 	ld	sp, ix
   05E5 DD E1         [14]  859 	pop	ix
   05E7 C9            [10]  860 	ret
                            861 ;src\CFG8266.c:229: void TxByte(char chTxByte)
                            862 ;	---------------------------------
                            863 ; Function TxByte
                            864 ; ---------------------------------
   05E8                     865 _TxByte::
                            866 ;src\CFG8266.c:232: do
   05E8                     867 00103$:
                            868 ;src\CFG8266.c:234: UartStatus = myPort7&2 ;
   05E8 DB 07         [11]  869 	in	a, (_myPort7)
   05EA CB 4F         [ 8]  870 	bit	1, a
   05EC 20 FA         [12]  871 	jr	NZ,00103$
                            872 ;src\CFG8266.c:235: if (!UartStatus)
                            873 ;src\CFG8266.c:240: myPort7 = chTxByte;
   05EE 21 02 00      [10]  874 	ld	hl, #2+0
   05F1 39            [11]  875 	add	hl, sp
   05F2 7E            [ 7]  876 	ld	a, (hl)
   05F3 D3 07         [11]  877 	out	(_myPort7), a
                            878 ;src\CFG8266.c:244: while (1);
                            879 ;src\CFG8266.c:245: }
   05F5 C9            [10]  880 	ret
                            881 ;src\CFG8266.c:247: char *ultostr(unsigned long value, char *ptr, int base)
                            882 ;	---------------------------------
                            883 ; Function ultostr
                            884 ; ---------------------------------
   05F6                     885 _ultostr::
   05F6 CDr00r00      [17]  886 	call	___sdcc_enter_ix
   05F9 21 F1 FF      [10]  887 	ld	hl, #-15
   05FC 39            [11]  888 	add	hl, sp
   05FD F9            [ 6]  889 	ld	sp, hl
                            890 ;src\CFG8266.c:250: unsigned long tmp = value;
   05FE DD 4E 04      [19]  891 	ld	c, 4 (ix)
   0601 DD 46 05      [19]  892 	ld	b, 5 (ix)
   0604 DD 5E 06      [19]  893 	ld	e, 6 (ix)
   0607 DD 56 07      [19]  894 	ld	d, 7 (ix)
                            895 ;src\CFG8266.c:251: int count = 0;
   060A DD 36 FE 00   [19]  896 	ld	-2 (ix), #0x00
   060E DD 36 FF 00   [19]  897 	ld	-1 (ix), #0x00
                            898 ;src\CFG8266.c:253: if (NULL == ptr)
   0612 DD 7E 09      [19]  899 	ld	a, 9 (ix)
   0615 DD B6 08      [19]  900 	or	a, 8 (ix)
   0618 20 06         [12]  901 	jr	NZ,00102$
                            902 ;src\CFG8266.c:255: return NULL;
   061A 21 00 00      [10]  903 	ld	hl, #0x0000
   061D C3rA5r07      [10]  904 	jp	00117$
   0620                     905 00102$:
                            906 ;src\CFG8266.c:258: if (tmp == 0)
   0620 7A            [ 4]  907 	ld	a, d
   0621 B3            [ 4]  908 	or	a, e
   0622 B0            [ 4]  909 	or	a, b
   0623 B1            [ 4]  910 	or	a, c
   0624 20 08         [12]  911 	jr	NZ,00122$
                            912 ;src\CFG8266.c:260: count++;
   0626 DD 36 FE 01   [19]  913 	ld	-2 (ix), #0x01
   062A DD 36 FF 00   [19]  914 	ld	-1 (ix), #0x00
                            915 ;src\CFG8266.c:263: while(tmp > 0)
   062E                     916 00122$:
   062E                     917 00105$:
                            918 ;src\CFG8266.c:265: tmp = tmp/base;
   062E DD 7E 0A      [19]  919 	ld	a, 10 (ix)
   0631 DD 77 F1      [19]  920 	ld	-15 (ix), a
   0634 DD 7E 0B      [19]  921 	ld	a, 11 (ix)
   0637 DD 77 F2      [19]  922 	ld	-14 (ix), a
   063A 17            [ 4]  923 	rla
   063B 9F            [ 4]  924 	sbc	a, a
   063C DD 77 F3      [19]  925 	ld	-13 (ix), a
   063F DD 77 F4      [19]  926 	ld	-12 (ix), a
                            927 ;src\CFG8266.c:263: while(tmp > 0)
   0642 7A            [ 4]  928 	ld	a, d
   0643 B3            [ 4]  929 	or	a, e
   0644 B0            [ 4]  930 	or	a, b
   0645 B1            [ 4]  931 	or	a, c
   0646 28 23         [12]  932 	jr	Z,00107$
                            933 ;src\CFG8266.c:265: tmp = tmp/base;
   0648 DD 6E F3      [19]  934 	ld	l, -13 (ix)
   064B DD 66 F4      [19]  935 	ld	h, -12 (ix)
   064E E5            [11]  936 	push	hl
   064F DD 6E F1      [19]  937 	ld	l, -15 (ix)
   0652 DD 66 F2      [19]  938 	ld	h, -14 (ix)
   0655 E5            [11]  939 	push	hl
   0656 D5            [11]  940 	push	de
   0657 C5            [11]  941 	push	bc
   0658 CDr00r00      [17]  942 	call	__divulong
   065B F1            [10]  943 	pop	af
   065C F1            [10]  944 	pop	af
   065D F1            [10]  945 	pop	af
   065E F1            [10]  946 	pop	af
   065F 4D            [ 4]  947 	ld	c, l
   0660 44            [ 4]  948 	ld	b, h
                            949 ;src\CFG8266.c:266: count++;
   0661 DD 34 FE      [23]  950 	inc	-2 (ix)
   0664 20 C8         [12]  951 	jr	NZ,00105$
   0666 DD 34 FF      [23]  952 	inc	-1 (ix)
   0669 18 C3         [12]  953 	jr	00105$
   066B                     954 00107$:
                            955 ;src\CFG8266.c:269: ptr += count;
   066B DD 7E 08      [19]  956 	ld	a, 8 (ix)
   066E DD 86 FE      [19]  957 	add	a, -2 (ix)
   0671 DD 77 08      [19]  958 	ld	8 (ix), a
   0674 DD 7E 09      [19]  959 	ld	a, 9 (ix)
   0677 DD 8E FF      [19]  960 	adc	a, -1 (ix)
   067A DD 77 09      [19]  961 	ld	9 (ix), a
                            962 ;src\CFG8266.c:271: *ptr = '\0';
   067D DD 4E 08      [19]  963 	ld	c, 8 (ix)
   0680 DD 46 09      [19]  964 	ld	b, 9 (ix)
   0683 AF            [ 4]  965 	xor	a, a
   0684 02            [ 7]  966 	ld	(bc), a
                            967 ;src\CFG8266.c:273: do
   0685                     968 00114$:
                            969 ;src\CFG8266.c:275: res = value - base * (t = value / base);
   0685 DD 6E F3      [19]  970 	ld	l, -13 (ix)
   0688 DD 66 F4      [19]  971 	ld	h, -12 (ix)
   068B E5            [11]  972 	push	hl
   068C DD 6E F1      [19]  973 	ld	l, -15 (ix)
   068F DD 66 F2      [19]  974 	ld	h, -14 (ix)
   0692 E5            [11]  975 	push	hl
   0693 DD 6E 06      [19]  976 	ld	l, 6 (ix)
   0696 DD 66 07      [19]  977 	ld	h, 7 (ix)
   0699 E5            [11]  978 	push	hl
   069A DD 6E 04      [19]  979 	ld	l, 4 (ix)
   069D DD 66 05      [19]  980 	ld	h, 5 (ix)
   06A0 E5            [11]  981 	push	hl
   06A1 CDr00r00      [17]  982 	call	__divulong
   06A4 F1            [10]  983 	pop	af
   06A5 F1            [10]  984 	pop	af
   06A6 F1            [10]  985 	pop	af
   06A7 F1            [10]  986 	pop	af
   06A8 DD 75 FC      [19]  987 	ld	-4 (ix), l
   06AB DD 74 FD      [19]  988 	ld	-3 (ix), h
   06AE DD 73 FE      [19]  989 	ld	-2 (ix), e
   06B1 DD 72 FF      [19]  990 	ld	-1 (ix), d
   06B4 21 04 00      [10]  991 	ld	hl, #4
   06B7 39            [11]  992 	add	hl, sp
   06B8 EB            [ 4]  993 	ex	de, hl
   06B9 21 0B 00      [10]  994 	ld	hl, #11
   06BC 39            [11]  995 	add	hl, sp
   06BD 01 04 00      [10]  996 	ld	bc, #4
   06C0 ED B0         [21]  997 	ldir
   06C2 DD 6E FE      [19]  998 	ld	l, -2 (ix)
   06C5 DD 66 FF      [19]  999 	ld	h, -1 (ix)
   06C8 E5            [11] 1000 	push	hl
   06C9 DD 6E FC      [19] 1001 	ld	l, -4 (ix)
   06CC DD 66 FD      [19] 1002 	ld	h, -3 (ix)
   06CF E5            [11] 1003 	push	hl
   06D0 DD 6E F3      [19] 1004 	ld	l, -13 (ix)
   06D3 DD 66 F4      [19] 1005 	ld	h, -12 (ix)
   06D6 E5            [11] 1006 	push	hl
   06D7 DD 6E F1      [19] 1007 	ld	l, -15 (ix)
   06DA DD 66 F2      [19] 1008 	ld	h, -14 (ix)
   06DD E5            [11] 1009 	push	hl
   06DE CDr00r00      [17] 1010 	call	__mullong
   06E1 F1            [10] 1011 	pop	af
   06E2 F1            [10] 1012 	pop	af
   06E3 F1            [10] 1013 	pop	af
   06E4 F1            [10] 1014 	pop	af
   06E5 DD 7E 04      [19] 1015 	ld	a, 4 (ix)
   06E8 95            [ 4] 1016 	sub	a, l
   06E9 4F            [ 4] 1017 	ld	c, a
   06EA DD 7E 05      [19] 1018 	ld	a, 5 (ix)
   06ED 9C            [ 4] 1019 	sbc	a, h
   06EE 47            [ 4] 1020 	ld	b, a
   06EF DD 7E 06      [19] 1021 	ld	a, 6 (ix)
   06F2 9B            [ 4] 1022 	sbc	a, e
   06F3 5F            [ 4] 1023 	ld	e, a
   06F4 DD 7E 07      [19] 1024 	ld	a, 7 (ix)
   06F7 9A            [ 4] 1025 	sbc	a, d
   06F8 57            [ 4] 1026 	ld	d, a
   06F9 DD 71 F9      [19] 1027 	ld	-7 (ix), c
   06FC DD 70 FA      [19] 1028 	ld	-6 (ix), b
   06FF DD 73 FB      [19] 1029 	ld	-5 (ix), e
   0702 DD 72 FC      [19] 1030 	ld	-4 (ix), d
                           1031 ;src\CFG8266.c:276: if (res < 10)
   0705 DD 7E F9      [19] 1032 	ld	a, -7 (ix)
   0708 D6 0A         [ 7] 1033 	sub	a, #0x0a
   070A DD 7E FA      [19] 1034 	ld	a, -6 (ix)
   070D DE 00         [ 7] 1035 	sbc	a, #0x00
   070F DD 7E FB      [19] 1036 	ld	a, -5 (ix)
   0712 DE 00         [ 7] 1037 	sbc	a, #0x00
   0714 DD 7E FC      [19] 1038 	ld	a, -4 (ix)
   0717 DE 00         [ 7] 1039 	sbc	a, #0x00
   0719 3E 00         [ 7] 1040 	ld	a, #0x00
   071B 17            [ 4] 1041 	rla
   071C DD 77 FD      [19] 1042 	ld	-3 (ix), a
                           1043 ;src\CFG8266.c:278: * -- ptr = '0' + res;
   071F DD 7E 08      [19] 1044 	ld	a, 8 (ix)
   0722 C6 FF         [ 7] 1045 	add	a, #0xff
   0724 DD 77 FE      [19] 1046 	ld	-2 (ix), a
   0727 DD 7E 09      [19] 1047 	ld	a, 9 (ix)
   072A CE FF         [ 7] 1048 	adc	a, #0xff
   072C DD 77 FF      [19] 1049 	ld	-1 (ix), a
   072F DD 4E F9      [19] 1050 	ld	c, -7 (ix)
                           1051 ;src\CFG8266.c:276: if (res < 10)
   0732 DD 7E FD      [19] 1052 	ld	a, -3 (ix)
   0735 B7            [ 4] 1053 	or	a, a
   0736 28 18         [12] 1054 	jr	Z,00112$
                           1055 ;src\CFG8266.c:278: * -- ptr = '0' + res;
   0738 DD 7E FE      [19] 1056 	ld	a, -2 (ix)
   073B DD 77 08      [19] 1057 	ld	8 (ix), a
   073E DD 7E FF      [19] 1058 	ld	a, -1 (ix)
   0741 DD 77 09      [19] 1059 	ld	9 (ix), a
   0744 DD 5E 08      [19] 1060 	ld	e, 8 (ix)
   0747 DD 56 09      [19] 1061 	ld	d, 9 (ix)
   074A 79            [ 4] 1062 	ld	a, c
   074B C6 30         [ 7] 1063 	add	a, #0x30
   074D 12            [ 7] 1064 	ld	(de), a
   074E 18 32         [12] 1065 	jr	00115$
   0750                    1066 00112$:
                           1067 ;src\CFG8266.c:280: else if ((res >= 10) && (res < 16))
   0750 DD CB FD 46   [20] 1068 	bit	0,-3 (ix)
   0754 20 2C         [12] 1069 	jr	NZ,00115$
   0756 DD 7E F9      [19] 1070 	ld	a, -7 (ix)
   0759 D6 10         [ 7] 1071 	sub	a, #0x10
   075B DD 7E FA      [19] 1072 	ld	a, -6 (ix)
   075E DE 00         [ 7] 1073 	sbc	a, #0x00
   0760 DD 7E FB      [19] 1074 	ld	a, -5 (ix)
   0763 DE 00         [ 7] 1075 	sbc	a, #0x00
   0765 DD 7E FC      [19] 1076 	ld	a, -4 (ix)
   0768 DE 00         [ 7] 1077 	sbc	a, #0x00
   076A 30 16         [12] 1078 	jr	NC,00115$
                           1079 ;src\CFG8266.c:282: * --ptr = 'A' - 10 + res;
   076C DD 7E FE      [19] 1080 	ld	a, -2 (ix)
   076F DD 77 08      [19] 1081 	ld	8 (ix), a
   0772 DD 7E FF      [19] 1082 	ld	a, -1 (ix)
   0775 DD 77 09      [19] 1083 	ld	9 (ix), a
   0778 DD 5E 08      [19] 1084 	ld	e, 8 (ix)
   077B DD 56 09      [19] 1085 	ld	d, 9 (ix)
   077E 79            [ 4] 1086 	ld	a, c
   077F C6 37         [ 7] 1087 	add	a, #0x37
   0781 12            [ 7] 1088 	ld	(de), a
   0782                    1089 00115$:
                           1090 ;src\CFG8266.c:284: } while ((value = t) != 0);
   0782 21 13 00      [10] 1091 	ld	hl, #19
   0785 39            [11] 1092 	add	hl, sp
   0786 EB            [ 4] 1093 	ex	de, hl
   0787 21 04 00      [10] 1094 	ld	hl, #4
   078A 39            [11] 1095 	add	hl, sp
   078B 01 04 00      [10] 1096 	ld	bc, #4
   078E ED B0         [21] 1097 	ldir
   0790 DD 7E F8      [19] 1098 	ld	a, -8 (ix)
   0793 DD B6 F7      [19] 1099 	or	a, -9 (ix)
   0796 DD B6 F6      [19] 1100 	or	a, -10 (ix)
   0799 DD B6 F5      [19] 1101 	or	a, -11 (ix)
   079C C2r85r06      [10] 1102 	jp	NZ, 00114$
                           1103 ;src\CFG8266.c:286: return(ptr);
   079F DD 6E 08      [19] 1104 	ld	l, 8 (ix)
   07A2 DD 66 09      [19] 1105 	ld	h, 9 (ix)
   07A5                    1106 00117$:
                           1107 ;src\CFG8266.c:287: }
   07A5 DD F9         [10] 1108 	ld	sp, ix
   07A7 DD E1         [14] 1109 	pop	ix
   07A9 C9            [10] 1110 	ret
                           1111 ;src\CFG8266.c:289: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int uiTimeout, bool bVerbose)
                           1112 ;	---------------------------------
                           1113 ; Function WaitForRXData
                           1114 ; ---------------------------------
   07AA                    1115 _WaitForRXData::
   07AA CDr00r00      [17] 1116 	call	___sdcc_enter_ix
   07AD 21 F1 FF      [10] 1117 	ld	hl, #-15
   07B0 39            [11] 1118 	add	hl, sp
   07B1 F9            [ 6] 1119 	ld	sp, hl
                           1120 ;src\CFG8266.c:291: bool bReturn = false;
   07B2 DD 36 F5 00   [19] 1121 	ld	-11 (ix), #0x00
                           1122 ;src\CFG8266.c:296: unsigned char advance[4] = {'-','\\','|','/'};
   07B6 21 00 00      [10] 1123 	ld	hl, #0
   07B9 39            [11] 1124 	add	hl, sp
   07BA DD 75 F6      [19] 1125 	ld	-10 (ix), l
   07BD DD 74 F7      [19] 1126 	ld	-9 (ix), h
   07C0 36 2D         [10] 1127 	ld	(hl), #0x2d
   07C2 DD 6E F6      [19] 1128 	ld	l, -10 (ix)
   07C5 DD 66 F7      [19] 1129 	ld	h, -9 (ix)
   07C8 23            [ 6] 1130 	inc	hl
   07C9 36 5C         [10] 1131 	ld	(hl), #0x5c
   07CB DD 6E F6      [19] 1132 	ld	l, -10 (ix)
   07CE DD 66 F7      [19] 1133 	ld	h, -9 (ix)
   07D1 23            [ 6] 1134 	inc	hl
   07D2 23            [ 6] 1135 	inc	hl
   07D3 36 7C         [10] 1136 	ld	(hl), #0x7c
   07D5 DD 6E F6      [19] 1137 	ld	l, -10 (ix)
   07D8 DD 66 F7      [19] 1138 	ld	h, -9 (ix)
   07DB 23            [ 6] 1139 	inc	hl
   07DC 23            [ 6] 1140 	inc	hl
   07DD 23            [ 6] 1141 	inc	hl
   07DE 36 2F         [10] 1142 	ld	(hl), #0x2f
                           1143 ;src\CFG8266.c:300: TickCount = 0;
   07E0 21 00 00      [10] 1144 	ld	hl, #0x0000
   07E3 22 9E FC      [16] 1145 	ld	(_TickCount), hl
                           1146 ;src\CFG8266.c:301: Timeout = TickCount + uiTimeout; //Wait up to 5 minutes
   07E6 FD 2A 9E FC   [20] 1147 	ld	iy, (_TickCount)
   07EA DD 5E 08      [19] 1148 	ld	e, 8 (ix)
   07ED DD 56 09      [19] 1149 	ld	d, 9 (ix)
   07F0 FD 19         [15] 1150 	add	iy, de
   07F2 FD E5         [15] 1151 	push	iy
   07F4 D1            [10] 1152 	pop	de
                           1153 ;src\CFG8266.c:302: if (Timeout<TickCount) //Leaping?
   07F5 21 9E FC      [10] 1154 	ld	hl, #_TickCount
   07F8 7B            [ 4] 1155 	ld	a, e
   07F9 96            [ 7] 1156 	sub	a, (hl)
   07FA 7A            [ 4] 1157 	ld	a, d
   07FB 23            [ 6] 1158 	inc	hl
   07FC 9E            [ 7] 1159 	sbc	a, (hl)
   07FD 30 04         [12] 1160 	jr	NC,00102$
                           1161 ;src\CFG8266.c:303: Leaping = 1;
   07FF 0E 01         [ 7] 1162 	ld	c, #0x01
   0801 18 02         [12] 1163 	jr	00103$
   0803                    1164 00102$:
                           1165 ;src\CFG8266.c:305: Leaping = 0;
   0803 0E 00         [ 7] 1166 	ld	c, #0x00
   0805                    1167 00103$:
                           1168 ;src\CFG8266.c:306: ResponseSt=0;
   0805 DD 36 FC 00   [19] 1169 	ld	-4 (ix), #0x00
   0809 DD 36 FD 00   [19] 1170 	ld	-3 (ix), #0x00
                           1171 ;src\CFG8266.c:307: if (uiTimeout>900)
   080D 3E 84         [ 7] 1172 	ld	a, #0x84
   080F DD BE 08      [19] 1173 	cp	a, 8 (ix)
   0812 3E 03         [ 7] 1174 	ld	a, #0x03
   0814 DD 9E 09      [19] 1175 	sbc	a, 9 (ix)
   0817 3E 00         [ 7] 1176 	ld	a, #0x00
   0819 17            [ 4] 1177 	rla
   081A DD 77 F8      [19] 1178 	ld	-8 (ix), a
   081D B7            [ 4] 1179 	or	a, a
   081E 28 0C         [12] 1180 	jr	Z,00144$
                           1181 ;src\CFG8266.c:308: PrintChar('W');
   0820 C5            [11] 1182 	push	bc
   0821 D5            [11] 1183 	push	de
   0822 3E 57         [ 7] 1184 	ld	a, #0x57
   0824 F5            [11] 1185 	push	af
   0825 33            [ 6] 1186 	inc	sp
   0826 CDr00r00      [17] 1187 	call	_PrintChar
   0829 33            [ 6] 1188 	inc	sp
   082A D1            [10] 1189 	pop	de
   082B C1            [10] 1190 	pop	bc
                           1191 ;src\CFG8266.c:309: do
   082C                    1192 00144$:
   082C DD 7E 06      [19] 1193 	ld	a, 6 (ix)
   082F D6 02         [ 7] 1194 	sub	a, #0x02
   0831 DD B6 07      [19] 1195 	or	a, 7 (ix)
   0834 20 03         [12] 1196 	jr	NZ, 00199$
   0836 3E 01         [ 7] 1197 	ld	a, #0x01
   0838 20                 1198 	.db	#0x20
   0839                    1199 00199$:
   0839 AF            [ 4] 1200 	xor	a, a
   083A                    1201 00200$:
   083A DD 77 F9      [19] 1202 	ld	-7 (ix), a
   083D DD 36 FE 00   [19] 1203 	ld	-2 (ix), #0x00
   0841 DD 36 FF 00   [19] 1204 	ld	-1 (ix), #0x00
   0845                    1205 00129$:
                           1206 ;src\CFG8266.c:311: if (uiTimeout>900)
   0845 DD 7E F8      [19] 1207 	ld	a, -8 (ix)
   0848 B7            [ 4] 1208 	or	a, a
   0849 28 31         [12] 1209 	jr	Z,00107$
                           1210 ;src\CFG8266.c:314: PrintChar(8); //backspace
   084B C5            [11] 1211 	push	bc
   084C D5            [11] 1212 	push	de
   084D 3E 08         [ 7] 1213 	ld	a, #0x08
   084F F5            [11] 1214 	push	af
   0850 33            [ 6] 1215 	inc	sp
   0851 CDr00r00      [17] 1216 	call	_PrintChar
   0854 33            [ 6] 1217 	inc	sp
   0855 D1            [10] 1218 	pop	de
   0856 C1            [10] 1219 	pop	bc
                           1220 ;src\CFG8266.c:315: PrintChar(advance[i%4]); // next char
   0857 DD 7E FE      [19] 1221 	ld	a, -2 (ix)
   085A E6 03         [ 7] 1222 	and	a, #0x03
   085C 47            [ 4] 1223 	ld	b, a
   085D 26 00         [ 7] 1224 	ld	h, #0x00
   085F DD 7E F6      [19] 1225 	ld	a, -10 (ix)
   0862 80            [ 4] 1226 	add	a, b
   0863 6F            [ 4] 1227 	ld	l, a
   0864 DD 7E F7      [19] 1228 	ld	a, -9 (ix)
   0867 8C            [ 4] 1229 	adc	a, h
   0868 67            [ 4] 1230 	ld	h, a
   0869 7E            [ 7] 1231 	ld	a, (hl)
   086A C5            [11] 1232 	push	bc
   086B D5            [11] 1233 	push	de
   086C F5            [11] 1234 	push	af
   086D 33            [ 6] 1235 	inc	sp
   086E CDr00r00      [17] 1236 	call	_PrintChar
   0871 33            [ 6] 1237 	inc	sp
   0872 D1            [10] 1238 	pop	de
   0873 C1            [10] 1239 	pop	bc
                           1240 ;src\CFG8266.c:316: ++i;
   0874 DD 34 FE      [23] 1241 	inc	-2 (ix)
   0877 20 03         [12] 1242 	jr	NZ,00201$
   0879 DD 34 FF      [23] 1243 	inc	-1 (ix)
   087C                    1244 00201$:
   087C                    1245 00107$:
                           1246 ;src\CFG8266.c:318: if(UartRXData())
   087C DB 07         [11] 1247 	in	a, (_myPort7)
   087E 0F            [ 4] 1248 	rrca
   087F 30 73         [12] 1249 	jr	NC,00119$
                           1250 ;src\CFG8266.c:320: rx_data = GetUARTData();
   0881 DB 06         [11] 1251 	in	a, (_myPort6)
   0883 DD 77 FB      [19] 1252 	ld	-5 (ix), a
                           1253 ;src\CFG8266.c:321: if (rx_data == uchData[ResponseSt])
   0886 DD 7E 04      [19] 1254 	ld	a, 4 (ix)
   0889 DD 86 FC      [19] 1255 	add	a, -4 (ix)
   088C 6F            [ 4] 1256 	ld	l, a
   088D DD 7E 05      [19] 1257 	ld	a, 5 (ix)
   0890 DD 8E FD      [19] 1258 	adc	a, -3 (ix)
   0893 67            [ 4] 1259 	ld	h, a
   0894 46            [ 7] 1260 	ld	b, (hl)
   0895 DD 7E FB      [19] 1261 	ld	a, -5 (ix)
   0898 90            [ 4] 1262 	sub	a, b
   0899 20 1E         [12] 1263 	jr	NZ,00116$
                           1264 ;src\CFG8266.c:323: ++ResponseSt;
   089B DD 34 FC      [23] 1265 	inc	-4 (ix)
   089E 20 03         [12] 1266 	jr	NZ,00205$
   08A0 DD 34 FD      [23] 1267 	inc	-3 (ix)
   08A3                    1268 00205$:
                           1269 ;src\CFG8266.c:324: if (ResponseSt == uiDataSize)
   08A3 DD 7E FC      [19] 1270 	ld	a, -4 (ix)
   08A6 DD 96 06      [19] 1271 	sub	a, 6 (ix)
   08A9 20 49         [12] 1272 	jr	NZ,00119$
   08AB DD 7E FD      [19] 1273 	ld	a, -3 (ix)
   08AE DD 96 07      [19] 1274 	sub	a, 7 (ix)
   08B1 20 41         [12] 1275 	jr	NZ,00119$
                           1276 ;src\CFG8266.c:326: bReturn = true;
   08B3 DD 36 F5 01   [19] 1277 	ld	-11 (ix), #0x01
                           1278 ;src\CFG8266.c:327: break;
   08B7 18 72         [12] 1279 	jr	00131$
   08B9                    1280 00116$:
                           1281 ;src\CFG8266.c:332: if ((uiDataSize==2)&&(ResponseSt==1))
   08B9 DD 7E F9      [19] 1282 	ld	a, -7 (ix)
   08BC B7            [ 4] 1283 	or	a, a
   08BD 28 2D         [12] 1284 	jr	Z,00113$
   08BF DD 7E FC      [19] 1285 	ld	a, -4 (ix)
   08C2 3D            [ 4] 1286 	dec	a
   08C3 DD B6 FD      [19] 1287 	or	a, -3 (ix)
   08C6 20 24         [12] 1288 	jr	NZ,00113$
                           1289 ;src\CFG8266.c:334: if (bVerbose)
   08C8 DD 7E 0A      [19] 1290 	ld	a, 10 (ix)
   08CB B7            [ 4] 1291 	or	a, a
   08CC 28 1A         [12] 1292 	jr	Z,00111$
                           1293 ;src\CFG8266.c:335: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   08CE DD 6E 04      [19] 1294 	ld	l, 4 (ix)
   08D1 DD 66 05      [19] 1295 	ld	h, 5 (ix)
   08D4 5E            [ 7] 1296 	ld	e, (hl)
   08D5 16 00         [ 7] 1297 	ld	d, #0x00
   08D7 DD 4E FB      [19] 1298 	ld	c, -5 (ix)
   08DA 06 00         [ 7] 1299 	ld	b, #0x00
   08DC D5            [11] 1300 	push	de
   08DD C5            [11] 1301 	push	bc
   08DE 21r33r09      [10] 1302 	ld	hl, #___str_1
   08E1 E5            [11] 1303 	push	hl
   08E2 CDr00r00      [17] 1304 	call	_printf
   08E5 F1            [10] 1305 	pop	af
   08E6 F1            [10] 1306 	pop	af
   08E7 F1            [10] 1307 	pop	af
   08E8                    1308 00111$:
                           1309 ;src\CFG8266.c:336: return false;
   08E8 2E 00         [ 7] 1310 	ld	l, #0x00
   08EA 18 42         [12] 1311 	jr	00132$
   08EC                    1312 00113$:
                           1313 ;src\CFG8266.c:338: ResponseSt = 0;
   08EC DD 36 FC 00   [19] 1314 	ld	-4 (ix), #0x00
   08F0 DD 36 FD 00   [19] 1315 	ld	-3 (ix), #0x00
   08F4                    1316 00119$:
                           1317 ;src\CFG8266.c:342: if (Leaping)
   08F4 79            [ 4] 1318 	ld	a, c
   08F5 B7            [ 4] 1319 	or	a, a
   08F6 28 24         [12] 1320 	jr	Z,00127$
                           1321 ;src\CFG8266.c:344: if (TickCount&0x8000==0)
   08F8 DD 36 FA 00   [19] 1322 	ld	-6 (ix), #0x00
   08FC DD 36 FB 00   [19] 1323 	ld	-5 (ix), #0x00
   0900 FD 21 9E FC   [14] 1324 	ld	iy, #_TickCount
   0904 DD 7E FB      [19] 1325 	ld	a, -5 (ix)
   0907 DD B6 FA      [19] 1326 	or	a, -6 (ix)
   090A CAr45r08      [10] 1327 	jp	Z, 00129$
                           1328 ;src\CFG8266.c:346: Leaping = 0;
   090D 0E 00         [ 7] 1329 	ld	c, #0x00
                           1330 ;src\CFG8266.c:347: if (TickCount>Timeout)
   090F 7B            [ 4] 1331 	ld	a, e
   0910 FD 96 00      [19] 1332 	sub	a, 0 (iy)
   0913 7A            [ 4] 1333 	ld	a, d
   0914 FD 9E 01      [19] 1334 	sbc	a, 1 (iy)
   0917 38 12         [12] 1335 	jr	C,00131$
                           1336 ;src\CFG8266.c:348: break;
   0919 C3r45r08      [10] 1337 	jp	00129$
   091C                    1338 00127$:
                           1339 ;src\CFG8266.c:352: if (TickCount>Timeout)
   091C 7B            [ 4] 1340 	ld	a, e
   091D FD 21 9E FC   [14] 1341 	ld	iy, #_TickCount
   0921 FD 96 00      [19] 1342 	sub	a, 0 (iy)
   0924 7A            [ 4] 1343 	ld	a, d
   0925 FD 9E 01      [19] 1344 	sbc	a, 1 (iy)
   0928 D2r45r08      [10] 1345 	jp	NC, 00129$
                           1346 ;src\CFG8266.c:355: while (1);
   092B                    1347 00131$:
                           1348 ;src\CFG8266.c:357: return bReturn;
   092B DD 6E F5      [19] 1349 	ld	l, -11 (ix)
   092E                    1350 00132$:
                           1351 ;src\CFG8266.c:358: }
   092E DD F9         [10] 1352 	ld	sp, ix
   0930 DD E1         [14] 1353 	pop	ix
   0932 C9            [10] 1354 	ret
   0933                    1355 ___str_1:
   0933 45 72 72 6F 72 20  1356 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   094C 0D                 1357 	.db 0x0d
   094D 0A                 1358 	.db 0x0a
   094E 00                 1359 	.db 0x00
                           1360 ;src\CFG8266.c:360: void FinishUpdate (bool bSendReset)
                           1361 ;	---------------------------------
                           1362 ; Function FinishUpdate
                           1363 ; ---------------------------------
   094F                    1364 _FinishUpdate::
   094F CDr00r00      [17] 1365 	call	___sdcc_enter_ix
   0952 F5            [11] 1366 	push	af
   0953 F5            [11] 1367 	push	af
                           1368 ;src\CFG8266.c:362: unsigned int iRetries = 3;
   0954 21 03 00      [10] 1369 	ld	hl, #0x0003
   0957 E3            [19] 1370 	ex	(sp), hl
                           1371 ;src\CFG8266.c:366: bool bReset = bSendReset;
   0958 DD 7E 04      [19] 1372 	ld	a, 4 (ix)
   095B DD 77 FE      [19] 1373 	ld	-2 (ix), a
                           1374 ;src\CFG8266.c:368: Print("Finishing flash, this will take some time, WAIT!\n");
   095E 21rA2r0A      [10] 1375 	ld	hl, #___str_2
   0961 E5            [11] 1376 	push	hl
   0962 CDr00r00      [17] 1377 	call	_Print
   0965 F1            [10] 1378 	pop	af
                           1379 ;src\CFG8266.c:370: do
   0966 DD 36 FF 02   [19] 1380 	ld	-1 (ix), #0x02
   096A                    1381 00135$:
                           1382 ;src\CFG8266.c:372: bRet = true;
   096A 2E 01         [ 7] 1383 	ld	l, #0x01
                           1384 ;src\CFG8266.c:373: --ucRetries;
   096C DD 35 FF      [23] 1385 	dec	-1 (ix)
                           1386 ;src\CFG8266.c:374: if (bReset)
   096F DD 7E FE      [19] 1387 	ld	a, -2 (ix)
   0972 B7            [ 4] 1388 	or	a, a
   0973 28 0D         [12] 1389 	jr	Z,00152$
                           1390 ;src\CFG8266.c:375: TxByte('R'); //Request Reset
   0975 E5            [11] 1391 	push	hl
   0976 3E 52         [ 7] 1392 	ld	a, #0x52
   0978 F5            [11] 1393 	push	af
   0979 33            [ 6] 1394 	inc	sp
   097A CDrE8r05      [17] 1395 	call	_TxByte
   097D 33            [ 6] 1396 	inc	sp
   097E E1            [10] 1397 	pop	hl
   097F C3rC1r09      [10] 1398 	jp	00110$
                           1399 ;src\CFG8266.c:378: do
   0982                    1400 00152$:
   0982 C1            [10] 1401 	pop	bc
   0983 C5            [11] 1402 	push	bc
                           1403 ;src\CFG8266.c:380: for (uchHalt=60;uchHalt>0;--uchHalt)
   0984                    1404 00150$:
   0984 3E 3C         [ 7] 1405 	ld	a, #0x3c
   0986                    1406 00138$:
                           1407 ;src\CFG8266.c:381: Halt();
   0986 76            [ 4] 1408 	halt;	
                           1409 ;src\CFG8266.c:380: for (uchHalt=60;uchHalt>0;--uchHalt)
   0987 3D            [ 4] 1410 	dec	a
   0988 C2r86r09      [10] 1411 	jp	NZ, 00138$
                           1412 ;src\CFG8266.c:382: TxByte('E'); //End Update
   098B C5            [11] 1413 	push	bc
   098C 3E 45         [ 7] 1414 	ld	a, #0x45
   098E F5            [11] 1415 	push	af
   098F 33            [ 6] 1416 	inc	sp
   0990 CDrE8r05      [17] 1417 	call	_TxByte
   0993 33            [ 6] 1418 	inc	sp
   0994 3E 01         [ 7] 1419 	ld	a, #0x01
   0996 F5            [11] 1420 	push	af
   0997 33            [ 6] 1421 	inc	sp
   0998 21 84 03      [10] 1422 	ld	hl, #0x0384
   099B E5            [11] 1423 	push	hl
   099C 21 02 00      [10] 1424 	ld	hl, #0x0002
   099F E5            [11] 1425 	push	hl
   09A0 21r8Er01      [10] 1426 	ld	hl, #_endUpdate
   09A3 E5            [11] 1427 	push	hl
   09A4 CDrAAr07      [17] 1428 	call	_WaitForRXData
   09A7 F1            [10] 1429 	pop	af
   09A8 F1            [10] 1430 	pop	af
   09A9 F1            [10] 1431 	pop	af
   09AA 33            [ 6] 1432 	inc	sp
   09AB C1            [10] 1433 	pop	bc
                           1434 ;src\CFG8266.c:384: iRetries--;
   09AC 0B            [ 6] 1435 	dec	bc
                           1436 ;src\CFG8266.c:386: while ((!bRet)&&(iRetries));
   09AD 7D            [ 4] 1437 	ld	a, l
   09AE B7            [ 4] 1438 	or	a, a
   09AF 20 05         [12] 1439 	jr	NZ,00168$
   09B1 78            [ 4] 1440 	ld	a, b
   09B2 B1            [ 4] 1441 	or	a, c
   09B3 C2r84r09      [10] 1442 	jp	NZ, 00150$
   09B6                    1443 00168$:
   09B6 33            [ 6] 1444 	inc	sp
   09B7 33            [ 6] 1445 	inc	sp
   09B8 C5            [11] 1446 	push	bc
                           1447 ;src\CFG8266.c:387: if (bRet)
   09B9 7D            [ 4] 1448 	ld	a, l
   09BA B7            [ 4] 1449 	or	a, a
   09BB 28 04         [12] 1450 	jr	Z,00110$
                           1451 ;src\CFG8266.c:389: bReset=true;
   09BD DD 36 FE 01   [19] 1452 	ld	-2 (ix), #0x01
   09C1                    1453 00110$:
                           1454 ;src\CFG8266.c:393: if (!bRet)
   09C1 7D            [ 4] 1455 	ld	a, l
   09C2 B7            [ 4] 1456 	or	a, a
   09C3 20 0B         [12] 1457 	jr	NZ,00133$
                           1458 ;src\CFG8266.c:394: Print("Timeout waiting to end update...\n");
   09C5 21rD4r0A      [10] 1459 	ld	hl, #___str_3
   09C8 E5            [11] 1460 	push	hl
   09C9 CDr00r00      [17] 1461 	call	_Print
   09CC F1            [10] 1462 	pop	af
   09CD C3r96r0A      [10] 1463 	jp	00136$
   09D0                    1464 00133$:
                           1465 ;src\CFG8266.c:397: if (ucRetries)
   09D0 DD 7E FF      [19] 1466 	ld	a, -1 (ix)
   09D3 B7            [ 4] 1467 	or	a, a
   09D4 28 18         [12] 1468 	jr	Z,00115$
                           1469 ;src\CFG8266.c:399: if (ucIsFw)
   09D6 3Ar0Er02      [13] 1470 	ld	a,(#_ucIsFw + 0)
   09D9 B7            [ 4] 1471 	or	a, a
   09DA 28 0A         [12] 1472 	jr	Z,00112$
                           1473 ;src\CFG8266.c:400: Print("\nFirmware Update done, ESP is restarting, WAIT...\n");
   09DC 21rF6r0A      [10] 1474 	ld	hl, #___str_4
   09DF E5            [11] 1475 	push	hl
   09E0 CDr00r00      [17] 1476 	call	_Print
   09E3 F1            [10] 1477 	pop	af
   09E4 18 08         [12] 1478 	jr	00115$
   09E6                    1479 00112$:
                           1480 ;src\CFG8266.c:402: Print("\nCertificates Update done, ESP is restarting, WAIT...\n");
   09E6 21r29r0B      [10] 1481 	ld	hl, #___str_5
   09E9 E5            [11] 1482 	push	hl
   09EA CDr00r00      [17] 1483 	call	_Print
   09ED F1            [10] 1484 	pop	af
   09EE                    1485 00115$:
                           1486 ;src\CFG8266.c:405: if (WaitForRXData(responseReady,7,2700,false)) //Wait up to 45 seconds
   09EE AF            [ 4] 1487 	xor	a, a
   09EF F5            [11] 1488 	push	af
   09F0 33            [ 6] 1489 	inc	sp
   09F1 21 8C 0A      [10] 1490 	ld	hl, #0x0a8c
   09F4 E5            [11] 1491 	push	hl
   09F5 21 07 00      [10] 1492 	ld	hl, #0x0007
   09F8 E5            [11] 1493 	push	hl
   09F9 21r87r01      [10] 1494 	ld	hl, #_responseReady
   09FC E5            [11] 1495 	push	hl
   09FD CDrAAr07      [17] 1496 	call	_WaitForRXData
   0A00 F1            [10] 1497 	pop	af
   0A01 F1            [10] 1498 	pop	af
   0A02 F1            [10] 1499 	pop	af
   0A03 33            [ 6] 1500 	inc	sp
   0A04 7D            [ 4] 1501 	ld	a, l
   0A05 B7            [ 4] 1502 	or	a, a
   0A06 CAr88r0A      [10] 1503 	jp	Z, 00130$
                           1504 ;src\CFG8266.c:407: if (!ucIsFw)
   0A09 3Ar0Er02      [13] 1505 	ld	a,(#_ucIsFw + 0)
   0A0C B7            [ 4] 1506 	or	a, a
   0A0D C2r7Er0A      [10] 1507 	jp	NZ, 00125$
                           1508 ;src\CFG8266.c:409: Print("ESP Reset Ok, now let's request creation of index file...\n");
   0A10 21r60r0B      [10] 1509 	ld	hl, #___str_6
   0A13 E5            [11] 1510 	push	hl
   0A14 CDr00r00      [17] 1511 	call	_Print
   0A17 F1            [10] 1512 	pop	af
                           1513 ;src\CFG8266.c:411: do
   0A18 DD 36 FE 0A   [19] 1514 	ld	-2 (ix), #0x0a
   0A1C DD 36 FF 00   [19] 1515 	ld	-1 (ix), #0x00
                           1516 ;src\CFG8266.c:413: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A20                    1517 00160$:
   0A20 3E 3C         [ 7] 1518 	ld	a, #0x3c
   0A22                    1519 00140$:
                           1520 ;src\CFG8266.c:414: Halt();
   0A22 76            [ 4] 1521 	halt;	
                           1522 ;src\CFG8266.c:413: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A23 3D            [ 4] 1523 	dec	a
   0A24 C2r22r0A      [10] 1524 	jp	NZ, 00140$
                           1525 ;src\CFG8266.c:415: TxByte('I'); //End Update
   0A27 3E 49         [ 7] 1526 	ld	a, #0x49
   0A29 F5            [11] 1527 	push	af
   0A2A 33            [ 6] 1528 	inc	sp
   0A2B CDrE8r05      [17] 1529 	call	_TxByte
   0A2E 33            [ 6] 1530 	inc	sp
                           1531 ;src\CFG8266.c:416: bRet = WaitForRXData(certificateDone,2,3600,false); //Wait up to 1 minute, certificate index creation takes time
   0A2F AF            [ 4] 1532 	xor	a, a
   0A30 F5            [11] 1533 	push	af
   0A31 33            [ 6] 1534 	inc	sp
   0A32 21 10 0E      [10] 1535 	ld	hl, #0x0e10
   0A35 E5            [11] 1536 	push	hl
   0A36 21 02 00      [10] 1537 	ld	hl, #0x0002
   0A39 E5            [11] 1538 	push	hl
   0A3A 21r90r01      [10] 1539 	ld	hl, #_certificateDone
   0A3D E5            [11] 1540 	push	hl
   0A3E CDrAAr07      [17] 1541 	call	_WaitForRXData
   0A41 F1            [10] 1542 	pop	af
   0A42 F1            [10] 1543 	pop	af
   0A43 F1            [10] 1544 	pop	af
   0A44 33            [ 6] 1545 	inc	sp
   0A45 DD 75 FD      [19] 1546 	ld	-3 (ix), l
                           1547 ;src\CFG8266.c:417: iRetries--;
   0A48 DD 6E FE      [19] 1548 	ld	l, -2 (ix)
   0A4B DD 66 FF      [19] 1549 	ld	h, -1 (ix)
   0A4E 2B            [ 6] 1550 	dec	hl
   0A4F DD 75 FE      [19] 1551 	ld	-2 (ix), l
   0A52 DD 74 FF      [19] 1552 	ld	-1 (ix), h
                           1553 ;src\CFG8266.c:419: while ((!bRet)&&(iRetries));
   0A55 DD 7E FD      [19] 1554 	ld	a, -3 (ix)
   0A58 B7            [ 4] 1555 	or	a, a
   0A59 20 09         [12] 1556 	jr	NZ,00120$
   0A5B DD 7E FF      [19] 1557 	ld	a, -1 (ix)
   0A5E DD B6 FE      [19] 1558 	or	a, -2 (ix)
   0A61 C2r20r0A      [10] 1559 	jp	NZ, 00160$
   0A64                    1560 00120$:
                           1561 ;src\CFG8266.c:420: if (bRet)
   0A64 DD 7E FD      [19] 1562 	ld	a, -3 (ix)
   0A67 B7            [ 4] 1563 	or	a, a
   0A68 28 0A         [12] 1564 	jr	Z,00122$
                           1565 ;src\CFG8266.c:421: Print("Done!\n");
   0A6A 21r9Br0B      [10] 1566 	ld	hl, #___str_7
   0A6D E5            [11] 1567 	push	hl
   0A6E CDr00r00      [17] 1568 	call	_Print
   0A71 F1            [10] 1569 	pop	af
   0A72 18 29         [12] 1570 	jr	00137$
   0A74                    1571 00122$:
                           1572 ;src\CFG8266.c:423: Print("Done, but time-out on creating certificates index file!\n");
   0A74 21rA2r0B      [10] 1573 	ld	hl, #___str_8
   0A77 E5            [11] 1574 	push	hl
   0A78 CDr00r00      [17] 1575 	call	_Print
   0A7B F1            [10] 1576 	pop	af
   0A7C 18 1F         [12] 1577 	jr	00137$
   0A7E                    1578 00125$:
                           1579 ;src\CFG8266.c:426: Print("Done!\n");
   0A7E 21r9Br0B      [10] 1580 	ld	hl, #___str_7
   0A81 E5            [11] 1581 	push	hl
   0A82 CDr00r00      [17] 1582 	call	_Print
   0A85 F1            [10] 1583 	pop	af
                           1584 ;src\CFG8266.c:427: break;
   0A86 18 15         [12] 1585 	jr	00137$
   0A88                    1586 00130$:
                           1587 ;src\CFG8266.c:430: if (!ucRetries)
   0A88 DD 7E FF      [19] 1588 	ld	a, -1 (ix)
   0A8B B7            [ 4] 1589 	or	a, a
   0A8C 20 08         [12] 1590 	jr	NZ,00136$
                           1591 ;src\CFG8266.c:431: Print("Timeout error\n");
   0A8E 21rDBr0B      [10] 1592 	ld	hl, #___str_9
   0A91 E5            [11] 1593 	push	hl
   0A92 CDr00r00      [17] 1594 	call	_Print
   0A95 F1            [10] 1595 	pop	af
   0A96                    1596 00136$:
                           1597 ;src\CFG8266.c:434: while (ucRetries);
   0A96 DD 7E FF      [19] 1598 	ld	a, -1 (ix)
   0A99 B7            [ 4] 1599 	or	a, a
   0A9A C2r6Ar09      [10] 1600 	jp	NZ, 00135$
   0A9D                    1601 00137$:
                           1602 ;src\CFG8266.c:436: return;
                           1603 ;src\CFG8266.c:437: }
   0A9D DD F9         [10] 1604 	ld	sp, ix
   0A9F DD E1         [14] 1605 	pop	ix
   0AA1 C9            [10] 1606 	ret
   0AA2                    1607 ___str_2:
   0AA2 46 69 6E 69 73 68  1608 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0AD2 0A                 1609 	.db 0x0a
   0AD3 00                 1610 	.db 0x00
   0AD4                    1611 ___str_3:
   0AD4 54 69 6D 65 6F 75  1612 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0AF4 0A                 1613 	.db 0x0a
   0AF5 00                 1614 	.db 0x00
   0AF6                    1615 ___str_4:
   0AF6 0A                 1616 	.db 0x0a
   0AF7 46 69 72 6D 77 61  1617 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0B27 0A                 1618 	.db 0x0a
   0B28 00                 1619 	.db 0x00
   0B29                    1620 ___str_5:
   0B29 0A                 1621 	.db 0x0a
   0B2A 43 65 72 74 69 66  1622 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0B5E 0A                 1623 	.db 0x0a
   0B5F 00                 1624 	.db 0x00
   0B60                    1625 ___str_6:
   0B60 45 53 50 20 52 65  1626 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0B99 0A                 1627 	.db 0x0a
   0B9A 00                 1628 	.db 0x00
   0B9B                    1629 ___str_7:
   0B9B 44 6F 6E 65 21     1630 	.ascii "Done!"
   0BA0 0A                 1631 	.db 0x0a
   0BA1 00                 1632 	.db 0x00
   0BA2                    1633 ___str_8:
   0BA2 44 6F 6E 65 2C 20  1634 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0BD9 0A                 1635 	.db 0x0a
   0BDA 00                 1636 	.db 0x00
   0BDB                    1637 ___str_9:
   0BDB 54 69 6D 65 6F 75  1638 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0BE8 0A                 1639 	.db 0x0a
   0BE9 00                 1640 	.db 0x00
                           1641 ;src\CFG8266.c:439: int main(char** argv, int argc)
                           1642 ;	---------------------------------
                           1643 ; Function main
                           1644 ; ---------------------------------
   0BEA                    1645 _main::
   0BEA CDr00r00      [17] 1646 	call	___sdcc_enter_ix
   0BED 21 1B FE      [10] 1647 	ld	hl, #-485
   0BF0 39            [11] 1648 	add	hl, sp
   0BF1 F9            [ 6] 1649 	ld	sp, hl
                           1650 ;src\CFG8266.c:451: unsigned char advance[4] = {'-','\\','|','/'};
   0BF2 21 A5 01      [10] 1651 	ld	hl, #421
   0BF5 39            [11] 1652 	add	hl, sp
   0BF6 DD 75 EE      [19] 1653 	ld	-18 (ix), l
   0BF9 DD 74 EF      [19] 1654 	ld	-17 (ix), h
   0BFC 36 2D         [10] 1655 	ld	(hl), #0x2d
   0BFE DD 6E EE      [19] 1656 	ld	l, -18 (ix)
   0C01 DD 66 EF      [19] 1657 	ld	h, -17 (ix)
   0C04 23            [ 6] 1658 	inc	hl
   0C05 36 5C         [10] 1659 	ld	(hl), #0x5c
   0C07 DD 6E EE      [19] 1660 	ld	l, -18 (ix)
   0C0A DD 66 EF      [19] 1661 	ld	h, -17 (ix)
   0C0D 23            [ 6] 1662 	inc	hl
   0C0E 23            [ 6] 1663 	inc	hl
   0C0F 36 7C         [10] 1664 	ld	(hl), #0x7c
   0C11 DD 6E EE      [19] 1665 	ld	l, -18 (ix)
   0C14 DD 66 EF      [19] 1666 	ld	h, -17 (ix)
   0C17 23            [ 6] 1667 	inc	hl
   0C18 23            [ 6] 1668 	inc	hl
   0C19 23            [ 6] 1669 	inc	hl
   0C1A 36 2F         [10] 1670 	ld	(hl), #0x2f
                           1671 ;src\CFG8266.c:459: unsigned char ucFirstBlock = 1;
   0C1C DD 36 F0 01   [19] 1672 	ld	-16 (ix), #0x01
                           1673 ;src\CFG8266.c:464: ucLocalUpdate = 0;
   0C20 21r0Dr02      [10] 1674 	ld	hl,#_ucLocalUpdate + 0
   0C23 36 00         [10] 1675 	ld	(hl), #0x00
                           1676 ;src\CFG8266.c:465: ucNagleOff = 0;
   0C25 21r0Fr02      [10] 1677 	ld	hl,#_ucNagleOff + 0
   0C28 36 00         [10] 1678 	ld	(hl), #0x00
                           1679 ;src\CFG8266.c:466: ucNagleOn = 0;
   0C2A 21r10r02      [10] 1680 	ld	hl,#_ucNagleOn + 0
   0C2D 36 00         [10] 1681 	ld	(hl), #0x00
                           1682 ;src\CFG8266.c:467: Print("> MSX-SM ESP8266 WIFI Module Configuration v1.00<\n(c) 2019 Oduvaldo Pavan Junior - ducasp@gmail.com\n\n");
   0C2F 21r86r17      [10] 1683 	ld	hl, #___str_10
   0C32 E5            [11] 1684 	push	hl
   0C33 CDr00r00      [17] 1685 	call	_Print
   0C36 F1            [10] 1686 	pop	af
                           1687 ;src\CFG8266.c:469: if (IsValidInput(argv, argc))
   0C37 DD 6E 06      [19] 1688 	ld	l, 6 (ix)
   0C3A DD 66 07      [19] 1689 	ld	h, 7 (ix)
   0C3D E5            [11] 1690 	push	hl
   0C3E DD 6E 04      [19] 1691 	ld	l, 4 (ix)
   0C41 DD 66 05      [19] 1692 	ld	h, 5 (ix)
   0C44 E5            [11] 1693 	push	hl
   0C45 CDr70r03      [17] 1694 	call	_IsValidInput
   0C48 F1            [10] 1695 	pop	af
   0C49 F1            [10] 1696 	pop	af
   0C4A DD 75 FE      [19] 1697 	ld	-2 (ix), l
   0C4D DD 74 FF      [19] 1698 	ld	-1 (ix), h
   0C50 7C            [ 4] 1699 	ld	a, h
   0C51 DD B6 FE      [19] 1700 	or	a, -2 (ix)
   0C54 CAr76r17      [10] 1701 	jp	Z, 00263$
                           1702 ;src\CFG8266.c:471: do
   0C57 DD 36 FF 00   [19] 1703 	ld	-1 (ix), #0x00
   0C5B                    1704 00103$:
                           1705 ;src\CFG8266.c:474: myPort6 = speed;
   0C5B DD 7E FF      [19] 1706 	ld	a, -1 (ix)
   0C5E D3 06         [11] 1707 	out	(_myPort6), a
                           1708 ;src\CFG8266.c:475: ClearUartData();
   0C60 3E 14         [ 7] 1709 	ld	a, #0x14
   0C62 D3 06         [11] 1710 	out	(_myPort6), a
                           1711 ;src\CFG8266.c:476: TxByte('?');
   0C64 3E 3F         [ 7] 1712 	ld	a, #0x3f
   0C66 F5            [11] 1713 	push	af
   0C67 33            [ 6] 1714 	inc	sp
   0C68 CDrE8r05      [17] 1715 	call	_TxByte
   0C6B 33            [ 6] 1716 	inc	sp
                           1717 ;src\CFG8266.c:477: Halt();
   0C6C 76            [ 4] 1718 	halt;	
                           1719 ;src\CFG8266.c:479: bResponse = WaitForRXData(responseOK,2,4,false);
   0C6D AF            [ 4] 1720 	xor	a, a
   0C6E F5            [11] 1721 	push	af
   0C6F 33            [ 6] 1722 	inc	sp
   0C70 21 04 00      [10] 1723 	ld	hl, #0x0004
   0C73 E5            [11] 1724 	push	hl
   0C74 2E 02         [ 7] 1725 	ld	l, #0x02
   0C76 E5            [11] 1726 	push	hl
   0C77 21r92r01      [10] 1727 	ld	hl, #_responseOK
   0C7A E5            [11] 1728 	push	hl
   0C7B CDrAAr07      [17] 1729 	call	_WaitForRXData
   0C7E F1            [10] 1730 	pop	af
   0C7F F1            [10] 1731 	pop	af
   0C80 F1            [10] 1732 	pop	af
   0C81 33            [ 6] 1733 	inc	sp
                           1734 ;src\CFG8266.c:481: if (bResponse)
   0C82 DD 75 FD      [19] 1735 	ld	-3 (ix), l
   0C85 7D            [ 4] 1736 	ld	a, l
   0C86 B7            [ 4] 1737 	or	a, a
   0C87 20 0B         [12] 1738 	jr	NZ,00105$
                           1739 ;src\CFG8266.c:483: ++speed;
   0C89 DD 34 FF      [23] 1740 	inc	-1 (ix)
                           1741 ;src\CFG8266.c:485: while (speed<10);
   0C8C DD 7E FF      [19] 1742 	ld	a, -1 (ix)
   0C8F D6 0A         [ 7] 1743 	sub	a, #0x0a
   0C91 DAr5Br0C      [10] 1744 	jp	C, 00103$
   0C94                    1745 00105$:
                           1746 ;src\CFG8266.c:487: if (speed<10)
   0C94 DD 7E FF      [19] 1747 	ld	a, -1 (ix)
   0C97 D6 0A         [ 7] 1748 	sub	a, #0x0a
   0C99 D2r6Cr17      [10] 1749 	jp	NC, 00260$
                           1750 ;src\CFG8266.c:489: printf ("Using Baud Rate #%u\r\n",speed);
   0C9C DD 7E FF      [19] 1751 	ld	a, -1 (ix)
   0C9F DD 77 FE      [19] 1752 	ld	-2 (ix), a
   0CA2 DD 36 FF 00   [19] 1753 	ld	-1 (ix), #0x00
   0CA6 6F            [ 4] 1754 	ld	l, a
   0CA7 26 00         [ 7] 1755 	ld	h, #0x00
   0CA9 E5            [11] 1756 	push	hl
   0CAA 21rECr17      [10] 1757 	ld	hl, #___str_11
   0CAD E5            [11] 1758 	push	hl
   0CAE CDr00r00      [17] 1759 	call	_printf
   0CB1 F1            [10] 1760 	pop	af
   0CB2 F1            [10] 1761 	pop	af
                           1762 ;src\CFG8266.c:490: if ((ucScan)||(ucNagleOff)||(ucNagleOn)) //Scan and choose network to connect?
   0CB3 3Ar00r00      [13] 1763 	ld	a,(#_ucScan + 0)
   0CB6 B7            [ 4] 1764 	or	a, a
   0CB7 20 0D         [12] 1765 	jr	NZ,00254$
   0CB9 3Ar0Fr02      [13] 1766 	ld	a,(#_ucNagleOff + 0)
   0CBC B7            [ 4] 1767 	or	a, a
   0CBD 20 07         [12] 1768 	jr	NZ,00254$
   0CBF 3Ar10r02      [13] 1769 	ld	a,(#_ucNagleOn + 0)
   0CC2 B7            [ 4] 1770 	or	a, a
   0CC3 CAr8Ar10      [10] 1771 	jp	Z, 00255$
   0CC6                    1772 00254$:
                           1773 ;src\CFG8266.c:492: if (ucScan)
   0CC6 3Ar00r00      [13] 1774 	ld	a,(#_ucScan + 0)
   0CC9 B7            [ 4] 1775 	or	a, a
   0CCA 28 0A         [12] 1776 	jr	Z,00112$
                           1777 ;src\CFG8266.c:493: TxByte('S'); //Request SCAN
   0CCC 3E 53         [ 7] 1778 	ld	a, #0x53
   0CCE F5            [11] 1779 	push	af
   0CCF 33            [ 6] 1780 	inc	sp
   0CD0 CDrE8r05      [17] 1781 	call	_TxByte
   0CD3 33            [ 6] 1782 	inc	sp
   0CD4 18 1E         [12] 1783 	jr	00113$
   0CD6                    1784 00112$:
                           1785 ;src\CFG8266.c:494: else if (ucNagleOff)
   0CD6 3Ar0Fr02      [13] 1786 	ld	a,(#_ucNagleOff + 0)
   0CD9 B7            [ 4] 1787 	or	a, a
   0CDA 28 0A         [12] 1788 	jr	Z,00109$
                           1789 ;src\CFG8266.c:495: TxByte('N'); //Request nagle off for future connections
   0CDC 3E 4E         [ 7] 1790 	ld	a, #0x4e
   0CDE F5            [11] 1791 	push	af
   0CDF 33            [ 6] 1792 	inc	sp
   0CE0 CDrE8r05      [17] 1793 	call	_TxByte
   0CE3 33            [ 6] 1794 	inc	sp
   0CE4 18 0E         [12] 1795 	jr	00113$
   0CE6                    1796 00109$:
                           1797 ;src\CFG8266.c:496: else if (ucNagleOn)
   0CE6 3Ar10r02      [13] 1798 	ld	a,(#_ucNagleOn + 0)
   0CE9 B7            [ 4] 1799 	or	a, a
   0CEA 28 08         [12] 1800 	jr	Z,00113$
                           1801 ;src\CFG8266.c:497: TxByte('D'); //Request nagle on for future connections
   0CEC 3E 44         [ 7] 1802 	ld	a, #0x44
   0CEE F5            [11] 1803 	push	af
   0CEF 33            [ 6] 1804 	inc	sp
   0CF0 CDrE8r05      [17] 1805 	call	_TxByte
   0CF3 33            [ 6] 1806 	inc	sp
   0CF4                    1807 00113$:
                           1808 ;src\CFG8266.c:499: if (ucScan)
   0CF4 3Ar00r00      [13] 1809 	ld	a,(#_ucScan + 0)
   0CF7 B7            [ 4] 1810 	or	a, a
   0CF8 28 1B         [12] 1811 	jr	Z,00120$
                           1812 ;src\CFG8266.c:500: bResponse = WaitForRXData(scanResponse,2,4,true);
   0CFA 3E 01         [ 7] 1813 	ld	a, #0x01
   0CFC F5            [11] 1814 	push	af
   0CFD 33            [ 6] 1815 	inc	sp
   0CFE 21 04 00      [10] 1816 	ld	hl, #0x0004
   0D01 E5            [11] 1817 	push	hl
   0D02 2E 02         [ 7] 1818 	ld	l, #0x02
   0D04 E5            [11] 1819 	push	hl
   0D05 21r94r01      [10] 1820 	ld	hl, #_scanResponse
   0D08 E5            [11] 1821 	push	hl
   0D09 CDrAAr07      [17] 1822 	call	_WaitForRXData
   0D0C F1            [10] 1823 	pop	af
   0D0D F1            [10] 1824 	pop	af
   0D0E F1            [10] 1825 	pop	af
   0D0F 33            [ 6] 1826 	inc	sp
   0D10 DD 75 FD      [19] 1827 	ld	-3 (ix), l
   0D13 18 40         [12] 1828 	jr	00121$
   0D15                    1829 00120$:
                           1830 ;src\CFG8266.c:501: else if (ucNagleOff)
   0D15 3Ar0Fr02      [13] 1831 	ld	a,(#_ucNagleOff + 0)
   0D18 B7            [ 4] 1832 	or	a, a
   0D19 28 1B         [12] 1833 	jr	Z,00117$
                           1834 ;src\CFG8266.c:502: bResponse = WaitForRXData(nagleoffResponse,2,4,true);
   0D1B 3E 01         [ 7] 1835 	ld	a, #0x01
   0D1D F5            [11] 1836 	push	af
   0D1E 33            [ 6] 1837 	inc	sp
   0D1F 21 04 00      [10] 1838 	ld	hl, #0x0004
   0D22 E5            [11] 1839 	push	hl
   0D23 2E 02         [ 7] 1840 	ld	l, #0x02
   0D25 E5            [11] 1841 	push	hl
   0D26 21r98r01      [10] 1842 	ld	hl, #_nagleoffResponse
   0D29 E5            [11] 1843 	push	hl
   0D2A CDrAAr07      [17] 1844 	call	_WaitForRXData
   0D2D F1            [10] 1845 	pop	af
   0D2E F1            [10] 1846 	pop	af
   0D2F F1            [10] 1847 	pop	af
   0D30 33            [ 6] 1848 	inc	sp
   0D31 DD 75 FD      [19] 1849 	ld	-3 (ix), l
   0D34 18 1F         [12] 1850 	jr	00121$
   0D36                    1851 00117$:
                           1852 ;src\CFG8266.c:503: else if (ucNagleOn)
   0D36 3Ar10r02      [13] 1853 	ld	a,(#_ucNagleOn + 0)
   0D39 B7            [ 4] 1854 	or	a, a
   0D3A 28 19         [12] 1855 	jr	Z,00121$
                           1856 ;src\CFG8266.c:504: bResponse = WaitForRXData(nagleonResponse,2,4,true);
   0D3C 3E 01         [ 7] 1857 	ld	a, #0x01
   0D3E F5            [11] 1858 	push	af
   0D3F 33            [ 6] 1859 	inc	sp
   0D40 21 04 00      [10] 1860 	ld	hl, #0x0004
   0D43 E5            [11] 1861 	push	hl
   0D44 2E 02         [ 7] 1862 	ld	l, #0x02
   0D46 E5            [11] 1863 	push	hl
   0D47 21r96r01      [10] 1864 	ld	hl, #_nagleonResponse
   0D4A E5            [11] 1865 	push	hl
   0D4B CDrAAr07      [17] 1866 	call	_WaitForRXData
   0D4E F1            [10] 1867 	pop	af
   0D4F F1            [10] 1868 	pop	af
   0D50 F1            [10] 1869 	pop	af
   0D51 33            [ 6] 1870 	inc	sp
   0D52 DD 75 FD      [19] 1871 	ld	-3 (ix), l
   0D55                    1872 00121$:
                           1873 ;src\CFG8266.c:507: if ((bResponse)&&(ucScan))
   0D55 DD 7E FD      [19] 1874 	ld	a, -3 (ix)
   0D58 B7            [ 4] 1875 	or	a, a
   0D59 CAr4Br10      [10] 1876 	jp	Z, 00187$
   0D5C FD 21r00r00   [14] 1877 	ld	iy, #_ucScan
   0D60 FD 7E 00      [19] 1878 	ld	a, 0 (iy)
   0D63 B7            [ 4] 1879 	or	a, a
   0D64 CAr4Br10      [10] 1880 	jp	Z, 00187$
                           1881 ;src\CFG8266.c:510: do
   0D67 0E 0A         [ 7] 1882 	ld	c, #0x0a
   0D69                    1883 00124$:
                           1884 ;src\CFG8266.c:512: --ucRetries;
   0D69 0D            [ 4] 1885 	dec	c
                           1886 ;src\CFG8266.c:513: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0D6A 06 3C         [ 7] 1887 	ld	b, #0x3c
   0D6C                    1888 00265$:
                           1889 ;src\CFG8266.c:514: Halt();
   0D6C 76            [ 4] 1890 	halt;	
                           1891 ;src\CFG8266.c:513: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0D6D 78            [ 4] 1892 	ld	a, b
   0D6E 3D            [ 4] 1893 	dec	a
   0D6F 47            [ 4] 1894 	ld	b, a
   0D70 B7            [ 4] 1895 	or	a, a
   0D71 C2r6Cr0D      [10] 1896 	jp	NZ, 00265$
                           1897 ;src\CFG8266.c:515: TxByte('s'); //Request SCAN result
   0D74 C5            [11] 1898 	push	bc
   0D75 3E 73         [ 7] 1899 	ld	a, #0x73
   0D77 F5            [11] 1900 	push	af
   0D78 33            [ 6] 1901 	inc	sp
   0D79 CDrE8r05      [17] 1902 	call	_TxByte
   0D7C 33            [ 6] 1903 	inc	sp
   0D7D AF            [ 4] 1904 	xor	a, a
   0D7E F5            [11] 1905 	push	af
   0D7F 33            [ 6] 1906 	inc	sp
   0D80 21 0A 00      [10] 1907 	ld	hl, #0x000a
   0D83 E5            [11] 1908 	push	hl
   0D84 2E 02         [ 7] 1909 	ld	l, #0x02
   0D86 E5            [11] 1910 	push	hl
   0D87 21r9Ar01      [10] 1911 	ld	hl, #_scanresResponse
   0D8A E5            [11] 1912 	push	hl
   0D8B CDrAAr07      [17] 1913 	call	_WaitForRXData
   0D8E F1            [10] 1914 	pop	af
   0D8F F1            [10] 1915 	pop	af
   0D90 F1            [10] 1916 	pop	af
   0D91 33            [ 6] 1917 	inc	sp
   0D92 C1            [10] 1918 	pop	bc
                           1919 ;src\CFG8266.c:518: while ((ucRetries)&&(!bResponse));
   0D93 79            [ 4] 1920 	ld	a, c
   0D94 B7            [ 4] 1921 	or	a, a
   0D95 28 05         [12] 1922 	jr	Z,00126$
   0D97 7D            [ 4] 1923 	ld	a, l
   0D98 B7            [ 4] 1924 	or	a, a
   0D99 CAr69r0D      [10] 1925 	jp	Z, 00124$
   0D9C                    1926 00126$:
                           1927 ;src\CFG8266.c:520: if (bResponse)
   0D9C 7D            [ 4] 1928 	ld	a, l
   0D9D B7            [ 4] 1929 	or	a, a
   0D9E CAr40r10      [10] 1930 	jp	Z, 00176$
                           1931 ;src\CFG8266.c:523: while(!UartRXData());
   0DA1                    1932 00127$:
   0DA1 DB 07         [11] 1933 	in	a, (_myPort7)
   0DA3 D6 01         [ 7] 1934 	sub	a,#0x01
   0DA5 3E 00         [ 7] 1935 	ld	a, #0x00
   0DA7 17            [ 4] 1936 	rla
   0DA8 CB 47         [ 8] 1937 	bit	0, a
   0DAA 20 F5         [12] 1938 	jr	NZ,00127$
                           1939 ;src\CFG8266.c:524: ucAPs = GetUARTData();
   0DAC DB 06         [11] 1940 	in	a, (_myPort6)
   0DAE DD 77 F8      [19] 1941 	ld	-8 (ix), a
                           1942 ;src\CFG8266.c:525: if (ucAPs>10)
   0DB1 3E 0A         [ 7] 1943 	ld	a, #0x0a
   0DB3 DD 96 F8      [19] 1944 	sub	a, -8 (ix)
   0DB6 30 04         [12] 1945 	jr	NC,00131$
                           1946 ;src\CFG8266.c:526: ucAPs=10;
   0DB8 DD 36 F8 0A   [19] 1947 	ld	-8 (ix), #0x0a
   0DBC                    1948 00131$:
                           1949 ;src\CFG8266.c:528: Print ("\n");
   0DBC 21r02r18      [10] 1950 	ld	hl, #___str_12
   0DBF E5            [11] 1951 	push	hl
   0DC0 CDr00r00      [17] 1952 	call	_Print
   0DC3 F1            [10] 1953 	pop	af
                           1954 ;src\CFG8266.c:529: do
   0DC4 21 51 00      [10] 1955 	ld	hl, #81
   0DC7 39            [11] 1956 	add	hl, sp
   0DC8 DD 75 F9      [19] 1957 	ld	-7 (ix), l
   0DCB DD 74 FA      [19] 1958 	ld	-6 (ix), h
   0DCE DD 36 FF 00   [19] 1959 	ld	-1 (ix), #0x00
                           1960 ;src\CFG8266.c:534: while(!UartRXData());
   0DD2                    1961 00298$:
   0DD2 DD 4E FF      [19] 1962 	ld	c, -1 (ix)
   0DD5 06 00         [ 7] 1963 	ld	b, #0x00
   0DD7 69            [ 4] 1964 	ld	l, c
   0DD8 60            [ 4] 1965 	ld	h, b
   0DD9 29            [11] 1966 	add	hl, hl
   0DDA 29            [11] 1967 	add	hl, hl
   0DDB 29            [11] 1968 	add	hl, hl
   0DDC 29            [11] 1969 	add	hl, hl
   0DDD 09            [11] 1970 	add	hl, bc
   0DDE 29            [11] 1971 	add	hl, hl
   0DDF EB            [ 4] 1972 	ex	de, hl
   0DE0 7B            [ 4] 1973 	ld	a, e
   0DE1 DD 86 F9      [19] 1974 	add	a, -7 (ix)
   0DE4 4F            [ 4] 1975 	ld	c, a
   0DE5 7A            [ 4] 1976 	ld	a, d
   0DE6 DD 8E FA      [19] 1977 	adc	a, -6 (ix)
   0DE9 47            [ 4] 1978 	ld	b, a
   0DEA 1E 00         [ 7] 1979 	ld	e, #0x00
   0DEC                    1980 00132$:
   0DEC DB 07         [11] 1981 	in	a, (_myPort7)
   0DEE D6 01         [ 7] 1982 	sub	a,#0x01
   0DF0 3E 00         [ 7] 1983 	ld	a, #0x00
   0DF2 17            [ 4] 1984 	rla
   0DF3 CB 47         [ 8] 1985 	bit	0, a
   0DF5 20 F5         [12] 1986 	jr	NZ,00132$
                           1987 ;src\CFG8266.c:535: rx_data=GetUARTData();
   0DF7 DB 06         [11] 1988 	in	a, (_myPort6)
   0DF9 DD 77 FE      [19] 1989 	ld	-2 (ix), a
                           1990 ;src\CFG8266.c:536: stAP[tx_data].APName[ucIndex++]=rx_data;
   0DFC 6B            [ 4] 1991 	ld	l, e
   0DFD 1C            [ 4] 1992 	inc	e
   0DFE 26 00         [ 7] 1993 	ld	h, #0x00
   0E00 09            [11] 1994 	add	hl, bc
   0E01 DD 7E FE      [19] 1995 	ld	a, -2 (ix)
   0E04 77            [ 7] 1996 	ld	(hl), a
                           1997 ;src\CFG8266.c:538: while(rx_data!=0);
   0E05 DD 7E FE      [19] 1998 	ld	a, -2 (ix)
   0E08 B7            [ 4] 1999 	or	a, a
   0E09 20 E1         [12] 2000 	jr	NZ,00132$
                           2001 ;src\CFG8266.c:539: while(!UartRXData());
   0E0B                    2002 00138$:
   0E0B DB 07         [11] 2003 	in	a, (_myPort7)
   0E0D D6 01         [ 7] 2004 	sub	a,#0x01
   0E0F 3E 00         [ 7] 2005 	ld	a, #0x00
   0E11 17            [ 4] 2006 	rla
   0E12 CB 47         [ 8] 2007 	bit	0, a
   0E14 20 F5         [12] 2008 	jr	NZ,00138$
                           2009 ;src\CFG8266.c:540: rx_data=GetUARTData();
   0E16 DB 06         [11] 2010 	in	a, (_myPort6)
   0E18 4F            [ 4] 2011 	ld	c, a
                           2012 ;src\CFG8266.c:541: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   0E19 DD 5E FF      [19] 2013 	ld	e, -1 (ix)
   0E1C 16 00         [ 7] 2014 	ld	d, #0x00
   0E1E 6B            [ 4] 2015 	ld	l, e
   0E1F 62            [ 4] 2016 	ld	h, d
   0E20 29            [11] 2017 	add	hl, hl
   0E21 29            [11] 2018 	add	hl, hl
   0E22 29            [11] 2019 	add	hl, hl
   0E23 29            [11] 2020 	add	hl, hl
   0E24 19            [11] 2021 	add	hl, de
   0E25 29            [11] 2022 	add	hl, hl
   0E26 EB            [ 4] 2023 	ex	de, hl
   0E27 DD 7E F9      [19] 2024 	ld	a, -7 (ix)
   0E2A 83            [ 4] 2025 	add	a, e
   0E2B 5F            [ 4] 2026 	ld	e, a
   0E2C DD 7E FA      [19] 2027 	ld	a, -6 (ix)
   0E2F 8A            [ 4] 2028 	adc	a, d
   0E30 57            [ 4] 2029 	ld	d, a
   0E31 21 21 00      [10] 2030 	ld	hl, #0x0021
   0E34 19            [11] 2031 	add	hl, de
   0E35 DD 75 FB      [19] 2032 	ld	-5 (ix), l
   0E38 DD 74 FC      [19] 2033 	ld	-4 (ix), h
   0E3B 79            [ 4] 2034 	ld	a, c
   0E3C D6 45         [ 7] 2035 	sub	a, #0x45
   0E3E 20 0A         [12] 2036 	jr	NZ,00276$
   0E40 DD 36 FD 01   [19] 2037 	ld	-3 (ix), #0x01
   0E44 DD 36 FE 00   [19] 2038 	ld	-2 (ix), #0x00
   0E48 18 08         [12] 2039 	jr	00277$
   0E4A                    2040 00276$:
   0E4A DD 36 FD 00   [19] 2041 	ld	-3 (ix), #0x00
   0E4E DD 36 FE 00   [19] 2042 	ld	-2 (ix), #0x00
   0E52                    2043 00277$:
   0E52 DD 7E FD      [19] 2044 	ld	a, -3 (ix)
   0E55 DD 6E FB      [19] 2045 	ld	l, -5 (ix)
   0E58 DD 66 FC      [19] 2046 	ld	h, -4 (ix)
   0E5B 77            [ 7] 2047 	ld	(hl), a
                           2048 ;src\CFG8266.c:542: ++tx_data;
   0E5C DD 34 FF      [23] 2049 	inc	-1 (ix)
                           2050 ;src\CFG8266.c:544: while (tx_data!=ucAPs);
   0E5F DD 7E FF      [19] 2051 	ld	a, -1 (ix)
   0E62 DD 96 F8      [19] 2052 	sub	a, -8 (ix)
   0E65 C2rD2r0D      [10] 2053 	jp	NZ,00298$
                           2054 ;src\CFG8266.c:545: ClearUartData();
   0E68 3E 14         [ 7] 2055 	ld	a, #0x14
   0E6A D3 06         [11] 2056 	out	(_myPort6), a
                           2057 ;src\CFG8266.c:546: Print("Choose AP:\n\n");
   0E6C 21r04r18      [10] 2058 	ld	hl, #___str_13
   0E6F E5            [11] 2059 	push	hl
   0E70 CDr00r00      [17] 2060 	call	_Print
   0E73 F1            [10] 2061 	pop	af
                           2062 ;src\CFG8266.c:547: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   0E74 DD 36 FF 00   [19] 2063 	ld	-1 (ix), #0x00
   0E78                    2064 00268$:
   0E78 DD 7E FF      [19] 2065 	ld	a, -1 (ix)
   0E7B DD 96 F8      [19] 2066 	sub	a, -8 (ix)
   0E7E 30 49         [12] 2067 	jr	NC,00147$
                           2068 ;src\CFG8266.c:549: printf("%u - %s",ucIndex,stAP[ucIndex].APName);
   0E80 DD 4E FF      [19] 2069 	ld	c, -1 (ix)
   0E83 06 00         [ 7] 2070 	ld	b, #0x00
   0E85 69            [ 4] 2071 	ld	l, c
   0E86 60            [ 4] 2072 	ld	h, b
   0E87 29            [11] 2073 	add	hl, hl
   0E88 29            [11] 2074 	add	hl, hl
   0E89 29            [11] 2075 	add	hl, hl
   0E8A 29            [11] 2076 	add	hl, hl
   0E8B 09            [11] 2077 	add	hl, bc
   0E8C 29            [11] 2078 	add	hl, hl
   0E8D EB            [ 4] 2079 	ex	de, hl
   0E8E DD 6E F9      [19] 2080 	ld	l, -7 (ix)
   0E91 DD 66 FA      [19] 2081 	ld	h, -6 (ix)
   0E94 19            [11] 2082 	add	hl, de
   0E95 5D            [ 4] 2083 	ld	e, l
   0E96 54            [ 4] 2084 	ld	d, h
   0E97 DD 4E FF      [19] 2085 	ld	c, -1 (ix)
   0E9A 06 00         [ 7] 2086 	ld	b, #0x00
   0E9C E5            [11] 2087 	push	hl
   0E9D D5            [11] 2088 	push	de
   0E9E C5            [11] 2089 	push	bc
   0E9F 01r11r18      [10] 2090 	ld	bc, #___str_14
   0EA2 C5            [11] 2091 	push	bc
   0EA3 CDr00r00      [17] 2092 	call	_printf
   0EA6 F1            [10] 2093 	pop	af
   0EA7 F1            [10] 2094 	pop	af
   0EA8 F1            [10] 2095 	pop	af
   0EA9 E1            [10] 2096 	pop	hl
                           2097 ;src\CFG8266.c:550: if (stAP[ucIndex].isEncrypted)
   0EAA 11 21 00      [10] 2098 	ld	de, #0x0021
   0EAD 19            [11] 2099 	add	hl, de
   0EAE 7E            [ 7] 2100 	ld	a, (hl)
   0EAF B7            [ 4] 2101 	or	a, a
   0EB0 28 0A         [12] 2102 	jr	Z,00145$
                           2103 ;src\CFG8266.c:551: printf(" (PWD)\r\n");
   0EB2 21r19r18      [10] 2104 	ld	hl, #___str_16
   0EB5 E5            [11] 2105 	push	hl
   0EB6 CDr00r00      [17] 2106 	call	_puts
   0EB9 F1            [10] 2107 	pop	af
   0EBA 18 08         [12] 2108 	jr	00269$
   0EBC                    2109 00145$:
                           2110 ;src\CFG8266.c:553: printf(" (OPEN)\r\n");
   0EBC 21r21r18      [10] 2111 	ld	hl, #___str_18
   0EBF E5            [11] 2112 	push	hl
   0EC0 CDr00r00      [17] 2113 	call	_puts
   0EC3 F1            [10] 2114 	pop	af
   0EC4                    2115 00269$:
                           2116 ;src\CFG8266.c:547: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   0EC4 DD 34 FF      [23] 2117 	inc	-1 (ix)
   0EC7 18 AF         [12] 2118 	jr	00268$
   0EC9                    2119 00147$:
                           2120 ;src\CFG8266.c:555: Print("\nWhich one to connect? (ESC exit)");
   0EC9 21r2Ar18      [10] 2121 	ld	hl, #___str_19
   0ECC E5            [11] 2122 	push	hl
   0ECD CDr00r00      [17] 2123 	call	_Print
   0ED0 F1            [10] 2124 	pop	af
                           2125 ;src\CFG8266.c:556: tx_data = 0;
   0ED1 2E 00         [ 7] 2126 	ld	l, #0x00
                           2127 ;src\CFG8266.c:557: do
   0ED3                    2128 00153$:
                           2129 ;src\CFG8266.c:559: if (KeyboardHit())
   0ED3 E5            [11] 2130 	push	hl
   0ED4 CDr00r00      [17] 2131 	call	_KeyboardHit
   0ED7 7D            [ 4] 2132 	ld	a, l
   0ED8 E1            [10] 2133 	pop	hl
   0ED9 B7            [ 4] 2134 	or	a, a
   0EDA 28 03         [12] 2135 	jr	Z,00149$
                           2136 ;src\CFG8266.c:561: tx_data = InputChar ();
   0EDC CDr00r00      [17] 2137 	call	_InputChar
   0EDF                    2138 00149$:
                           2139 ;src\CFG8266.c:563: if (tx_data==0x1b)
   0EDF 7D            [ 4] 2140 	ld	a, l
   0EE0 D6 1B         [ 7] 2141 	sub	a, #0x1b
   0EE2 20 03         [12] 2142 	jr	NZ, 00646$
   0EE4 3E 01         [ 7] 2143 	ld	a, #0x01
   0EE6 20                 2144 	.db	#0x20
   0EE7                    2145 00646$:
   0EE7 AF            [ 4] 2146 	xor	a, a
   0EE8                    2147 00647$:
   0EE8 4F            [ 4] 2148 	ld	c,a
   0EE9 B7            [ 4] 2149 	or	a, a
   0EEA 20 0A         [12] 2150 	jr	NZ,00155$
                           2151 ;src\CFG8266.c:566: while ((tx_data<'0')||(tx_data>'9'));
   0EEC 7D            [ 4] 2152 	ld	a, l
   0EED D6 30         [ 7] 2153 	sub	a, #0x30
   0EEF 38 E2         [12] 2154 	jr	C,00153$
   0EF1 3E 39         [ 7] 2155 	ld	a, #0x39
   0EF3 95            [ 4] 2156 	sub	a, l
   0EF4 38 DD         [12] 2157 	jr	C,00153$
   0EF6                    2158 00155$:
                           2159 ;src\CFG8266.c:567: if (tx_data!=0x1b)
   0EF6 CB 41         [ 8] 2160 	bit	0, c
   0EF8 C2r35r10      [10] 2161 	jp	NZ, 00173$
                           2162 ;src\CFG8266.c:569: ucIndex = tx_data-'0';
   0EFB 7D            [ 4] 2163 	ld	a, l
   0EFC C6 D0         [ 7] 2164 	add	a, #0xd0
                           2165 ;src\CFG8266.c:570: if (stAP[ucIndex].isEncrypted)
   0EFE 4F            [ 4] 2166 	ld	c, a
   0EFF 06 00         [ 7] 2167 	ld	b, #0x00
   0F01 69            [ 4] 2168 	ld	l, c
   0F02 60            [ 4] 2169 	ld	h, b
   0F03 29            [11] 2170 	add	hl, hl
   0F04 29            [11] 2171 	add	hl, hl
   0F05 29            [11] 2172 	add	hl, hl
   0F06 29            [11] 2173 	add	hl, hl
   0F07 09            [11] 2174 	add	hl, bc
   0F08 29            [11] 2175 	add	hl, hl
   0F09 DD 75 FE      [19] 2176 	ld	-2 (ix), l
   0F0C DD 74 FF      [19] 2177 	ld	-1 (ix), h
   0F0F DD 7E F9      [19] 2178 	ld	a, -7 (ix)
   0F12 DD 86 FE      [19] 2179 	add	a, -2 (ix)
   0F15 4F            [ 4] 2180 	ld	c, a
   0F16 DD 7E FA      [19] 2181 	ld	a, -6 (ix)
   0F19 DD 8E FF      [19] 2182 	adc	a, -1 (ix)
   0F1C 47            [ 4] 2183 	ld	b, a
   0F1D 21 21 00      [10] 2184 	ld	hl, #0x0021
   0F20 09            [11] 2185 	add	hl, bc
   0F21 EB            [ 4] 2186 	ex	de, hl
   0F22 1A            [ 7] 2187 	ld	a, (de)
   0F23 B7            [ 4] 2188 	or	a, a
   0F24 28 28         [12] 2189 	jr	Z,00157$
                           2190 ;src\CFG8266.c:573: Print("\nPassword? ");
   0F26 C5            [11] 2191 	push	bc
   0F27 D5            [11] 2192 	push	de
   0F28 21r4Cr18      [10] 2193 	ld	hl, #___str_20
   0F2B E5            [11] 2194 	push	hl
   0F2C CDr00r00      [17] 2195 	call	_Print
   0F2F F1            [10] 2196 	pop	af
   0F30 D1            [10] 2197 	pop	de
   0F31 C1            [10] 2198 	pop	bc
                           2199 ;src\CFG8266.c:574: InputString(ucPWD,64);
   0F32 FD 21 10 00   [14] 2200 	ld	iy,#16
   0F36 FD 39         [15] 2201 	add	iy,sp
   0F38 C5            [11] 2202 	push	bc
   0F39 D5            [11] 2203 	push	de
   0F3A 21 40 00      [10] 2204 	ld	hl, #0x0040
   0F3D E5            [11] 2205 	push	hl
   0F3E FD E5         [15] 2206 	push	iy
   0F40 CDr00r00      [17] 2207 	call	_InputString
   0F43 F1            [10] 2208 	pop	af
   0F44 21r02r18      [10] 2209 	ld	hl, #___str_12
   0F47 E3            [19] 2210 	ex	(sp),hl
   0F48 CDr00r00      [17] 2211 	call	_Print
   0F4B F1            [10] 2212 	pop	af
   0F4C D1            [10] 2213 	pop	de
   0F4D C1            [10] 2214 	pop	bc
   0F4E                    2215 00157$:
                           2216 ;src\CFG8266.c:577: uiCMDLen = strlen(stAP[ucIndex].APName) + 1;
   0F4E C5            [11] 2217 	push	bc
   0F4F CDr00r00      [17] 2218 	call	_strlen
   0F52 F1            [10] 2219 	pop	af
   0F53 23            [ 6] 2220 	inc	hl
   0F54 45            [ 4] 2221 	ld	b, l
   0F55 4C            [ 4] 2222 	ld	c, h
                           2223 ;src\CFG8266.c:578: if (stAP[ucIndex].isEncrypted)
   0F56 1A            [ 7] 2224 	ld	a, (de)
   0F57 B7            [ 4] 2225 	or	a, a
   0F58 28 11         [12] 2226 	jr	Z,00159$
                           2227 ;src\CFG8266.c:579: uiCMDLen += strlen(ucPWD);
   0F5A 21 10 00      [10] 2228 	ld	hl, #16
   0F5D 39            [11] 2229 	add	hl, sp
   0F5E C5            [11] 2230 	push	bc
   0F5F E5            [11] 2231 	push	hl
   0F60 CDr00r00      [17] 2232 	call	_strlen
   0F63 F1            [10] 2233 	pop	af
   0F64 C1            [10] 2234 	pop	bc
   0F65 78            [ 4] 2235 	ld	a, b
   0F66 85            [ 4] 2236 	add	a, l
   0F67 47            [ 4] 2237 	ld	b, a
   0F68 79            [ 4] 2238 	ld	a, c
   0F69 8C            [ 4] 2239 	adc	a, h
   0F6A 4F            [ 4] 2240 	ld	c, a
   0F6B                    2241 00159$:
                           2242 ;src\CFG8266.c:580: TxByte('A'); //Request connect AP
   0F6B C5            [11] 2243 	push	bc
   0F6C 3E 41         [ 7] 2244 	ld	a, #0x41
   0F6E F5            [11] 2245 	push	af
   0F6F 33            [ 6] 2246 	inc	sp
   0F70 CDrE8r05      [17] 2247 	call	_TxByte
   0F73 33            [ 6] 2248 	inc	sp
   0F74 C1            [10] 2249 	pop	bc
                           2250 ;src\CFG8266.c:581: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   0F75 51            [ 4] 2251 	ld	d, c
   0F76 1E 00         [ 7] 2252 	ld	e, #0x00
   0F78 C5            [11] 2253 	push	bc
   0F79 D5            [11] 2254 	push	de
   0F7A 33            [ 6] 2255 	inc	sp
   0F7B CDrE8r05      [17] 2256 	call	_TxByte
   0F7E 33            [ 6] 2257 	inc	sp
   0F7F C1            [10] 2258 	pop	bc
                           2259 ;src\CFG8266.c:582: TxByte((unsigned char)(uiCMDLen&0xff));
   0F80 78            [ 4] 2260 	ld	a, b
   0F81 C5            [11] 2261 	push	bc
   0F82 F5            [11] 2262 	push	af
   0F83 33            [ 6] 2263 	inc	sp
   0F84 CDrE8r05      [17] 2264 	call	_TxByte
   0F87 33            [ 6] 2265 	inc	sp
   0F88 C1            [10] 2266 	pop	bc
                           2267 ;src\CFG8266.c:584: do
   0F89 DD 7E F9      [19] 2268 	ld	a, -7 (ix)
   0F8C DD 86 FE      [19] 2269 	add	a, -2 (ix)
   0F8F 5F            [ 4] 2270 	ld	e, a
   0F90 DD 7E FA      [19] 2271 	ld	a, -6 (ix)
   0F93 DD 8E FF      [19] 2272 	adc	a, -1 (ix)
   0F96 57            [ 4] 2273 	ld	d, a
   0F97 DD 36 FF 00   [19] 2274 	ld	-1 (ix), #0x00
   0F9B                    2275 00161$:
                           2276 ;src\CFG8266.c:586: tx_data = stAP[ucIndex].APName[rx_data];
   0F9B 7B            [ 4] 2277 	ld	a, e
   0F9C DD 86 FF      [19] 2278 	add	a, -1 (ix)
   0F9F DD 77 FD      [19] 2279 	ld	-3 (ix), a
   0FA2 7A            [ 4] 2280 	ld	a, d
   0FA3 CE 00         [ 7] 2281 	adc	a, #0x00
   0FA5 DD 77 FE      [19] 2282 	ld	-2 (ix), a
   0FA8 DD 6E FD      [19] 2283 	ld	l, -3 (ix)
   0FAB DD 66 FE      [19] 2284 	ld	h, -2 (ix)
   0FAE 7E            [ 7] 2285 	ld	a, (hl)
   0FAF DD 77 FE      [19] 2286 	ld	-2 (ix), a
                           2287 ;src\CFG8266.c:587: TxByte(tx_data);
   0FB2 C5            [11] 2288 	push	bc
   0FB3 D5            [11] 2289 	push	de
   0FB4 DD 7E FE      [19] 2290 	ld	a, -2 (ix)
   0FB7 F5            [11] 2291 	push	af
   0FB8 33            [ 6] 2292 	inc	sp
   0FB9 CDrE8r05      [17] 2293 	call	_TxByte
   0FBC 33            [ 6] 2294 	inc	sp
   0FBD D1            [10] 2295 	pop	de
   0FBE C1            [10] 2296 	pop	bc
                           2297 ;src\CFG8266.c:588: --uiCMDLen;
   0FBF 68            [ 4] 2298 	ld	l, b
   0FC0 61            [ 4] 2299 	ld	h, c
   0FC1 2B            [ 6] 2300 	dec	hl
   0FC2 45            [ 4] 2301 	ld	b, l
   0FC3 4C            [ 4] 2302 	ld	c, h
                           2303 ;src\CFG8266.c:589: ++rx_data;
   0FC4 DD 34 FF      [23] 2304 	inc	-1 (ix)
                           2305 ;src\CFG8266.c:591: while((uiCMDLen)&&(tx_data!=0));
   0FC7 79            [ 4] 2306 	ld	a, c
   0FC8 B0            [ 4] 2307 	or	a, b
   0FC9 28 06         [12] 2308 	jr	Z,00163$
   0FCB DD 7E FE      [19] 2309 	ld	a, -2 (ix)
   0FCE B7            [ 4] 2310 	or	a, a
   0FCF 20 CA         [12] 2311 	jr	NZ,00161$
   0FD1                    2312 00163$:
                           2313 ;src\CFG8266.c:592: if(uiCMDLen)
   0FD1 79            [ 4] 2314 	ld	a, c
   0FD2 B0            [ 4] 2315 	or	a, b
   0FD3 28 2F         [12] 2316 	jr	Z,00168$
                           2317 ;src\CFG8266.c:595: do
   0FD5 21 10 00      [10] 2318 	ld	hl, #16
   0FD8 39            [11] 2319 	add	hl, sp
   0FD9 DD 75 FD      [19] 2320 	ld	-3 (ix), l
   0FDC DD 74 FE      [19] 2321 	ld	-2 (ix), h
   0FDF 79            [ 4] 2322 	ld	a, c
   0FE0 48            [ 4] 2323 	ld	c, b
   0FE1 47            [ 4] 2324 	ld	b, a
   0FE2 DD 36 FF 00   [19] 2325 	ld	-1 (ix), #0x00
   0FE6                    2326 00164$:
                           2327 ;src\CFG8266.c:597: tx_data = ucPWD[rx_data];
   0FE6 DD 7E FD      [19] 2328 	ld	a, -3 (ix)
   0FE9 DD 86 FF      [19] 2329 	add	a, -1 (ix)
   0FEC 5F            [ 4] 2330 	ld	e, a
   0FED DD 7E FE      [19] 2331 	ld	a, -2 (ix)
   0FF0 CE 00         [ 7] 2332 	adc	a, #0x00
   0FF2 57            [ 4] 2333 	ld	d, a
   0FF3 1A            [ 7] 2334 	ld	a, (de)
                           2335 ;src\CFG8266.c:598: TxByte(tx_data);
   0FF4 C5            [11] 2336 	push	bc
   0FF5 F5            [11] 2337 	push	af
   0FF6 33            [ 6] 2338 	inc	sp
   0FF7 CDrE8r05      [17] 2339 	call	_TxByte
   0FFA 33            [ 6] 2340 	inc	sp
   0FFB C1            [10] 2341 	pop	bc
                           2342 ;src\CFG8266.c:599: --uiCMDLen;
   0FFC 0B            [ 6] 2343 	dec	bc
                           2344 ;src\CFG8266.c:600: ++rx_data;
   0FFD DD 34 FF      [23] 2345 	inc	-1 (ix)
                           2346 ;src\CFG8266.c:602: while(uiCMDLen);
   1000 78            [ 4] 2347 	ld	a, b
   1001 B1            [ 4] 2348 	or	a, c
   1002 20 E2         [12] 2349 	jr	NZ,00164$
   1004                    2350 00168$:
                           2351 ;src\CFG8266.c:606: bResponse = WaitForRXData(apconfigurationResponse,2,300,true); //Wait up to 5s
   1004 3E 01         [ 7] 2352 	ld	a, #0x01
   1006 F5            [11] 2353 	push	af
   1007 33            [ 6] 2354 	inc	sp
   1008 21 2C 01      [10] 2355 	ld	hl, #0x012c
   100B E5            [11] 2356 	push	hl
   100C 21 02 00      [10] 2357 	ld	hl, #0x0002
   100F E5            [11] 2358 	push	hl
   1010 21r9Cr01      [10] 2359 	ld	hl, #_apconfigurationResponse
   1013 E5            [11] 2360 	push	hl
   1014 CDrAAr07      [17] 2361 	call	_WaitForRXData
   1017 F1            [10] 2362 	pop	af
   1018 F1            [10] 2363 	pop	af
   1019 F1            [10] 2364 	pop	af
   101A 33            [ 6] 2365 	inc	sp
   101B 7D            [ 4] 2366 	ld	a, l
                           2367 ;src\CFG8266.c:607: if (bResponse)
   101C B7            [ 4] 2368 	or	a, a
   101D 28 0B         [12] 2369 	jr	Z,00170$
                           2370 ;src\CFG8266.c:608: Print ("Success, AP configured to be used.\n");
   101F 21r58r18      [10] 2371 	ld	hl, #___str_21
   1022 E5            [11] 2372 	push	hl
   1023 CDr00r00      [17] 2373 	call	_Print
   1026 F1            [10] 2374 	pop	af
   1027 C3r7Er17      [10] 2375 	jp	00264$
   102A                    2376 00170$:
                           2377 ;src\CFG8266.c:610: Print ("Error, AP not configured!\n");
   102A 21r7Cr18      [10] 2378 	ld	hl, #___str_22
   102D E5            [11] 2379 	push	hl
   102E CDr00r00      [17] 2380 	call	_Print
   1031 F1            [10] 2381 	pop	af
   1032 C3r7Er17      [10] 2382 	jp	00264$
   1035                    2383 00173$:
                           2384 ;src\CFG8266.c:613: Print("User canceled by ESC key...\n");
   1035 21r97r18      [10] 2385 	ld	hl, #___str_23
   1038 E5            [11] 2386 	push	hl
   1039 CDr00r00      [17] 2387 	call	_Print
   103C F1            [10] 2388 	pop	af
   103D C3r7Er17      [10] 2389 	jp	00264$
   1040                    2390 00176$:
                           2391 ;src\CFG8266.c:616: Print ("Scan results: no answer...\n");
   1040 21rB4r18      [10] 2392 	ld	hl, #___str_24
   1043 E5            [11] 2393 	push	hl
   1044 CDr00r00      [17] 2394 	call	_Print
   1047 F1            [10] 2395 	pop	af
   1048 C3r7Er17      [10] 2396 	jp	00264$
   104B                    2397 00187$:
                           2398 ;src\CFG8266.c:620: if (ucScan)
   104B 3Ar00r00      [13] 2399 	ld	a,(#_ucScan + 0)
   104E B7            [ 4] 2400 	or	a, a
   104F 28 0B         [12] 2401 	jr	Z,00184$
                           2402 ;src\CFG8266.c:621: Print ("Scan request: no answer...\n");
   1051 21rD0r18      [10] 2403 	ld	hl, #___str_25
   1054 E5            [11] 2404 	push	hl
   1055 CDr00r00      [17] 2405 	call	_Print
   1058 F1            [10] 2406 	pop	af
   1059 C3r7Er17      [10] 2407 	jp	00264$
   105C                    2408 00184$:
                           2409 ;src\CFG8266.c:622: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   105C 3Ar0Fr02      [13] 2410 	ld	a,(#_ucNagleOff + 0)
   105F B7            [ 4] 2411 	or	a, a
   1060 20 06         [12] 2412 	jr	NZ,00182$
   1062 3Ar10r02      [13] 2413 	ld	a,(#_ucNagleOn + 0)
   1065 B7            [ 4] 2414 	or	a, a
   1066 28 14         [12] 2415 	jr	Z,00179$
   1068                    2416 00182$:
   1068 DD 7E FD      [19] 2417 	ld	a, -3 (ix)
   106B B7            [ 4] 2418 	or	a, a
   106C 28 0E         [12] 2419 	jr	Z,00179$
                           2420 ;src\CFG8266.c:624: Print ("Nagle set as requested...\n");
   106E 21rECr18      [10] 2421 	ld	hl, #___str_26
   1071 E5            [11] 2422 	push	hl
   1072 CDr00r00      [17] 2423 	call	_Print
   1075 F1            [10] 2424 	pop	af
                           2425 ;src\CFG8266.c:625: return 0;
   1076 21 00 00      [10] 2426 	ld	hl, #0x0000
   1079 C3r81r17      [10] 2427 	jp	00272$
   107C                    2428 00179$:
                           2429 ;src\CFG8266.c:629: Print ("Nagle not set as requested, error!\n");
   107C 21r07r19      [10] 2430 	ld	hl, #___str_27
   107F E5            [11] 2431 	push	hl
   1080 CDr00r00      [17] 2432 	call	_Print
   1083 F1            [10] 2433 	pop	af
                           2434 ;src\CFG8266.c:630: return 0;
   1084 21 00 00      [10] 2435 	ld	hl, #0x0000
   1087 C3r81r17      [10] 2436 	jp	00272$
   108A                    2437 00255$:
                           2438 ;src\CFG8266.c:634: else if (ucLocalUpdate)
   108A 3Ar0Dr02      [13] 2439 	ld	a,(#_ucLocalUpdate + 0)
   108D B7            [ 4] 2440 	or	a, a
   108E CAr37r16      [10] 2441 	jp	Z, 00252$
                           2442 ;src\CFG8266.c:637: iFile = Open (ucFile,O_RDONLY);
   1091 21 00 00      [10] 2443 	ld	hl, #0x0000
   1094 E5            [11] 2444 	push	hl
   1095 21r01r01      [10] 2445 	ld	hl, #_ucFile
   1098 E5            [11] 2446 	push	hl
   1099 CDr00r00      [17] 2447 	call	_Open
   109C F1            [10] 2448 	pop	af
   109D F1            [10] 2449 	pop	af
   109E DD 75 FE      [19] 2450 	ld	-2 (ix), l
   10A1 DD 74 FF      [19] 2451 	ld	-1 (ix), h
                           2452 ;src\CFG8266.c:639: if (iFile!=-1)
   10A4 DD 7E FE      [19] 2453 	ld	a, -2 (ix)
   10A7 3C            [ 4] 2454 	inc	a
   10A8 20 07         [12] 2455 	jr	NZ,00648$
   10AA DD 7E FF      [19] 2456 	ld	a, -1 (ix)
   10AD 3C            [ 4] 2457 	inc	a
   10AE CAr24r16      [10] 2458 	jp	Z,00225$
   10B1                    2459 00648$:
                           2460 ;src\CFG8266.c:646: regs.Words.HL = 0; //set pointer as 0
   10B1 21 A9 01      [10] 2461 	ld	hl, #425
   10B4 39            [11] 2462 	add	hl, sp
   10B5 EB            [ 4] 2463 	ex	de, hl
   10B6 21 06 00      [10] 2464 	ld	hl, #0x0006
   10B9 19            [11] 2465 	add	hl, de
   10BA AF            [ 4] 2466 	xor	a, a
   10BB 77            [ 7] 2467 	ld	(hl), a
   10BC 23            [ 6] 2468 	inc	hl
   10BD 77            [ 7] 2469 	ld	(hl), a
                           2470 ;src\CFG8266.c:647: regs.Words.DE = 0; //so it will return the position
   10BE 21 04 00      [10] 2471 	ld	hl, #0x0004
   10C1 19            [11] 2472 	add	hl, de
   10C2 AF            [ 4] 2473 	xor	a, a
   10C3 77            [ 7] 2474 	ld	(hl), a
   10C4 23            [ 6] 2475 	inc	hl
   10C5 77            [ 7] 2476 	ld	(hl), a
                           2477 ;src\CFG8266.c:648: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   10C6 21 A9 01      [10] 2478 	ld	hl, #425
   10C9 39            [11] 2479 	add	hl, sp
   10CA EB            [ 4] 2480 	ex	de, hl
   10CB 6B            [ 4] 2481 	ld	l, e
   10CC 62            [ 4] 2482 	ld	h, d
   10CD 23            [ 6] 2483 	inc	hl
   10CE 36 02         [10] 2484 	ld	(hl), #0x02
                           2485 ;src\CFG8266.c:649: regs.Bytes.B = (unsigned char)(iFile&0xff);
   10D0 13            [ 6] 2486 	inc	de
   10D1 13            [ 6] 2487 	inc	de
   10D2 13            [ 6] 2488 	inc	de
   10D3 DD 7E FE      [19] 2489 	ld	a, -2 (ix)
   10D6 12            [ 7] 2490 	ld	(de), a
                           2491 ;src\CFG8266.c:650: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   10D7 21 A9 01      [10] 2492 	ld	hl, #425
   10DA 39            [11] 2493 	add	hl, sp
   10DB DD 75 FC      [19] 2494 	ld	-4 (ix), l
   10DE DD 74 FD      [19] 2495 	ld	-3 (ix), h
   10E1 4D            [ 4] 2496 	ld	c, l
   10E2 44            [ 4] 2497 	ld	b, h
   10E3 11 03 03      [10] 2498 	ld	de, #0x0303
   10E6 D5            [11] 2499 	push	de
   10E7 C5            [11] 2500 	push	bc
   10E8 3E 4A         [ 7] 2501 	ld	a, #0x4a
   10EA F5            [11] 2502 	push	af
   10EB 33            [ 6] 2503 	inc	sp
   10EC CDr00r00      [17] 2504 	call	_DosCall
   10EF F1            [10] 2505 	pop	af
   10F0 F1            [10] 2506 	pop	af
   10F1 33            [ 6] 2507 	inc	sp
                           2508 ;src\CFG8266.c:651: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   10F2 DD 6E FC      [19] 2509 	ld	l, -4 (ix)
   10F5 DD 66 FD      [19] 2510 	ld	h, -3 (ix)
   10F8 23            [ 6] 2511 	inc	hl
   10F9 7E            [ 7] 2512 	ld	a, (hl)
   10FA DD 77 FB      [19] 2513 	ld	-5 (ix), a
   10FD B7            [ 4] 2514 	or	a, a
   10FE C2rAEr11      [10] 2515 	jp	NZ, 00191$
                           2516 ;src\CFG8266.c:652: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   1101 DD 7E FC      [19] 2517 	ld	a, -4 (ix)
   1104 DD 77 FA      [19] 2518 	ld	-6 (ix), a
   1107 DD 7E FD      [19] 2519 	ld	a, -3 (ix)
   110A DD 77 FB      [19] 2520 	ld	-5 (ix), a
   110D DD 6E FA      [19] 2521 	ld	l, -6 (ix)
   1110 DD 66 FB      [19] 2522 	ld	h, -5 (ix)
   1113 11 06 00      [10] 2523 	ld	de, #0x0006
   1116 19            [11] 2524 	add	hl, de
   1117 7E            [ 7] 2525 	ld	a, (hl)
   1118 DD 77 FA      [19] 2526 	ld	-6 (ix), a
   111B 23            [ 6] 2527 	inc	hl
   111C 7E            [ 7] 2528 	ld	a, (hl)
   111D DD 77 FB      [19] 2529 	ld	-5 (ix), a
   1120 DD 7E FA      [19] 2530 	ld	a, -6 (ix)
   1123 DD 77 F2      [19] 2531 	ld	-14 (ix), a
   1126 DD 7E FB      [19] 2532 	ld	a, -5 (ix)
   1129 DD 77 F3      [19] 2533 	ld	-13 (ix), a
   112C 17            [ 4] 2534 	rla
   112D 9F            [ 4] 2535 	sbc	a, a
   112E DD 77 F4      [19] 2536 	ld	-12 (ix), a
   1131 DD 77 F5      [19] 2537 	ld	-11 (ix), a
   1134 DD 7E F2      [19] 2538 	ld	a, -14 (ix)
   1137 DD 77 F6      [19] 2539 	ld	-10 (ix), a
   113A DD 7E F3      [19] 2540 	ld	a, -13 (ix)
   113D DD 77 F7      [19] 2541 	ld	-9 (ix), a
   1140 DD 36 F8 00   [19] 2542 	ld	-8 (ix), #0x00
   1144 DD 36 F9 00   [19] 2543 	ld	-7 (ix), #0x00
   1148 DD 6E FC      [19] 2544 	ld	l, -4 (ix)
   114B DD 66 FD      [19] 2545 	ld	h, -3 (ix)
   114E 11 04 00      [10] 2546 	ld	de, #0x0004
   1151 19            [11] 2547 	add	hl, de
   1152 7E            [ 7] 2548 	ld	a, (hl)
   1153 DD 77 FC      [19] 2549 	ld	-4 (ix), a
   1156 23            [ 6] 2550 	inc	hl
   1157 7E            [ 7] 2551 	ld	a, (hl)
   1158 DD 77 FD      [19] 2552 	ld	-3 (ix), a
   115B DD 7E FC      [19] 2553 	ld	a, -4 (ix)
   115E DD 77 FA      [19] 2554 	ld	-6 (ix), a
   1161 DD 7E FD      [19] 2555 	ld	a, -3 (ix)
   1164 DD 77 FB      [19] 2556 	ld	-5 (ix), a
   1167 17            [ 4] 2557 	rla
   1168 9F            [ 4] 2558 	sbc	a, a
   1169 DD 77 FC      [19] 2559 	ld	-4 (ix), a
   116C DD 77 FD      [19] 2560 	ld	-3 (ix), a
   116F 06 10         [ 7] 2561 	ld	b, #0x10
   1171                    2562 00649$:
   1171 DD CB FA 26   [23] 2563 	sla	-6 (ix)
   1175 DD CB FB 16   [23] 2564 	rl	-5 (ix)
   1179 DD CB FC 16   [23] 2565 	rl	-4 (ix)
   117D DD CB FD 16   [23] 2566 	rl	-3 (ix)
   1181 10 EE         [13] 2567 	djnz	00649$
   1183 01 00 00      [10] 2568 	ld	bc, #0x0000
   1186 DD 5E FC      [19] 2569 	ld	e, -4 (ix)
   1189 DD 56 FD      [19] 2570 	ld	d, -3 (ix)
   118C 79            [ 4] 2571 	ld	a, c
   118D DD B6 F6      [19] 2572 	or	a, -10 (ix)
   1190 4F            [ 4] 2573 	ld	c, a
   1191 78            [ 4] 2574 	ld	a, b
   1192 DD B6 F7      [19] 2575 	or	a, -9 (ix)
   1195 47            [ 4] 2576 	ld	b, a
   1196 7B            [ 4] 2577 	ld	a, e
   1197 DD B6 F8      [19] 2578 	or	a, -8 (ix)
   119A 5F            [ 4] 2579 	ld	e, a
   119B 7A            [ 4] 2580 	ld	a, d
   119C DD B6 F9      [19] 2581 	or	a, -7 (ix)
   119F 57            [ 4] 2582 	ld	d, a
   11A0 DD 71 FA      [19] 2583 	ld	-6 (ix), c
   11A3 DD 70 FB      [19] 2584 	ld	-5 (ix), b
   11A6 DD 73 FC      [19] 2585 	ld	-4 (ix), e
   11A9 DD 72 FD      [19] 2586 	ld	-3 (ix), d
   11AC 18 0D         [12] 2587 	jr	00192$
   11AE                    2588 00191$:
                           2589 ;src\CFG8266.c:654: SentFileSize = 0;
   11AE AF            [ 4] 2590 	xor	a, a
   11AF DD 77 FA      [19] 2591 	ld	-6 (ix), a
   11B2 DD 77 FB      [19] 2592 	ld	-5 (ix), a
   11B5 DD 77 FC      [19] 2593 	ld	-4 (ix), a
   11B8 DD 77 FD      [19] 2594 	ld	-3 (ix), a
   11BB                    2595 00192$:
                           2596 ;src\CFG8266.c:656: ultostr(SentFileSize,chFileSize,10);
   11BB 21 B5 01      [10] 2597 	ld	hl, #437
   11BE 39            [11] 2598 	add	hl, sp
   11BF 4D            [ 4] 2599 	ld	c, l
   11C0 44            [ 4] 2600 	ld	b, h
   11C1 E5            [11] 2601 	push	hl
   11C2 11 0A 00      [10] 2602 	ld	de, #0x000a
   11C5 D5            [11] 2603 	push	de
   11C6 C5            [11] 2604 	push	bc
   11C7 DD 6E FC      [19] 2605 	ld	l, -4 (ix)
   11CA DD 66 FD      [19] 2606 	ld	h, -3 (ix)
   11CD E5            [11] 2607 	push	hl
   11CE DD 6E FA      [19] 2608 	ld	l, -6 (ix)
   11D1 DD 66 FB      [19] 2609 	ld	h, -5 (ix)
   11D4 E5            [11] 2610 	push	hl
   11D5 CDrF6r05      [17] 2611 	call	_ultostr
   11D8 F1            [10] 2612 	pop	af
   11D9 F1            [10] 2613 	pop	af
   11DA F1            [10] 2614 	pop	af
   11DB F1            [10] 2615 	pop	af
   11DC DD 4E FE      [19] 2616 	ld	c, -2 (ix)
   11DF DD 46 FF      [19] 2617 	ld	b, -1 (ix)
   11E2 C5            [11] 2618 	push	bc
   11E3 CDr00r00      [17] 2619 	call	_Close
   11E6 F1            [10] 2620 	pop	af
   11E7 E1            [10] 2621 	pop	hl
                           2622 ;src\CFG8266.c:658: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   11E8 11r01r01      [10] 2623 	ld	de, #_ucFile
   11EB 01r2Br19      [10] 2624 	ld	bc, #___str_28+0
   11EE E5            [11] 2625 	push	hl
   11EF D5            [11] 2626 	push	de
   11F0 C5            [11] 2627 	push	bc
   11F1 CDr00r00      [17] 2628 	call	_printf
   11F4 F1            [10] 2629 	pop	af
   11F5 F1            [10] 2630 	pop	af
   11F6 F1            [10] 2631 	pop	af
                           2632 ;src\CFG8266.c:659: if (SentFileSize)
   11F7 DD 7E FD      [19] 2633 	ld	a, -3 (ix)
   11FA DD B6 FC      [19] 2634 	or	a, -4 (ix)
   11FD DD B6 FB      [19] 2635 	or	a, -5 (ix)
   1200 DD B6 FA      [19] 2636 	or	a, -6 (ix)
   1203 CAr11r16      [10] 2637 	jp	Z, 00222$
                           2638 ;src\CFG8266.c:661: iFile = Open (ucFile,O_RDONLY);
   1206 21 00 00      [10] 2639 	ld	hl, #0x0000
   1209 E5            [11] 2640 	push	hl
   120A 21r01r01      [10] 2641 	ld	hl, #_ucFile
   120D E5            [11] 2642 	push	hl
   120E CDr00r00      [17] 2643 	call	_Open
   1211 F1            [10] 2644 	pop	af
   1212 F1            [10] 2645 	pop	af
   1213 DD 75 F1      [19] 2646 	ld	-15 (ix), l
   1216 DD 74 F2      [19] 2647 	ld	-14 (ix), h
                           2648 ;src\CFG8266.c:662: if (iFile!=-1)
   1219 DD 7E F1      [19] 2649 	ld	a, -15 (ix)
   121C 3C            [ 4] 2650 	inc	a
   121D 20 07         [12] 2651 	jr	NZ,00651$
   121F DD 7E F2      [19] 2652 	ld	a, -14 (ix)
   1222 3C            [ 4] 2653 	inc	a
   1223 CArFEr15      [10] 2654 	jp	Z,00219$
   1226                    2655 00651$:
                           2656 ;src\CFG8266.c:664: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1226 21 00 01      [10] 2657 	ld	hl, #0x0100
   1229 E5            [11] 2658 	push	hl
   122A 21r01r00      [10] 2659 	ld	hl, #_ucServer
   122D E5            [11] 2660 	push	hl
   122E DD 6E F1      [19] 2661 	ld	l, -15 (ix)
   1231 DD 66 F2      [19] 2662 	ld	h, -14 (ix)
   1234 E5            [11] 2663 	push	hl
   1235 CDr17r01      [17] 2664 	call	_MyRead
   1238 F1            [10] 2665 	pop	af
   1239 F1            [10] 2666 	pop	af
   123A F1            [10] 2667 	pop	af
   123B DD 75 F3      [19] 2668 	ld	-13 (ix), l
   123E DD 74 F4      [19] 2669 	ld	-12 (ix), h
                           2670 ;src\CFG8266.c:665: if (FileRead == 256)
   1241 DD 7E F3      [19] 2671 	ld	a, -13 (ix)
   1244 B7            [ 4] 2672 	or	a, a
   1245 C2rE8r15      [10] 2673 	jp	NZ,00216$
   1248 DD 7E F4      [19] 2674 	ld	a, -12 (ix)
   124B 3D            [ 4] 2675 	dec	a
   124C C2rE8r15      [10] 2676 	jp	NZ,00216$
                           2677 ;src\CFG8266.c:668: if (ucIsFw)
   124F 3Ar0Er02      [13] 2678 	ld	a,(#_ucIsFw + 0)
   1252 B7            [ 4] 2679 	or	a, a
   1253 28 0A         [12] 2680 	jr	Z,00194$
                           2681 ;src\CFG8266.c:669: TxByte('Z'); //Request start of RS232 update
   1255 3E 5A         [ 7] 2682 	ld	a, #0x5a
   1257 F5            [11] 2683 	push	af
   1258 33            [ 6] 2684 	inc	sp
   1259 CDrE8r05      [17] 2685 	call	_TxByte
   125C 33            [ 6] 2686 	inc	sp
   125D 18 08         [12] 2687 	jr	00195$
   125F                    2688 00194$:
                           2689 ;src\CFG8266.c:671: TxByte('Y'); //Request start of RS232 cert update
   125F 3E 59         [ 7] 2690 	ld	a, #0x59
   1261 F5            [11] 2691 	push	af
   1262 33            [ 6] 2692 	inc	sp
   1263 CDrE8r05      [17] 2693 	call	_TxByte
   1266 33            [ 6] 2694 	inc	sp
   1267                    2695 00195$:
                           2696 ;src\CFG8266.c:672: TxByte(0);
   1267 AF            [ 4] 2697 	xor	a, a
   1268 F5            [11] 2698 	push	af
   1269 33            [ 6] 2699 	inc	sp
   126A CDrE8r05      [17] 2700 	call	_TxByte
   126D 33            [ 6] 2701 	inc	sp
                           2702 ;src\CFG8266.c:673: TxByte(12);
   126E 3E 0C         [ 7] 2703 	ld	a, #0x0c
   1270 F5            [11] 2704 	push	af
   1271 33            [ 6] 2705 	inc	sp
   1272 CDrE8r05      [17] 2706 	call	_TxByte
   1275 33            [ 6] 2707 	inc	sp
                           2708 ;src\CFG8266.c:674: TxByte((unsigned char)(SentFileSize&0xff));
   1276 DD 7E FA      [19] 2709 	ld	a, -6 (ix)
   1279 F5            [11] 2710 	push	af
   127A 33            [ 6] 2711 	inc	sp
   127B CDrE8r05      [17] 2712 	call	_TxByte
   127E 33            [ 6] 2713 	inc	sp
                           2714 ;src\CFG8266.c:675: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   127F DD 46 FB      [19] 2715 	ld	b, -5 (ix)
   1282 0E 00         [ 7] 2716 	ld	c, #0x00
   1284 C5            [11] 2717 	push	bc
   1285 33            [ 6] 2718 	inc	sp
   1286 CDrE8r05      [17] 2719 	call	_TxByte
   1289 33            [ 6] 2720 	inc	sp
                           2721 ;src\CFG8266.c:676: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   128A DD 7E FC      [19] 2722 	ld	a, -4 (ix)
   128D F5            [11] 2723 	push	af
   128E 33            [ 6] 2724 	inc	sp
   128F CDrE8r05      [17] 2725 	call	_TxByte
   1292 33            [ 6] 2726 	inc	sp
                           2727 ;src\CFG8266.c:677: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   1293 DD 7E FD      [19] 2728 	ld	a, -3 (ix)
   1296 F5            [11] 2729 	push	af
   1297 33            [ 6] 2730 	inc	sp
   1298 CDrE8r05      [17] 2731 	call	_TxByte
   129B 33            [ 6] 2732 	inc	sp
                           2733 ;src\CFG8266.c:678: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   129C DD 7E FA      [19] 2734 	ld	a, -6 (ix)
   129F FD 21 00 00   [14] 2735 	ld	iy, #0
   12A3 FD 39         [15] 2736 	add	iy, sp
   12A5 FD 77 00      [19] 2737 	ld	0 (iy), a
   12A8 DD 7E FB      [19] 2738 	ld	a, -5 (ix)
   12AB FD 77 01      [19] 2739 	ld	1 (iy), a
   12AE DD 7E FC      [19] 2740 	ld	a, -4 (ix)
   12B1 FD 77 02      [19] 2741 	ld	2 (iy), a
   12B4 DD 7E FD      [19] 2742 	ld	a, -3 (ix)
   12B7 FD 77 03      [19] 2743 	ld	3 (iy), a
   12BA FD 36 04 00   [19] 2744 	ld	4 (iy), #0x00
   12BE FD 36 05 00   [19] 2745 	ld	5 (iy), #0x00
   12C2 FD 36 06 00   [19] 2746 	ld	6 (iy), #0x00
   12C6 FD 36 07 00   [19] 2747 	ld	7 (iy), #0x00
   12CA FD 21 08 00   [14] 2748 	ld	iy, #8
   12CE FD 39         [15] 2749 	add	iy, sp
   12D0 FD 36 00 00   [19] 2750 	ld	0 (iy), #0x00
   12D4 FD 36 01 00   [19] 2751 	ld	1 (iy), #0x00
   12D8 FD 36 02 00   [19] 2752 	ld	2 (iy), #0x00
   12DC FD 36 03 00   [19] 2753 	ld	3 (iy), #0x00
   12E0 21 04 00      [10] 2754 	ld	hl, #0+4
   12E3 39            [11] 2755 	add	hl, sp
   12E4 7E            [ 7] 2756 	ld	a, (hl)
   12E5 FD 21 08 00   [14] 2757 	ld	iy, #8
   12E9 FD 39         [15] 2758 	add	iy, sp
   12EB FD 77 04      [19] 2759 	ld	4 (iy), a
   12EE FD 36 05 00   [19] 2760 	ld	5 (iy), #0x00
   12F2 FD 36 06 00   [19] 2761 	ld	6 (iy), #0x00
   12F6 FD 36 07 00   [19] 2762 	ld	7 (iy), #0x00
   12FA 06 20         [ 7] 2763 	ld	b, #0x20
   12FC                    2764 00658$:
   12FC FD CB 07 2E   [23] 2765 	sra	7 (iy)
   1300 FD CB 06 1E   [23] 2766 	rr	6 (iy)
   1304 FD CB 05 1E   [23] 2767 	rr	5 (iy)
   1308 FD CB 04 1E   [23] 2768 	rr	4 (iy)
   130C FD CB 03 1E   [23] 2769 	rr	3 (iy)
   1310 FD CB 02 1E   [23] 2770 	rr	2 (iy)
   1314 FD CB 01 1E   [23] 2771 	rr	1 (iy)
   1318 FD CB 00 1E   [23] 2772 	rr	0 (iy)
   131C 10 DE         [13] 2773 	djnz	00658$
   131E FD 7E 00      [19] 2774 	ld	a, 0 (iy)
   1321 F5            [11] 2775 	push	af
   1322 33            [ 6] 2776 	inc	sp
   1323 CDrE8r05      [17] 2777 	call	_TxByte
   1326 33            [ 6] 2778 	inc	sp
                           2779 ;src\CFG8266.c:679: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1327 FD 21 08 00   [14] 2780 	ld	iy, #8
   132B FD 39         [15] 2781 	add	iy, sp
   132D FD 36 00 00   [19] 2782 	ld	0 (iy), #0x00
   1331 FD 36 01 00   [19] 2783 	ld	1 (iy), #0x00
   1335 FD 36 02 00   [19] 2784 	ld	2 (iy), #0x00
   1339 FD 36 03 00   [19] 2785 	ld	3 (iy), #0x00
   133D FD 36 04 00   [19] 2786 	ld	4 (iy), #0x00
   1341 21 05 00      [10] 2787 	ld	hl, #0+5
   1344 39            [11] 2788 	add	hl, sp
   1345 7E            [ 7] 2789 	ld	a, (hl)
   1346 FD 21 08 00   [14] 2790 	ld	iy, #8
   134A FD 39         [15] 2791 	add	iy, sp
   134C FD 77 05      [19] 2792 	ld	5 (iy), a
   134F FD 36 06 00   [19] 2793 	ld	6 (iy), #0x00
   1353 FD 36 07 00   [19] 2794 	ld	7 (iy), #0x00
   1357 06 28         [ 7] 2795 	ld	b, #0x28
   1359                    2796 00660$:
   1359 FD CB 07 2E   [23] 2797 	sra	7 (iy)
   135D FD CB 06 1E   [23] 2798 	rr	6 (iy)
   1361 FD CB 05 1E   [23] 2799 	rr	5 (iy)
   1365 FD CB 04 1E   [23] 2800 	rr	4 (iy)
   1369 FD CB 03 1E   [23] 2801 	rr	3 (iy)
   136D FD CB 02 1E   [23] 2802 	rr	2 (iy)
   1371 FD CB 01 1E   [23] 2803 	rr	1 (iy)
   1375 FD CB 00 1E   [23] 2804 	rr	0 (iy)
   1379 10 DE         [13] 2805 	djnz	00660$
   137B FD 7E 00      [19] 2806 	ld	a, 0 (iy)
   137E F5            [11] 2807 	push	af
   137F 33            [ 6] 2808 	inc	sp
   1380 CDrE8r05      [17] 2809 	call	_TxByte
   1383 33            [ 6] 2810 	inc	sp
                           2811 ;src\CFG8266.c:680: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   1384 FD 21 08 00   [14] 2812 	ld	iy, #8
   1388 FD 39         [15] 2813 	add	iy, sp
   138A FD 36 00 00   [19] 2814 	ld	0 (iy), #0x00
   138E FD 36 01 00   [19] 2815 	ld	1 (iy), #0x00
   1392 FD 36 02 00   [19] 2816 	ld	2 (iy), #0x00
   1396 FD 36 03 00   [19] 2817 	ld	3 (iy), #0x00
   139A FD 36 04 00   [19] 2818 	ld	4 (iy), #0x00
   139E FD 36 05 00   [19] 2819 	ld	5 (iy), #0x00
   13A2 21 06 00      [10] 2820 	ld	hl, #0+6
   13A5 39            [11] 2821 	add	hl, sp
   13A6 7E            [ 7] 2822 	ld	a, (hl)
   13A7 FD 21 08 00   [14] 2823 	ld	iy, #8
   13AB FD 39         [15] 2824 	add	iy, sp
   13AD FD 77 06      [19] 2825 	ld	6 (iy), a
   13B0 FD 36 07 00   [19] 2826 	ld	7 (iy), #0x00
   13B4 06 30         [ 7] 2827 	ld	b, #0x30
   13B6                    2828 00662$:
   13B6 FD CB 07 2E   [23] 2829 	sra	7 (iy)
   13BA FD CB 06 1E   [23] 2830 	rr	6 (iy)
   13BE FD CB 05 1E   [23] 2831 	rr	5 (iy)
   13C2 FD CB 04 1E   [23] 2832 	rr	4 (iy)
   13C6 FD CB 03 1E   [23] 2833 	rr	3 (iy)
   13CA FD CB 02 1E   [23] 2834 	rr	2 (iy)
   13CE FD CB 01 1E   [23] 2835 	rr	1 (iy)
   13D2 FD CB 00 1E   [23] 2836 	rr	0 (iy)
   13D6 10 DE         [13] 2837 	djnz	00662$
   13D8 FD 7E 00      [19] 2838 	ld	a, 0 (iy)
   13DB F5            [11] 2839 	push	af
   13DC 33            [ 6] 2840 	inc	sp
   13DD CDrE8r05      [17] 2841 	call	_TxByte
   13E0 33            [ 6] 2842 	inc	sp
                           2843 ;src\CFG8266.c:681: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   13E1 DD 7E FA      [19] 2844 	ld	a, -6 (ix)
   13E4 FD 21 08 00   [14] 2845 	ld	iy, #8
   13E8 FD 39         [15] 2846 	add	iy, sp
   13EA FD 77 00      [19] 2847 	ld	0 (iy), a
   13ED DD 7E FB      [19] 2848 	ld	a, -5 (ix)
   13F0 FD 77 01      [19] 2849 	ld	1 (iy), a
   13F3 DD 7E FC      [19] 2850 	ld	a, -4 (ix)
   13F6 FD 77 02      [19] 2851 	ld	2 (iy), a
   13F9 DD 7E FD      [19] 2852 	ld	a, -3 (ix)
   13FC FD 77 03      [19] 2853 	ld	3 (iy), a
   13FF FD 36 04 00   [19] 2854 	ld	4 (iy), #0x00
   1403 FD 36 05 00   [19] 2855 	ld	5 (iy), #0x00
   1407 FD 36 06 00   [19] 2856 	ld	6 (iy), #0x00
   140B FD 36 07 00   [19] 2857 	ld	7 (iy), #0x00
   140F FD 36 00 00   [19] 2858 	ld	0 (iy), #0x00
   1413 FD 36 01 00   [19] 2859 	ld	1 (iy), #0x00
   1417 FD 36 02 00   [19] 2860 	ld	2 (iy), #0x00
   141B FD 36 03 00   [19] 2861 	ld	3 (iy), #0x00
   141F FD 36 04 00   [19] 2862 	ld	4 (iy), #0x00
   1423 FD 36 05 00   [19] 2863 	ld	5 (iy), #0x00
   1427 FD 36 06 00   [19] 2864 	ld	6 (iy), #0x00
   142B FD 7E 07      [19] 2865 	ld	a, 7 (iy)
   142E FD 77 07      [19] 2866 	ld	7 (iy), a
   1431 06 38         [ 7] 2867 	ld	b, #0x38
   1433                    2868 00664$:
   1433 FD CB 07 3E   [23] 2869 	srl	7 (iy)
   1437 FD CB 06 1E   [23] 2870 	rr	6 (iy)
   143B FD CB 05 1E   [23] 2871 	rr	5 (iy)
   143F FD CB 04 1E   [23] 2872 	rr	4 (iy)
   1443 FD CB 03 1E   [23] 2873 	rr	3 (iy)
   1447 FD CB 02 1E   [23] 2874 	rr	2 (iy)
   144B FD CB 01 1E   [23] 2875 	rr	1 (iy)
   144F FD CB 00 1E   [23] 2876 	rr	0 (iy)
   1453 10 DE         [13] 2877 	djnz	00664$
   1455 FD 7E 00      [19] 2878 	ld	a, 0 (iy)
   1458 F5            [11] 2879 	push	af
   1459 33            [ 6] 2880 	inc	sp
   145A CDrE8r05      [17] 2881 	call	_TxByte
   145D 33            [ 6] 2882 	inc	sp
                           2883 ;src\CFG8266.c:682: TxByte(ucServer[0]);
   145E 3Ar01r00      [13] 2884 	ld	a, (#_ucServer + 0)
   1461 F5            [11] 2885 	push	af
   1462 33            [ 6] 2886 	inc	sp
   1463 CDrE8r05      [17] 2887 	call	_TxByte
   1466 33            [ 6] 2888 	inc	sp
                           2889 ;src\CFG8266.c:683: TxByte(ucServer[1]);
   1467 3Ar02r00      [13] 2890 	ld	a, (#_ucServer + 1)
   146A F5            [11] 2891 	push	af
   146B 33            [ 6] 2892 	inc	sp
   146C CDrE8r05      [17] 2893 	call	_TxByte
   146F 33            [ 6] 2894 	inc	sp
                           2895 ;src\CFG8266.c:684: TxByte(ucServer[2]);
   1470 3Ar03r00      [13] 2896 	ld	a, (#_ucServer + 2)
   1473 F5            [11] 2897 	push	af
   1474 33            [ 6] 2898 	inc	sp
   1475 CDrE8r05      [17] 2899 	call	_TxByte
   1478 33            [ 6] 2900 	inc	sp
                           2901 ;src\CFG8266.c:685: TxByte(ucServer[3]);
   1479 3Ar04r00      [13] 2902 	ld	a, (#_ucServer + 3)
   147C F5            [11] 2903 	push	af
   147D 33            [ 6] 2904 	inc	sp
   147E CDrE8r05      [17] 2905 	call	_TxByte
   1481 33            [ 6] 2906 	inc	sp
                           2907 ;src\CFG8266.c:687: if (ucIsFw)
   1482 3Ar0Er02      [13] 2908 	ld	a,(#_ucIsFw + 0)
   1485 B7            [ 4] 2909 	or	a, a
   1486 28 1B         [12] 2910 	jr	Z,00197$
                           2911 ;src\CFG8266.c:688: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true);
   1488 3E 01         [ 7] 2912 	ld	a, #0x01
   148A F5            [11] 2913 	push	af
   148B 33            [ 6] 2914 	inc	sp
   148C 21 3C 00      [10] 2915 	ld	hl, #0x003c
   148F E5            [11] 2916 	push	hl
   1490 2E 02         [ 7] 2917 	ld	l, #0x02
   1492 E5            [11] 2918 	push	hl
   1493 21r9Er01      [10] 2919 	ld	hl, #_responseRSFWUpdate
   1496 E5            [11] 2920 	push	hl
   1497 CDrAAr07      [17] 2921 	call	_WaitForRXData
   149A F1            [10] 2922 	pop	af
   149B F1            [10] 2923 	pop	af
   149C F1            [10] 2924 	pop	af
   149D 33            [ 6] 2925 	inc	sp
   149E DD 75 F5      [19] 2926 	ld	-11 (ix), l
   14A1 18 19         [12] 2927 	jr	00198$
   14A3                    2928 00197$:
                           2929 ;src\CFG8266.c:690: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true);
   14A3 3E 01         [ 7] 2930 	ld	a, #0x01
   14A5 F5            [11] 2931 	push	af
   14A6 33            [ 6] 2932 	inc	sp
   14A7 21 3C 00      [10] 2933 	ld	hl, #0x003c
   14AA E5            [11] 2934 	push	hl
   14AB 2E 02         [ 7] 2935 	ld	l, #0x02
   14AD E5            [11] 2936 	push	hl
   14AE 21rA0r01      [10] 2937 	ld	hl, #_responseRSCERTUpdate
   14B1 E5            [11] 2938 	push	hl
   14B2 CDrAAr07      [17] 2939 	call	_WaitForRXData
   14B5 F1            [10] 2940 	pop	af
   14B6 F1            [10] 2941 	pop	af
   14B7 F1            [10] 2942 	pop	af
   14B8 33            [ 6] 2943 	inc	sp
   14B9 DD 75 F5      [19] 2944 	ld	-11 (ix), l
   14BC                    2945 00198$:
                           2946 ;src\CFG8266.c:692: if (!bResponse)
   14BC DD 7E F5      [19] 2947 	ld	a, -11 (ix)
   14BF B7            [ 4] 2948 	or	a, a
   14C0 20 0B         [12] 2949 	jr	NZ,00213$
                           2950 ;src\CFG8266.c:693: printf("Error requesting to start firmware update.\r\n");
   14C2 21r40r19      [10] 2951 	ld	hl, #___str_30
   14C5 E5            [11] 2952 	push	hl
   14C6 CDr00r00      [17] 2953 	call	_puts
   14C9 F1            [10] 2954 	pop	af
   14CA C3rF0r15      [10] 2955 	jp	00217$
   14CD                    2956 00213$:
                           2957 ;src\CFG8266.c:696: PrintChar('U');
   14CD 3E 55         [ 7] 2958 	ld	a, #0x55
   14CF F5            [11] 2959 	push	af
   14D0 33            [ 6] 2960 	inc	sp
   14D1 CDr00r00      [17] 2961 	call	_PrintChar
   14D4 33            [ 6] 2962 	inc	sp
                           2963 ;src\CFG8266.c:697: do
   14D5 DD 36 FE 00   [19] 2964 	ld	-2 (ix), #0x00
   14D9 DD 36 FF 00   [19] 2965 	ld	-1 (ix), #0x00
   14DD                    2966 00207$:
                           2967 ;src\CFG8266.c:700: PrintChar(8); //backspace
   14DD 3E 08         [ 7] 2968 	ld	a, #0x08
   14DF F5            [11] 2969 	push	af
   14E0 33            [ 6] 2970 	inc	sp
   14E1 CDr00r00      [17] 2971 	call	_PrintChar
   14E4 33            [ 6] 2972 	inc	sp
                           2973 ;src\CFG8266.c:701: PrintChar(advance[i%4]); // next char
   14E5 DD 7E FE      [19] 2974 	ld	a, -2 (ix)
   14E8 E6 03         [ 7] 2975 	and	a, #0x03
   14EA DD 77 F6      [19] 2976 	ld	-10 (ix), a
   14ED DD 36 F7 00   [19] 2977 	ld	-9 (ix), #0x00
   14F1 DD 7E EE      [19] 2978 	ld	a, -18 (ix)
   14F4 DD 86 F6      [19] 2979 	add	a, -10 (ix)
   14F7 DD 77 F8      [19] 2980 	ld	-8 (ix), a
   14FA DD 7E EF      [19] 2981 	ld	a, -17 (ix)
   14FD DD 8E F7      [19] 2982 	adc	a, -9 (ix)
   1500 DD 77 F9      [19] 2983 	ld	-7 (ix), a
   1503 DD 6E F8      [19] 2984 	ld	l, -8 (ix)
   1506 DD 66 F9      [19] 2985 	ld	h, -7 (ix)
   1509 7E            [ 7] 2986 	ld	a, (hl)
   150A F5            [11] 2987 	push	af
   150B 33            [ 6] 2988 	inc	sp
   150C CDr00r00      [17] 2989 	call	_PrintChar
   150F 33            [ 6] 2990 	inc	sp
                           2991 ;src\CFG8266.c:702: ++i;
   1510 DD 34 FE      [23] 2992 	inc	-2 (ix)
   1513 20 03         [12] 2993 	jr	NZ,00666$
   1515 DD 34 FF      [23] 2994 	inc	-1 (ix)
   1518                    2995 00666$:
                           2996 ;src\CFG8266.c:703: if (!ucFirstBlock)
   1518 DD 7E F0      [19] 2997 	ld	a, -16 (ix)
   151B B7            [ 4] 2998 	or	a, a
   151C 20 2C         [12] 2999 	jr	NZ,00202$
                           3000 ;src\CFG8266.c:705: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   151E 21 00 01      [10] 3001 	ld	hl, #0x0100
   1521 E5            [11] 3002 	push	hl
   1522 21r01r00      [10] 3003 	ld	hl, #_ucServer
   1525 E5            [11] 3004 	push	hl
   1526 DD 6E F1      [19] 3005 	ld	l, -15 (ix)
   1529 DD 66 F2      [19] 3006 	ld	h, -14 (ix)
   152C E5            [11] 3007 	push	hl
   152D CDr17r01      [17] 3008 	call	_MyRead
   1530 F1            [10] 3009 	pop	af
   1531 F1            [10] 3010 	pop	af
   1532 F1            [10] 3011 	pop	af
   1533 DD 75 F3      [19] 3012 	ld	-13 (ix), l
                           3013 ;src\CFG8266.c:706: if (FileRead ==0)
   1536 DD 74 F4      [19] 3014 	ld	-12 (ix), h
   1539 7C            [ 4] 3015 	ld	a, h
   153A DD B6 F3      [19] 3016 	or	a, -13 (ix)
   153D 20 0F         [12] 3017 	jr	NZ,00203$
                           3018 ;src\CFG8266.c:708: printf("Error reading file...\r\n");
   153F 21r6Cr19      [10] 3019 	ld	hl, #___str_32
   1542 E5            [11] 3020 	push	hl
   1543 CDr00r00      [17] 3021 	call	_puts
   1546 F1            [10] 3022 	pop	af
                           3023 ;src\CFG8266.c:709: break;
   1547 C3rD9r15      [10] 3024 	jp	00209$
   154A                    3025 00202$:
                           3026 ;src\CFG8266.c:713: ucFirstBlock = 0;
   154A DD 36 F0 00   [19] 3027 	ld	-16 (ix), #0x00
   154E                    3028 00203$:
                           3029 ;src\CFG8266.c:715: TxByte('z'); //Write block
   154E 3E 7A         [ 7] 3030 	ld	a, #0x7a
   1550 F5            [11] 3031 	push	af
   1551 33            [ 6] 3032 	inc	sp
   1552 CDrE8r05      [17] 3033 	call	_TxByte
   1555 33            [ 6] 3034 	inc	sp
                           3035 ;src\CFG8266.c:716: TxByte((unsigned char)((FileRead&0xff00)>>8));
   1556 DD 46 F4      [19] 3036 	ld	b, -12 (ix)
   1559 0E 00         [ 7] 3037 	ld	c, #0x00
   155B C5            [11] 3038 	push	bc
   155C 33            [ 6] 3039 	inc	sp
   155D CDrE8r05      [17] 3040 	call	_TxByte
   1560 33            [ 6] 3041 	inc	sp
                           3042 ;src\CFG8266.c:717: TxByte((unsigned char)(FileRead&0xff));
   1561 DD 7E F3      [19] 3043 	ld	a, -13 (ix)
   1564 F5            [11] 3044 	push	af
   1565 33            [ 6] 3045 	inc	sp
   1566 CDrE8r05      [17] 3046 	call	_TxByte
   1569 33            [ 6] 3047 	inc	sp
                           3048 ;src\CFG8266.c:718: for (ii=0;ii<256;ii++)
   156A 01 00 00      [10] 3049 	ld	bc, #0x0000
   156D                    3050 00270$:
                           3051 ;src\CFG8266.c:719: TxByte(ucServer[ii]);
   156D 21r01r00      [10] 3052 	ld	hl, #_ucServer
   1570 09            [11] 3053 	add	hl, bc
   1571 7E            [ 7] 3054 	ld	a, (hl)
   1572 C5            [11] 3055 	push	bc
   1573 F5            [11] 3056 	push	af
   1574 33            [ 6] 3057 	inc	sp
   1575 CDrE8r05      [17] 3058 	call	_TxByte
   1578 33            [ 6] 3059 	inc	sp
   1579 C1            [10] 3060 	pop	bc
                           3061 ;src\CFG8266.c:718: for (ii=0;ii<256;ii++)
   157A 03            [ 6] 3062 	inc	bc
   157B 78            [ 4] 3063 	ld	a, b
   157C D6 01         [ 7] 3064 	sub	a, #0x01
   157E 38 ED         [12] 3065 	jr	C,00270$
                           3066 ;src\CFG8266.c:721: bResponse = WaitForRXData(responseWRBlock,2,600,true);
   1580 3E 01         [ 7] 3067 	ld	a, #0x01
   1582 F5            [11] 3068 	push	af
   1583 33            [ 6] 3069 	inc	sp
   1584 21 58 02      [10] 3070 	ld	hl, #0x0258
   1587 E5            [11] 3071 	push	hl
   1588 21 02 00      [10] 3072 	ld	hl, #0x0002
   158B E5            [11] 3073 	push	hl
   158C 21rA2r01      [10] 3074 	ld	hl, #_responseWRBlock
   158F E5            [11] 3075 	push	hl
   1590 CDrAAr07      [17] 3076 	call	_WaitForRXData
   1593 F1            [10] 3077 	pop	af
   1594 F1            [10] 3078 	pop	af
   1595 F1            [10] 3079 	pop	af
   1596 33            [ 6] 3080 	inc	sp
                           3081 ;src\CFG8266.c:723: if (!bResponse)
   1597 DD 75 F5      [19] 3082 	ld	-11 (ix), l
   159A 7D            [ 4] 3083 	ld	a, l
   159B B7            [ 4] 3084 	or	a, a
   159C 20 0A         [12] 3085 	jr	NZ,00206$
                           3086 ;src\CFG8266.c:725: printf("Error requesting to write firmware block.\r\n");
   159E 21r83r19      [10] 3087 	ld	hl, #___str_34
   15A1 E5            [11] 3088 	push	hl
   15A2 CDr00r00      [17] 3089 	call	_puts
   15A5 F1            [10] 3090 	pop	af
                           3091 ;src\CFG8266.c:726: break;
   15A6 18 31         [12] 3092 	jr	00209$
   15A8                    3093 00206$:
                           3094 ;src\CFG8266.c:728: SentFileSize = SentFileSize - FileRead;
   15A8 DD 4E F3      [19] 3095 	ld	c, -13 (ix)
   15AB DD 46 F4      [19] 3096 	ld	b, -12 (ix)
   15AE 11 00 00      [10] 3097 	ld	de, #0x0000
   15B1 DD 7E FA      [19] 3098 	ld	a, -6 (ix)
   15B4 91            [ 4] 3099 	sub	a, c
   15B5 DD 77 FA      [19] 3100 	ld	-6 (ix), a
   15B8 DD 7E FB      [19] 3101 	ld	a, -5 (ix)
   15BB 98            [ 4] 3102 	sbc	a, b
   15BC DD 77 FB      [19] 3103 	ld	-5 (ix), a
   15BF DD 7E FC      [19] 3104 	ld	a, -4 (ix)
   15C2 9B            [ 4] 3105 	sbc	a, e
   15C3 DD 77 FC      [19] 3106 	ld	-4 (ix), a
   15C6 DD 7E FD      [19] 3107 	ld	a, -3 (ix)
   15C9 9A            [ 4] 3108 	sbc	a, d
                           3109 ;src\CFG8266.c:730: while(SentFileSize);
   15CA DD 77 FD      [19] 3110 	ld	-3 (ix), a
   15CD DD B6 FC      [19] 3111 	or	a, -4 (ix)
   15D0 DD B6 FB      [19] 3112 	or	a, -5 (ix)
   15D3 DD B6 FA      [19] 3113 	or	a, -6 (ix)
   15D6 C2rDDr14      [10] 3114 	jp	NZ, 00207$
   15D9                    3115 00209$:
                           3116 ;src\CFG8266.c:733: if (bResponse)
   15D9 DD 7E F5      [19] 3117 	ld	a, -11 (ix)
   15DC B7            [ 4] 3118 	or	a, a
   15DD 28 11         [12] 3119 	jr	Z,00217$
                           3120 ;src\CFG8266.c:734: FinishUpdate(false);
   15DF AF            [ 4] 3121 	xor	a, a
   15E0 F5            [11] 3122 	push	af
   15E1 33            [ 6] 3123 	inc	sp
   15E2 CDr4Fr09      [17] 3124 	call	_FinishUpdate
   15E5 33            [ 6] 3125 	inc	sp
   15E6 18 08         [12] 3126 	jr	00217$
   15E8                    3127 00216$:
                           3128 ;src\CFG8266.c:738: Print("Error reading firmware file!\n");
   15E8 21rAEr19      [10] 3129 	ld	hl, #___str_35
   15EB E5            [11] 3130 	push	hl
   15EC CDr00r00      [17] 3131 	call	_Print
   15EF F1            [10] 3132 	pop	af
   15F0                    3133 00217$:
                           3134 ;src\CFG8266.c:739: Close(iFile);
   15F0 DD 6E F1      [19] 3135 	ld	l, -15 (ix)
   15F3 DD 66 F2      [19] 3136 	ld	h, -14 (ix)
   15F6 E5            [11] 3137 	push	hl
   15F7 CDr00r00      [17] 3138 	call	_Close
   15FA F1            [10] 3139 	pop	af
   15FB C3r7Er17      [10] 3140 	jp	00264$
   15FE                    3141 00219$:
                           3142 ;src\CFG8266.c:743: printf("Error, couldn't open %s ...\r\n",ucFile);
   15FE 21r01r01      [10] 3143 	ld	hl, #_ucFile
   1601 E5            [11] 3144 	push	hl
   1602 21rCCr19      [10] 3145 	ld	hl, #___str_36
   1605 E5            [11] 3146 	push	hl
   1606 CDr00r00      [17] 3147 	call	_printf
   1609 F1            [10] 3148 	pop	af
   160A F1            [10] 3149 	pop	af
                           3150 ;src\CFG8266.c:744: return 0;
   160B 21 00 00      [10] 3151 	ld	hl, #0x0000
   160E C3r81r17      [10] 3152 	jp	00272$
   1611                    3153 00222$:
                           3154 ;src\CFG8266.c:749: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1611 21r01r01      [10] 3155 	ld	hl, #_ucFile
   1614 E5            [11] 3156 	push	hl
   1615 21rEAr19      [10] 3157 	ld	hl, #___str_37
   1618 E5            [11] 3158 	push	hl
   1619 CDr00r00      [17] 3159 	call	_printf
   161C F1            [10] 3160 	pop	af
   161D F1            [10] 3161 	pop	af
                           3162 ;src\CFG8266.c:750: return 0;
   161E 21 00 00      [10] 3163 	ld	hl, #0x0000
   1621 C3r81r17      [10] 3164 	jp	00272$
   1624                    3165 00225$:
                           3166 ;src\CFG8266.c:755: printf("Error, couldn't open %s ...\r\n",ucFile);
   1624 21r01r01      [10] 3167 	ld	hl, #_ucFile
   1627 E5            [11] 3168 	push	hl
   1628 21rCCr19      [10] 3169 	ld	hl, #___str_36
   162B E5            [11] 3170 	push	hl
   162C CDr00r00      [17] 3171 	call	_printf
   162F F1            [10] 3172 	pop	af
   1630 F1            [10] 3173 	pop	af
                           3174 ;src\CFG8266.c:756: return 0;
   1631 21 00 00      [10] 3175 	ld	hl, #0x0000
   1634 C3r81r17      [10] 3176 	jp	00272$
   1637                    3177 00252$:
                           3178 ;src\CFG8266.c:761: if (ucIsFw)
   1637 3Ar0Er02      [13] 3179 	ld	a,(#_ucIsFw + 0)
   163A B7            [ 4] 3180 	or	a, a
   163B 28 19         [12] 3181 	jr	Z,00228$
                           3182 ;src\CFG8266.c:762: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   163D 21r01r01      [10] 3183 	ld	hl, #_ucFile
   1640 E5            [11] 3184 	push	hl
   1641 2Ar07r02      [16] 3185 	ld	hl, (_uiPort)
   1644 E5            [11] 3186 	push	hl
   1645 21r01r00      [10] 3187 	ld	hl, #_ucServer
   1648 E5            [11] 3188 	push	hl
   1649 21r09r1A      [10] 3189 	ld	hl, #___str_38
   164C E5            [11] 3190 	push	hl
   164D CDr00r00      [17] 3191 	call	_printf
   1650 F1            [10] 3192 	pop	af
   1651 F1            [10] 3193 	pop	af
   1652 F1            [10] 3194 	pop	af
   1653 F1            [10] 3195 	pop	af
   1654 18 17         [12] 3196 	jr	00229$
   1656                    3197 00228$:
                           3198 ;src\CFG8266.c:764: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1656 21r01r01      [10] 3199 	ld	hl, #_ucFile
   1659 E5            [11] 3200 	push	hl
   165A 2Ar07r02      [16] 3201 	ld	hl, (_uiPort)
   165D E5            [11] 3202 	push	hl
   165E 21r01r00      [10] 3203 	ld	hl, #_ucServer
   1661 E5            [11] 3204 	push	hl
   1662 21r72r1A      [10] 3205 	ld	hl, #___str_39
   1665 E5            [11] 3206 	push	hl
   1666 CDr00r00      [17] 3207 	call	_printf
   1669 F1            [10] 3208 	pop	af
   166A F1            [10] 3209 	pop	af
   166B F1            [10] 3210 	pop	af
   166C F1            [10] 3211 	pop	af
   166D                    3212 00229$:
                           3213 ;src\CFG8266.c:765: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   166D 21r01r00      [10] 3214 	ld	hl, #_ucServer
   1670 E5            [11] 3215 	push	hl
   1671 CDr00r00      [17] 3216 	call	_strlen
   1674 F1            [10] 3217 	pop	af
   1675 EB            [ 4] 3218 	ex	de,hl
   1676 13            [ 6] 3219 	inc	de
   1677 13            [ 6] 3220 	inc	de
   1678 13            [ 6] 3221 	inc	de
                           3222 ;src\CFG8266.c:766: uiCMDLen += strlen(ucFile);
   1679 21r01r01      [10] 3223 	ld	hl, #_ucFile
   167C E5            [11] 3224 	push	hl
   167D CDr00r00      [17] 3225 	call	_strlen
   1680 F1            [10] 3226 	pop	af
   1681 19            [11] 3227 	add	hl, de
   1682 4D            [ 4] 3228 	ld	c, l
   1683 44            [ 4] 3229 	ld	b, h
                           3230 ;src\CFG8266.c:767: if (ucIsFw)
   1684 3Ar0Er02      [13] 3231 	ld	a,(#_ucIsFw + 0)
   1687 B7            [ 4] 3232 	or	a, a
   1688 28 0C         [12] 3233 	jr	Z,00231$
                           3234 ;src\CFG8266.c:768: TxByte('U'); //Request Update Main Firmware remotely
   168A C5            [11] 3235 	push	bc
   168B 3E 55         [ 7] 3236 	ld	a, #0x55
   168D F5            [11] 3237 	push	af
   168E 33            [ 6] 3238 	inc	sp
   168F CDrE8r05      [17] 3239 	call	_TxByte
   1692 33            [ 6] 3240 	inc	sp
   1693 C1            [10] 3241 	pop	bc
   1694 18 0A         [12] 3242 	jr	00232$
   1696                    3243 00231$:
                           3244 ;src\CFG8266.c:770: TxByte('u'); //Request Update spiffs remotely
   1696 C5            [11] 3245 	push	bc
   1697 3E 75         [ 7] 3246 	ld	a, #0x75
   1699 F5            [11] 3247 	push	af
   169A 33            [ 6] 3248 	inc	sp
   169B CDrE8r05      [17] 3249 	call	_TxByte
   169E 33            [ 6] 3250 	inc	sp
   169F C1            [10] 3251 	pop	bc
   16A0                    3252 00232$:
                           3253 ;src\CFG8266.c:771: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   16A0 78            [ 4] 3254 	ld	a, b
   16A1 C5            [11] 3255 	push	bc
   16A2 F5            [11] 3256 	push	af
   16A3 33            [ 6] 3257 	inc	sp
   16A4 CDrE8r05      [17] 3258 	call	_TxByte
   16A7 33            [ 6] 3259 	inc	sp
   16A8 C1            [10] 3260 	pop	bc
                           3261 ;src\CFG8266.c:772: TxByte((unsigned char)(uiCMDLen&0xff));
   16A9 79            [ 4] 3262 	ld	a, c
   16AA C5            [11] 3263 	push	bc
   16AB F5            [11] 3264 	push	af
   16AC 33            [ 6] 3265 	inc	sp
   16AD CDrE8r05      [17] 3266 	call	_TxByte
   16B0 33            [ 6] 3267 	inc	sp
   16B1 C1            [10] 3268 	pop	bc
                           3269 ;src\CFG8266.c:773: TxByte((unsigned char)(uiPort&0xff));
   16B2 3Ar07r02      [13] 3270 	ld	a,(#_uiPort + 0)
   16B5 C5            [11] 3271 	push	bc
   16B6 F5            [11] 3272 	push	af
   16B7 33            [ 6] 3273 	inc	sp
   16B8 CDrE8r05      [17] 3274 	call	_TxByte
   16BB 33            [ 6] 3275 	inc	sp
   16BC C1            [10] 3276 	pop	bc
                           3277 ;src\CFG8266.c:774: TxByte((unsigned char)((uiPort&0xff00)>>8));
   16BD 3Ar08r02      [13] 3278 	ld	a,(#_uiPort + 1)
   16C0 C5            [11] 3279 	push	bc
   16C1 F5            [11] 3280 	push	af
   16C2 33            [ 6] 3281 	inc	sp
   16C3 CDrE8r05      [17] 3282 	call	_TxByte
   16C6 33            [ 6] 3283 	inc	sp
   16C7 C1            [10] 3284 	pop	bc
                           3285 ;src\CFG8266.c:776: do
   16C8 1E 00         [ 7] 3286 	ld	e, #0x00
   16CA                    3287 00234$:
                           3288 ;src\CFG8266.c:778: tx_data = ucServer[rx_data];
   16CA 21r01r00      [10] 3289 	ld	hl, #_ucServer
   16CD 16 00         [ 7] 3290 	ld	d, #0x00
   16CF 19            [11] 3291 	add	hl, de
   16D0 56            [ 7] 3292 	ld	d, (hl)
                           3293 ;src\CFG8266.c:779: TxByte(tx_data);
   16D1 C5            [11] 3294 	push	bc
   16D2 D5            [11] 3295 	push	de
   16D3 D5            [11] 3296 	push	de
   16D4 33            [ 6] 3297 	inc	sp
   16D5 CDrE8r05      [17] 3298 	call	_TxByte
   16D8 33            [ 6] 3299 	inc	sp
   16D9 D1            [10] 3300 	pop	de
   16DA C1            [10] 3301 	pop	bc
                           3302 ;src\CFG8266.c:780: --uiCMDLen;
   16DB 0B            [ 6] 3303 	dec	bc
                           3304 ;src\CFG8266.c:781: ++rx_data;
   16DC 1C            [ 4] 3305 	inc	e
                           3306 ;src\CFG8266.c:783: while((uiCMDLen)&&(tx_data!=0));
   16DD 78            [ 4] 3307 	ld	a, b
   16DE B1            [ 4] 3308 	or	a, c
   16DF 28 04         [12] 3309 	jr	Z,00236$
   16E1 7A            [ 4] 3310 	ld	a, d
   16E2 B7            [ 4] 3311 	or	a, a
   16E3 20 E5         [12] 3312 	jr	NZ,00234$
   16E5                    3313 00236$:
                           3314 ;src\CFG8266.c:785: do
   16E5 1E 00         [ 7] 3315 	ld	e, #0x00
   16E7                    3316 00239$:
                           3317 ;src\CFG8266.c:787: tx_data = ucFile[rx_data];
   16E7 21r01r01      [10] 3318 	ld	hl, #_ucFile
   16EA 16 00         [ 7] 3319 	ld	d, #0x00
   16EC 19            [11] 3320 	add	hl, de
   16ED 7E            [ 7] 3321 	ld	a, (hl)
                           3322 ;src\CFG8266.c:788: if (tx_data==0)
   16EE B7            [ 4] 3323 	or	a, a
   16EF 28 10         [12] 3324 	jr	Z,00241$
                           3325 ;src\CFG8266.c:790: TxByte(tx_data);
   16F1 C5            [11] 3326 	push	bc
   16F2 D5            [11] 3327 	push	de
   16F3 F5            [11] 3328 	push	af
   16F4 33            [ 6] 3329 	inc	sp
   16F5 CDrE8r05      [17] 3330 	call	_TxByte
   16F8 33            [ 6] 3331 	inc	sp
   16F9 D1            [10] 3332 	pop	de
   16FA C1            [10] 3333 	pop	bc
                           3334 ;src\CFG8266.c:791: --uiCMDLen;
   16FB 0B            [ 6] 3335 	dec	bc
                           3336 ;src\CFG8266.c:792: ++rx_data;
   16FC 1C            [ 4] 3337 	inc	e
                           3338 ;src\CFG8266.c:794: while(uiCMDLen);
   16FD 78            [ 4] 3339 	ld	a, b
   16FE B1            [ 4] 3340 	or	a, c
   16FF 20 E6         [12] 3341 	jr	NZ,00239$
   1701                    3342 00241$:
                           3343 ;src\CFG8266.c:796: if (ucIsFw)
   1701 3Ar0Er02      [13] 3344 	ld	a,(#_ucIsFw + 0)
   1704 B7            [ 4] 3345 	or	a, a
   1705 28 1A         [12] 3346 	jr	Z,00243$
                           3347 ;src\CFG8266.c:797: bResponse = WaitForRXData(responseOTAFW,2,18000,true);
   1707 3E 01         [ 7] 3348 	ld	a, #0x01
   1709 F5            [11] 3349 	push	af
   170A 33            [ 6] 3350 	inc	sp
   170B 21 50 46      [10] 3351 	ld	hl, #0x4650
   170E E5            [11] 3352 	push	hl
   170F 21 02 00      [10] 3353 	ld	hl, #0x0002
   1712 E5            [11] 3354 	push	hl
   1713 21rA4r01      [10] 3355 	ld	hl, #_responseOTAFW
   1716 E5            [11] 3356 	push	hl
   1717 CDrAAr07      [17] 3357 	call	_WaitForRXData
   171A F1            [10] 3358 	pop	af
   171B F1            [10] 3359 	pop	af
   171C F1            [10] 3360 	pop	af
   171D 33            [ 6] 3361 	inc	sp
   171E 4D            [ 4] 3362 	ld	c, l
   171F 18 18         [12] 3363 	jr	00244$
   1721                    3364 00243$:
                           3365 ;src\CFG8266.c:799: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true);
   1721 3E 01         [ 7] 3366 	ld	a, #0x01
   1723 F5            [11] 3367 	push	af
   1724 33            [ 6] 3368 	inc	sp
   1725 21 50 46      [10] 3369 	ld	hl, #0x4650
   1728 E5            [11] 3370 	push	hl
   1729 21 02 00      [10] 3371 	ld	hl, #0x0002
   172C E5            [11] 3372 	push	hl
   172D 21rA6r01      [10] 3373 	ld	hl, #_responseOTASPIFF
   1730 E5            [11] 3374 	push	hl
   1731 CDrAAr07      [17] 3375 	call	_WaitForRXData
   1734 F1            [10] 3376 	pop	af
   1735 F1            [10] 3377 	pop	af
   1736 F1            [10] 3378 	pop	af
   1737 33            [ 6] 3379 	inc	sp
   1738 4D            [ 4] 3380 	ld	c, l
   1739                    3381 00244$:
                           3382 ;src\CFG8266.c:801: if (bResponse)
   1739 79            [ 4] 3383 	ld	a, c
   173A B7            [ 4] 3384 	or	a, a
   173B 28 25         [12] 3385 	jr	Z,00249$
                           3386 ;src\CFG8266.c:803: if ((!ucIsFw))
   173D 3Ar0Er02      [13] 3387 	ld	a,(#_ucIsFw + 0)
   1740 B7            [ 4] 3388 	or	a, a
   1741 20 0A         [12] 3389 	jr	NZ,00246$
                           3390 ;src\CFG8266.c:804: Print ("Success updating certificates!\n");
   1743 21rE5r1A      [10] 3391 	ld	hl, #___str_40
   1746 E5            [11] 3392 	push	hl
   1747 CDr00r00      [17] 3393 	call	_Print
   174A F1            [10] 3394 	pop	af
   174B 18 08         [12] 3395 	jr	00247$
   174D                    3396 00246$:
                           3397 ;src\CFG8266.c:806: Print ("Success, firmware updated, wait a minute so it is fully flashed.\n");
   174D 21r05r1B      [10] 3398 	ld	hl, #___str_41
   1750 E5            [11] 3399 	push	hl
   1751 CDr00r00      [17] 3400 	call	_Print
   1754 F1            [10] 3401 	pop	af
   1755                    3402 00247$:
                           3403 ;src\CFG8266.c:807: FinishUpdate(true);
   1755 3E 01         [ 7] 3404 	ld	a, #0x01
   1757 F5            [11] 3405 	push	af
   1758 33            [ 6] 3406 	inc	sp
   1759 CDr4Fr09      [17] 3407 	call	_FinishUpdate
   175C 33            [ 6] 3408 	inc	sp
                           3409 ;src\CFG8266.c:808: return 0;
   175D 21 00 00      [10] 3410 	ld	hl, #0x0000
   1760 18 1F         [12] 3411 	jr	00272$
   1762                    3412 00249$:
                           3413 ;src\CFG8266.c:811: Print ("Failed to update from remote server...\n");
   1762 21r47r1B      [10] 3414 	ld	hl, #___str_42
   1765 E5            [11] 3415 	push	hl
   1766 CDr00r00      [17] 3416 	call	_Print
   1769 F1            [10] 3417 	pop	af
   176A 18 12         [12] 3418 	jr	00264$
   176C                    3419 00260$:
                           3420 ;src\CFG8266.c:929: Print("ESP device not found...\n");
   176C 21r6Fr1B      [10] 3421 	ld	hl, #___str_43
   176F E5            [11] 3422 	push	hl
   1770 CDr00r00      [17] 3423 	call	_Print
   1773 F1            [10] 3424 	pop	af
   1774 18 08         [12] 3425 	jr	00264$
   1776                    3426 00263$:
                           3427 ;src\CFG8266.c:932: Print(strUsage);
   1776 21rA8r01      [10] 3428 	ld	hl, #_strUsage
   1779 E5            [11] 3429 	push	hl
   177A CDr00r00      [17] 3430 	call	_Print
   177D F1            [10] 3431 	pop	af
   177E                    3432 00264$:
                           3433 ;src\CFG8266.c:934: return 0;
   177E 21 00 00      [10] 3434 	ld	hl, #0x0000
   1781                    3435 00272$:
                           3436 ;src\CFG8266.c:935: }
   1781 DD F9         [10] 3437 	ld	sp, ix
   1783 DD E1         [14] 3438 	pop	ix
   1785 C9            [10] 3439 	ret
   1786                    3440 ___str_10:
   1786 3E 20 4D 53 58 2D  3441 	.ascii "> MSX-SM ESP8266 WIFI Module Configuration v1.00<"
        53 4D 20 45 53 50
        38 32 36 36 20 57
        49 46 49 20 4D 6F
        64 75 6C 65 20 43
        6F 6E 66 69 67 75
        72 61 74 69 6F 6E
        20 76 31 2E 30 30
        3C
   17B7 0A                 3442 	.db 0x0a
   17B8 28 63 29 20 32 30  3443 	.ascii "(c) 2019 Oduvaldo Pavan Junior - ducasp@gmail.com"
        31 39 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   17E9 0A                 3444 	.db 0x0a
   17EA 0A                 3445 	.db 0x0a
   17EB 00                 3446 	.db 0x00
   17EC                    3447 ___str_11:
   17EC 55 73 69 6E 67 20  3448 	.ascii "Using Baud Rate #%u"
        42 61 75 64 20 52
        61 74 65 20 23 25
        75
   17FF 0D                 3449 	.db 0x0d
   1800 0A                 3450 	.db 0x0a
   1801 00                 3451 	.db 0x00
   1802                    3452 ___str_12:
   1802 0A                 3453 	.db 0x0a
   1803 00                 3454 	.db 0x00
   1804                    3455 ___str_13:
   1804 43 68 6F 6F 73 65  3456 	.ascii "Choose AP:"
        20 41 50 3A
   180E 0A                 3457 	.db 0x0a
   180F 0A                 3458 	.db 0x0a
   1810 00                 3459 	.db 0x00
   1811                    3460 ___str_14:
   1811 25 75 20 2D 20 25  3461 	.ascii "%u - %s"
        73
   1818 00                 3462 	.db 0x00
   1819                    3463 ___str_16:
   1819 20 28 50 57 44 29  3464 	.ascii " (PWD)"
   181F 0D                 3465 	.db 0x0d
   1820 00                 3466 	.db 0x00
   1821                    3467 ___str_18:
   1821 20 28 4F 50 45 4E  3468 	.ascii " (OPEN)"
        29
   1828 0D                 3469 	.db 0x0d
   1829 00                 3470 	.db 0x00
   182A                    3471 ___str_19:
   182A 0A                 3472 	.db 0x0a
   182B 57 68 69 63 68 20  3473 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   184B 00                 3474 	.db 0x00
   184C                    3475 ___str_20:
   184C 0A                 3476 	.db 0x0a
   184D 50 61 73 73 77 6F  3477 	.ascii "Password? "
        72 64 3F 20
   1857 00                 3478 	.db 0x00
   1858                    3479 ___str_21:
   1858 53 75 63 63 65 73  3480 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   187A 0A                 3481 	.db 0x0a
   187B 00                 3482 	.db 0x00
   187C                    3483 ___str_22:
   187C 45 72 72 6F 72 2C  3484 	.ascii "Error, AP not configured!"
        20 41 50 20 6E 6F
        74 20 63 6F 6E 66
        69 67 75 72 65 64
        21
   1895 0A                 3485 	.db 0x0a
   1896 00                 3486 	.db 0x00
   1897                    3487 ___str_23:
   1897 55 73 65 72 20 63  3488 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   18B2 0A                 3489 	.db 0x0a
   18B3 00                 3490 	.db 0x00
   18B4                    3491 ___str_24:
   18B4 53 63 61 6E 20 72  3492 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   18CE 0A                 3493 	.db 0x0a
   18CF 00                 3494 	.db 0x00
   18D0                    3495 ___str_25:
   18D0 53 63 61 6E 20 72  3496 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   18EA 0A                 3497 	.db 0x0a
   18EB 00                 3498 	.db 0x00
   18EC                    3499 ___str_26:
   18EC 4E 61 67 6C 65 20  3500 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   1905 0A                 3501 	.db 0x0a
   1906 00                 3502 	.db 0x00
   1907                    3503 ___str_27:
   1907 4E 61 67 6C 65 20  3504 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   1929 0A                 3505 	.db 0x0a
   192A 00                 3506 	.db 0x00
   192B                    3507 ___str_28:
   192B 46 69 6C 65 3A 20  3508 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   193D 0D                 3509 	.db 0x0d
   193E 0A                 3510 	.db 0x0a
   193F 00                 3511 	.db 0x00
   1940                    3512 ___str_30:
   1940 45 72 72 6F 72 20  3513 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   196A 0D                 3514 	.db 0x0d
   196B 00                 3515 	.db 0x00
   196C                    3516 ___str_32:
   196C 45 72 72 6F 72 20  3517 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   1981 0D                 3518 	.db 0x0d
   1982 00                 3519 	.db 0x00
   1983                    3520 ___str_34:
   1983 45 72 72 6F 72 20  3521 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   19AC 0D                 3522 	.db 0x0d
   19AD 00                 3523 	.db 0x00
   19AE                    3524 ___str_35:
   19AE 45 72 72 6F 72 20  3525 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   19CA 0A                 3526 	.db 0x0a
   19CB 00                 3527 	.db 0x00
   19CC                    3528 ___str_36:
   19CC 45 72 72 6F 72 2C  3529 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   19E7 0D                 3530 	.db 0x0d
   19E8 0A                 3531 	.db 0x0a
   19E9 00                 3532 	.db 0x00
   19EA                    3533 ___str_37:
   19EA 45 72 72 6F 72 2C  3534 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   1A06 0D                 3535 	.db 0x0d
   1A07 0A                 3536 	.db 0x0a
   1A08 00                 3537 	.db 0x00
   1A09                    3538 ___str_38:
   1A09 4F 6B 2C 20 75 70  3539 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   1A32 0D                 3540 	.db 0x0d
   1A33 0A                 3541 	.db 0x0a
   1A34 46 69 6C 65 20 70  3542 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1A41 0A                 3543 	.db 0x0a
   1A42 50 6C 65 61 73 65  3544 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1A6F 0D                 3545 	.db 0x0d
   1A70 0A                 3546 	.db 0x0a
   1A71 00                 3547 	.db 0x00
   1A72                    3548 ___str_39:
   1A72 4F 6B 2C 20 75 70  3549 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   1AA5 0D                 3550 	.db 0x0d
   1AA6 0A                 3551 	.db 0x0a
   1AA7 46 69 6C 65 20 70  3552 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1AB4 0A                 3553 	.db 0x0a
   1AB5 50 6C 65 61 73 65  3554 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1AE2 0D                 3555 	.db 0x0d
   1AE3 0A                 3556 	.db 0x0a
   1AE4 00                 3557 	.db 0x00
   1AE5                    3558 ___str_40:
   1AE5 53 75 63 63 65 73  3559 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   1B03 0A                 3560 	.db 0x0a
   1B04 00                 3561 	.db 0x00
   1B05                    3562 ___str_41:
   1B05 53 75 63 63 65 73  3563 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   1B41 68 65 64 2E        3564 	.ascii "hed."
   1B45 0A                 3565 	.db 0x0a
   1B46 00                 3566 	.db 0x00
   1B47                    3567 ___str_42:
   1B47 46 61 69 6C 65 64  3568 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   1B6D 0A                 3569 	.db 0x0a
   1B6E 00                 3570 	.db 0x00
   1B6F                    3571 ___str_43:
   1B6F 45 53 50 20 64 65  3572 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   1B86 0A                 3573 	.db 0x0a
   1B87 00                 3574 	.db 0x00
                           3575 	.area _CODE
                           3576 	.area _INITIALIZER
                           3577 	.area _CABS (ABS)
