                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _Cls
                             23 	.globl _Beep
                             24 	.globl _InputString
                             25 	.globl _Print
                             26 	.globl _strlen
                             27 	.globl _atol
                             28 	.globl _atoi
                             29 	.globl _puts
                             30 	.globl _printf
                             31 	.globl _speedStr
                             32 	.globl _strAPSts
                             33 	.globl _uiTimeout
                             34 	.globl _ucSetTimeout
                             35 	.globl _ucRadioOff
                             36 	.globl _ucNagleOn
                             37 	.globl _ucNagleOff
                             38 	.globl _ucIsFw
                             39 	.globl _ucLocalUpdate
                             40 	.globl _lPort
                             41 	.globl _uiPort
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _chFiller2
                             45 	.globl _strUsage
                             46 	.globl _responseReady2
                             47 	.globl _aDone
                             48 	.globl _advance
                             49 	.globl _radioOffResponse
                             50 	.globl _responseRadioOnTimeout
                             51 	.globl _responseOTASPIFF
                             52 	.globl _responseOTAFW
                             53 	.globl _responseWRBlock
                             54 	.globl _responseRSCERTUpdate
                             55 	.globl _responseRSFWUpdate
                             56 	.globl _apstsResponse
                             57 	.globl _apconfigurationResponse
                             58 	.globl _scanresResponse
                             59 	.globl _nagleoffResponse
                             60 	.globl _nagleonResponse
                             61 	.globl _scanresNoNetwork
                             62 	.globl _scanResponse
                             63 	.globl _responseOK
                             64 	.globl _certificateDone
                             65 	.globl _versionResponse
                             66 	.globl _endUpdate
                             67 	.globl _chFiller
                             68 ;--------------------------------------------------------
                             69 ; special function registers
                             70 ;--------------------------------------------------------
                     0006    71 _myPort6	=	0x0006
                     0007    72 _myPort7	=	0x0007
                             73 ;--------------------------------------------------------
                             74 ; ram data
                             75 ;--------------------------------------------------------
                             76 	.area _DATA
                     FC9E    77 _TickCount	=	0xfc9e
   0000                      78 _ucScan::
   0000                      79 	.ds 1
   0001                      80 _uiPort::
   0001                      81 	.ds 2
   0003                      82 _lPort::
   0003                      83 	.ds 4
   0007                      84 _ucLocalUpdate::
   0007                      85 	.ds 1
   0008                      86 _ucIsFw::
   0008                      87 	.ds 1
   0009                      88 _ucNagleOff::
   0009                      89 	.ds 1
   000A                      90 _ucNagleOn::
   000A                      91 	.ds 1
   000B                      92 _ucRadioOff::
   000B                      93 	.ds 1
   000C                      94 _ucSetTimeout::
   000C                      95 	.ds 1
   000D                      96 _uiTimeout::
   000D                      97 	.ds 2
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
   0000                     102 _strAPSts::
   0000                     103 	.ds 12
   000C                     104 _speedStr::
   000C                     105 	.ds 20
                            106 ;--------------------------------------------------------
                            107 ; absolute external ram data
                            108 ;--------------------------------------------------------
                            109 	.area _DABS (ABS)
                            110 ;--------------------------------------------------------
                            111 ; global & static initialisations
                            112 ;--------------------------------------------------------
                            113 	.area _HOME
                            114 	.area _GSINIT
                            115 	.area _GSFINAL
                            116 	.area _GSINIT
                            117 ;--------------------------------------------------------
                            118 ; Home
                            119 ;--------------------------------------------------------
                            120 	.area _HOME
                            121 	.area _HOME
                            122 ;--------------------------------------------------------
                            123 ; code
                            124 ;--------------------------------------------------------
                            125 	.area _CODE
                            126 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            127 ;	---------------------------------
                            128 ; Function MyRead
                            129 ; ---------------------------------
   0000                     130 _MyRead::
   0000 DD E5         [15]  131 	push	ix
   0002 DD 21 00 00   [14]  132 	ld	ix,#0
   0006 DD 39         [15]  133 	add	ix,sp
   0008 21 F4 FF      [10]  134 	ld	hl, #-12
   000B 39            [11]  135 	add	hl, sp
   000C F9            [ 6]  136 	ld	sp, hl
                            137 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   000D 21 00 00      [10]  138 	ld	hl, #0
   0010 39            [11]  139 	add	hl, sp
   0011 EB            [ 4]  140 	ex	de, hl
   0012 21 04 00      [10]  141 	ld	hl, #0x0004
   0015 19            [11]  142 	add	hl, de
   0016 DD 4E 06      [19]  143 	ld	c, 6 (ix)
   0019 DD 7E 07      [19]  144 	ld	a, 7 (ix)
   001C 71            [ 7]  145 	ld	(hl), c
   001D 23            [ 6]  146 	inc	hl
   001E 77            [ 7]  147 	ld	(hl), a
                            148 ;src\CFG8266.c:54: regs.Words.HL = Size;
   001F 21 06 00      [10]  149 	ld	hl, #0x0006
   0022 19            [11]  150 	add	hl, de
   0023 DD 7E 08      [19]  151 	ld	a, 8 (ix)
   0026 77            [ 7]  152 	ld	(hl), a
   0027 23            [ 6]  153 	inc	hl
   0028 DD 7E 09      [19]  154 	ld	a, 9 (ix)
   002B 77            [ 7]  155 	ld	(hl), a
                            156 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   002C 21 03 00      [10]  157 	ld	hl, #3
   002F 39            [11]  158 	add	hl, sp
   0030 DD 7E 04      [19]  159 	ld	a, 4 (ix)
   0033 77            [ 7]  160 	ld	(hl), a
                            161 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   0034 21 00 00      [10]  162 	ld	hl, #0
   0037 39            [11]  163 	add	hl, sp
   0038 4D            [ 4]  164 	ld	c, l
   0039 44            [ 4]  165 	ld	b, h
   003A 59            [ 4]  166 	ld	e, c
   003B 50            [ 4]  167 	ld	d, b
   003C C5            [11]  168 	push	bc
   003D 01 02 02      [10]  169 	ld	bc, #0x0202
   0040 C5            [11]  170 	push	bc
   0041 D5            [11]  171 	push	de
   0042 3E 48         [ 7]  172 	ld	a, #0x48
   0044 F5            [11]  173 	push	af
   0045 33            [ 6]  174 	inc	sp
   0046 CDr00r00      [17]  175 	call	_DosCall
   0049 F1            [10]  176 	pop	af
   004A F1            [10]  177 	pop	af
   004B 33            [ 6]  178 	inc	sp
   004C C1            [10]  179 	pop	bc
                            180 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   004D 69            [ 4]  181 	ld	l, c
   004E 60            [ 4]  182 	ld	h, b
   004F 23            [ 6]  183 	inc	hl
   0050 7E            [ 7]  184 	ld	a, (hl)
   0051 B7            [ 4]  185 	or	a, a
   0052 20 0B         [12]  186 	jr	NZ,00102$
                            187 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   0054 69            [ 4]  188 	ld	l, c
   0055 60            [ 4]  189 	ld	h, b
   0056 11 06 00      [10]  190 	ld	de, #0x0006
   0059 19            [11]  191 	add	hl, de
   005A 4E            [ 7]  192 	ld	c, (hl)
   005B 23            [ 6]  193 	inc	hl
   005C 46            [ 7]  194 	ld	b, (hl)
   005D 18 03         [12]  195 	jr	00103$
   005F                     196 00102$:
                            197 ;src\CFG8266.c:63: iRet = 0;
   005F 01 00 00      [10]  198 	ld	bc, #0x0000
   0062                     199 00103$:
                            200 ;src\CFG8266.c:65: return iRet;
   0062 69            [ 4]  201 	ld	l, c
   0063 60            [ 4]  202 	ld	h, b
                            203 ;src\CFG8266.c:66: }
   0064 DD F9         [10]  204 	ld	sp, ix
   0066 DD E1         [14]  205 	pop	ix
   0068 C9            [10]  206 	ret
   0069                     207 _Done_Version:
   0069 4D 61 64 65 20 77   208 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   0088 00                  209 	.db 0x00
   0089                     210 _chFiller:
   0089 43                  211 	.db #0x43	; 67	'C'
   008A 46                  212 	.db #0x46	; 70	'F'
   008B 47                  213 	.db #0x47	; 71	'G'
   008C 38                  214 	.db #0x38	; 56	'8'
   008D 32                  215 	.db #0x32	; 50	'2'
   008E 36                  216 	.db #0x36	; 54	'6'
   008F 36                  217 	.db #0x36	; 54	'6'
   0090 20                  218 	.db #0x20	; 32
   0091 59                  219 	.db #0x59	; 89	'Y'
   0092 6F                  220 	.db #0x6f	; 111	'o'
   0093 75                  221 	.db #0x75	; 117	'u'
   0094 20                  222 	.db #0x20	; 32
   0095 68                  223 	.db #0x68	; 104	'h'
   0096 61                  224 	.db #0x61	; 97	'a'
   0097 76                  225 	.db #0x76	; 118	'v'
   0098 65                  226 	.db #0x65	; 101	'e'
   0099 20                  227 	.db #0x20	; 32
   009A 61                  228 	.db #0x61	; 97	'a'
   009B 20                  229 	.db #0x20	; 32
   009C 67                  230 	.db #0x67	; 103	'g'
   009D 6F                  231 	.db #0x6f	; 111	'o'
   009E 6F                  232 	.db #0x6f	; 111	'o'
   009F 64                  233 	.db #0x64	; 100	'd'
   00A0 20                  234 	.db #0x20	; 32
   00A1 74                  235 	.db #0x74	; 116	't'
   00A2 69                  236 	.db #0x69	; 105	'i'
   00A3 6D                  237 	.db #0x6d	; 109	'm'
   00A4 65                  238 	.db #0x65	; 101	'e'
   00A5 20                  239 	.db #0x20	; 32
   00A6 72                  240 	.db #0x72	; 114	'r'
   00A7 65                  241 	.db #0x65	; 101	'e'
   00A8 61                  242 	.db #0x61	; 97	'a'
   00A9 64                  243 	.db #0x64	; 100	'd'
   00AA 69                  244 	.db #0x69	; 105	'i'
   00AB 6E                  245 	.db #0x6e	; 110	'n'
   00AC 67                  246 	.db #0x67	; 103	'g'
   00AD 20                  247 	.db #0x20	; 32
   00AE 74                  248 	.db #0x74	; 116	't'
   00AF 68                  249 	.db #0x68	; 104	'h'
   00B0 69                  250 	.db #0x69	; 105	'i'
   00B1 73                  251 	.db #0x73	; 115	's'
   00B2 20                  252 	.db #0x20	; 32
   00B3 74                  253 	.db #0x74	; 116	't'
   00B4 61                  254 	.db #0x61	; 97	'a'
   00B5 6C                  255 	.db #0x6c	; 108	'l'
   00B6 65                  256 	.db #0x65	; 101	'e'
   00B7 20                  257 	.db #0x20	; 32
   00B8 6F                  258 	.db #0x6f	; 111	'o'
   00B9 66                  259 	.db #0x66	; 102	'f'
   00BA 20                  260 	.db #0x20	; 32
   00BB 61                  261 	.db #0x61	; 97	'a'
   00BC 6E                  262 	.db #0x6e	; 110	'n'
   00BD 20                  263 	.db #0x20	; 32
   00BE 77                  264 	.db #0x77	; 119	'w'
   00BF 65                  265 	.db #0x65	; 101	'e'
   00C0 69                  266 	.db #0x69	; 105	'i'
   00C1 72                  267 	.db #0x72	; 114	'r'
   00C2 64                  268 	.db #0x64	; 100	'd'
   00C3 20                  269 	.db #0x20	; 32
   00C4 62                  270 	.db #0x62	; 98	'b'
   00C5 65                  271 	.db #0x65	; 101	'e'
   00C6 68                  272 	.db #0x68	; 104	'h'
   00C7 61                  273 	.db #0x61	; 97	'a'
   00C8 76                  274 	.db #0x76	; 118	'v'
   00C9 69                  275 	.db #0x69	; 105	'i'
   00CA 6F                  276 	.db #0x6f	; 111	'o'
   00CB 72                  277 	.db #0x72	; 114	'r'
   00CC 2C                  278 	.db #0x2c	; 44
   00CD 20                  279 	.db #0x20	; 32
   00CE 73                  280 	.db #0x73	; 115	's'
   00CF 69                  281 	.db #0x69	; 105	'i'
   00D0 74                  282 	.db #0x74	; 116	't'
   00D1 20                  283 	.db #0x20	; 32
   00D2 61                  284 	.db #0x61	; 97	'a'
   00D3 6E                  285 	.db #0x6e	; 110	'n'
   00D4 64                  286 	.db #0x64	; 100	'd'
   00D5 20                  287 	.db #0x20	; 32
   00D6 68                  288 	.db #0x68	; 104	'h'
   00D7 61                  289 	.db #0x61	; 97	'a'
   00D8 76                  290 	.db #0x76	; 118	'v'
   00D9 65                  291 	.db #0x65	; 101	'e'
   00DA 20                  292 	.db #0x20	; 32
   00DB 66                  293 	.db #0x66	; 102	'f'
   00DC 75                  294 	.db #0x75	; 117	'u'
   00DD 6E                  295 	.db #0x6e	; 110	'n'
   00DE 20                  296 	.db #0x20	; 32
   00DF 61                  297 	.db #0x61	; 97	'a'
   00E0 73                  298 	.db #0x73	; 115	's'
   00E1 20                  299 	.db #0x20	; 32
   00E2 74                  300 	.db #0x74	; 116	't'
   00E3 68                  301 	.db #0x68	; 104	'h'
   00E4 69                  302 	.db #0x69	; 105	'i'
   00E5 73                  303 	.db #0x73	; 115	's'
   00E6 20                  304 	.db #0x20	; 32
   00E7 69                  305 	.db #0x69	; 105	'i'
   00E8 73                  306 	.db #0x73	; 115	's'
   00E9 20                  307 	.db #0x20	; 32
   00EA 6F                  308 	.db #0x6f	; 111	'o'
   00EB 76                  309 	.db #0x76	; 118	'v'
   00EC 65                  310 	.db #0x65	; 101	'e'
   00ED 72                  311 	.db #0x72	; 114	'r'
   00EE 77                  312 	.db #0x77	; 119	'w'
   00EF 72                  313 	.db #0x72	; 114	'r'
   00F0 69                  314 	.db #0x69	; 105	'i'
   00F1 74                  315 	.db #0x74	; 116	't'
   00F2 74                  316 	.db #0x74	; 116	't'
   00F3 65                  317 	.db #0x65	; 101	'e'
   00F4 6E                  318 	.db #0x6e	; 110	'n'
   00F5 21                  319 	.db #0x21	; 33
   00F6 0D                  320 	.db #0x0d	; 13
   00F7 0A                  321 	.db #0x0a	; 10
   00F8 00                  322 	.db #0x00	; 0
   00F9 00                  323 	.db #0x00	; 0
   00FA 00                  324 	.db #0x00	; 0
   00FB 00                  325 	.db #0x00	; 0
   00FC 00                  326 	.db #0x00	; 0
   00FD 00                  327 	.db #0x00	; 0
   00FE 00                  328 	.db #0x00	; 0
   00FF 00                  329 	.db #0x00	; 0
   0100 00                  330 	.db #0x00	; 0
   0101 00                  331 	.db #0x00	; 0
   0102 00                  332 	.db #0x00	; 0
   0103 00                  333 	.db #0x00	; 0
   0104 00                  334 	.db #0x00	; 0
   0105 00                  335 	.db #0x00	; 0
   0106 00                  336 	.db #0x00	; 0
   0107 00                  337 	.db #0x00	; 0
   0108 00                  338 	.db #0x00	; 0
   0109                     339 _endUpdate:
   0109 45                  340 	.db #0x45	; 69	'E'
   010A 00                  341 	.db #0x00	; 0
   010B                     342 _versionResponse:
   010B 56                  343 	.db #0x56	; 86	'V'
   010C                     344 _certificateDone:
   010C 49                  345 	.db #0x49	; 73	'I'
   010D 00                  346 	.db #0x00	; 0
   010E                     347 _responseOK:
   010E 4F                  348 	.db #0x4f	; 79	'O'
   010F 4B                  349 	.db #0x4b	; 75	'K'
   0110                     350 _scanResponse:
   0110 53                  351 	.db #0x53	; 83	'S'
   0111 00                  352 	.db #0x00	; 0
   0112                     353 _scanresNoNetwork:
   0112 53                  354 	.db #0x53	; 83	'S'
   0113 02                  355 	.db #0x02	; 2
   0114                     356 _nagleonResponse:
   0114 44                  357 	.db #0x44	; 68	'D'
   0115 00                  358 	.db #0x00	; 0
   0116                     359 _nagleoffResponse:
   0116 4E                  360 	.db #0x4e	; 78	'N'
   0117 00                  361 	.db #0x00	; 0
   0118                     362 _scanresResponse:
   0118 73                  363 	.db #0x73	; 115	's'
   0119 00                  364 	.db #0x00	; 0
   011A                     365 _apconfigurationResponse:
   011A 41                  366 	.db #0x41	; 65	'A'
   011B 00                  367 	.db #0x00	; 0
   011C                     368 _apstsResponse:
   011C 67                  369 	.db #0x67	; 103	'g'
   011D 00                  370 	.db #0x00	; 0
   011E 00                  371 	.db #0x00	; 0
   011F                     372 _responseRSFWUpdate:
   011F 5A                  373 	.db #0x5a	; 90	'Z'
   0120 00                  374 	.db #0x00	; 0
   0121                     375 _responseRSCERTUpdate:
   0121 59                  376 	.db #0x59	; 89	'Y'
   0122 00                  377 	.db #0x00	; 0
   0123                     378 _responseWRBlock:
   0123 7A                  379 	.db #0x7a	; 122	'z'
   0124 00                  380 	.db #0x00	; 0
   0125                     381 _responseOTAFW:
   0125 55                  382 	.db #0x55	; 85	'U'
   0126 00                  383 	.db #0x00	; 0
   0127                     384 _responseOTASPIFF:
   0127 75                  385 	.db #0x75	; 117	'u'
   0128 00                  386 	.db #0x00	; 0
   0129                     387 _responseRadioOnTimeout:
   0129 54                  388 	.db #0x54	; 84	'T'
   012A 00                  389 	.db #0x00	; 0
   012B                     390 _radioOffResponse:
   012B 4F                  391 	.db #0x4f	; 79	'O'
   012C 00                  392 	.db #0x00	; 0
   012D                     393 _advance:
   012D 5B                  394 	.db #0x5b	; 91
   012E 2D                  395 	.db #0x2d	; 45
   012F 3E                  396 	.db #0x3e	; 62
   0130 20                  397 	.db #0x20	; 32
   0131 20                  398 	.db #0x20	; 32
   0132 20                  399 	.db #0x20	; 32
   0133 5D                  400 	.db #0x5d	; 93
   0134 1D                  401 	.db #0x1d	; 29
   0135 1D                  402 	.db #0x1d	; 29
   0136 1D                  403 	.db #0x1d	; 29
   0137 1D                  404 	.db #0x1d	; 29
   0138 1D                  405 	.db #0x1d	; 29
   0139 1D                  406 	.db #0x1d	; 29
   013A 1D                  407 	.db #0x1d	; 29
   013B 00                  408 	.db #0x00	; 0
   013C 5B                  409 	.db #0x5b	; 91
   013D 20                  410 	.db #0x20	; 32
   013E 2D                  411 	.db #0x2d	; 45
   013F 3E                  412 	.db #0x3e	; 62
   0140 20                  413 	.db #0x20	; 32
   0141 20                  414 	.db #0x20	; 32
   0142 5D                  415 	.db #0x5d	; 93
   0143 1D                  416 	.db #0x1d	; 29
   0144 1D                  417 	.db #0x1d	; 29
   0145 1D                  418 	.db #0x1d	; 29
   0146 1D                  419 	.db #0x1d	; 29
   0147 1D                  420 	.db #0x1d	; 29
   0148 1D                  421 	.db #0x1d	; 29
   0149 1D                  422 	.db #0x1d	; 29
   014A 00                  423 	.db #0x00	; 0
   014B 5B                  424 	.db #0x5b	; 91
   014C 20                  425 	.db #0x20	; 32
   014D 20                  426 	.db #0x20	; 32
   014E 2D                  427 	.db #0x2d	; 45
   014F 3E                  428 	.db #0x3e	; 62
   0150 20                  429 	.db #0x20	; 32
   0151 5D                  430 	.db #0x5d	; 93
   0152 1D                  431 	.db #0x1d	; 29
   0153 1D                  432 	.db #0x1d	; 29
   0154 1D                  433 	.db #0x1d	; 29
   0155 1D                  434 	.db #0x1d	; 29
   0156 1D                  435 	.db #0x1d	; 29
   0157 1D                  436 	.db #0x1d	; 29
   0158 1D                  437 	.db #0x1d	; 29
   0159 00                  438 	.db #0x00	; 0
   015A 5B                  439 	.db #0x5b	; 91
   015B 20                  440 	.db #0x20	; 32
   015C 20                  441 	.db #0x20	; 32
   015D 20                  442 	.db #0x20	; 32
   015E 2D                  443 	.db #0x2d	; 45
   015F 3E                  444 	.db #0x3e	; 62
   0160 5D                  445 	.db #0x5d	; 93
   0161 1D                  446 	.db #0x1d	; 29
   0162 1D                  447 	.db #0x1d	; 29
   0163 1D                  448 	.db #0x1d	; 29
   0164 1D                  449 	.db #0x1d	; 29
   0165 1D                  450 	.db #0x1d	; 29
   0166 1D                  451 	.db #0x1d	; 29
   0167 1D                  452 	.db #0x1d	; 29
   0168 00                  453 	.db #0x00	; 0
   0169 5B                  454 	.db #0x5b	; 91
   016A 20                  455 	.db #0x20	; 32
   016B 20                  456 	.db #0x20	; 32
   016C 20                  457 	.db #0x20	; 32
   016D 20                  458 	.db #0x20	; 32
   016E 3C                  459 	.db #0x3c	; 60
   016F 5D                  460 	.db #0x5d	; 93
   0170 1D                  461 	.db #0x1d	; 29
   0171 1D                  462 	.db #0x1d	; 29
   0172 1D                  463 	.db #0x1d	; 29
   0173 1D                  464 	.db #0x1d	; 29
   0174 1D                  465 	.db #0x1d	; 29
   0175 1D                  466 	.db #0x1d	; 29
   0176 1D                  467 	.db #0x1d	; 29
   0177 00                  468 	.db #0x00	; 0
   0178 5B                  469 	.db #0x5b	; 91
   0179 20                  470 	.db #0x20	; 32
   017A 20                  471 	.db #0x20	; 32
   017B 20                  472 	.db #0x20	; 32
   017C 3C                  473 	.db #0x3c	; 60
   017D 2D                  474 	.db #0x2d	; 45
   017E 5D                  475 	.db #0x5d	; 93
   017F 1D                  476 	.db #0x1d	; 29
   0180 1D                  477 	.db #0x1d	; 29
   0181 1D                  478 	.db #0x1d	; 29
   0182 1D                  479 	.db #0x1d	; 29
   0183 1D                  480 	.db #0x1d	; 29
   0184 1D                  481 	.db #0x1d	; 29
   0185 1D                  482 	.db #0x1d	; 29
   0186 00                  483 	.db #0x00	; 0
   0187 5B                  484 	.db #0x5b	; 91
   0188 20                  485 	.db #0x20	; 32
   0189 20                  486 	.db #0x20	; 32
   018A 3C                  487 	.db #0x3c	; 60
   018B 2D                  488 	.db #0x2d	; 45
   018C 20                  489 	.db #0x20	; 32
   018D 5D                  490 	.db #0x5d	; 93
   018E 1D                  491 	.db #0x1d	; 29
   018F 1D                  492 	.db #0x1d	; 29
   0190 1D                  493 	.db #0x1d	; 29
   0191 1D                  494 	.db #0x1d	; 29
   0192 1D                  495 	.db #0x1d	; 29
   0193 1D                  496 	.db #0x1d	; 29
   0194 1D                  497 	.db #0x1d	; 29
   0195 00                  498 	.db #0x00	; 0
   0196 5B                  499 	.db #0x5b	; 91
   0197 20                  500 	.db #0x20	; 32
   0198 3C                  501 	.db #0x3c	; 60
   0199 2D                  502 	.db #0x2d	; 45
   019A 20                  503 	.db #0x20	; 32
   019B 20                  504 	.db #0x20	; 32
   019C 5D                  505 	.db #0x5d	; 93
   019D 1D                  506 	.db #0x1d	; 29
   019E 1D                  507 	.db #0x1d	; 29
   019F 1D                  508 	.db #0x1d	; 29
   01A0 1D                  509 	.db #0x1d	; 29
   01A1 1D                  510 	.db #0x1d	; 29
   01A2 1D                  511 	.db #0x1d	; 29
   01A3 1D                  512 	.db #0x1d	; 29
   01A4 00                  513 	.db #0x00	; 0
   01A5 5B                  514 	.db #0x5b	; 91
   01A6 3C                  515 	.db #0x3c	; 60
   01A7 2D                  516 	.db #0x2d	; 45
   01A8 20                  517 	.db #0x20	; 32
   01A9 20                  518 	.db #0x20	; 32
   01AA 20                  519 	.db #0x20	; 32
   01AB 5D                  520 	.db #0x5d	; 93
   01AC 1D                  521 	.db #0x1d	; 29
   01AD 1D                  522 	.db #0x1d	; 29
   01AE 1D                  523 	.db #0x1d	; 29
   01AF 1D                  524 	.db #0x1d	; 29
   01B0 1D                  525 	.db #0x1d	; 29
   01B1 1D                  526 	.db #0x1d	; 29
   01B2 1D                  527 	.db #0x1d	; 29
   01B3 00                  528 	.db #0x00	; 0
   01B4 5B                  529 	.db #0x5b	; 91
   01B5 3E                  530 	.db #0x3e	; 62
   01B6 20                  531 	.db #0x20	; 32
   01B7 20                  532 	.db #0x20	; 32
   01B8 20                  533 	.db #0x20	; 32
   01B9 20                  534 	.db #0x20	; 32
   01BA 5D                  535 	.db #0x5d	; 93
   01BB 1D                  536 	.db #0x1d	; 29
   01BC 1D                  537 	.db #0x1d	; 29
   01BD 1D                  538 	.db #0x1d	; 29
   01BE 1D                  539 	.db #0x1d	; 29
   01BF 1D                  540 	.db #0x1d	; 29
   01C0 1D                  541 	.db #0x1d	; 29
   01C1 1D                  542 	.db #0x1d	; 29
   01C2 00                  543 	.db #0x00	; 0
   01C3                     544 _aDone:
   01C3 20                  545 	.db #0x20	; 32
   01C4 20                  546 	.db #0x20	; 32
   01C5 20                  547 	.db #0x20	; 32
   01C6 20                  548 	.db #0x20	; 32
   01C7 20                  549 	.db #0x20	; 32
   01C8 20                  550 	.db #0x20	; 32
   01C9 20                  551 	.db #0x20	; 32
   01CA 0D                  552 	.db #0x0d	; 13
   01CB 00                  553 	.db #0x00	; 0
   01CC                     554 _responseReady2:
   01CC 52                  555 	.db #0x52	; 82	'R'
   01CD 65                  556 	.db #0x65	; 101	'e'
   01CE 61                  557 	.db #0x61	; 97	'a'
   01CF 64                  558 	.db #0x64	; 100	'd'
   01D0 79                  559 	.db #0x79	; 121	'y'
   01D1 0D                  560 	.db #0x0d	; 13
   01D2 0A                  561 	.db #0x0a	; 10
   01D3                     562 _strUsage:
   01D3 55 73 61 67 65 3A   563 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   020F 0D                  564 	.db 0x0d
   0210 0A                  565 	.db 0x0a
   0211 0A                  566 	.db 0x0a
   0212 20 20 20 20 20 20   567 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   024E 6D 20 74 6F 20 74   568 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   025D 0D                  569 	.db 0x0d
   025E 0A                  570 	.db 0x0a
   025F 0A                  571 	.db 0x0a
   0260 20 20 20 20 20 20   572 	.ascii "       CFG8266 /o to turn off radio now if no connections ar"
        20 43 46 47 38 32
        36 36 20 2F 6F 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        72 61 64 69 6F 20
        6E 6F 77 20 69 66
        20 6E 6F 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 73 20 61 72
   029C 65 20 6F 70 65 6E   573 	.ascii "e open"
   02A2 0D                  574 	.db 0x0d
   02A3 0A                  575 	.db 0x0a
   02A4 0A                  576 	.db 0x0a
   02A5 20 20 20 20 20 20   577 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   02E1 79                  578 	.ascii "y"
   02E2 0D                  579 	.db 0x0d
   02E3 0A                  580 	.db 0x0a
   02E4 0A                  581 	.db 0x0a
   02E5 20 20 20 20 20 20   582 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   031D 0D                  583 	.db 0x0d
   031E 0A                  584 	.db 0x0a
   031F 0A                  585 	.db 0x0a
   0320 20 20 20 20 20 20   586 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   035C 6D 77 61 72 65 20   587 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   036A 0D                  588 	.db 0x0d
   036B 0A                  589 	.db 0x0a
   036C 0A                  590 	.db 0x0a
   036D 20 20 20 20 20 20   591 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   03A9 63 61 74 65 73 20   592 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   03B7 0D                  593 	.db 0x0d
   03B8 0A                  594 	.db 0x0a
   03B9 20 20 20 20 20 20   595 	.ascii "       CFG8266 /t TIM to change the inactivity time in secon"
        20 43 46 47 38 32
        36 36 20 2F 74 20
        54 49 4D 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
   03F5 64 73 20 74 6F 20   596 	.ascii "ds to disable radio               0-600 (0 means never disab"
        64 69 73 61 62 6C
        65 20 72 61 64 69
        6F 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 30 2D
        36 30 30 20 28 30
        20 6D 65 61 6E 73
        20 6E 65 76 65 72
        20 64 69 73 61 62
   0431 6C 65 29            597 	.ascii "le)"
   0434 0D                  598 	.db 0x0d
   0435 0A                  599 	.db 0x0a
   0436 45 78 2E 3A 20 20   600 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   0462 00                  601 	.db 0x00
   0463                     602 _chFiller2:
   0463 43                  603 	.db #0x43	; 67	'C'
   0464 46                  604 	.db #0x46	; 70	'F'
   0465 47                  605 	.db #0x47	; 71	'G'
   0466 38                  606 	.db #0x38	; 56	'8'
   0467 32                  607 	.db #0x32	; 50	'2'
   0468 36                  608 	.db #0x36	; 54	'6'
   0469 36                  609 	.db #0x36	; 54	'6'
   046A 20                  610 	.db #0x20	; 32
   046B 59                  611 	.db #0x59	; 89	'Y'
   046C 6F                  612 	.db #0x6f	; 111	'o'
   046D 75                  613 	.db #0x75	; 117	'u'
   046E 20                  614 	.db #0x20	; 32
   046F 68                  615 	.db #0x68	; 104	'h'
   0470 61                  616 	.db #0x61	; 97	'a'
   0471 76                  617 	.db #0x76	; 118	'v'
   0472 65                  618 	.db #0x65	; 101	'e'
   0473 20                  619 	.db #0x20	; 32
   0474 61                  620 	.db #0x61	; 97	'a'
   0475 20                  621 	.db #0x20	; 32
   0476 67                  622 	.db #0x67	; 103	'g'
   0477 6F                  623 	.db #0x6f	; 111	'o'
   0478 6F                  624 	.db #0x6f	; 111	'o'
   0479 64                  625 	.db #0x64	; 100	'd'
   047A 20                  626 	.db #0x20	; 32
   047B 74                  627 	.db #0x74	; 116	't'
   047C 69                  628 	.db #0x69	; 105	'i'
   047D 6D                  629 	.db #0x6d	; 109	'm'
   047E 65                  630 	.db #0x65	; 101	'e'
   047F 20                  631 	.db #0x20	; 32
   0480 72                  632 	.db #0x72	; 114	'r'
   0481 65                  633 	.db #0x65	; 101	'e'
   0482 61                  634 	.db #0x61	; 97	'a'
   0483 64                  635 	.db #0x64	; 100	'd'
   0484 69                  636 	.db #0x69	; 105	'i'
   0485 6E                  637 	.db #0x6e	; 110	'n'
   0486 67                  638 	.db #0x67	; 103	'g'
   0487 20                  639 	.db #0x20	; 32
   0488 74                  640 	.db #0x74	; 116	't'
   0489 68                  641 	.db #0x68	; 104	'h'
   048A 69                  642 	.db #0x69	; 105	'i'
   048B 73                  643 	.db #0x73	; 115	's'
   048C 20                  644 	.db #0x20	; 32
   048D 74                  645 	.db #0x74	; 116	't'
   048E 61                  646 	.db #0x61	; 97	'a'
   048F 6C                  647 	.db #0x6c	; 108	'l'
   0490 65                  648 	.db #0x65	; 101	'e'
   0491 20                  649 	.db #0x20	; 32
   0492 6F                  650 	.db #0x6f	; 111	'o'
   0493 66                  651 	.db #0x66	; 102	'f'
   0494 20                  652 	.db #0x20	; 32
   0495 61                  653 	.db #0x61	; 97	'a'
   0496 6E                  654 	.db #0x6e	; 110	'n'
   0497 20                  655 	.db #0x20	; 32
   0498 77                  656 	.db #0x77	; 119	'w'
   0499 65                  657 	.db #0x65	; 101	'e'
   049A 69                  658 	.db #0x69	; 105	'i'
   049B 72                  659 	.db #0x72	; 114	'r'
   049C 64                  660 	.db #0x64	; 100	'd'
   049D 20                  661 	.db #0x20	; 32
   049E 62                  662 	.db #0x62	; 98	'b'
   049F 65                  663 	.db #0x65	; 101	'e'
   04A0 68                  664 	.db #0x68	; 104	'h'
   04A1 61                  665 	.db #0x61	; 97	'a'
   04A2 76                  666 	.db #0x76	; 118	'v'
   04A3 69                  667 	.db #0x69	; 105	'i'
   04A4 6F                  668 	.db #0x6f	; 111	'o'
   04A5 72                  669 	.db #0x72	; 114	'r'
   04A6 2C                  670 	.db #0x2c	; 44
   04A7 20                  671 	.db #0x20	; 32
   04A8 73                  672 	.db #0x73	; 115	's'
   04A9 69                  673 	.db #0x69	; 105	'i'
   04AA 74                  674 	.db #0x74	; 116	't'
   04AB 20                  675 	.db #0x20	; 32
   04AC 61                  676 	.db #0x61	; 97	'a'
   04AD 6E                  677 	.db #0x6e	; 110	'n'
   04AE 64                  678 	.db #0x64	; 100	'd'
   04AF 20                  679 	.db #0x20	; 32
   04B0 68                  680 	.db #0x68	; 104	'h'
   04B1 61                  681 	.db #0x61	; 97	'a'
   04B2 76                  682 	.db #0x76	; 118	'v'
   04B3 65                  683 	.db #0x65	; 101	'e'
   04B4 20                  684 	.db #0x20	; 32
   04B5 66                  685 	.db #0x66	; 102	'f'
   04B6 75                  686 	.db #0x75	; 117	'u'
   04B7 6E                  687 	.db #0x6e	; 110	'n'
   04B8 20                  688 	.db #0x20	; 32
   04B9 61                  689 	.db #0x61	; 97	'a'
   04BA 73                  690 	.db #0x73	; 115	's'
   04BB 20                  691 	.db #0x20	; 32
   04BC 74                  692 	.db #0x74	; 116	't'
   04BD 68                  693 	.db #0x68	; 104	'h'
   04BE 69                  694 	.db #0x69	; 105	'i'
   04BF 73                  695 	.db #0x73	; 115	's'
   04C0 20                  696 	.db #0x20	; 32
   04C1 69                  697 	.db #0x69	; 105	'i'
   04C2 73                  698 	.db #0x73	; 115	's'
   04C3 20                  699 	.db #0x20	; 32
   04C4 6F                  700 	.db #0x6f	; 111	'o'
   04C5 76                  701 	.db #0x76	; 118	'v'
   04C6 65                  702 	.db #0x65	; 101	'e'
   04C7 72                  703 	.db #0x72	; 114	'r'
   04C8 77                  704 	.db #0x77	; 119	'w'
   04C9 72                  705 	.db #0x72	; 114	'r'
   04CA 69                  706 	.db #0x69	; 105	'i'
   04CB 74                  707 	.db #0x74	; 116	't'
   04CC 74                  708 	.db #0x74	; 116	't'
   04CD 65                  709 	.db #0x65	; 101	'e'
   04CE 6E                  710 	.db #0x6e	; 110	'n'
   04CF 21                  711 	.db #0x21	; 33
   04D0 0D                  712 	.db #0x0d	; 13
   04D1 0A                  713 	.db #0x0a	; 10
   04D2 00                  714 	.db #0x00	; 0
   04D3 00                  715 	.db #0x00	; 0
   04D4 00                  716 	.db #0x00	; 0
   04D5 00                  717 	.db #0x00	; 0
   04D6 00                  718 	.db #0x00	; 0
   04D7 00                  719 	.db #0x00	; 0
   04D8 00                  720 	.db #0x00	; 0
   04D9 00                  721 	.db #0x00	; 0
   04DA 00                  722 	.db #0x00	; 0
   04DB 00                  723 	.db #0x00	; 0
   04DC 00                  724 	.db #0x00	; 0
   04DD 00                  725 	.db #0x00	; 0
   04DE 00                  726 	.db #0x00	; 0
   04DF 00                  727 	.db #0x00	; 0
   04E0 00                  728 	.db #0x00	; 0
   04E1 00                  729 	.db #0x00	; 0
   04E2 00                  730 	.db #0x00	; 0
                            731 ;src\CFG8266.c:69: unsigned int IsValidInput (char**argv, int argc, unsigned char *cServer, unsigned char *cFile, unsigned char *cPort)
                            732 ;	---------------------------------
                            733 ; Function IsValidInput
                            734 ; ---------------------------------
   04E3                     735 _IsValidInput::
   04E3 DD E5         [15]  736 	push	ix
   04E5 DD 21 00 00   [14]  737 	ld	ix,#0
   04E9 DD 39         [15]  738 	add	ix,sp
   04EB F5            [11]  739 	push	af
   04EC F5            [11]  740 	push	af
                            741 ;src\CFG8266.c:71: unsigned int ret = 1;
   04ED 01 01 00      [10]  742 	ld	bc, #0x0001
                            743 ;src\CFG8266.c:72: unsigned char * Input = (unsigned char*)argv[0];
   04F0 DD 7E 04      [19]  744 	ld	a, 4 (ix)
   04F3 DD 77 FC      [19]  745 	ld	-4 (ix), a
   04F6 DD 7E 05      [19]  746 	ld	a, 5 (ix)
   04F9 DD 77 FD      [19]  747 	ld	-3 (ix), a
   04FC E1            [10]  748 	pop	hl
   04FD E5            [11]  749 	push	hl
   04FE 7E            [ 7]  750 	ld	a, (hl)
   04FF DD 77 FE      [19]  751 	ld	-2 (ix), a
   0502 23            [ 6]  752 	inc	hl
   0503 7E            [ 7]  753 	ld	a, (hl)
   0504 DD 77 FF      [19]  754 	ld	-1 (ix), a
                            755 ;src\CFG8266.c:74: ucScan = 0;
   0507 21r00r00      [10]  756 	ld	hl,#_ucScan + 0
   050A 36 00         [10]  757 	ld	(hl), #0x00
                            758 ;src\CFG8266.c:76: if (argc)
   050C DD 7E 07      [19]  759 	ld	a, 7 (ix)
   050F DD B6 06      [19]  760 	or	a, 6 (ix)
   0512 CArA4r07      [10]  761 	jp	Z, 00162$
                            762 ;src\CFG8266.c:78: if ((argc==1)||(argc==2)||(argc==4))
   0515 DD 7E 06      [19]  763 	ld	a, 6 (ix)
   0518 3D            [ 4]  764 	dec	a
   0519 DD B6 07      [19]  765 	or	a, 7 (ix)
   051C 3E 01         [ 7]  766 	ld	a, #0x01
   051E 28 01         [12]  767 	jr	Z,00287$
   0520 AF            [ 4]  768 	xor	a, a
   0521                     769 00287$:
   0521 57            [ 4]  770 	ld	d, a
   0522 B7            [ 4]  771 	or	a, a
   0523 20 15         [12]  772 	jr	NZ,00156$
   0525 DD 7E 06      [19]  773 	ld	a, 6 (ix)
   0528 D6 02         [ 7]  774 	sub	a, #0x02
   052A DD B6 07      [19]  775 	or	a, 7 (ix)
   052D 28 0B         [12]  776 	jr	Z,00156$
   052F DD 7E 06      [19]  777 	ld	a, 6 (ix)
   0532 D6 04         [ 7]  778 	sub	a, #0x04
   0534 DD B6 07      [19]  779 	or	a, 7 (ix)
   0537 C2r9Fr07      [10]  780 	jp	NZ,00157$
   053A                     781 00156$:
                            782 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   053A DD 6E FE      [19]  783 	ld	l, -2 (ix)
   053D DD 66 FF      [19]  784 	ld	h, -1 (ix)
   0540 7E            [ 7]  785 	ld	a, (hl)
   0541 D6 2F         [ 7]  786 	sub	a, #0x2f
   0543 3E 01         [ 7]  787 	ld	a, #0x01
   0545 28 01         [12]  788 	jr	Z,00292$
   0547 AF            [ 4]  789 	xor	a, a
   0548                     790 00292$:
   0548 5F            [ 4]  791 	ld	e, a
                            792 ;src\CFG8266.c:80: if ((argc==1)||(argc==2))
   0549 7A            [ 4]  793 	ld	a, d
   054A B7            [ 4]  794 	or	a, a
   054B 20 0B         [12]  795 	jr	NZ,00152$
   054D DD 7E 06      [19]  796 	ld	a, 6 (ix)
   0550 D6 02         [ 7]  797 	sub	a, #0x02
   0552 DD B6 07      [19]  798 	or	a, 7 (ix)
   0555 C2r5Ar06      [10]  799 	jp	NZ,00153$
   0558                     800 00152$:
                            801 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0558 7B            [ 4]  802 	ld	a, e
   0559 B7            [ 4]  803 	or	a, a
   055A 28 18         [12]  804 	jr	Z,00132$
   055C DD 6E FE      [19]  805 	ld	l, -2 (ix)
   055F DD 66 FF      [19]  806 	ld	h, -1 (ix)
   0562 23            [ 6]  807 	inc	hl
   0563 7E            [ 7]  808 	ld	a, (hl)
   0564 FE 73         [ 7]  809 	cp	a, #0x73
   0566 28 04         [12]  810 	jr	Z,00131$
   0568 D6 53         [ 7]  811 	sub	a, #0x53
   056A 20 08         [12]  812 	jr	NZ,00132$
   056C                     813 00131$:
                            814 ;src\CFG8266.c:83: ucScan = 1;
   056C 21r00r00      [10]  815 	ld	hl,#_ucScan + 0
   056F 36 01         [10]  816 	ld	(hl), #0x01
   0571 C3rA7r07      [10]  817 	jp	00163$
   0574                     818 00132$:
                            819 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   0574 7B            [ 4]  820 	ld	a, e
   0575 B7            [ 4]  821 	or	a, a
   0576 28 18         [12]  822 	jr	Z,00127$
   0578 DD 6E FE      [19]  823 	ld	l, -2 (ix)
   057B DD 66 FF      [19]  824 	ld	h, -1 (ix)
   057E 23            [ 6]  825 	inc	hl
   057F 7E            [ 7]  826 	ld	a, (hl)
   0580 FE 6E         [ 7]  827 	cp	a, #0x6e
   0582 28 04         [12]  828 	jr	Z,00126$
   0584 D6 4E         [ 7]  829 	sub	a, #0x4e
   0586 20 08         [12]  830 	jr	NZ,00127$
   0588                     831 00126$:
                            832 ;src\CFG8266.c:85: ucNagleOff = 1;
   0588 21r09r00      [10]  833 	ld	hl,#_ucNagleOff + 0
   058B 36 01         [10]  834 	ld	(hl), #0x01
   058D C3rA7r07      [10]  835 	jp	00163$
   0590                     836 00127$:
                            837 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0590 7B            [ 4]  838 	ld	a, e
   0591 B7            [ 4]  839 	or	a, a
   0592 28 18         [12]  840 	jr	Z,00122$
   0594 DD 6E FE      [19]  841 	ld	l, -2 (ix)
   0597 DD 66 FF      [19]  842 	ld	h, -1 (ix)
   059A 23            [ 6]  843 	inc	hl
   059B 7E            [ 7]  844 	ld	a, (hl)
   059C FE 6D         [ 7]  845 	cp	a, #0x6d
   059E 28 04         [12]  846 	jr	Z,00121$
   05A0 D6 4D         [ 7]  847 	sub	a, #0x4d
   05A2 20 08         [12]  848 	jr	NZ,00122$
   05A4                     849 00121$:
                            850 ;src\CFG8266.c:87: ucNagleOn = 1;
   05A4 21r0Ar00      [10]  851 	ld	hl,#_ucNagleOn + 0
   05A7 36 01         [10]  852 	ld	(hl), #0x01
   05A9 C3rA7r07      [10]  853 	jp	00163$
   05AC                     854 00122$:
                            855 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   05AC 7B            [ 4]  856 	ld	a, e
   05AD B7            [ 4]  857 	or	a, a
   05AE 28 18         [12]  858 	jr	Z,00117$
   05B0 DD 6E FE      [19]  859 	ld	l, -2 (ix)
   05B3 DD 66 FF      [19]  860 	ld	h, -1 (ix)
   05B6 23            [ 6]  861 	inc	hl
   05B7 7E            [ 7]  862 	ld	a, (hl)
   05B8 FE 6F         [ 7]  863 	cp	a, #0x6f
   05BA 28 04         [12]  864 	jr	Z,00116$
   05BC D6 4F         [ 7]  865 	sub	a, #0x4f
   05BE 20 08         [12]  866 	jr	NZ,00117$
   05C0                     867 00116$:
                            868 ;src\CFG8266.c:89: ucRadioOff = 1;
   05C0 21r0Br00      [10]  869 	ld	hl,#_ucRadioOff + 0
   05C3 36 01         [10]  870 	ld	(hl), #0x01
   05C5 C3rA7r07      [10]  871 	jp	00163$
   05C8                     872 00117$:
                            873 ;src\CFG8266.c:90: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   05C8 7B            [ 4]  874 	ld	a, e
   05C9 B7            [ 4]  875 	or	a, a
   05CA 28 3E         [12]  876 	jr	Z,00112$
   05CC D1            [10]  877 	pop	de
   05CD E1            [10]  878 	pop	hl
   05CE E5            [11]  879 	push	hl
   05CF D5            [11]  880 	push	de
   05D0 23            [ 6]  881 	inc	hl
   05D1 7E            [ 7]  882 	ld	a, (hl)
   05D2 FE 74         [ 7]  883 	cp	a, #0x74
   05D4 28 04         [12]  884 	jr	Z,00111$
   05D6 D6 54         [ 7]  885 	sub	a, #0x54
   05D8 20 30         [12]  886 	jr	NZ,00112$
   05DA                     887 00111$:
                            888 ;src\CFG8266.c:92: ucSetTimeout = 1;
   05DA 21r0Cr00      [10]  889 	ld	hl,#_ucSetTimeout + 0
   05DD 36 01         [10]  890 	ld	(hl), #0x01
                            891 ;src\CFG8266.c:93: Input = (unsigned char*)argv[1];
   05DF E1            [10]  892 	pop	hl
   05E0 E5            [11]  893 	push	hl
   05E1 23            [ 6]  894 	inc	hl
   05E2 23            [ 6]  895 	inc	hl
   05E3 5E            [ 7]  896 	ld	e, (hl)
   05E4 23            [ 6]  897 	inc	hl
   05E5 56            [ 7]  898 	ld	d, (hl)
                            899 ;src\CFG8266.c:94: uiTimeout = atoi (Input);
   05E6 C5            [11]  900 	push	bc
   05E7 D5            [11]  901 	push	de
   05E8 CDr00r00      [17]  902 	call	_atoi
   05EB F1            [10]  903 	pop	af
   05EC C1            [10]  904 	pop	bc
   05ED 22r0Dr00      [16]  905 	ld	(_uiTimeout), hl
                            906 ;src\CFG8266.c:95: if (uiTimeout > 600)
   05F0 3E 58         [ 7]  907 	ld	a, #0x58
   05F2 FD 21r0Dr00   [14]  908 	ld	iy, #_uiTimeout
   05F6 FD BE 00      [19]  909 	cp	a, 0 (iy)
   05F9 3E 02         [ 7]  910 	ld	a, #0x02
   05FB FD 9E 01      [19]  911 	sbc	a, 1 (iy)
   05FE D2rA7r07      [10]  912 	jp	NC, 00163$
                            913 ;src\CFG8266.c:96: uiTimeout = 600;
   0601 21 58 02      [10]  914 	ld	hl, #0x0258
   0604 22r0Dr00      [16]  915 	ld	(_uiTimeout), hl
   0607 C3rA7r07      [10]  916 	jp	00163$
   060A                     917 00112$:
                            918 ;src\CFG8266.c:100: strcpy (cFile,Input);
   060A C5            [11]  919 	push	bc
   060B DD 5E 0A      [19]  920 	ld	e, 10 (ix)
   060E DD 56 0B      [19]  921 	ld	d, 11 (ix)
   0611 DD 6E FE      [19]  922 	ld	l, -2 (ix)
   0614 DD 66 FF      [19]  923 	ld	h, -1 (ix)
   0617 AF            [ 4]  924 	xor	a, a
   0618                     925 00310$:
   0618 BE            [ 7]  926 	cp	a, (hl)
   0619 ED A0         [16]  927 	ldi
   061B 20 FB         [12]  928 	jr	NZ, 00310$
   061D C1            [10]  929 	pop	bc
                            930 ;src\CFG8266.c:101: ucLocalUpdate = 1;
   061E 21r07r00      [10]  931 	ld	hl,#_ucLocalUpdate + 0
   0621 36 01         [10]  932 	ld	(hl), #0x01
                            933 ;src\CFG8266.c:102: if (argc==2)
   0623 DD 7E 06      [19]  934 	ld	a, 6 (ix)
   0626 D6 02         [ 7]  935 	sub	a, #0x02
   0628 DD B6 07      [19]  936 	or	a, 7 (ix)
   062B 20 25         [12]  937 	jr	NZ,00109$
                            938 ;src\CFG8266.c:104: Input = (unsigned char*)argv[1];
   062D E1            [10]  939 	pop	hl
   062E E5            [11]  940 	push	hl
   062F 23            [ 6]  941 	inc	hl
   0630 23            [ 6]  942 	inc	hl
   0631 5E            [ 7]  943 	ld	e, (hl)
   0632 23            [ 6]  944 	inc	hl
   0633 56            [ 7]  945 	ld	d, (hl)
                            946 ;src\CFG8266.c:105: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   0634 1A            [ 7]  947 	ld	a, (de)
   0635 D6 2F         [ 7]  948 	sub	a, #0x2f
   0637 20 13         [12]  949 	jr	NZ,00104$
   0639 EB            [ 4]  950 	ex	de,hl
   063A 23            [ 6]  951 	inc	hl
   063B 7E            [ 7]  952 	ld	a, (hl)
   063C FE 63         [ 7]  953 	cp	a, #0x63
   063E 28 04         [12]  954 	jr	Z,00103$
   0640 D6 43         [ 7]  955 	sub	a, #0x43
   0642 20 08         [12]  956 	jr	NZ,00104$
   0644                     957 00103$:
                            958 ;src\CFG8266.c:106: ucIsFw=0;
   0644 21r08r00      [10]  959 	ld	hl,#_ucIsFw + 0
   0647 36 00         [10]  960 	ld	(hl), #0x00
   0649 C3rA7r07      [10]  961 	jp	00163$
   064C                     962 00104$:
                            963 ;src\CFG8266.c:108: ret=0;
   064C 01 00 00      [10]  964 	ld	bc, #0x0000
   064F C3rA7r07      [10]  965 	jp	00163$
   0652                     966 00109$:
                            967 ;src\CFG8266.c:112: ucIsFw=1;
   0652 21r08r00      [10]  968 	ld	hl,#_ucIsFw + 0
   0655 36 01         [10]  969 	ld	(hl), #0x01
   0657 C3rA7r07      [10]  970 	jp	00163$
   065A                     971 00153$:
                            972 ;src\CFG8266.c:117: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   065A 7B            [ 4]  973 	ld	a, e
   065B B7            [ 4]  974 	or	a, a
   065C CArFCr06      [10]  975 	jp	Z, 00148$
   065F DD 6E FE      [19]  976 	ld	l, -2 (ix)
   0662 DD 66 FF      [19]  977 	ld	h, -1 (ix)
   0665 23            [ 6]  978 	inc	hl
   0666 7E            [ 7]  979 	ld	a, (hl)
   0667 FE 75         [ 7]  980 	cp	a, #0x75
   0669 28 05         [12]  981 	jr	Z,00147$
   066B D6 55         [ 7]  982 	sub	a, #0x55
   066D C2rFCr06      [10]  983 	jp	NZ,00148$
   0670                     984 00147$:
                            985 ;src\CFG8266.c:119: ucIsFw = 1;
   0670 21r08r00      [10]  986 	ld	hl,#_ucIsFw + 0
   0673 36 01         [10]  987 	ld	(hl), #0x01
                            988 ;src\CFG8266.c:120: Input = (unsigned char*)argv[2];
   0675 E1            [10]  989 	pop	hl
   0676 E5            [11]  990 	push	hl
   0677 11 04 00      [10]  991 	ld	de, #0x0004
   067A 19            [11]  992 	add	hl, de
   067B 5E            [ 7]  993 	ld	e, (hl)
   067C 23            [ 6]  994 	inc	hl
   067D 56            [ 7]  995 	ld	d, (hl)
                            996 ;src\CFG8266.c:121: if (strlen (Input)<7)
   067E C5            [11]  997 	push	bc
   067F D5            [11]  998 	push	de
   0680 CDr00r00      [17]  999 	call	_strlen
   0683 F1            [10] 1000 	pop	af
   0684 C1            [10] 1001 	pop	bc
   0685 7D            [ 4] 1002 	ld	a, l
   0686 D6 07         [ 7] 1003 	sub	a, #0x07
   0688 7C            [ 4] 1004 	ld	a, h
   0689 DE 00         [ 7] 1005 	sbc	a, #0x00
   068B 30 69         [12] 1006 	jr	NC,00137$
                           1007 ;src\CFG8266.c:123: strcpy(cPort,Input);
   068D C5            [11] 1008 	push	bc
   068E EB            [ 4] 1009 	ex	de,hl
   068F DD 5E 0C      [19] 1010 	ld	e, 12 (ix)
   0692 DD 56 0D      [19] 1011 	ld	d, 13 (ix)
   0695 AF            [ 4] 1012 	xor	a, a
   0696                    1013 00321$:
   0696 BE            [ 7] 1014 	cp	a, (hl)
   0697 ED A0         [16] 1015 	ldi
   0699 20 FB         [12] 1016 	jr	NZ, 00321$
   069B C1            [10] 1017 	pop	bc
                           1018 ;src\CFG8266.c:124: Input = (unsigned char*)argv[1];
   069C E1            [10] 1019 	pop	hl
   069D E5            [11] 1020 	push	hl
   069E 23            [ 6] 1021 	inc	hl
   069F 23            [ 6] 1022 	inc	hl
   06A0 5E            [ 7] 1023 	ld	e, (hl)
   06A1 23            [ 6] 1024 	inc	hl
   06A2 66            [ 7] 1025 	ld	h, (hl)
                           1026 ;src\CFG8266.c:125: strcpy(cServer,Input);
   06A3 C5            [11] 1027 	push	bc
   06A4 6B            [ 4] 1028 	ld	l, e
   06A5 DD 5E 08      [19] 1029 	ld	e, 8 (ix)
   06A8 DD 56 09      [19] 1030 	ld	d, 9 (ix)
   06AB AF            [ 4] 1031 	xor	a, a
   06AC                    1032 00322$:
   06AC BE            [ 7] 1033 	cp	a, (hl)
   06AD ED A0         [16] 1034 	ldi
   06AF 20 FB         [12] 1035 	jr	NZ, 00322$
   06B1 C1            [10] 1036 	pop	bc
                           1037 ;src\CFG8266.c:126: Input = (unsigned char*)argv[3];
   06B2 E1            [10] 1038 	pop	hl
   06B3 E5            [11] 1039 	push	hl
   06B4 11 06 00      [10] 1040 	ld	de, #0x0006
   06B7 19            [11] 1041 	add	hl, de
   06B8 5E            [ 7] 1042 	ld	e, (hl)
   06B9 23            [ 6] 1043 	inc	hl
   06BA 66            [ 7] 1044 	ld	h, (hl)
                           1045 ;src\CFG8266.c:127: strcpy(cFile,Input);
   06BB C5            [11] 1046 	push	bc
   06BC 6B            [ 4] 1047 	ld	l, e
   06BD DD 5E 0A      [19] 1048 	ld	e, 10 (ix)
   06C0 DD 56 0B      [19] 1049 	ld	d, 11 (ix)
   06C3 AF            [ 4] 1050 	xor	a, a
   06C4                    1051 00323$:
   06C4 BE            [ 7] 1052 	cp	a, (hl)
   06C5 ED A0         [16] 1053 	ldi
   06C7 20 FB         [12] 1054 	jr	NZ, 00323$
   06C9 DD 6E 0C      [19] 1055 	ld	l, 12 (ix)
   06CC DD 66 0D      [19] 1056 	ld	h, 13 (ix)
   06CF E5            [11] 1057 	push	hl
   06D0 CDr00r00      [17] 1058 	call	_atol
   06D3 F1            [10] 1059 	pop	af
   06D4 DD 75 FC      [19] 1060 	ld	-4 (ix), l
   06D7 DD 74 FD      [19] 1061 	ld	-3 (ix), h
   06DA DD 73 FE      [19] 1062 	ld	-2 (ix), e
   06DD DD 72 FF      [19] 1063 	ld	-1 (ix), d
   06E0 11r03r00      [10] 1064 	ld	de, #_lPort
   06E3 21 02 00      [10] 1065 	ld	hl, #2
   06E6 39            [11] 1066 	add	hl, sp
   06E7 01 04 00      [10] 1067 	ld	bc, #4
   06EA ED B0         [21] 1068 	ldir
   06EC C1            [10] 1069 	pop	bc
                           1070 ;src\CFG8266.c:129: uiPort = (lPort&0xffff);
   06ED 2Ar03r00      [16] 1071 	ld	hl, (_lPort)
   06F0 22r01r00      [16] 1072 	ld	(_uiPort), hl
   06F3 C3rA7r07      [10] 1073 	jp	00163$
   06F6                    1074 00137$:
                           1075 ;src\CFG8266.c:132: ret = 0;
   06F6 01 00 00      [10] 1076 	ld	bc, #0x0000
   06F9 C3rA7r07      [10] 1077 	jp	00163$
   06FC                    1078 00148$:
                           1079 ;src\CFG8266.c:134: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   06FC 7B            [ 4] 1080 	ld	a, e
   06FD B7            [ 4] 1081 	or	a, a
   06FE CAr9Ar07      [10] 1082 	jp	Z, 00143$
   0701 D1            [10] 1083 	pop	de
   0702 E1            [10] 1084 	pop	hl
   0703 E5            [11] 1085 	push	hl
   0704 D5            [11] 1086 	push	de
   0705 23            [ 6] 1087 	inc	hl
   0706 7E            [ 7] 1088 	ld	a, (hl)
   0707 FE 63         [ 7] 1089 	cp	a, #0x63
   0709 28 05         [12] 1090 	jr	Z,00142$
   070B D6 43         [ 7] 1091 	sub	a, #0x43
   070D C2r9Ar07      [10] 1092 	jp	NZ,00143$
   0710                    1093 00142$:
                           1094 ;src\CFG8266.c:136: ucIsFw = 0;
   0710 21r08r00      [10] 1095 	ld	hl,#_ucIsFw + 0
   0713 36 00         [10] 1096 	ld	(hl), #0x00
                           1097 ;src\CFG8266.c:137: Input = (unsigned char*)argv[2];
   0715 E1            [10] 1098 	pop	hl
   0716 E5            [11] 1099 	push	hl
   0717 11 04 00      [10] 1100 	ld	de, #0x0004
   071A 19            [11] 1101 	add	hl, de
   071B 5E            [ 7] 1102 	ld	e, (hl)
   071C 23            [ 6] 1103 	inc	hl
   071D 56            [ 7] 1104 	ld	d, (hl)
                           1105 ;src\CFG8266.c:138: if (strlen (Input)<7)
   071E C5            [11] 1106 	push	bc
   071F D5            [11] 1107 	push	de
   0720 CDr00r00      [17] 1108 	call	_strlen
   0723 F1            [10] 1109 	pop	af
   0724 C1            [10] 1110 	pop	bc
   0725 7D            [ 4] 1111 	ld	a, l
   0726 D6 07         [ 7] 1112 	sub	a, #0x07
   0728 7C            [ 4] 1113 	ld	a, h
   0729 DE 00         [ 7] 1114 	sbc	a, #0x00
   072B 30 68         [12] 1115 	jr	NC,00140$
                           1116 ;src\CFG8266.c:140: strcpy(cPort,Input);
   072D C5            [11] 1117 	push	bc
   072E EB            [ 4] 1118 	ex	de,hl
   072F DD 5E 0C      [19] 1119 	ld	e, 12 (ix)
   0732 DD 56 0D      [19] 1120 	ld	d, 13 (ix)
   0735 AF            [ 4] 1121 	xor	a, a
   0736                    1122 00327$:
   0736 BE            [ 7] 1123 	cp	a, (hl)
   0737 ED A0         [16] 1124 	ldi
   0739 20 FB         [12] 1125 	jr	NZ, 00327$
   073B C1            [10] 1126 	pop	bc
                           1127 ;src\CFG8266.c:141: Input = (unsigned char*)argv[1];
   073C E1            [10] 1128 	pop	hl
   073D E5            [11] 1129 	push	hl
   073E 23            [ 6] 1130 	inc	hl
   073F 23            [ 6] 1131 	inc	hl
   0740 5E            [ 7] 1132 	ld	e, (hl)
   0741 23            [ 6] 1133 	inc	hl
   0742 66            [ 7] 1134 	ld	h, (hl)
                           1135 ;src\CFG8266.c:142: strcpy(cServer,Input);
   0743 C5            [11] 1136 	push	bc
   0744 6B            [ 4] 1137 	ld	l, e
   0745 DD 5E 08      [19] 1138 	ld	e, 8 (ix)
   0748 DD 56 09      [19] 1139 	ld	d, 9 (ix)
   074B AF            [ 4] 1140 	xor	a, a
   074C                    1141 00328$:
   074C BE            [ 7] 1142 	cp	a, (hl)
   074D ED A0         [16] 1143 	ldi
   074F 20 FB         [12] 1144 	jr	NZ, 00328$
   0751 C1            [10] 1145 	pop	bc
                           1146 ;src\CFG8266.c:143: Input = (unsigned char*)argv[3];
   0752 E1            [10] 1147 	pop	hl
   0753 E5            [11] 1148 	push	hl
   0754 11 06 00      [10] 1149 	ld	de, #0x0006
   0757 19            [11] 1150 	add	hl, de
   0758 5E            [ 7] 1151 	ld	e, (hl)
   0759 23            [ 6] 1152 	inc	hl
   075A 66            [ 7] 1153 	ld	h, (hl)
                           1154 ;src\CFG8266.c:144: strcpy(cFile,Input);
   075B C5            [11] 1155 	push	bc
   075C 6B            [ 4] 1156 	ld	l, e
   075D DD 5E 0A      [19] 1157 	ld	e, 10 (ix)
   0760 DD 56 0B      [19] 1158 	ld	d, 11 (ix)
   0763 AF            [ 4] 1159 	xor	a, a
   0764                    1160 00329$:
   0764 BE            [ 7] 1161 	cp	a, (hl)
   0765 ED A0         [16] 1162 	ldi
   0767 20 FB         [12] 1163 	jr	NZ, 00329$
   0769 DD 6E 0C      [19] 1164 	ld	l, 12 (ix)
   076C DD 66 0D      [19] 1165 	ld	h, 13 (ix)
   076F E5            [11] 1166 	push	hl
   0770 CDr00r00      [17] 1167 	call	_atol
   0773 F1            [10] 1168 	pop	af
   0774 DD 75 FC      [19] 1169 	ld	-4 (ix), l
   0777 DD 74 FD      [19] 1170 	ld	-3 (ix), h
   077A DD 73 FE      [19] 1171 	ld	-2 (ix), e
   077D DD 72 FF      [19] 1172 	ld	-1 (ix), d
   0780 11r03r00      [10] 1173 	ld	de, #_lPort
   0783 21 02 00      [10] 1174 	ld	hl, #2
   0786 39            [11] 1175 	add	hl, sp
   0787 01 04 00      [10] 1176 	ld	bc, #4
   078A ED B0         [21] 1177 	ldir
   078C C1            [10] 1178 	pop	bc
                           1179 ;src\CFG8266.c:146: uiPort = (lPort&0xffff);
   078D 2Ar03r00      [16] 1180 	ld	hl, (_lPort)
   0790 22r01r00      [16] 1181 	ld	(_uiPort), hl
   0793 18 12         [12] 1182 	jr	00163$
   0795                    1183 00140$:
                           1184 ;src\CFG8266.c:149: ret = 0;
   0795 01 00 00      [10] 1185 	ld	bc, #0x0000
   0798 18 0D         [12] 1186 	jr	00163$
   079A                    1187 00143$:
                           1188 ;src\CFG8266.c:152: ret = 0;
   079A 01 00 00      [10] 1189 	ld	bc, #0x0000
   079D 18 08         [12] 1190 	jr	00163$
   079F                    1191 00157$:
                           1192 ;src\CFG8266.c:156: ret = 0;
   079F 01 00 00      [10] 1193 	ld	bc, #0x0000
   07A2 18 03         [12] 1194 	jr	00163$
   07A4                    1195 00162$:
                           1196 ;src\CFG8266.c:159: ret=0;
   07A4 01 00 00      [10] 1197 	ld	bc, #0x0000
   07A7                    1198 00163$:
                           1199 ;src\CFG8266.c:161: return ret;
   07A7 69            [ 4] 1200 	ld	l, c
   07A8 60            [ 4] 1201 	ld	h, b
                           1202 ;src\CFG8266.c:162: }
   07A9 DD F9         [10] 1203 	ld	sp, ix
   07AB DD E1         [14] 1204 	pop	ix
   07AD C9            [10] 1205 	ret
                           1206 ;src\CFG8266.c:164: void TxByte(char chTxByte)
                           1207 ;	---------------------------------
                           1208 ; Function TxByte
                           1209 ; ---------------------------------
   07AE                    1210 _TxByte::
                           1211 ;src\CFG8266.c:166: while (myPort7&2);
   07AE                    1212 00101$:
   07AE DB 07         [11] 1213 	in	a, (_myPort7)
   07B0 CB 4F         [ 8] 1214 	bit	1, a
   07B2 20 FA         [12] 1215 	jr	NZ,00101$
                           1216 ;src\CFG8266.c:170: myPort7 = chTxByte;
   07B4 21 02 00      [10] 1217 	ld	hl, #2+0
   07B7 39            [11] 1218 	add	hl, sp
   07B8 7E            [ 7] 1219 	ld	a, (hl)
   07B9 D3 07         [11] 1220 	out	(_myPort7), a
                           1221 ;src\CFG8266.c:171: }
   07BB C9            [10] 1222 	ret
                           1223 ;src\CFG8266.c:173: char *ultostr(unsigned long value, char *ptr, int base)
                           1224 ;	---------------------------------
                           1225 ; Function ultostr
                           1226 ; ---------------------------------
   07BC                    1227 _ultostr::
   07BC DD E5         [15] 1228 	push	ix
   07BE DD 21 00 00   [14] 1229 	ld	ix,#0
   07C2 DD 39         [15] 1230 	add	ix,sp
   07C4 21 F4 FF      [10] 1231 	ld	hl, #-12
   07C7 39            [11] 1232 	add	hl, sp
   07C8 F9            [ 6] 1233 	ld	sp, hl
                           1234 ;src\CFG8266.c:176: unsigned long tmp = value;
   07C9 DD 4E 04      [19] 1235 	ld	c, 4 (ix)
   07CC DD 46 05      [19] 1236 	ld	b, 5 (ix)
   07CF DD 5E 06      [19] 1237 	ld	e, 6 (ix)
   07D2 DD 56 07      [19] 1238 	ld	d, 7 (ix)
                           1239 ;src\CFG8266.c:179: if (NULL == ptr) //if null pointer
   07D5 DD 7E 09      [19] 1240 	ld	a, 9 (ix)
   07D8 DD B6 08      [19] 1241 	or	a, 8 (ix)
   07DB 20 06         [12] 1242 	jr	NZ,00102$
                           1243 ;src\CFG8266.c:180: return NULL; //nothing to do
   07DD 21 00 00      [10] 1244 	ld	hl, #0x0000
   07E0 C3r25r09      [10] 1245 	jp	00118$
   07E3                    1246 00102$:
                           1247 ;src\CFG8266.c:188: tmp = tmp/base;
   07E3 DD 7E 0A      [19] 1248 	ld	a, 10 (ix)
   07E6 DD 77 F8      [19] 1249 	ld	-8 (ix), a
   07E9 DD 7E 0B      [19] 1250 	ld	a, 11 (ix)
   07EC DD 77 F9      [19] 1251 	ld	-7 (ix), a
   07EF 17            [ 4] 1252 	rla
   07F0 9F            [ 4] 1253 	sbc	a, a
   07F1 DD 77 FA      [19] 1254 	ld	-6 (ix), a
   07F4 DD 77 FB      [19] 1255 	ld	-5 (ix), a
                           1256 ;src\CFG8266.c:182: if (tmp == 0) //if value is zero
   07F7 7A            [ 4] 1257 	ld	a, d
   07F8 B3            [ 4] 1258 	or	a, e
   07F9 B0            [ 4] 1259 	or	a, b
   07FA B1            [ 4] 1260 	or	a, c
   07FB 20 04         [12] 1261 	jr	NZ,00123$
                           1262 ;src\CFG8266.c:183: ++count; //one digit
   07FD 0E 01         [ 7] 1263 	ld	c, #0x01
   07FF 18 2B         [12] 1264 	jr	00108$
                           1265 ;src\CFG8266.c:186: while(tmp > 0)
   0801                    1266 00123$:
   0801 AF            [ 4] 1267 	xor	a, a
   0802 DD 77 FF      [19] 1268 	ld	-1 (ix), a
   0805                    1269 00103$:
   0805 7A            [ 4] 1270 	ld	a, d
   0806 B3            [ 4] 1271 	or	a, e
   0807 B0            [ 4] 1272 	or	a, b
   0808 B1            [ 4] 1273 	or	a, c
   0809 28 1E         [12] 1274 	jr	Z,00129$
                           1275 ;src\CFG8266.c:188: tmp = tmp/base;
   080B DD 6E FA      [19] 1276 	ld	l, -6 (ix)
   080E DD 66 FB      [19] 1277 	ld	h, -5 (ix)
   0811 E5            [11] 1278 	push	hl
   0812 DD 6E F8      [19] 1279 	ld	l, -8 (ix)
   0815 DD 66 F9      [19] 1280 	ld	h, -7 (ix)
   0818 E5            [11] 1281 	push	hl
   0819 D5            [11] 1282 	push	de
   081A C5            [11] 1283 	push	bc
   081B CDr00r00      [17] 1284 	call	__divulong
   081E F1            [10] 1285 	pop	af
   081F F1            [10] 1286 	pop	af
   0820 F1            [10] 1287 	pop	af
   0821 F1            [10] 1288 	pop	af
   0822 4D            [ 4] 1289 	ld	c, l
   0823 44            [ 4] 1290 	ld	b, h
                           1291 ;src\CFG8266.c:189: ++count;
   0824 DD 34 FF      [23] 1292 	inc	-1 (ix)
   0827 18 DC         [12] 1293 	jr	00103$
   0829                    1294 00129$:
   0829 DD 4E FF      [19] 1295 	ld	c, -1 (ix)
   082C                    1296 00108$:
                           1297 ;src\CFG8266.c:193: ptr += count; // so, after the LSB
   082C DD 7E 08      [19] 1298 	ld	a, 8 (ix)
   082F 81            [ 4] 1299 	add	a, c
   0830 DD 77 08      [19] 1300 	ld	8 (ix), a
   0833 30 03         [12] 1301 	jr	NC,00166$
   0835 DD 34 09      [23] 1302 	inc	9 (ix)
   0838                    1303 00166$:
                           1304 ;src\CFG8266.c:194: *ptr = '\0'; // null terminator
   0838 DD 4E 08      [19] 1305 	ld	c, 8 (ix)
   083B DD 46 09      [19] 1306 	ld	b, 9 (ix)
   083E AF            [ 4] 1307 	xor	a, a
   083F 02            [ 7] 1308 	ld	(bc), a
                           1309 ;src\CFG8266.c:196: do
   0840                    1310 00115$:
                           1311 ;src\CFG8266.c:198: t = value / base; // useful now (find remainder) as well later (next value of value)
   0840 DD 6E FA      [19] 1312 	ld	l, -6 (ix)
   0843 DD 66 FB      [19] 1313 	ld	h, -5 (ix)
   0846 E5            [11] 1314 	push	hl
   0847 DD 6E F8      [19] 1315 	ld	l, -8 (ix)
   084A DD 66 F9      [19] 1316 	ld	h, -7 (ix)
   084D E5            [11] 1317 	push	hl
   084E DD 6E 06      [19] 1318 	ld	l, 6 (ix)
   0851 DD 66 07      [19] 1319 	ld	h, 7 (ix)
   0854 E5            [11] 1320 	push	hl
   0855 DD 6E 04      [19] 1321 	ld	l, 4 (ix)
   0858 DD 66 05      [19] 1322 	ld	h, 5 (ix)
   085B E5            [11] 1323 	push	hl
   085C CDr00r00      [17] 1324 	call	__divulong
   085F F1            [10] 1325 	pop	af
   0860 F1            [10] 1326 	pop	af
   0861 F1            [10] 1327 	pop	af
   0862 F1            [10] 1328 	pop	af
   0863 4D            [ 4] 1329 	ld	c, l
   0864 44            [ 4] 1330 	ld	b, h
                           1331 ;src\CFG8266.c:199: res = value - base * t; // get what remains of dividing base
   0865 C5            [11] 1332 	push	bc
   0866 D5            [11] 1333 	push	de
   0867 D5            [11] 1334 	push	de
   0868 C5            [11] 1335 	push	bc
   0869 DD 6E FA      [19] 1336 	ld	l, -6 (ix)
   086C DD 66 FB      [19] 1337 	ld	h, -5 (ix)
   086F E5            [11] 1338 	push	hl
   0870 DD 6E F8      [19] 1339 	ld	l, -8 (ix)
   0873 DD 66 F9      [19] 1340 	ld	h, -7 (ix)
   0876 E5            [11] 1341 	push	hl
   0877 CDr00r00      [17] 1342 	call	__mullong
   087A F1            [10] 1343 	pop	af
   087B F1            [10] 1344 	pop	af
   087C F1            [10] 1345 	pop	af
   087D F1            [10] 1346 	pop	af
   087E DD 75 F4      [19] 1347 	ld	-12 (ix), l
   0881 DD 74 F5      [19] 1348 	ld	-11 (ix), h
   0884 DD 73 F6      [19] 1349 	ld	-10 (ix), e
   0887 DD 72 F7      [19] 1350 	ld	-9 (ix), d
   088A D1            [10] 1351 	pop	de
   088B C1            [10] 1352 	pop	bc
   088C DD 7E 04      [19] 1353 	ld	a, 4 (ix)
   088F DD 96 F4      [19] 1354 	sub	a, -12 (ix)
   0892 DD 77 FC      [19] 1355 	ld	-4 (ix), a
   0895 DD 7E 05      [19] 1356 	ld	a, 5 (ix)
   0898 DD 9E F5      [19] 1357 	sbc	a, -11 (ix)
   089B DD 77 FD      [19] 1358 	ld	-3 (ix), a
   089E DD 7E 06      [19] 1359 	ld	a, 6 (ix)
   08A1 DD 9E F6      [19] 1360 	sbc	a, -10 (ix)
   08A4 DD 77 FE      [19] 1361 	ld	-2 (ix), a
   08A7 DD 7E 07      [19] 1362 	ld	a, 7 (ix)
   08AA DD 9E F7      [19] 1363 	sbc	a, -9 (ix)
   08AD DD 77 FF      [19] 1364 	ld	-1 (ix), a
                           1365 ;src\CFG8266.c:201: if (res < 10)
   08B0 DD 7E FC      [19] 1366 	ld	a, -4 (ix)
   08B3 D6 0A         [ 7] 1367 	sub	a, #0x0a
   08B5 DD 7E FD      [19] 1368 	ld	a, -3 (ix)
   08B8 DE 00         [ 7] 1369 	sbc	a, #0x00
   08BA DD 7E FE      [19] 1370 	ld	a, -2 (ix)
   08BD DE 00         [ 7] 1371 	sbc	a, #0x00
   08BF DD 7E FF      [19] 1372 	ld	a, -1 (ix)
   08C2 DE 00         [ 7] 1373 	sbc	a, #0x00
   08C4 3E 00         [ 7] 1374 	ld	a, #0x00
   08C6 17            [ 4] 1375 	rla
   08C7 B7            [ 4] 1376 	or	a, a
   08C8 28 15         [12] 1377 	jr	Z,00113$
                           1378 ;src\CFG8266.c:202: * -- ptr = '0' + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   08CA DD 6E 08      [19] 1379 	ld	l, 8 (ix)
   08CD DD 66 09      [19] 1380 	ld	h, 9 (ix)
   08D0 2B            [ 6] 1381 	dec	hl
   08D1 DD 75 08      [19] 1382 	ld	8 (ix), l
   08D4 DD 74 09      [19] 1383 	ld	9 (ix), h
   08D7 DD 7E FC      [19] 1384 	ld	a, -4 (ix)
   08DA C6 30         [ 7] 1385 	add	a, #0x30
   08DC 77            [ 7] 1386 	ld	(hl), a
   08DD 18 2D         [12] 1387 	jr	00116$
   08DF                    1388 00113$:
                           1389 ;src\CFG8266.c:203: else if ((res >= 10) && (res < 16)) // Otherwise is a HEX value and a digit above 9
   08DF CB 47         [ 8] 1390 	bit	0, a
   08E1 20 29         [12] 1391 	jr	NZ,00116$
   08E3 DD 7E FC      [19] 1392 	ld	a, -4 (ix)
   08E6 D6 10         [ 7] 1393 	sub	a, #0x10
   08E8 DD 7E FD      [19] 1394 	ld	a, -3 (ix)
   08EB DE 00         [ 7] 1395 	sbc	a, #0x00
   08ED DD 7E FE      [19] 1396 	ld	a, -2 (ix)
   08F0 DE 00         [ 7] 1397 	sbc	a, #0x00
   08F2 DD 7E FF      [19] 1398 	ld	a, -1 (ix)
   08F5 DE 00         [ 7] 1399 	sbc	a, #0x00
   08F7 30 13         [12] 1400 	jr	NC,00116$
                           1401 ;src\CFG8266.c:204: * --ptr = 'A' - 10 + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   08F9 DD 6E 08      [19] 1402 	ld	l, 8 (ix)
   08FC DD 66 09      [19] 1403 	ld	h, 9 (ix)
   08FF 2B            [ 6] 1404 	dec	hl
   0900 DD 75 08      [19] 1405 	ld	8 (ix), l
   0903 DD 74 09      [19] 1406 	ld	9 (ix), h
   0906 DD 7E FC      [19] 1407 	ld	a, -4 (ix)
   0909 C6 37         [ 7] 1408 	add	a, #0x37
   090B 77            [ 7] 1409 	ld	(hl), a
   090C                    1410 00116$:
                           1411 ;src\CFG8266.c:205: } while ((value = t) != 0); //value is now t, and if t is other than zero, still work to do
   090C DD 71 04      [19] 1412 	ld	4 (ix), c
   090F DD 70 05      [19] 1413 	ld	5 (ix), b
   0912 DD 73 06      [19] 1414 	ld	6 (ix), e
   0915 DD 72 07      [19] 1415 	ld	7 (ix), d
   0918 7A            [ 4] 1416 	ld	a, d
   0919 B3            [ 4] 1417 	or	a, e
   091A B0            [ 4] 1418 	or	a, b
   091B B1            [ 4] 1419 	or	a, c
   091C C2r40r08      [10] 1420 	jp	NZ, 00115$
                           1421 ;src\CFG8266.c:207: return(ptr); // and return own pointer as successful conversion has been made
   091F DD 6E 08      [19] 1422 	ld	l, 8 (ix)
   0922 DD 66 09      [19] 1423 	ld	h, 9 (ix)
   0925                    1424 00118$:
                           1425 ;src\CFG8266.c:208: }
   0925 DD F9         [10] 1426 	ld	sp, ix
   0927 DD E1         [14] 1427 	pop	ix
   0929 C9            [10] 1428 	ret
                           1429 ;src\CFG8266.c:210: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData, unsigned char *uchData2, unsigned int uiDataSize2)
                           1430 ;	---------------------------------
                           1431 ; Function WaitForRXData
                           1432 ; ---------------------------------
   092A                    1433 _WaitForRXData::
   092A DD E5         [15] 1434 	push	ix
   092C DD 21 00 00   [14] 1435 	ld	ix,#0
   0930 DD 39         [15] 1436 	add	ix,sp
   0932 21 EE FF      [10] 1437 	ld	hl, #-18
   0935 39            [11] 1438 	add	hl, sp
   0936 F9            [ 6] 1439 	ld	sp, hl
                           1440 ;src\CFG8266.c:212: bool bReturn = false;
   0937 AF            [ 4] 1441 	xor	a, a
   0938 DD 77 F0      [19] 1442 	ld	-16 (ix), a
                           1443 ;src\CFG8266.c:217: unsigned int i = 0;
   093B AF            [ 4] 1444 	xor	a, a
   093C DD 77 FE      [19] 1445 	ld	-2 (ix), a
   093F DD 77 FF      [19] 1446 	ld	-1 (ix), a
                           1447 ;src\CFG8266.c:219: if (bShowReceivedData)
   0942 DD 7E 0B      [19] 1448 	ld	a, 11 (ix)
   0945 B7            [ 4] 1449 	or	a, a
   0946 28 6B         [12] 1450 	jr	Z,00104$
                           1451 ;src\CFG8266.c:221: printf ("Waiting for: ");
   0948 21rCEr0B      [10] 1452 	ld	hl, #___str_2
   094B E5            [11] 1453 	push	hl
   094C CDr00r00      [17] 1454 	call	_printf
   094F F1            [10] 1455 	pop	af
                           1456 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   0950 01 00 00      [10] 1457 	ld	bc, #0x0000
   0953                    1458 00144$:
   0953 79            [ 4] 1459 	ld	a, c
   0954 DD 96 06      [19] 1460 	sub	a, 6 (ix)
   0957 78            [ 4] 1461 	ld	a, b
   0958 DD 9E 07      [19] 1462 	sbc	a, 7 (ix)
   095B 30 19         [12] 1463 	jr	NC,00101$
                           1464 ;src\CFG8266.c:223: printf("%c",uchData[i]);
   095D DD 6E 04      [19] 1465 	ld	l, 4 (ix)
   0960 DD 66 05      [19] 1466 	ld	h, 5 (ix)
   0963 09            [11] 1467 	add	hl, bc
   0964 5E            [ 7] 1468 	ld	e, (hl)
   0965 16 00         [ 7] 1469 	ld	d, #0x00
   0967 C5            [11] 1470 	push	bc
   0968 D5            [11] 1471 	push	de
   0969 21rDCr0B      [10] 1472 	ld	hl, #___str_3
   096C E5            [11] 1473 	push	hl
   096D CDr00r00      [17] 1474 	call	_printf
   0970 F1            [10] 1475 	pop	af
   0971 F1            [10] 1476 	pop	af
   0972 C1            [10] 1477 	pop	bc
                           1478 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   0973 03            [ 6] 1479 	inc	bc
   0974 18 DD         [12] 1480 	jr	00144$
   0976                    1481 00101$:
                           1482 ;src\CFG8266.c:224: printf (" / ");
   0976 21rDFr0B      [10] 1483 	ld	hl, #___str_4
   0979 E5            [11] 1484 	push	hl
   097A CDr00r00      [17] 1485 	call	_printf
   097D F1            [10] 1486 	pop	af
                           1487 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   097E 01 00 00      [10] 1488 	ld	bc, #0x0000
   0981                    1489 00147$:
   0981 79            [ 4] 1490 	ld	a, c
   0982 DD 96 06      [19] 1491 	sub	a, 6 (ix)
   0985 78            [ 4] 1492 	ld	a, b
   0986 DD 9E 07      [19] 1493 	sbc	a, 7 (ix)
   0989 30 19         [12] 1494 	jr	NC,00102$
                           1495 ;src\CFG8266.c:226: printf("{%x}",uchData[i]);
   098B DD 6E 04      [19] 1496 	ld	l, 4 (ix)
   098E DD 66 05      [19] 1497 	ld	h, 5 (ix)
   0991 09            [11] 1498 	add	hl, bc
   0992 5E            [ 7] 1499 	ld	e, (hl)
   0993 16 00         [ 7] 1500 	ld	d, #0x00
   0995 C5            [11] 1501 	push	bc
   0996 D5            [11] 1502 	push	de
   0997 21rE3r0B      [10] 1503 	ld	hl, #___str_5
   099A E5            [11] 1504 	push	hl
   099B CDr00r00      [17] 1505 	call	_printf
   099E F1            [10] 1506 	pop	af
   099F F1            [10] 1507 	pop	af
   09A0 C1            [10] 1508 	pop	bc
                           1509 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   09A1 03            [ 6] 1510 	inc	bc
   09A2 18 DD         [12] 1511 	jr	00147$
   09A4                    1512 00102$:
                           1513 ;src\CFG8266.c:227: printf ("\r\n");
   09A4 21rE8r0B      [10] 1514 	ld	hl, #___str_7
   09A7 E5            [11] 1515 	push	hl
   09A8 CDr00r00      [17] 1516 	call	_puts
   09AB F1            [10] 1517 	pop	af
                           1518 ;src\CFG8266.c:228: i = 0;
   09AC AF            [ 4] 1519 	xor	a, a
   09AD DD 77 FE      [19] 1520 	ld	-2 (ix), a
   09B0 DD 77 FF      [19] 1521 	ld	-1 (ix), a
   09B3                    1522 00104$:
                           1523 ;src\CFG8266.c:231: Timeout1 = TickCount + 9; //Drives the animation every 9 ticks or so
   09B3 FD 21 9E FC   [14] 1524 	ld	iy, #_TickCount
   09B7 FD 7E 00      [19] 1525 	ld	a, 0 (iy)
   09BA C6 09         [ 7] 1526 	add	a, #0x09
   09BC DD 77 F1      [19] 1527 	ld	-15 (ix), a
   09BF FD 7E 01      [19] 1528 	ld	a, 1 (iy)
   09C2 CE 00         [ 7] 1529 	adc	a, #0x00
   09C4 DD 77 F2      [19] 1530 	ld	-14 (ix), a
                           1531 ;src\CFG8266.c:232: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   09C7 FD 7E 00      [19] 1532 	ld	a, 0 (iy)
   09CA DD 86 08      [19] 1533 	add	a, 8 (ix)
   09CD 4F            [ 4] 1534 	ld	c, a
   09CE FD 7E 01      [19] 1535 	ld	a, 1 (iy)
   09D1 DD 8E 09      [19] 1536 	adc	a, 9 (ix)
   09D4 47            [ 4] 1537 	ld	b, a
   09D5 DD 71 F3      [19] 1538 	ld	-13 (ix), c
   09D8 DD 70 F4      [19] 1539 	ld	-12 (ix), b
                           1540 ;src\CFG8266.c:234: ResponseSt = 0;
   09DB AF            [ 4] 1541 	xor	a, a
   09DC DD 77 FA      [19] 1542 	ld	-6 (ix), a
   09DF DD 77 FB      [19] 1543 	ld	-5 (ix), a
                           1544 ;src\CFG8266.c:235: ResponseSt2 = 0;
   09E2 AF            [ 4] 1545 	xor	a, a
   09E3 DD 77 FC      [19] 1546 	ld	-4 (ix), a
   09E6 DD 77 FD      [19] 1547 	ld	-3 (ix), a
                           1548 ;src\CFG8266.c:237: do
   09E9 DD 7E 06      [19] 1549 	ld	a, 6 (ix)
   09EC D6 02         [ 7] 1550 	sub	a, #0x02
   09EE DD B6 07      [19] 1551 	or	a, 7 (ix)
   09F1 3E 01         [ 7] 1552 	ld	a, #0x01
   09F3 28 01         [12] 1553 	jr	Z,00269$
   09F5 AF            [ 4] 1554 	xor	a, a
   09F6                    1555 00269$:
   09F6 DD 77 F5      [19] 1556 	ld	-11 (ix), a
   09F9 3E 84         [ 7] 1557 	ld	a, #0x84
   09FB DD BE 08      [19] 1558 	cp	a, 8 (ix)
   09FE 3E 03         [ 7] 1559 	ld	a, #0x03
   0A00 DD 9E 09      [19] 1560 	sbc	a, 9 (ix)
   0A03 3E 00         [ 7] 1561 	ld	a, #0x00
   0A05 17            [ 4] 1562 	rla
   0A06 DD 77 F6      [19] 1563 	ld	-10 (ix), a
   0A09                    1564 00138$:
                           1565 ;src\CFG8266.c:239: if (Timeout>900)
   0A09 DD 7E F6      [19] 1566 	ld	a, -10 (ix)
   0A0C B7            [ 4] 1567 	or	a, a
   0A0D 28 69         [12] 1568 	jr	Z,00108$
                           1569 ;src\CFG8266.c:241: if (TickCount>Timeout1)
   0A0F DD 7E F1      [19] 1570 	ld	a, -15 (ix)
   0A12 FD 21 9E FC   [14] 1571 	ld	iy, #_TickCount
   0A16 FD 96 00      [19] 1572 	sub	a, 0 (iy)
   0A19 DD 7E F2      [19] 1573 	ld	a, -14 (ix)
   0A1C FD 9E 01      [19] 1574 	sbc	a, 1 (iy)
   0A1F 30 57         [12] 1575 	jr	NC,00108$
                           1576 ;src\CFG8266.c:243: Timeout1 = TickCount + 9;
   0A21 FD 7E 00      [19] 1577 	ld	a, 0 (iy)
   0A24 C6 09         [ 7] 1578 	add	a, #0x09
   0A26 DD 77 F1      [19] 1579 	ld	-15 (ix), a
   0A29 FD 7E 01      [19] 1580 	ld	a, 1 (iy)
   0A2C CE 00         [ 7] 1581 	adc	a, #0x00
   0A2E DD 77 F2      [19] 1582 	ld	-14 (ix), a
                           1583 ;src\CFG8266.c:244: printf("%s",advance[i%10]); // next char
   0A31 21 0A 00      [10] 1584 	ld	hl, #0x000a
   0A34 E5            [11] 1585 	push	hl
   0A35 DD 6E FE      [19] 1586 	ld	l, -2 (ix)
   0A38 DD 66 FF      [19] 1587 	ld	h, -1 (ix)
   0A3B E5            [11] 1588 	push	hl
   0A3C CDr00r00      [17] 1589 	call	__moduint
   0A3F F1            [10] 1590 	pop	af
   0A40 F1            [10] 1591 	pop	af
   0A41 DD 75 F8      [19] 1592 	ld	-8 (ix), l
   0A44 DD 74 F9      [19] 1593 	ld	-7 (ix), h
   0A47 4D            [ 4] 1594 	ld	c,l
   0A48 44            [ 4] 1595 	ld	b,h
   0A49 29            [11] 1596 	add	hl, hl
   0A4A 09            [11] 1597 	add	hl, bc
   0A4B 29            [11] 1598 	add	hl, hl
   0A4C 09            [11] 1599 	add	hl, bc
   0A4D 29            [11] 1600 	add	hl, hl
   0A4E 09            [11] 1601 	add	hl, bc
   0A4F E3            [19] 1602 	ex	(sp), hl
   0A50 3Er2D         [ 7] 1603 	ld	a, #<(_advance)
   0A52 DD 86 EE      [19] 1604 	add	a, -18 (ix)
   0A55 DD 77 F8      [19] 1605 	ld	-8 (ix), a
   0A58 3Es01         [ 7] 1606 	ld	a, #>(_advance)
   0A5A DD 8E EF      [19] 1607 	adc	a, -17 (ix)
   0A5D DD 77 F9      [19] 1608 	ld	-7 (ix), a
   0A60 DD 6E F8      [19] 1609 	ld	l, -8 (ix)
   0A63 DD 66 F9      [19] 1610 	ld	h, -7 (ix)
   0A66 E5            [11] 1611 	push	hl
   0A67 21rEAr0B      [10] 1612 	ld	hl, #___str_8
   0A6A E5            [11] 1613 	push	hl
   0A6B CDr00r00      [17] 1614 	call	_printf
   0A6E F1            [10] 1615 	pop	af
   0A6F F1            [10] 1616 	pop	af
                           1617 ;src\CFG8266.c:245: ++i;
   0A70 DD 34 FE      [23] 1618 	inc	-2 (ix)
   0A73 20 03         [12] 1619 	jr	NZ,00270$
   0A75 DD 34 FF      [23] 1620 	inc	-1 (ix)
   0A78                    1621 00270$:
   0A78                    1622 00108$:
                           1623 ;src\CFG8266.c:248: if(UartRXData())
   0A78 DB 07         [11] 1624 	in	a, (_myPort7)
   0A7A 0F            [ 4] 1625 	rrca
   0A7B D2rA0r0B      [10] 1626 	jp	NC,00135$
                           1627 ;src\CFG8266.c:250: rx_data = GetUARTData();
   0A7E DB 06         [11] 1628 	in	a, (_myPort6)
   0A80 DD 77 F7      [19] 1629 	ld	-9 (ix), a
                           1630 ;src\CFG8266.c:252: if (rx_data == uchData[ResponseSt])
   0A83 DD 7E 04      [19] 1631 	ld	a, 4 (ix)
   0A86 DD 86 FA      [19] 1632 	add	a, -6 (ix)
   0A89 6F            [ 4] 1633 	ld	l, a
   0A8A DD 7E 05      [19] 1634 	ld	a, 5 (ix)
   0A8D DD 8E FB      [19] 1635 	adc	a, -5 (ix)
   0A90 67            [ 4] 1636 	ld	h, a
   0A91 7E            [ 7] 1637 	ld	a, (hl)
   0A92 DD 77 F9      [19] 1638 	ld	-7 (ix), a
   0A95 DD 7E F7      [19] 1639 	ld	a, -9 (ix)
   0A98 DD 96 F9      [19] 1640 	sub	a, -7 (ix)
   0A9B 20 36         [12] 1641 	jr	NZ,00126$
                           1642 ;src\CFG8266.c:254: if (bShowReceivedData)
   0A9D DD 7E 0B      [19] 1643 	ld	a, 11 (ix)
   0AA0 B7            [ 4] 1644 	or	a, a
   0AA1 28 0F         [12] 1645 	jr	Z,00110$
                           1646 ;src\CFG8266.c:255: printf ("{%x}",rx_data);
   0AA3 DD 4E F7      [19] 1647 	ld	c, -9 (ix)
   0AA6 06 00         [ 7] 1648 	ld	b, #0x00
   0AA8 C5            [11] 1649 	push	bc
   0AA9 21rE3r0B      [10] 1650 	ld	hl, #___str_5
   0AAC E5            [11] 1651 	push	hl
   0AAD CDr00r00      [17] 1652 	call	_printf
   0AB0 F1            [10] 1653 	pop	af
   0AB1 F1            [10] 1654 	pop	af
   0AB2                    1655 00110$:
                           1656 ;src\CFG8266.c:256: ++ResponseSt;
   0AB2 DD 34 FA      [23] 1657 	inc	-6 (ix)
   0AB5 20 03         [12] 1658 	jr	NZ,00274$
   0AB7 DD 34 FB      [23] 1659 	inc	-5 (ix)
   0ABA                    1660 00274$:
                           1661 ;src\CFG8266.c:257: if (ResponseSt == uiDataSize)
   0ABA DD 7E FA      [19] 1662 	ld	a, -6 (ix)
   0ABD DD 96 06      [19] 1663 	sub	a, 6 (ix)
   0AC0 C2r55r0B      [10] 1664 	jp	NZ,00127$
   0AC3 DD 7E FB      [19] 1665 	ld	a, -5 (ix)
   0AC6 DD 96 07      [19] 1666 	sub	a, 7 (ix)
   0AC9 C2r55r0B      [10] 1667 	jp	NZ,00127$
                           1668 ;src\CFG8266.c:259: bReturn = 1;
   0ACC DD 36 F0 01   [19] 1669 	ld	-16 (ix), #0x01
                           1670 ;src\CFG8266.c:260: break;
   0AD0 C3rB3r0B      [10] 1671 	jp	00140$
   0AD3                    1672 00126$:
                           1673 ;src\CFG8266.c:265: if ((ResponseSt)&&(bShowReceivedData))
   0AD3 DD 7E FB      [19] 1674 	ld	a, -5 (ix)
   0AD6 DD B6 FA      [19] 1675 	or	a, -6 (ix)
   0AD9 28 20         [12] 1676 	jr	Z,00116$
   0ADB DD 7E 0B      [19] 1677 	ld	a, 11 (ix)
   0ADE B7            [ 4] 1678 	or	a, a
   0ADF 28 1A         [12] 1679 	jr	Z,00116$
                           1680 ;src\CFG8266.c:266: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   0AE1 DD 5E F9      [19] 1681 	ld	e, -7 (ix)
   0AE4 16 00         [ 7] 1682 	ld	d, #0x00
   0AE6 DD 4E F7      [19] 1683 	ld	c, -9 (ix)
   0AE9 06 00         [ 7] 1684 	ld	b, #0x00
   0AEB D5            [11] 1685 	push	de
   0AEC C5            [11] 1686 	push	bc
   0AED 21rEDr0B      [10] 1687 	ld	hl, #___str_9
   0AF0 E5            [11] 1688 	push	hl
   0AF1 CDr00r00      [17] 1689 	call	_printf
   0AF4 21 06 00      [10] 1690 	ld	hl, #6
   0AF7 39            [11] 1691 	add	hl, sp
   0AF8 F9            [ 6] 1692 	ld	sp, hl
   0AF9 18 15         [12] 1693 	jr	00117$
   0AFB                    1694 00116$:
                           1695 ;src\CFG8266.c:267: else if (bShowReceivedData)
   0AFB DD 7E 0B      [19] 1696 	ld	a, 11 (ix)
   0AFE B7            [ 4] 1697 	or	a, a
   0AFF 28 0F         [12] 1698 	jr	Z,00117$
                           1699 ;src\CFG8266.c:268: printf ("}%x{",rx_data);
   0B01 DD 4E F7      [19] 1700 	ld	c, -9 (ix)
   0B04 06 00         [ 7] 1701 	ld	b, #0x00
   0B06 C5            [11] 1702 	push	bc
   0B07 21rFAr0B      [10] 1703 	ld	hl, #___str_10
   0B0A E5            [11] 1704 	push	hl
   0B0B CDr00r00      [17] 1705 	call	_printf
   0B0E F1            [10] 1706 	pop	af
   0B0F F1            [10] 1707 	pop	af
   0B10                    1708 00117$:
                           1709 ;src\CFG8266.c:269: if ((uiDataSize==2)&&(ResponseSt==1))
   0B10 DD 7E F5      [19] 1710 	ld	a, -11 (ix)
   0B13 B7            [ 4] 1711 	or	a, a
   0B14 28 38         [12] 1712 	jr	Z,00123$
   0B16 DD 7E FA      [19] 1713 	ld	a, -6 (ix)
   0B19 3D            [ 4] 1714 	dec	a
   0B1A DD B6 FB      [19] 1715 	or	a, -5 (ix)
   0B1D 20 2F         [12] 1716 	jr	NZ,00123$
                           1717 ;src\CFG8266.c:271: if ((bVerbose)&&(!uchData2))
   0B1F DD 7E 0A      [19] 1718 	ld	a, 10 (ix)
   0B22 B7            [ 4] 1719 	or	a, a
   0B23 28 24         [12] 1720 	jr	Z,00120$
   0B25 DD 7E 0D      [19] 1721 	ld	a, 13 (ix)
   0B28 DD B6 0C      [19] 1722 	or	a, 12 (ix)
   0B2B 20 1C         [12] 1723 	jr	NZ,00120$
                           1724 ;src\CFG8266.c:272: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   0B2D DD 6E 04      [19] 1725 	ld	l, 4 (ix)
   0B30 DD 66 05      [19] 1726 	ld	h, 5 (ix)
   0B33 5E            [ 7] 1727 	ld	e, (hl)
   0B34 16 00         [ 7] 1728 	ld	d, #0x00
   0B36 DD 4E F7      [19] 1729 	ld	c, -9 (ix)
   0B39 06 00         [ 7] 1730 	ld	b, #0x00
   0B3B D5            [11] 1731 	push	de
   0B3C C5            [11] 1732 	push	bc
   0B3D 21rFFr0B      [10] 1733 	ld	hl, #___str_11
   0B40 E5            [11] 1734 	push	hl
   0B41 CDr00r00      [17] 1735 	call	_printf
   0B44 21 06 00      [10] 1736 	ld	hl, #6
   0B47 39            [11] 1737 	add	hl, sp
   0B48 F9            [ 6] 1738 	ld	sp, hl
   0B49                    1739 00120$:
                           1740 ;src\CFG8266.c:273: return false;
   0B49 2E 00         [ 7] 1741 	ld	l, #0x00
   0B4B C3rC9r0B      [10] 1742 	jp	00149$
   0B4E                    1743 00123$:
                           1744 ;src\CFG8266.c:275: ResponseSt = 0;
   0B4E AF            [ 4] 1745 	xor	a, a
   0B4F DD 77 FA      [19] 1746 	ld	-6 (ix), a
   0B52 DD 77 FB      [19] 1747 	ld	-5 (ix), a
   0B55                    1748 00127$:
                           1749 ;src\CFG8266.c:278: if ((uchData2)&&(rx_data == uchData2[ResponseSt2]))
   0B55 DD 7E 0D      [19] 1750 	ld	a, 13 (ix)
   0B58 DD B6 0C      [19] 1751 	or	a, 12 (ix)
   0B5B 28 3C         [12] 1752 	jr	Z,00131$
   0B5D DD 7E 0C      [19] 1753 	ld	a, 12 (ix)
   0B60 DD 86 FC      [19] 1754 	add	a, -4 (ix)
   0B63 DD 77 F8      [19] 1755 	ld	-8 (ix), a
   0B66 DD 7E 0D      [19] 1756 	ld	a, 13 (ix)
   0B69 DD 8E FD      [19] 1757 	adc	a, -3 (ix)
   0B6C DD 77 F9      [19] 1758 	ld	-7 (ix), a
   0B6F DD 6E F8      [19] 1759 	ld	l, -8 (ix)
   0B72 DD 66 F9      [19] 1760 	ld	h, -7 (ix)
   0B75 DD 7E F7      [19] 1761 	ld	a,-9 (ix)
   0B78 96            [ 7] 1762 	sub	a,(hl)
   0B79 20 1E         [12] 1763 	jr	NZ,00131$
                           1764 ;src\CFG8266.c:280: ++ResponseSt2;
   0B7B DD 34 FC      [23] 1765 	inc	-4 (ix)
   0B7E 20 03         [12] 1766 	jr	NZ,00281$
   0B80 DD 34 FD      [23] 1767 	inc	-3 (ix)
   0B83                    1768 00281$:
                           1769 ;src\CFG8266.c:281: if (ResponseSt2 == uiDataSize2)
   0B83 DD 7E FC      [19] 1770 	ld	a, -4 (ix)
   0B86 DD 96 0E      [19] 1771 	sub	a, 14 (ix)
   0B89 20 15         [12] 1772 	jr	NZ,00135$
   0B8B DD 7E FD      [19] 1773 	ld	a, -3 (ix)
   0B8E DD 96 0F      [19] 1774 	sub	a, 15 (ix)
   0B91 20 0D         [12] 1775 	jr	NZ,00135$
                           1776 ;src\CFG8266.c:283: bReturn = 2;
   0B93 DD 36 F0 02   [19] 1777 	ld	-16 (ix), #0x02
                           1778 ;src\CFG8266.c:284: break;
   0B97 18 1A         [12] 1779 	jr	00140$
   0B99                    1780 00131$:
                           1781 ;src\CFG8266.c:288: ResponseSt2 = 0;
   0B99 AF            [ 4] 1782 	xor	a, a
   0B9A DD 77 FC      [19] 1783 	ld	-4 (ix), a
   0B9D DD 77 FD      [19] 1784 	ld	-3 (ix), a
   0BA0                    1785 00135$:
                           1786 ;src\CFG8266.c:291: if (TickCount>Timeout2)
   0BA0 DD 7E F3      [19] 1787 	ld	a, -13 (ix)
   0BA3 FD 21 9E FC   [14] 1788 	ld	iy, #_TickCount
   0BA7 FD 96 00      [19] 1789 	sub	a, 0 (iy)
   0BAA DD 7E F4      [19] 1790 	ld	a, -12 (ix)
   0BAD FD 9E 01      [19] 1791 	sbc	a, 1 (iy)
   0BB0 D2r09r0A      [10] 1792 	jp	NC, 00138$
                           1793 ;src\CFG8266.c:294: while (1);
   0BB3                    1794 00140$:
                           1795 ;src\CFG8266.c:296: if (Timeout>900)
   0BB3 DD 7E F6      [19] 1796 	ld	a, -10 (ix)
   0BB6 B7            [ 4] 1797 	or	a, a
   0BB7 28 0D         [12] 1798 	jr	Z,00142$
                           1799 ;src\CFG8266.c:297: printf("%s",aDone); // clear line
   0BB9 21rC3r01      [10] 1800 	ld	hl, #_aDone
   0BBC E5            [11] 1801 	push	hl
   0BBD 21rEAr0B      [10] 1802 	ld	hl, #___str_8
   0BC0 E5            [11] 1803 	push	hl
   0BC1 CDr00r00      [17] 1804 	call	_printf
   0BC4 F1            [10] 1805 	pop	af
   0BC5 F1            [10] 1806 	pop	af
   0BC6                    1807 00142$:
                           1808 ;src\CFG8266.c:299: return bReturn;
   0BC6 DD 6E F0      [19] 1809 	ld	l, -16 (ix)
   0BC9                    1810 00149$:
                           1811 ;src\CFG8266.c:300: }
   0BC9 DD F9         [10] 1812 	ld	sp, ix
   0BCB DD E1         [14] 1813 	pop	ix
   0BCD C9            [10] 1814 	ret
   0BCE                    1815 ___str_2:
   0BCE 57 61 69 74 69 6E  1816 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   0BDB 00                 1817 	.db 0x00
   0BDC                    1818 ___str_3:
   0BDC 25 63              1819 	.ascii "%c"
   0BDE 00                 1820 	.db 0x00
   0BDF                    1821 ___str_4:
   0BDF 20 2F 20           1822 	.ascii " / "
   0BE2 00                 1823 	.db 0x00
   0BE3                    1824 ___str_5:
   0BE3 7B 25 78 7D        1825 	.ascii "{%x}"
   0BE7 00                 1826 	.db 0x00
   0BE8                    1827 ___str_7:
   0BE8 0D                 1828 	.db 0x0d
   0BE9 00                 1829 	.db 0x00
   0BEA                    1830 ___str_8:
   0BEA 25 73              1831 	.ascii "%s"
   0BEC 00                 1832 	.db 0x00
   0BED                    1833 ___str_9:
   0BED 7B 25 78 7D 20 21  1834 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0BF9 00                 1835 	.db 0x00
   0BFA                    1836 ___str_10:
   0BFA 7D 25 78 7B        1837 	.ascii "}%x{"
   0BFE 00                 1838 	.db 0x00
   0BFF                    1839 ___str_11:
   0BFF 45 72 72 6F 72 20  1840 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0C18 0D                 1841 	.db 0x0d
   0C19 0A                 1842 	.db 0x0a
   0C1A 00                 1843 	.db 0x00
                           1844 ;src\CFG8266.c:302: void FinishUpdate (bool bSendReset)
                           1845 ;	---------------------------------
                           1846 ; Function FinishUpdate
                           1847 ; ---------------------------------
   0C1B                    1848 _FinishUpdate::
   0C1B DD E5         [15] 1849 	push	ix
   0C1D DD 21 00 00   [14] 1850 	ld	ix,#0
   0C21 DD 39         [15] 1851 	add	ix,sp
   0C23 F5            [11] 1852 	push	af
   0C24 F5            [11] 1853 	push	af
                           1854 ;src\CFG8266.c:304: unsigned int iRetries = 3;
   0C25 21 03 00      [10] 1855 	ld	hl, #0x0003
   0C28 E3            [19] 1856 	ex	(sp), hl
                           1857 ;src\CFG8266.c:308: bool bReset = bSendReset;
   0C29 DD 7E 04      [19] 1858 	ld	a, 4 (ix)
   0C2C DD 77 FE      [19] 1859 	ld	-2 (ix), a
                           1860 ;src\CFG8266.c:310: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0C2F 21r96r0D      [10] 1861 	ld	hl, #___str_13
   0C32 E5            [11] 1862 	push	hl
   0C33 CDr00r00      [17] 1863 	call	_puts
   0C36 F1            [10] 1864 	pop	af
                           1865 ;src\CFG8266.c:312: do
   0C37 DD 36 FF 02   [19] 1866 	ld	-1 (ix), #0x02
   0C3B                    1867 00135$:
                           1868 ;src\CFG8266.c:314: bRet = true;
   0C3B 2E 01         [ 7] 1869 	ld	l, #0x01
                           1870 ;src\CFG8266.c:315: --ucRetries;
   0C3D DD 35 FF      [23] 1871 	dec	-1 (ix)
                           1872 ;src\CFG8266.c:316: if (bReset)
   0C40 DD 7E FE      [19] 1873 	ld	a, -2 (ix)
   0C43 B7            [ 4] 1874 	or	a, a
   0C44 28 0C         [12] 1875 	jr	Z,00154$
                           1876 ;src\CFG8266.c:317: TxByte('R'); //Request Reset
   0C46 E5            [11] 1877 	push	hl
   0C47 3E 52         [ 7] 1878 	ld	a, #0x52
   0C49 F5            [11] 1879 	push	af
   0C4A 33            [ 6] 1880 	inc	sp
   0C4B CDrAEr07      [17] 1881 	call	_TxByte
   0C4E 33            [ 6] 1882 	inc	sp
   0C4F E1            [10] 1883 	pop	hl
   0C50 18 49         [12] 1884 	jr	00110$
                           1885 ;src\CFG8266.c:320: do
   0C52                    1886 00154$:
   0C52 D1            [10] 1887 	pop	de
   0C53 D5            [11] 1888 	push	de
                           1889 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0C54                    1890 00152$:
   0C54 3E 3C         [ 7] 1891 	ld	a, #0x3c
   0C56                    1892 00140$:
                           1893 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0C56 76            [ 4] 1894 	halt
                           1895 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0C57 3D            [ 4] 1896 	dec	a
   0C58 20 FC         [12] 1897 	jr	NZ,00140$
                           1898 ;src\CFG8266.c:324: TxByte('E'); //End Update
   0C5A D5            [11] 1899 	push	de
   0C5B 3E 45         [ 7] 1900 	ld	a, #0x45
   0C5D F5            [11] 1901 	push	af
   0C5E 33            [ 6] 1902 	inc	sp
   0C5F CDrAEr07      [17] 1903 	call	_TxByte
   0C62 33            [ 6] 1904 	inc	sp
   0C63 21 00 00      [10] 1905 	ld	hl, #0x0000
   0C66 E5            [11] 1906 	push	hl
   0C67 2E 00         [ 7] 1907 	ld	l, #0x00
   0C69 E5            [11] 1908 	push	hl
   0C6A AF            [ 4] 1909 	xor	a, a
   0C6B 57            [ 4] 1910 	ld	d,a
   0C6C 1E 01         [ 7] 1911 	ld	e,#0x01
   0C6E D5            [11] 1912 	push	de
   0C6F 21 08 07      [10] 1913 	ld	hl, #0x0708
   0C72 E5            [11] 1914 	push	hl
   0C73 21 02 00      [10] 1915 	ld	hl, #0x0002
   0C76 E5            [11] 1916 	push	hl
   0C77 21r09r01      [10] 1917 	ld	hl, #_endUpdate
   0C7A E5            [11] 1918 	push	hl
   0C7B CDr2Ar09      [17] 1919 	call	_WaitForRXData
   0C7E FD 21 0C 00   [14] 1920 	ld	iy, #12
   0C82 FD 39         [15] 1921 	add	iy, sp
   0C84 FD F9         [10] 1922 	ld	sp, iy
   0C86 D1            [10] 1923 	pop	de
                           1924 ;src\CFG8266.c:326: iRetries--;
   0C87 1B            [ 6] 1925 	dec	de
                           1926 ;src\CFG8266.c:328: while ((!bRet)&&(iRetries));
   0C88 7D            [ 4] 1927 	ld	a, l
   0C89 B7            [ 4] 1928 	or	a, a
   0C8A 20 04         [12] 1929 	jr	NZ,00170$
   0C8C 7A            [ 4] 1930 	ld	a, d
   0C8D B3            [ 4] 1931 	or	a, e
   0C8E 20 C4         [12] 1932 	jr	NZ,00152$
   0C90                    1933 00170$:
   0C90 33            [ 6] 1934 	inc	sp
   0C91 33            [ 6] 1935 	inc	sp
   0C92 D5            [11] 1936 	push	de
                           1937 ;src\CFG8266.c:330: if (bRet)
   0C93 7D            [ 4] 1938 	ld	a, l
   0C94 B7            [ 4] 1939 	or	a, a
   0C95 28 04         [12] 1940 	jr	Z,00110$
                           1941 ;src\CFG8266.c:331: bReset=true;
   0C97 DD 36 FE 01   [19] 1942 	ld	-2 (ix), #0x01
   0C9B                    1943 00110$:
                           1944 ;src\CFG8266.c:334: if (!bRet)
   0C9B 7D            [ 4] 1945 	ld	a, l
   0C9C B7            [ 4] 1946 	or	a, a
   0C9D 20 0B         [12] 1947 	jr	NZ,00133$
                           1948 ;src\CFG8266.c:335: printf("\rTimeout waiting to end update...\r\n");
   0C9F 21rC9r0D      [10] 1949 	ld	hl, #___str_15
   0CA2 E5            [11] 1950 	push	hl
   0CA3 CDr00r00      [17] 1951 	call	_puts
   0CA6 F1            [10] 1952 	pop	af
   0CA7 C3r8Ar0D      [10] 1953 	jp	00136$
   0CAA                    1954 00133$:
                           1955 ;src\CFG8266.c:338: if (ucRetries)
   0CAA DD 7E FF      [19] 1956 	ld	a, -1 (ix)
   0CAD B7            [ 4] 1957 	or	a, a
   0CAE 28 18         [12] 1958 	jr	Z,00115$
                           1959 ;src\CFG8266.c:340: if (ucIsFw)
   0CB0 3Ar08r00      [13] 1960 	ld	a,(#_ucIsFw + 0)
   0CB3 B7            [ 4] 1961 	or	a, a
   0CB4 28 0A         [12] 1962 	jr	Z,00112$
                           1963 ;src\CFG8266.c:341: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0CB6 21rECr0D      [10] 1964 	ld	hl, #___str_17
   0CB9 E5            [11] 1965 	push	hl
   0CBA CDr00r00      [17] 1966 	call	_puts
   0CBD F1            [10] 1967 	pop	af
   0CBE 18 08         [12] 1968 	jr	00115$
   0CC0                    1969 00112$:
                           1970 ;src\CFG8266.c:343: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0CC0 21r1Fr0E      [10] 1971 	ld	hl, #___str_19
   0CC3 E5            [11] 1972 	push	hl
   0CC4 CDr00r00      [17] 1973 	call	_puts
   0CC7 F1            [10] 1974 	pop	af
   0CC8                    1975 00115$:
                           1976 ;src\CFG8266.c:346: if (WaitForRXData(responseReady2,7,2700,false,false,NULL,0)) //Wait up to 45 seconds
   0CC8 21 00 00      [10] 1977 	ld	hl, #0x0000
   0CCB E5            [11] 1978 	push	hl
   0CCC 2E 00         [ 7] 1979 	ld	l, #0x00
   0CCE E5            [11] 1980 	push	hl
   0CCF AF            [ 4] 1981 	xor	a, a
   0CD0 F5            [11] 1982 	push	af
   0CD1 33            [ 6] 1983 	inc	sp
   0CD2 AF            [ 4] 1984 	xor	a, a
   0CD3 F5            [11] 1985 	push	af
   0CD4 33            [ 6] 1986 	inc	sp
   0CD5 21 8C 0A      [10] 1987 	ld	hl, #0x0a8c
   0CD8 E5            [11] 1988 	push	hl
   0CD9 21 07 00      [10] 1989 	ld	hl, #0x0007
   0CDC E5            [11] 1990 	push	hl
   0CDD 21rCCr01      [10] 1991 	ld	hl, #_responseReady2
   0CE0 E5            [11] 1992 	push	hl
   0CE1 CDr2Ar09      [17] 1993 	call	_WaitForRXData
   0CE4 FD 21 0C 00   [14] 1994 	ld	iy, #12
   0CE8 FD 39         [15] 1995 	add	iy, sp
   0CEA FD F9         [10] 1996 	ld	sp, iy
   0CEC 7D            [ 4] 1997 	ld	a, l
   0CED B7            [ 4] 1998 	or	a, a
   0CEE CAr7Cr0D      [10] 1999 	jp	Z, 00130$
                           2000 ;src\CFG8266.c:348: if (!ucIsFw)
   0CF1 3Ar08r00      [13] 2001 	ld	a,(#_ucIsFw + 0)
   0CF4 B7            [ 4] 2002 	or	a, a
   0CF5 C2r72r0D      [10] 2003 	jp	NZ, 00125$
                           2004 ;src\CFG8266.c:350: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0CF8 21r56r0E      [10] 2005 	ld	hl, #___str_21
   0CFB E5            [11] 2006 	push	hl
   0CFC CDr00r00      [17] 2007 	call	_puts
   0CFF F1            [10] 2008 	pop	af
                           2009 ;src\CFG8266.c:352: do
   0D00 DD 36 FE 0A   [19] 2010 	ld	-2 (ix), #0x0a
   0D04 AF            [ 4] 2011 	xor	a, a
   0D05 DD 77 FF      [19] 2012 	ld	-1 (ix), a
                           2013 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0D08                    2014 00162$:
   0D08 3E 3C         [ 7] 2015 	ld	a, #0x3c
   0D0A                    2016 00142$:
                           2017 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0D0A 76            [ 4] 2018 	halt
                           2019 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0D0B 3D            [ 4] 2020 	dec	a
   0D0C 20 FC         [12] 2021 	jr	NZ,00142$
                           2022 ;src\CFG8266.c:356: TxByte('I'); //End Update
   0D0E 3E 49         [ 7] 2023 	ld	a, #0x49
   0D10 F5            [11] 2024 	push	af
   0D11 33            [ 6] 2025 	inc	sp
   0D12 CDrAEr07      [17] 2026 	call	_TxByte
   0D15 33            [ 6] 2027 	inc	sp
                           2028 ;src\CFG8266.c:357: bRet = WaitForRXData(certificateDone,2,3600,false,false,NULL,0); //Wait up to 1 minute, certificate index creation takes time
   0D16 21 00 00      [10] 2029 	ld	hl, #0x0000
   0D19 E5            [11] 2030 	push	hl
   0D1A 2E 00         [ 7] 2031 	ld	l, #0x00
   0D1C E5            [11] 2032 	push	hl
   0D1D AF            [ 4] 2033 	xor	a, a
   0D1E F5            [11] 2034 	push	af
   0D1F 33            [ 6] 2035 	inc	sp
   0D20 AF            [ 4] 2036 	xor	a, a
   0D21 F5            [11] 2037 	push	af
   0D22 33            [ 6] 2038 	inc	sp
   0D23 21 10 0E      [10] 2039 	ld	hl, #0x0e10
   0D26 E5            [11] 2040 	push	hl
   0D27 21 02 00      [10] 2041 	ld	hl, #0x0002
   0D2A E5            [11] 2042 	push	hl
   0D2B 21r0Cr01      [10] 2043 	ld	hl, #_certificateDone
   0D2E E5            [11] 2044 	push	hl
   0D2F CDr2Ar09      [17] 2045 	call	_WaitForRXData
   0D32 FD 21 0C 00   [14] 2046 	ld	iy, #12
   0D36 FD 39         [15] 2047 	add	iy, sp
   0D38 FD F9         [10] 2048 	ld	sp, iy
   0D3A DD 75 FD      [19] 2049 	ld	-3 (ix), l
                           2050 ;src\CFG8266.c:358: iRetries--;
   0D3D DD 6E FE      [19] 2051 	ld	l, -2 (ix)
   0D40 DD 66 FF      [19] 2052 	ld	h, -1 (ix)
   0D43 2B            [ 6] 2053 	dec	hl
   0D44 DD 75 FE      [19] 2054 	ld	-2 (ix), l
   0D47 DD 74 FF      [19] 2055 	ld	-1 (ix), h
                           2056 ;src\CFG8266.c:360: while ((!bRet)&&(iRetries));
   0D4A DD 7E FD      [19] 2057 	ld	a, -3 (ix)
   0D4D B7            [ 4] 2058 	or	a, a
   0D4E 20 08         [12] 2059 	jr	NZ,00120$
   0D50 DD 7E FF      [19] 2060 	ld	a, -1 (ix)
   0D53 DD B6 FE      [19] 2061 	or	a, -2 (ix)
   0D56 20 B0         [12] 2062 	jr	NZ,00162$
   0D58                    2063 00120$:
                           2064 ;src\CFG8266.c:361: if (bRet)
   0D58 DD 7E FD      [19] 2065 	ld	a, -3 (ix)
   0D5B B7            [ 4] 2066 	or	a, a
   0D5C 28 0A         [12] 2067 	jr	Z,00122$
                           2068 ;src\CFG8266.c:362: printf("\rDone!                                \r\n");
   0D5E 21r92r0E      [10] 2069 	ld	hl, #___str_23
   0D61 E5            [11] 2070 	push	hl
   0D62 CDr00r00      [17] 2071 	call	_puts
   0D65 F1            [10] 2072 	pop	af
   0D66 18 29         [12] 2073 	jr	00137$
   0D68                    2074 00122$:
                           2075 ;src\CFG8266.c:364: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0D68 21rBAr0E      [10] 2076 	ld	hl, #___str_25
   0D6B E5            [11] 2077 	push	hl
   0D6C CDr00r00      [17] 2078 	call	_puts
   0D6F F1            [10] 2079 	pop	af
   0D70 18 1F         [12] 2080 	jr	00137$
   0D72                    2081 00125$:
                           2082 ;src\CFG8266.c:367: printf("\rDone!                              \r\n");
   0D72 21rF4r0E      [10] 2083 	ld	hl, #___str_27
   0D75 E5            [11] 2084 	push	hl
   0D76 CDr00r00      [17] 2085 	call	_puts
   0D79 F1            [10] 2086 	pop	af
                           2087 ;src\CFG8266.c:368: break;
   0D7A 18 15         [12] 2088 	jr	00137$
   0D7C                    2089 00130$:
                           2090 ;src\CFG8266.c:371: if (!ucRetries)
   0D7C DD 7E FF      [19] 2091 	ld	a, -1 (ix)
   0D7F B7            [ 4] 2092 	or	a, a
   0D80 20 08         [12] 2093 	jr	NZ,00136$
                           2094 ;src\CFG8266.c:372: printf("\rTimeout error\r\n");
   0D82 21r1Ar0F      [10] 2095 	ld	hl, #___str_29
   0D85 E5            [11] 2096 	push	hl
   0D86 CDr00r00      [17] 2097 	call	_puts
   0D89 F1            [10] 2098 	pop	af
   0D8A                    2099 00136$:
                           2100 ;src\CFG8266.c:375: while (ucRetries);
   0D8A DD 7E FF      [19] 2101 	ld	a, -1 (ix)
   0D8D B7            [ 4] 2102 	or	a, a
   0D8E C2r3Br0C      [10] 2103 	jp	NZ, 00135$
   0D91                    2104 00137$:
                           2105 ;src\CFG8266.c:377: return;
                           2106 ;src\CFG8266.c:378: }
   0D91 DD F9         [10] 2107 	ld	sp, ix
   0D93 DD E1         [14] 2108 	pop	ix
   0D95 C9            [10] 2109 	ret
   0D96                    2110 ___str_13:
   0D96 0D                 2111 	.db 0x0d
   0D97 46 69 6E 69 73 68  2112 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0DC7 0D                 2113 	.db 0x0d
   0DC8 00                 2114 	.db 0x00
   0DC9                    2115 ___str_15:
   0DC9 0D                 2116 	.db 0x0d
   0DCA 54 69 6D 65 6F 75  2117 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0DEA 0D                 2118 	.db 0x0d
   0DEB 00                 2119 	.db 0x00
   0DEC                    2120 ___str_17:
   0DEC 0D                 2121 	.db 0x0d
   0DED 46 69 72 6D 77 61  2122 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0E1D 0D                 2123 	.db 0x0d
   0E1E 00                 2124 	.db 0x00
   0E1F                    2125 ___str_19:
   0E1F 0D                 2126 	.db 0x0d
   0E20 43 65 72 74 69 66  2127 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0E54 0D                 2128 	.db 0x0d
   0E55 00                 2129 	.db 0x00
   0E56                    2130 ___str_21:
   0E56 0D                 2131 	.db 0x0d
   0E57 45 53 50 20 52 65  2132 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0E90 0D                 2133 	.db 0x0d
   0E91 00                 2134 	.db 0x00
   0E92                    2135 ___str_23:
   0E92 0D                 2136 	.db 0x0d
   0E93 44 6F 6E 65 21 20  2137 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0EB8 0D                 2138 	.db 0x0d
   0EB9 00                 2139 	.db 0x00
   0EBA                    2140 ___str_25:
   0EBA 0D                 2141 	.db 0x0d
   0EBB 44 6F 6E 65 2C 20  2142 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0EF2 0D                 2143 	.db 0x0d
   0EF3 00                 2144 	.db 0x00
   0EF4                    2145 ___str_27:
   0EF4 0D                 2146 	.db 0x0d
   0EF5 44 6F 6E 65 21 20  2147 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0F18 0D                 2148 	.db 0x0d
   0F19 00                 2149 	.db 0x00
   0F1A                    2150 ___str_29:
   0F1A 0D                 2151 	.db 0x0d
   0F1B 54 69 6D 65 6F 75  2152 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0F28 0D                 2153 	.db 0x0d
   0F29 00                 2154 	.db 0x00
                           2155 ;src\CFG8266.c:380: int main(char** argv, int argc)
                           2156 ;	---------------------------------
                           2157 ; Function main
                           2158 ; ---------------------------------
   0F2A                    2159 _main::
   0F2A DD E5         [15] 2160 	push	ix
   0F2C DD 21 00 00   [14] 2161 	ld	ix,#0
   0F30 DD 39         [15] 2162 	add	ix,sp
   0F32 21 A4 EF      [10] 2163 	ld	hl, #-4188
   0F35 39            [11] 2164 	add	hl, sp
   0F36 F9            [ 6] 2165 	ld	sp, hl
                           2166 ;src\CFG8266.c:397: unsigned char ucFirstBlock = 1;
   0F37 DD 36 F5 01   [19] 2167 	ld	-11 (ix), #0x01
                           2168 ;src\CFG8266.c:415: ucLocalUpdate = 0;
   0F3B 21r07r00      [10] 2169 	ld	hl,#_ucLocalUpdate + 0
   0F3E 36 00         [10] 2170 	ld	(hl), #0x00
                           2171 ;src\CFG8266.c:416: ucNagleOff = 0;
   0F40 21r09r00      [10] 2172 	ld	hl,#_ucNagleOff + 0
   0F43 36 00         [10] 2173 	ld	(hl), #0x00
                           2174 ;src\CFG8266.c:417: ucNagleOn = 0;
   0F45 21r0Ar00      [10] 2175 	ld	hl,#_ucNagleOn + 0
   0F48 36 00         [10] 2176 	ld	(hl), #0x00
                           2177 ;src\CFG8266.c:418: ucRadioOff = 0;
   0F4A 21r0Br00      [10] 2178 	ld	hl,#_ucRadioOff + 0
   0F4D 36 00         [10] 2179 	ld	(hl), #0x00
                           2180 ;src\CFG8266.c:419: ucSetTimeout = 0;
   0F4F 21r0Cr00      [10] 2181 	ld	hl,#_ucSetTimeout + 0
   0F52 36 00         [10] 2182 	ld	(hl), #0x00
                           2183 ;src\CFG8266.c:420: ucScanPage = 0;
   0F54 AF            [ 4] 2184 	xor	a, a
   0F55 DD 77 EF      [19] 2185 	ld	-17 (ix), a
                           2186 ;src\CFG8266.c:422: ucVerMajor = 0;
   0F58 AF            [ 4] 2187 	xor	a, a
   0F59 DD 77 FF      [19] 2188 	ld	-1 (ix), a
                           2189 ;src\CFG8266.c:423: ucVerMinor = 0;
   0F5C AF            [ 4] 2190 	xor	a, a
   0F5D DD 77 FE      [19] 2191 	ld	-2 (ix), a
                           2192 ;src\CFG8266.c:424: TickCount = 0; //this guarantees no leap for 18 minutes, more than enough so we do not need to check for jiffy leaping
   0F60 21 00 00      [10] 2193 	ld	hl, #0x0000
   0F63 22 9E FC      [16] 2194 	ld	(_TickCount), hl
                           2195 ;src\CFG8266.c:426: printf("> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0F66 21rC9r21      [10] 2196 	ld	hl, #___str_31
   0F69 E5            [11] 2197 	push	hl
   0F6A CDr00r00      [17] 2198 	call	_puts
   0F6D F1            [10] 2199 	pop	af
                           2200 ;src\CFG8266.c:428: if (IsValidInput(argv, argc, ucServer, ucFile, ucPort))
   0F6E 21 45 10      [10] 2201 	ld	hl, #4165
   0F71 39            [11] 2202 	add	hl, sp
   0F72 DD 75 FC      [19] 2203 	ld	-4 (ix), l
   0F75 DD 74 FD      [19] 2204 	ld	-3 (ix), h
   0F78 DD 7E FC      [19] 2205 	ld	a, -4 (ix)
   0F7B DD 77 FA      [19] 2206 	ld	-6 (ix), a
   0F7E DD 7E FD      [19] 2207 	ld	a, -3 (ix)
   0F81 DD 77 FB      [19] 2208 	ld	-5 (ix), a
   0F84 21 19 0F      [10] 2209 	ld	hl, #3865
   0F87 39            [11] 2210 	add	hl, sp
   0F88 DD 75 FC      [19] 2211 	ld	-4 (ix), l
   0F8B DD 74 FD      [19] 2212 	ld	-3 (ix), h
   0F8E EB            [ 4] 2213 	ex	de,hl
   0F8F 21 ED 0D      [10] 2214 	ld	hl, #3565
   0F92 39            [11] 2215 	add	hl, sp
   0F93 DD 75 F6      [19] 2216 	ld	-10 (ix), l
   0F96 DD 74 F7      [19] 2217 	ld	-9 (ix), h
   0F99 4D            [ 4] 2218 	ld	c, l
   0F9A 44            [ 4] 2219 	ld	b, h
   0F9B DD 6E FA      [19] 2220 	ld	l, -6 (ix)
   0F9E DD 66 FB      [19] 2221 	ld	h, -5 (ix)
   0FA1 E5            [11] 2222 	push	hl
   0FA2 D5            [11] 2223 	push	de
   0FA3 C5            [11] 2224 	push	bc
   0FA4 DD 6E 06      [19] 2225 	ld	l, 6 (ix)
   0FA7 DD 66 07      [19] 2226 	ld	h, 7 (ix)
   0FAA E5            [11] 2227 	push	hl
   0FAB DD 6E 04      [19] 2228 	ld	l, 4 (ix)
   0FAE DD 66 05      [19] 2229 	ld	h, 5 (ix)
   0FB1 E5            [11] 2230 	push	hl
   0FB2 CDrE3r04      [17] 2231 	call	_IsValidInput
   0FB5 FD 21 0A 00   [14] 2232 	ld	iy, #10
   0FB9 FD 39         [15] 2233 	add	iy, sp
   0FBB FD F9         [10] 2234 	ld	sp, iy
   0FBD DD 75 FA      [19] 2235 	ld	-6 (ix), l
   0FC0 DD 74 FB      [19] 2236 	ld	-5 (ix), h
   0FC3 7C            [ 4] 2237 	ld	a, h
   0FC4 DD B6 FA      [19] 2238 	or	a, -6 (ix)
   0FC7 CArB9r21      [10] 2239 	jp	Z, 00374$
                           2240 ;src\CFG8266.c:430: do
   0FCA AF            [ 4] 2241 	xor	a, a
   0FCB DD 77 FB      [19] 2242 	ld	-5 (ix), a
   0FCE                    2243 00103$:
                           2244 ;src\CFG8266.c:433: myPort6 = speed;
   0FCE DD 7E FB      [19] 2245 	ld	a, -5 (ix)
   0FD1 D3 06         [11] 2246 	out	(_myPort6), a
                           2247 ;src\CFG8266.c:434: ClearUartData();
   0FD3 3E 14         [ 7] 2248 	ld	a, #0x14
   0FD5 D3 06         [11] 2249 	out	(_myPort6), a
                           2250 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0FD7 76            [ 4] 2251 	halt
                           2252 ;src\CFG8266.c:436: TxByte('?');
   0FD8 3E 3F         [ 7] 2253 	ld	a, #0x3f
   0FDA F5            [11] 2254 	push	af
   0FDB 33            [ 6] 2255 	inc	sp
   0FDC CDrAEr07      [17] 2256 	call	_TxByte
   0FDF 33            [ 6] 2257 	inc	sp
                           2258 ;src\CFG8266.c:438: bResponse = WaitForRXData(responseOK,2,60,false,false,NULL,0);
   0FE0 21 00 00      [10] 2259 	ld	hl, #0x0000
   0FE3 E5            [11] 2260 	push	hl
   0FE4 2E 00         [ 7] 2261 	ld	l, #0x00
   0FE6 E5            [11] 2262 	push	hl
   0FE7 AF            [ 4] 2263 	xor	a, a
   0FE8 F5            [11] 2264 	push	af
   0FE9 33            [ 6] 2265 	inc	sp
   0FEA AF            [ 4] 2266 	xor	a, a
   0FEB F5            [11] 2267 	push	af
   0FEC 33            [ 6] 2268 	inc	sp
   0FED 2E 3C         [ 7] 2269 	ld	l, #0x3c
   0FEF E5            [11] 2270 	push	hl
   0FF0 2E 02         [ 7] 2271 	ld	l, #0x02
   0FF2 E5            [11] 2272 	push	hl
   0FF3 21r0Er01      [10] 2273 	ld	hl, #_responseOK
   0FF6 E5            [11] 2274 	push	hl
   0FF7 CDr2Ar09      [17] 2275 	call	_WaitForRXData
   0FFA FD 21 0C 00   [14] 2276 	ld	iy, #12
   0FFE FD 39         [15] 2277 	add	iy, sp
   1000 FD F9         [10] 2278 	ld	sp, iy
   1002 7D            [ 4] 2279 	ld	a, l
                           2280 ;src\CFG8266.c:440: if (bResponse)
   1003 B7            [ 4] 2281 	or	a, a
   1004 20 0A         [12] 2282 	jr	NZ,00105$
                           2283 ;src\CFG8266.c:442: ++speed;
   1006 DD 34 FB      [23] 2284 	inc	-5 (ix)
                           2285 ;src\CFG8266.c:444: while (speed<10);
   1009 DD 7E FB      [19] 2286 	ld	a, -5 (ix)
   100C D6 0A         [ 7] 2287 	sub	a, #0x0a
   100E 38 BE         [12] 2288 	jr	C,00103$
   1010                    2289 00105$:
                           2290 ;src\CFG8266.c:446: if (speed<10)
   1010 DD 7E FB      [19] 2291 	ld	a, -5 (ix)
   1013 D6 0A         [ 7] 2292 	sub	a, #0x0a
   1015 D2rAFr21      [10] 2293 	jp	NC, 00371$
                           2294 ;src\CFG8266.c:448: printf ("Baud Rate: %s\r\n",speedStr[speed]);
   1018 DD 7E FB      [19] 2295 	ld	a, -5 (ix)
   101B DD 77 FA      [19] 2296 	ld	-6 (ix), a
   101E AF            [ 4] 2297 	xor	a, a
   101F DD 77 FB      [19] 2298 	ld	-5 (ix), a
   1022 DD 7E FA      [19] 2299 	ld	a, -6 (ix)
   1025 DD 77 FA      [19] 2300 	ld	-6 (ix), a
   1028 DD 7E FB      [19] 2301 	ld	a, -5 (ix)
   102B DD 77 FB      [19] 2302 	ld	-5 (ix), a
   102E DD CB FA 26   [23] 2303 	sla	-6 (ix)
   1032 DD CB FB 16   [23] 2304 	rl	-5 (ix)
   1036 3Er0C         [ 7] 2305 	ld	a, #<(_speedStr)
   1038 DD 86 FA      [19] 2306 	add	a, -6 (ix)
   103B DD 77 F8      [19] 2307 	ld	-8 (ix), a
   103E 3Es00         [ 7] 2308 	ld	a, #>(_speedStr)
   1040 DD 8E FB      [19] 2309 	adc	a, -5 (ix)
   1043 DD 77 F9      [19] 2310 	ld	-7 (ix), a
   1046 DD 6E F8      [19] 2311 	ld	l, -8 (ix)
   1049 DD 66 F9      [19] 2312 	ld	h, -7 (ix)
   104C 7E            [ 7] 2313 	ld	a, (hl)
   104D DD 77 FA      [19] 2314 	ld	-6 (ix), a
   1050 23            [ 6] 2315 	inc	hl
   1051 7E            [ 7] 2316 	ld	a, (hl)
   1052 DD 77 FB      [19] 2317 	ld	-5 (ix), a
   1055 DD 6E FA      [19] 2318 	ld	l, -6 (ix)
   1058 DD 66 FB      [19] 2319 	ld	h, -5 (ix)
   105B E5            [11] 2320 	push	hl
   105C 21r30r22      [10] 2321 	ld	hl, #___str_32
   105F E5            [11] 2322 	push	hl
   1060 CDr00r00      [17] 2323 	call	_printf
   1063 F1            [10] 2324 	pop	af
                           2325 ;src\CFG8266.c:449: TxByte('V'); //Request version
   1064 26 56         [ 7] 2326 	ld	h,#0x56
   1066 E3            [19] 2327 	ex	(sp),hl
   1067 33            [ 6] 2328 	inc	sp
   1068 CDrAEr07      [17] 2329 	call	_TxByte
   106B 33            [ 6] 2330 	inc	sp
                           2331 ;src\CFG8266.c:450: bResponse = WaitForRXData(versionResponse,1,20,true,false,NULL,0);
   106C 21 00 00      [10] 2332 	ld	hl, #0x0000
   106F E5            [11] 2333 	push	hl
   1070 2E 00         [ 7] 2334 	ld	l, #0x00
   1072 E5            [11] 2335 	push	hl
   1073 AF            [ 4] 2336 	xor	a, a
   1074 57            [ 4] 2337 	ld	d,a
   1075 1E 01         [ 7] 2338 	ld	e,#0x01
   1077 D5            [11] 2339 	push	de
   1078 2E 14         [ 7] 2340 	ld	l, #0x14
   107A E5            [11] 2341 	push	hl
   107B 2E 01         [ 7] 2342 	ld	l, #0x01
   107D E5            [11] 2343 	push	hl
   107E 21r0Br01      [10] 2344 	ld	hl, #_versionResponse
   1081 E5            [11] 2345 	push	hl
   1082 CDr2Ar09      [17] 2346 	call	_WaitForRXData
   1085 FD 21 0C 00   [14] 2347 	ld	iy, #12
   1089 FD 39         [15] 2348 	add	iy, sp
   108B FD F9         [10] 2349 	ld	sp, iy
                           2350 ;src\CFG8266.c:451: if (bResponse)
   108D DD 75 FB      [19] 2351 	ld	-5 (ix), l
   1090 7D            [ 4] 2352 	ld	a, l
   1091 B7            [ 4] 2353 	or	a, a
   1092 28 20         [12] 2354 	jr	Z,00113$
                           2355 ;src\CFG8266.c:453: while(!UartRXData());
   1094                    2356 00106$:
   1094 DB 07         [11] 2357 	in	a, (_myPort7)
   1096 D6 01         [ 7] 2358 	sub	a,#0x01
   1098 3E 00         [ 7] 2359 	ld	a, #0x00
   109A 17            [ 4] 2360 	rla
   109B CB 47         [ 8] 2361 	bit	0, a
   109D 20 F5         [12] 2362 	jr	NZ,00106$
                           2363 ;src\CFG8266.c:454: ucVerMajor = GetUARTData();
   109F DB 06         [11] 2364 	in	a, (_myPort6)
   10A1 DD 77 FF      [19] 2365 	ld	-1 (ix), a
                           2366 ;src\CFG8266.c:455: while(!UartRXData());
   10A4                    2367 00109$:
   10A4 DB 07         [11] 2368 	in	a, (_myPort7)
   10A6 D6 01         [ 7] 2369 	sub	a,#0x01
   10A8 3E 00         [ 7] 2370 	ld	a, #0x00
   10AA 17            [ 4] 2371 	rla
   10AB CB 47         [ 8] 2372 	bit	0, a
   10AD 20 F5         [12] 2373 	jr	NZ,00109$
                           2374 ;src\CFG8266.c:456: ucVerMinor = GetUARTData();
   10AF DB 06         [11] 2375 	in	a, (_myPort6)
   10B1 DD 77 FE      [19] 2376 	ld	-2 (ix), a
   10B4                    2377 00113$:
                           2378 ;src\CFG8266.c:458: printf ("FW Version: %c.%c\r\n",ucVerMajor+'0',ucVerMinor+'0');
   10B4 DD 4E FE      [19] 2379 	ld	c, -2 (ix)
   10B7 06 00         [ 7] 2380 	ld	b, #0x00
   10B9 21 30 00      [10] 2381 	ld	hl, #0x0030
   10BC 09            [11] 2382 	add	hl, bc
   10BD EB            [ 4] 2383 	ex	de, hl
   10BE DD 4E FF      [19] 2384 	ld	c, -1 (ix)
   10C1 06 00         [ 7] 2385 	ld	b, #0x00
   10C3 21 30 00      [10] 2386 	ld	hl, #0x0030
   10C6 09            [11] 2387 	add	hl, bc
   10C7 D5            [11] 2388 	push	de
   10C8 E5            [11] 2389 	push	hl
   10C9 21r40r22      [10] 2390 	ld	hl, #___str_33
   10CC E5            [11] 2391 	push	hl
   10CD CDr00r00      [17] 2392 	call	_printf
   10D0 21 06 00      [10] 2393 	ld	hl, #6
   10D3 39            [11] 2394 	add	hl, sp
   10D4 F9            [ 6] 2395 	ld	sp, hl
                           2396 ;src\CFG8266.c:460: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   10D5 3Ar00r00      [13] 2397 	ld	a,(#_ucScan + 0)
   10D8 B7            [ 4] 2398 	or	a, a
   10D9 20 19         [12] 2399 	jr	NZ,00363$
   10DB 3Ar09r00      [13] 2400 	ld	a,(#_ucNagleOff + 0)
   10DE B7            [ 4] 2401 	or	a, a
   10DF 20 13         [12] 2402 	jr	NZ,00363$
   10E1 3Ar0Ar00      [13] 2403 	ld	a,(#_ucNagleOn + 0)
   10E4 B7            [ 4] 2404 	or	a, a
   10E5 20 0D         [12] 2405 	jr	NZ,00363$
   10E7 3Ar0Br00      [13] 2406 	ld	a,(#_ucRadioOff + 0)
   10EA B7            [ 4] 2407 	or	a, a
   10EB 20 07         [12] 2408 	jr	NZ,00363$
   10ED 3Ar0Cr00      [13] 2409 	ld	a,(#_ucSetTimeout + 0)
   10F0 B7            [ 4] 2410 	or	a, a
   10F1 CAr46r19      [10] 2411 	jp	Z, 00364$
   10F4                    2412 00363$:
                           2413 ;src\CFG8266.c:463: if (ucScan)
   10F4 3Ar00r00      [13] 2414 	ld	a,(#_ucScan + 0)
   10F7 B7            [ 4] 2415 	or	a, a
   10F8 CAr79r11      [10] 2416 	jp	Z, 00143$
                           2417 ;src\CFG8266.c:465: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   10FB DD 7E FF      [19] 2418 	ld	a, -1 (ix)
   10FE D6 01         [ 7] 2419 	sub	a, #0x01
   1100 38 6C         [12] 2420 	jr	C,00126$
   1102 DD 7E FE      [19] 2421 	ld	a, -2 (ix)
   1105 D6 02         [ 7] 2422 	sub	a, #0x02
   1107 38 65         [12] 2423 	jr	C,00126$
                           2424 ;src\CFG8266.c:467: TxByte('g'); //Request current AP status
   1109 3E 67         [ 7] 2425 	ld	a, #0x67
   110B F5            [11] 2426 	push	af
   110C 33            [ 6] 2427 	inc	sp
   110D CDrAEr07      [17] 2428 	call	_TxByte
   1110 33            [ 6] 2429 	inc	sp
                           2430 ;src\CFG8266.c:468: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   1111 21 00 00      [10] 2431 	ld	hl, #0x0000
   1114 E5            [11] 2432 	push	hl
   1115 2E 00         [ 7] 2433 	ld	l, #0x00
   1117 E5            [11] 2434 	push	hl
   1118 AF            [ 4] 2435 	xor	a, a
   1119 57            [ 4] 2436 	ld	d,a
   111A 1E 01         [ 7] 2437 	ld	e,#0x01
   111C D5            [11] 2438 	push	de
   111D 2E 1E         [ 7] 2439 	ld	l, #0x1e
   111F E5            [11] 2440 	push	hl
   1120 2E 03         [ 7] 2441 	ld	l, #0x03
   1122 E5            [11] 2442 	push	hl
   1123 21r1Cr01      [10] 2443 	ld	hl, #_apstsResponse
   1126 E5            [11] 2444 	push	hl
   1127 CDr2Ar09      [17] 2445 	call	_WaitForRXData
   112A FD 21 0C 00   [14] 2446 	ld	iy, #12
   112E FD 39         [15] 2447 	add	iy, sp
   1130 FD F9         [10] 2448 	ld	sp, iy
                           2449 ;src\CFG8266.c:469: if (bResponse)
   1132 DD 75 FB      [19] 2450 	ld	-5 (ix), l
   1135 7D            [ 4] 2451 	ld	a, l
   1136 B7            [ 4] 2452 	or	a, a
   1137 28 35         [12] 2453 	jr	Z,00126$
                           2454 ;src\CFG8266.c:471: while(!UartRXData());
   1139                    2455 00114$:
   1139 DB 07         [11] 2456 	in	a, (_myPort7)
   113B D6 01         [ 7] 2457 	sub	a,#0x01
   113D 3E 00         [ 7] 2458 	ld	a, #0x00
   113F 17            [ 4] 2459 	rla
   1140 CB 47         [ 8] 2460 	bit	0, a
   1142 20 F5         [12] 2461 	jr	NZ,00114$
                           2462 ;src\CFG8266.c:472: ucAPstsRspSize=GetUARTData();
   1144 DB 06         [11] 2463 	in	a, (_myPort6)
   1146 DD 77 FD      [19] 2464 	ld	-3 (ix), a
                           2465 ;src\CFG8266.c:476: while(!UartRXData());
   1149 21 C5 0D      [10] 2466 	ld	hl, #3525
   114C 39            [11] 2467 	add	hl, sp
   114D EB            [ 4] 2468 	ex	de, hl
   114E 01 00 00      [10] 2469 	ld	bc, #0x0000
   1151                    2470 00117$:
   1151 DB 07         [11] 2471 	in	a, (_myPort7)
   1153 D6 01         [ 7] 2472 	sub	a,#0x01
   1155 3E 00         [ 7] 2473 	ld	a, #0x00
   1157 17            [ 4] 2474 	rla
   1158 CB 47         [ 8] 2475 	bit	0, a
   115A 20 F5         [12] 2476 	jr	NZ,00117$
                           2477 ;src\CFG8266.c:477: chAPStsInfo[i]=GetUARTData();
   115C 6B            [ 4] 2478 	ld	l, e
   115D 62            [ 4] 2479 	ld	h, d
   115E 09            [11] 2480 	add	hl, bc
   115F DB 06         [11] 2481 	in	a, (_myPort6)
   1161 77            [ 7] 2482 	ld	(hl), a
                           2483 ;src\CFG8266.c:478: ++i;
   1162 03            [ 6] 2484 	inc	bc
                           2485 ;src\CFG8266.c:480: while(i<ucAPstsRspSize);
   1163 DD 6E FD      [19] 2486 	ld	l, -3 (ix)
   1166 26 00         [ 7] 2487 	ld	h, #0x00
   1168 79            [ 4] 2488 	ld	a, c
   1169 95            [ 4] 2489 	sub	a, l
   116A 78            [ 4] 2490 	ld	a, b
   116B 9C            [ 4] 2491 	sbc	a, h
   116C 38 E3         [12] 2492 	jr	C,00117$
   116E                    2493 00126$:
                           2494 ;src\CFG8266.c:483: TxByte('S'); //Request SCAN
   116E 3E 53         [ 7] 2495 	ld	a, #0x53
   1170 F5            [11] 2496 	push	af
   1171 33            [ 6] 2497 	inc	sp
   1172 CDrAEr07      [17] 2498 	call	_TxByte
   1175 33            [ 6] 2499 	inc	sp
   1176 C3r08r12      [10] 2500 	jp	00144$
   1179                    2501 00143$:
                           2502 ;src\CFG8266.c:485: else if (ucNagleOff)
   1179 3Ar09r00      [13] 2503 	ld	a,(#_ucNagleOff + 0)
   117C B7            [ 4] 2504 	or	a, a
   117D 28 0B         [12] 2505 	jr	Z,00140$
                           2506 ;src\CFG8266.c:486: TxByte('N'); //Request nagle off for future connections
   117F 3E 4E         [ 7] 2507 	ld	a, #0x4e
   1181 F5            [11] 2508 	push	af
   1182 33            [ 6] 2509 	inc	sp
   1183 CDrAEr07      [17] 2510 	call	_TxByte
   1186 33            [ 6] 2511 	inc	sp
   1187 C3r08r12      [10] 2512 	jp	00144$
   118A                    2513 00140$:
                           2514 ;src\CFG8266.c:487: else if (ucNagleOn)
   118A 3Ar0Ar00      [13] 2515 	ld	a,(#_ucNagleOn + 0)
   118D B7            [ 4] 2516 	or	a, a
   118E 28 0A         [12] 2517 	jr	Z,00137$
                           2518 ;src\CFG8266.c:488: TxByte('D'); //Request nagle on for future connections
   1190 3E 44         [ 7] 2519 	ld	a, #0x44
   1192 F5            [11] 2520 	push	af
   1193 33            [ 6] 2521 	inc	sp
   1194 CDrAEr07      [17] 2522 	call	_TxByte
   1197 33            [ 6] 2523 	inc	sp
   1198 18 6E         [12] 2524 	jr	00144$
   119A                    2525 00137$:
                           2526 ;src\CFG8266.c:489: else if (ucRadioOff)
   119A 3Ar0Br00      [13] 2527 	ld	a,(#_ucRadioOff + 0)
   119D B7            [ 4] 2528 	or	a, a
   119E 28 0A         [12] 2529 	jr	Z,00134$
                           2530 ;src\CFG8266.c:490: TxByte('O'); //Request to turn off Wi-Fi radio immediately
   11A0 3E 4F         [ 7] 2531 	ld	a, #0x4f
   11A2 F5            [11] 2532 	push	af
   11A3 33            [ 6] 2533 	inc	sp
   11A4 CDrAEr07      [17] 2534 	call	_TxByte
   11A7 33            [ 6] 2535 	inc	sp
   11A8 18 5E         [12] 2536 	jr	00144$
   11AA                    2537 00134$:
                           2538 ;src\CFG8266.c:491: else if (ucSetTimeout)
   11AA 3Ar0Cr00      [13] 2539 	ld	a,(#_ucSetTimeout + 0)
   11AD B7            [ 4] 2540 	or	a, a
   11AE 28 58         [12] 2541 	jr	Z,00144$
                           2542 ;src\CFG8266.c:493: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   11B0 FD 21r0Dr00   [14] 2543 	ld	iy, #_uiTimeout
   11B4 FD 4E 01      [19] 2544 	ld	c, 1 (iy)
   11B7 DD 71 FC      [19] 2545 	ld	-4 (ix), c
                           2546 ;src\CFG8266.c:494: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   11BA FD 7E 00      [19] 2547 	ld	a, 0 (iy)
   11BD DD 77 FD      [19] 2548 	ld	-3 (ix), a
                           2549 ;src\CFG8266.c:495: if (uiTimeout)
   11C0 FD 7E 01      [19] 2550 	ld	a, 1 (iy)
   11C3 FD B6 00      [19] 2551 	or	a, 0 (iy)
   11C6 28 0F         [12] 2552 	jr	Z,00129$
                           2553 ;src\CFG8266.c:496: printf("\r\nSetting Wi-Fi idle timeout to %u...\r\n",uiTimeout);
   11C8 2Ar0Dr00      [16] 2554 	ld	hl, (_uiTimeout)
   11CB E5            [11] 2555 	push	hl
   11CC 21r54r22      [10] 2556 	ld	hl, #___str_34
   11CF E5            [11] 2557 	push	hl
   11D0 CDr00r00      [17] 2558 	call	_printf
   11D3 F1            [10] 2559 	pop	af
   11D4 F1            [10] 2560 	pop	af
   11D5 18 08         [12] 2561 	jr	00130$
   11D7                    2562 00129$:
                           2563 ;src\CFG8266.c:498: printf("\r\nSetting Wi-Fi to always on!\r\n");
   11D7 21r7Cr22      [10] 2564 	ld	hl, #___str_36
   11DA E5            [11] 2565 	push	hl
   11DB CDr00r00      [17] 2566 	call	_puts
   11DE F1            [10] 2567 	pop	af
   11DF                    2568 00130$:
                           2569 ;src\CFG8266.c:499: TxByte('T'); //Request to set time-out
   11DF 3E 54         [ 7] 2570 	ld	a, #0x54
   11E1 F5            [11] 2571 	push	af
   11E2 33            [ 6] 2572 	inc	sp
   11E3 CDrAEr07      [17] 2573 	call	_TxByte
   11E6 33            [ 6] 2574 	inc	sp
                           2575 ;src\CFG8266.c:500: TxByte(0);
   11E7 AF            [ 4] 2576 	xor	a, a
   11E8 F5            [11] 2577 	push	af
   11E9 33            [ 6] 2578 	inc	sp
   11EA CDrAEr07      [17] 2579 	call	_TxByte
   11ED 33            [ 6] 2580 	inc	sp
                           2581 ;src\CFG8266.c:501: TxByte(2);
   11EE 3E 02         [ 7] 2582 	ld	a, #0x02
   11F0 F5            [11] 2583 	push	af
   11F1 33            [ 6] 2584 	inc	sp
   11F2 CDrAEr07      [17] 2585 	call	_TxByte
   11F5 33            [ 6] 2586 	inc	sp
                           2587 ;src\CFG8266.c:502: TxByte(ucTimeOutMSB);
   11F6 DD 7E FC      [19] 2588 	ld	a, -4 (ix)
   11F9 F5            [11] 2589 	push	af
   11FA 33            [ 6] 2590 	inc	sp
   11FB CDrAEr07      [17] 2591 	call	_TxByte
   11FE 33            [ 6] 2592 	inc	sp
                           2593 ;src\CFG8266.c:503: TxByte(ucTimeOutLSB);
   11FF DD 7E FD      [19] 2594 	ld	a, -3 (ix)
   1202 F5            [11] 2595 	push	af
   1203 33            [ 6] 2596 	inc	sp
   1204 CDrAEr07      [17] 2597 	call	_TxByte
   1207 33            [ 6] 2598 	inc	sp
   1208                    2599 00144$:
                           2600 ;src\CFG8266.c:506: if (ucScan)
   1208 3Ar00r00      [13] 2601 	ld	a,(#_ucScan + 0)
   120B B7            [ 4] 2602 	or	a, a
   120C 28 27         [12] 2603 	jr	Z,00157$
                           2604 ;src\CFG8266.c:507: bResponse = WaitForRXData(scanResponse,2,60,true,false,NULL,0);
   120E 21 00 00      [10] 2605 	ld	hl, #0x0000
   1211 E5            [11] 2606 	push	hl
   1212 2E 00         [ 7] 2607 	ld	l, #0x00
   1214 E5            [11] 2608 	push	hl
   1215 AF            [ 4] 2609 	xor	a, a
   1216 57            [ 4] 2610 	ld	d,a
   1217 1E 01         [ 7] 2611 	ld	e,#0x01
   1219 D5            [11] 2612 	push	de
   121A 2E 3C         [ 7] 2613 	ld	l, #0x3c
   121C E5            [11] 2614 	push	hl
   121D 2E 02         [ 7] 2615 	ld	l, #0x02
   121F E5            [11] 2616 	push	hl
   1220 21r10r01      [10] 2617 	ld	hl, #_scanResponse
   1223 E5            [11] 2618 	push	hl
   1224 CDr2Ar09      [17] 2619 	call	_WaitForRXData
   1227 FD 21 0C 00   [14] 2620 	ld	iy, #12
   122B FD 39         [15] 2621 	add	iy, sp
   122D FD F9         [10] 2622 	ld	sp, iy
   122F DD 75 FB      [19] 2623 	ld	-5 (ix), l
   1232 C3rE4r12      [10] 2624 	jp	00158$
   1235                    2625 00157$:
                           2626 ;src\CFG8266.c:508: else if (ucNagleOff)
   1235 3Ar09r00      [13] 2627 	ld	a,(#_ucNagleOff + 0)
   1238 B7            [ 4] 2628 	or	a, a
   1239 28 27         [12] 2629 	jr	Z,00154$
                           2630 ;src\CFG8266.c:509: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false,NULL,0);
   123B 21 00 00      [10] 2631 	ld	hl, #0x0000
   123E E5            [11] 2632 	push	hl
   123F 2E 00         [ 7] 2633 	ld	l, #0x00
   1241 E5            [11] 2634 	push	hl
   1242 AF            [ 4] 2635 	xor	a, a
   1243 57            [ 4] 2636 	ld	d,a
   1244 1E 01         [ 7] 2637 	ld	e,#0x01
   1246 D5            [11] 2638 	push	de
   1247 2E 3C         [ 7] 2639 	ld	l, #0x3c
   1249 E5            [11] 2640 	push	hl
   124A 2E 02         [ 7] 2641 	ld	l, #0x02
   124C E5            [11] 2642 	push	hl
   124D 21r16r01      [10] 2643 	ld	hl, #_nagleoffResponse
   1250 E5            [11] 2644 	push	hl
   1251 CDr2Ar09      [17] 2645 	call	_WaitForRXData
   1254 FD 21 0C 00   [14] 2646 	ld	iy, #12
   1258 FD 39         [15] 2647 	add	iy, sp
   125A FD F9         [10] 2648 	ld	sp, iy
   125C DD 75 FB      [19] 2649 	ld	-5 (ix), l
   125F C3rE4r12      [10] 2650 	jp	00158$
   1262                    2651 00154$:
                           2652 ;src\CFG8266.c:510: else if (ucNagleOn)
   1262 3Ar0Ar00      [13] 2653 	ld	a,(#_ucNagleOn + 0)
   1265 B7            [ 4] 2654 	or	a, a
   1266 28 26         [12] 2655 	jr	Z,00151$
                           2656 ;src\CFG8266.c:511: bResponse = WaitForRXData(nagleonResponse,2,60,true,false,NULL,0);
   1268 21 00 00      [10] 2657 	ld	hl, #0x0000
   126B E5            [11] 2658 	push	hl
   126C 2E 00         [ 7] 2659 	ld	l, #0x00
   126E E5            [11] 2660 	push	hl
   126F AF            [ 4] 2661 	xor	a, a
   1270 57            [ 4] 2662 	ld	d,a
   1271 1E 01         [ 7] 2663 	ld	e,#0x01
   1273 D5            [11] 2664 	push	de
   1274 2E 3C         [ 7] 2665 	ld	l, #0x3c
   1276 E5            [11] 2666 	push	hl
   1277 2E 02         [ 7] 2667 	ld	l, #0x02
   1279 E5            [11] 2668 	push	hl
   127A 21r14r01      [10] 2669 	ld	hl, #_nagleonResponse
   127D E5            [11] 2670 	push	hl
   127E CDr2Ar09      [17] 2671 	call	_WaitForRXData
   1281 FD 21 0C 00   [14] 2672 	ld	iy, #12
   1285 FD 39         [15] 2673 	add	iy, sp
   1287 FD F9         [10] 2674 	ld	sp, iy
   1289 DD 75 FB      [19] 2675 	ld	-5 (ix), l
   128C 18 56         [12] 2676 	jr	00158$
   128E                    2677 00151$:
                           2678 ;src\CFG8266.c:512: else if (ucRadioOff)
   128E 3Ar0Br00      [13] 2679 	ld	a,(#_ucRadioOff + 0)
   1291 B7            [ 4] 2680 	or	a, a
   1292 28 26         [12] 2681 	jr	Z,00148$
                           2682 ;src\CFG8266.c:513: bResponse = WaitForRXData(radioOffResponse,2,60,true,false,NULL,0);
   1294 21 00 00      [10] 2683 	ld	hl, #0x0000
   1297 E5            [11] 2684 	push	hl
   1298 2E 00         [ 7] 2685 	ld	l, #0x00
   129A E5            [11] 2686 	push	hl
   129B AF            [ 4] 2687 	xor	a, a
   129C 57            [ 4] 2688 	ld	d,a
   129D 1E 01         [ 7] 2689 	ld	e,#0x01
   129F D5            [11] 2690 	push	de
   12A0 2E 3C         [ 7] 2691 	ld	l, #0x3c
   12A2 E5            [11] 2692 	push	hl
   12A3 2E 02         [ 7] 2693 	ld	l, #0x02
   12A5 E5            [11] 2694 	push	hl
   12A6 21r2Br01      [10] 2695 	ld	hl, #_radioOffResponse
   12A9 E5            [11] 2696 	push	hl
   12AA CDr2Ar09      [17] 2697 	call	_WaitForRXData
   12AD FD 21 0C 00   [14] 2698 	ld	iy, #12
   12B1 FD 39         [15] 2699 	add	iy, sp
   12B3 FD F9         [10] 2700 	ld	sp, iy
   12B5 DD 75 FB      [19] 2701 	ld	-5 (ix), l
   12B8 18 2A         [12] 2702 	jr	00158$
   12BA                    2703 00148$:
                           2704 ;src\CFG8266.c:514: else if (ucSetTimeout)
   12BA 3Ar0Cr00      [13] 2705 	ld	a,(#_ucSetTimeout + 0)
   12BD B7            [ 4] 2706 	or	a, a
   12BE 28 24         [12] 2707 	jr	Z,00158$
                           2708 ;src\CFG8266.c:515: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false,NULL,0);
   12C0 21 00 00      [10] 2709 	ld	hl, #0x0000
   12C3 E5            [11] 2710 	push	hl
   12C4 2E 00         [ 7] 2711 	ld	l, #0x00
   12C6 E5            [11] 2712 	push	hl
   12C7 AF            [ 4] 2713 	xor	a, a
   12C8 57            [ 4] 2714 	ld	d,a
   12C9 1E 01         [ 7] 2715 	ld	e,#0x01
   12CB D5            [11] 2716 	push	de
   12CC 2E 3C         [ 7] 2717 	ld	l, #0x3c
   12CE E5            [11] 2718 	push	hl
   12CF 2E 02         [ 7] 2719 	ld	l, #0x02
   12D1 E5            [11] 2720 	push	hl
   12D2 21r29r01      [10] 2721 	ld	hl, #_responseRadioOnTimeout
   12D5 E5            [11] 2722 	push	hl
   12D6 CDr2Ar09      [17] 2723 	call	_WaitForRXData
   12D9 FD 21 0C 00   [14] 2724 	ld	iy, #12
   12DD FD 39         [15] 2725 	add	iy, sp
   12DF FD F9         [10] 2726 	ld	sp, iy
   12E1 DD 75 FB      [19] 2727 	ld	-5 (ix), l
   12E4                    2728 00158$:
                           2729 ;src\CFG8266.c:518: if ((bResponse)&&(ucScan))
   12E4 DD 7E FB      [19] 2730 	ld	a, -5 (ix)
   12E7 B7            [ 4] 2731 	or	a, a
   12E8 CArB2r18      [10] 2732 	jp	Z, 00294$
   12EB FD 21r00r00   [14] 2733 	ld	iy, #_ucScan
   12EF FD 7E 00      [19] 2734 	ld	a, 0 (iy)
   12F2 B7            [ 4] 2735 	or	a, a
   12F3 CArB2r18      [10] 2736 	jp	Z, 00294$
                           2737 ;src\CFG8266.c:521: do
   12F6 0E 14         [ 7] 2738 	ld	c, #0x14
   12F8                    2739 00161$:
                           2740 ;src\CFG8266.c:523: --ucRetries;
   12F8 0D            [ 4] 2741 	dec	c
                           2742 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   12F9 06 1E         [ 7] 2743 	ld	b, #0x1e
   12FB                    2744 00379$:
                           2745 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   12FB 76            [ 4] 2746 	halt
                           2747 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   12FC 78            [ 4] 2748 	ld	a, b
   12FD 3D            [ 4] 2749 	dec	a
   12FE 47            [ 4] 2750 	ld	b, a
   12FF B7            [ 4] 2751 	or	a, a
   1300 20 F9         [12] 2752 	jr	NZ,00379$
                           2753 ;src\CFG8266.c:526: TxByte('s'); //Request SCAN result
   1302 C5            [11] 2754 	push	bc
   1303 3E 73         [ 7] 2755 	ld	a, #0x73
   1305 F5            [11] 2756 	push	af
   1306 33            [ 6] 2757 	inc	sp
   1307 CDrAEr07      [17] 2758 	call	_TxByte
   130A 33            [ 6] 2759 	inc	sp
   130B 21 02 00      [10] 2760 	ld	hl, #0x0002
   130E E5            [11] 2761 	push	hl
   130F 21r12r01      [10] 2762 	ld	hl, #_scanresNoNetwork
   1312 E5            [11] 2763 	push	hl
   1313 AF            [ 4] 2764 	xor	a, a
   1314 F5            [11] 2765 	push	af
   1315 33            [ 6] 2766 	inc	sp
   1316 AF            [ 4] 2767 	xor	a, a
   1317 F5            [11] 2768 	push	af
   1318 33            [ 6] 2769 	inc	sp
   1319 21 3C 00      [10] 2770 	ld	hl, #0x003c
   131C E5            [11] 2771 	push	hl
   131D 2E 02         [ 7] 2772 	ld	l, #0x02
   131F E5            [11] 2773 	push	hl
   1320 21r18r01      [10] 2774 	ld	hl, #_scanresResponse
   1323 E5            [11] 2775 	push	hl
   1324 CDr2Ar09      [17] 2776 	call	_WaitForRXData
   1327 FD 21 0C 00   [14] 2777 	ld	iy, #12
   132B FD 39         [15] 2778 	add	iy, sp
   132D FD F9         [10] 2779 	ld	sp, iy
   132F C1            [10] 2780 	pop	bc
                           2781 ;src\CFG8266.c:529: while ((ucRetries)&&(!bResponse));
   1330 79            [ 4] 2782 	ld	a, c
   1331 B7            [ 4] 2783 	or	a, a
   1332 28 04         [12] 2784 	jr	Z,00163$
   1334 7D            [ 4] 2785 	ld	a, l
   1335 B7            [ 4] 2786 	or	a, a
   1336 28 C0         [12] 2787 	jr	Z,00161$
   1338                    2788 00163$:
                           2789 ;src\CFG8266.c:531: if (bResponse==1)
   1338 2D            [ 4] 2790 	dec	l
   1339 C2rA7r18      [10] 2791 	jp	NZ,00268$
                           2792 ;src\CFG8266.c:534: while(!UartRXData());
   133C                    2793 00164$:
   133C DB 07         [11] 2794 	in	a, (_myPort7)
   133E D6 01         [ 7] 2795 	sub	a,#0x01
   1340 3E 00         [ 7] 2796 	ld	a, #0x00
   1342 17            [ 4] 2797 	rla
   1343 CB 47         [ 8] 2798 	bit	0, a
   1345 20 F5         [12] 2799 	jr	NZ,00164$
                           2800 ;src\CFG8266.c:535: ucAPs = GetUARTData();
   1347 DB 06         [11] 2801 	in	a, (_myPort6)
   1349 DD 77 F0      [19] 2802 	ld	-16 (ix), a
                           2803 ;src\CFG8266.c:536: if (ucAPs>100)
   134C 3E 64         [ 7] 2804 	ld	a, #0x64
   134E DD 96 F0      [19] 2805 	sub	a, -16 (ix)
   1351 30 04         [12] 2806 	jr	NC,00168$
                           2807 ;src\CFG8266.c:537: ucAPs=100;
   1353 DD 36 F0 64   [19] 2808 	ld	-16 (ix), #0x64
   1357                    2809 00168$:
                           2810 ;src\CFG8266.c:539: printf ("\r\n");
   1357 21r9Br22      [10] 2811 	ld	hl, #___str_38
   135A E5            [11] 2812 	push	hl
   135B CDr00r00      [17] 2813 	call	_puts
   135E F1            [10] 2814 	pop	af
                           2815 ;src\CFG8266.c:540: do
   135F 21 53 00      [10] 2816 	ld	hl, #83
   1362 39            [11] 2817 	add	hl, sp
   1363 DD 75 F1      [19] 2818 	ld	-15 (ix), l
   1366 DD 74 F2      [19] 2819 	ld	-14 (ix), h
   1369 AF            [ 4] 2820 	xor	a, a
   136A DD 77 FD      [19] 2821 	ld	-3 (ix), a
                           2822 ;src\CFG8266.c:545: while(!UartRXData());
   136D                    2823 00433$:
   136D DD 4E FD      [19] 2824 	ld	c, -3 (ix)
   1370 06 00         [ 7] 2825 	ld	b, #0x00
   1372 69            [ 4] 2826 	ld	l, c
   1373 60            [ 4] 2827 	ld	h, b
   1374 29            [11] 2828 	add	hl, hl
   1375 29            [11] 2829 	add	hl, hl
   1376 29            [11] 2830 	add	hl, hl
   1377 29            [11] 2831 	add	hl, hl
   1378 09            [11] 2832 	add	hl, bc
   1379 29            [11] 2833 	add	hl, hl
   137A EB            [ 4] 2834 	ex	de, hl
   137B 7B            [ 4] 2835 	ld	a, e
   137C DD 86 F1      [19] 2836 	add	a, -15 (ix)
   137F 4F            [ 4] 2837 	ld	c, a
   1380 7A            [ 4] 2838 	ld	a, d
   1381 DD 8E F2      [19] 2839 	adc	a, -14 (ix)
   1384 47            [ 4] 2840 	ld	b, a
   1385 1E 00         [ 7] 2841 	ld	e, #0x00
   1387                    2842 00169$:
   1387 DB 07         [11] 2843 	in	a, (_myPort7)
   1389 D6 01         [ 7] 2844 	sub	a,#0x01
   138B 3E 00         [ 7] 2845 	ld	a, #0x00
   138D 17            [ 4] 2846 	rla
   138E CB 47         [ 8] 2847 	bit	0, a
   1390 20 F5         [12] 2848 	jr	NZ,00169$
                           2849 ;src\CFG8266.c:546: rx_data=GetUARTData();
   1392 DB 06         [11] 2850 	in	a, (_myPort6)
   1394 DD 77 FC      [19] 2851 	ld	-4 (ix), a
                           2852 ;src\CFG8266.c:547: stAP[tx_data].APName[ucIndex++]=rx_data;
   1397 7B            [ 4] 2853 	ld	a, e
   1398 1C            [ 4] 2854 	inc	e
   1399 6F            [ 4] 2855 	ld	l, a
   139A 26 00         [ 7] 2856 	ld	h, #0x00
   139C 09            [11] 2857 	add	hl, bc
   139D DD 7E FC      [19] 2858 	ld	a, -4 (ix)
   13A0 77            [ 7] 2859 	ld	(hl), a
                           2860 ;src\CFG8266.c:549: while(rx_data!=0);
   13A1 DD 7E FC      [19] 2861 	ld	a, -4 (ix)
   13A4 B7            [ 4] 2862 	or	a, a
   13A5 20 E0         [12] 2863 	jr	NZ,00169$
                           2864 ;src\CFG8266.c:550: while(!UartRXData());
   13A7                    2865 00175$:
   13A7 DB 07         [11] 2866 	in	a, (_myPort7)
   13A9 D6 01         [ 7] 2867 	sub	a,#0x01
   13AB 3E 00         [ 7] 2868 	ld	a, #0x00
   13AD 17            [ 4] 2869 	rla
   13AE CB 47         [ 8] 2870 	bit	0, a
   13B0 20 F5         [12] 2871 	jr	NZ,00175$
                           2872 ;src\CFG8266.c:551: rx_data=GetUARTData();
   13B2 DB 06         [11] 2873 	in	a, (_myPort6)
   13B4 4F            [ 4] 2874 	ld	c, a
                           2875 ;src\CFG8266.c:552: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   13B5 DD 5E FD      [19] 2876 	ld	e, -3 (ix)
   13B8 16 00         [ 7] 2877 	ld	d, #0x00
   13BA 6B            [ 4] 2878 	ld	l, e
   13BB 62            [ 4] 2879 	ld	h, d
   13BC 29            [11] 2880 	add	hl, hl
   13BD 29            [11] 2881 	add	hl, hl
   13BE 29            [11] 2882 	add	hl, hl
   13BF 29            [11] 2883 	add	hl, hl
   13C0 19            [11] 2884 	add	hl, de
   13C1 29            [11] 2885 	add	hl, hl
   13C2 EB            [ 4] 2886 	ex	de, hl
   13C3 DD 7E F1      [19] 2887 	ld	a, -15 (ix)
   13C6 83            [ 4] 2888 	add	a, e
   13C7 5F            [ 4] 2889 	ld	e, a
   13C8 DD 7E F2      [19] 2890 	ld	a, -14 (ix)
   13CB 8A            [ 4] 2891 	adc	a, d
   13CC 57            [ 4] 2892 	ld	d, a
   13CD 21 21 00      [10] 2893 	ld	hl, #0x0021
   13D0 19            [11] 2894 	add	hl, de
   13D1 DD 75 F9      [19] 2895 	ld	-7 (ix), l
   13D4 DD 74 FA      [19] 2896 	ld	-6 (ix), h
   13D7 79            [ 4] 2897 	ld	a, c
   13D8 D6 45         [ 7] 2898 	sub	a, #0x45
   13DA 20 0A         [12] 2899 	jr	NZ,00392$
   13DC DD 36 FB 01   [19] 2900 	ld	-5 (ix), #0x01
   13E0 AF            [ 4] 2901 	xor	a, a
   13E1 DD 77 FC      [19] 2902 	ld	-4 (ix), a
   13E4 18 07         [12] 2903 	jr	00393$
   13E6                    2904 00392$:
   13E6 AF            [ 4] 2905 	xor	a, a
   13E7 DD 77 FB      [19] 2906 	ld	-5 (ix), a
   13EA DD 77 FC      [19] 2907 	ld	-4 (ix), a
   13ED                    2908 00393$:
   13ED DD 7E FB      [19] 2909 	ld	a, -5 (ix)
   13F0 DD 6E F9      [19] 2910 	ld	l, -7 (ix)
   13F3 DD 66 FA      [19] 2911 	ld	h, -6 (ix)
   13F6 77            [ 7] 2912 	ld	(hl), a
                           2913 ;src\CFG8266.c:553: ++tx_data;
   13F7 DD 34 FD      [23] 2914 	inc	-3 (ix)
                           2915 ;src\CFG8266.c:555: while (tx_data!=ucAPs);
   13FA DD 7E FD      [19] 2916 	ld	a, -3 (ix)
   13FD DD 96 F0      [19] 2917 	sub	a, -16 (ix)
   1400 C2r6Dr13      [10] 2918 	jp	NZ,00433$
                           2919 ;src\CFG8266.c:556: ClearUartData();
   1403 3E 14         [ 7] 2920 	ld	a, #0x14
   1405 D3 06         [11] 2921 	out	(_myPort6), a
                           2922 ;src\CFG8266.c:558: do
   1407 DD 7E FE      [19] 2923 	ld	a, -2 (ix)
   140A D6 02         [ 7] 2924 	sub	a, #0x02
   140C 3E 00         [ 7] 2925 	ld	a, #0x00
   140E 17            [ 4] 2926 	rla
   140F DD 77 F3      [19] 2927 	ld	-13 (ix), a
   1412 DD 7E FF      [19] 2928 	ld	a, -1 (ix)
   1415 D6 01         [ 7] 2929 	sub	a, #0x01
   1417 3E 00         [ 7] 2930 	ld	a, #0x00
   1419 17            [ 4] 2931 	rla
   141A DD 77 F4      [19] 2932 	ld	-12 (ix), a
   141D 21 C5 0D      [10] 2933 	ld	hl, #3525
   1420 39            [11] 2934 	add	hl, sp
   1421 DD 75 F5      [19] 2935 	ld	-11 (ix), l
   1424 DD 74 F6      [19] 2936 	ld	-10 (ix), h
   1427 DD 7E F5      [19] 2937 	ld	a, -11 (ix)
   142A C6 01         [ 7] 2938 	add	a, #0x01
   142C DD 77 F7      [19] 2939 	ld	-9 (ix), a
   142F DD 7E F6      [19] 2940 	ld	a, -10 (ix)
   1432 CE 00         [ 7] 2941 	adc	a, #0x00
   1434 DD 77 F8      [19] 2942 	ld	-8 (ix), a
   1437 AF            [ 4] 2943 	xor	a, a
   1438 DD 77 FE      [19] 2944 	ld	-2 (ix), a
   143B                    2945 00264$:
                           2946 ;src\CFG8266.c:560: Cls();
   143B CDr00r00      [17] 2947 	call	_Cls
                           2948 ;src\CFG8266.c:561: printf("%s%s\r\n\n",strAPSts[chAPStsInfo[0]],&chAPStsInfo[1]);
   143E DD 7E F7      [19] 2949 	ld	a, -9 (ix)
   1441 DD 77 FA      [19] 2950 	ld	-6 (ix), a
   1444 DD 7E F8      [19] 2951 	ld	a, -8 (ix)
   1447 DD 77 FB      [19] 2952 	ld	-5 (ix), a
   144A DD 6E F5      [19] 2953 	ld	l, -11 (ix)
   144D DD 66 F6      [19] 2954 	ld	h, -10 (ix)
   1450 7E            [ 7] 2955 	ld	a, (hl)
   1451 DD 77 FF      [19] 2956 	ld	-1 (ix), a
   1454 DD 77 FC      [19] 2957 	ld	-4 (ix), a
   1457 AF            [ 4] 2958 	xor	a, a
   1458 DD 77 FD      [19] 2959 	ld	-3 (ix), a
   145B DD 7E FC      [19] 2960 	ld	a, -4 (ix)
   145E FD 21 10 00   [14] 2961 	ld	iy, #16
   1462 FD 39         [15] 2962 	add	iy, sp
   1464 FD 77 00      [19] 2963 	ld	0 (iy), a
   1467 DD 7E FD      [19] 2964 	ld	a, -3 (ix)
   146A FD 77 01      [19] 2965 	ld	1 (iy), a
   146D FD CB 00 26   [23] 2966 	sla	0 (iy)
   1471 FD CB 01 16   [23] 2967 	rl	1 (iy)
   1475 3Er00         [ 7] 2968 	ld	a, #<(_strAPSts)
   1477 21 10 00      [10] 2969 	ld	hl, #16
   147A 39            [11] 2970 	add	hl, sp
   147B 86            [ 7] 2971 	add	a, (hl)
   147C DD 77 FC      [19] 2972 	ld	-4 (ix), a
   147F 3Es00         [ 7] 2973 	ld	a, #>(_strAPSts)
   1481 23            [ 6] 2974 	inc	hl
   1482 8E            [ 7] 2975 	adc	a, (hl)
   1483 DD 77 FD      [19] 2976 	ld	-3 (ix), a
   1486 DD 6E FC      [19] 2977 	ld	l, -4 (ix)
   1489 DD 66 FD      [19] 2978 	ld	h, -3 (ix)
   148C 7E            [ 7] 2979 	ld	a, (hl)
   148D DD 77 FC      [19] 2980 	ld	-4 (ix), a
   1490 23            [ 6] 2981 	inc	hl
   1491 7E            [ 7] 2982 	ld	a, (hl)
   1492 DD 77 FD      [19] 2983 	ld	-3 (ix), a
   1495 DD 6E FA      [19] 2984 	ld	l, -6 (ix)
   1498 DD 66 FB      [19] 2985 	ld	h, -5 (ix)
   149B E5            [11] 2986 	push	hl
   149C DD 6E FC      [19] 2987 	ld	l, -4 (ix)
   149F DD 66 FD      [19] 2988 	ld	h, -3 (ix)
   14A2 E5            [11] 2989 	push	hl
   14A3 21r9Dr22      [10] 2990 	ld	hl, #___str_39
   14A6 E5            [11] 2991 	push	hl
   14A7 CDr00r00      [17] 2992 	call	_printf
   14AA 21 06 00      [10] 2993 	ld	hl, #6
   14AD 39            [11] 2994 	add	hl, sp
   14AE F9            [ 6] 2995 	ld	sp, hl
                           2996 ;src\CFG8266.c:562: printf("Choose AP:\r\n\n");
   14AF 21rA5r22      [10] 2997 	ld	hl, #___str_41
   14B2 E5            [11] 2998 	push	hl
   14B3 CDr00r00      [17] 2999 	call	_puts
   14B6 F1            [10] 3000 	pop	af
                           3001 ;src\CFG8266.c:564: ucIndex = scanPageLimit*ucScanPage;
   14B7 DD 7E FE      [19] 3002 	ld	a, -2 (ix)
   14BA 4F            [ 4] 3003 	ld	c, a
   14BB 87            [ 4] 3004 	add	a, a
   14BC 87            [ 4] 3005 	add	a, a
   14BD 81            [ 4] 3006 	add	a, c
   14BE 87            [ 4] 3007 	add	a, a
   14BF DD 77 FF      [19] 3008 	ld	-1 (ix), a
                           3009 ;src\CFG8266.c:566: if ((ucAPs-ucIndex)<=scanPageLimit)
   14C2 DD 7E F0      [19] 3010 	ld	a, -16 (ix)
   14C5 DD 77 F9      [19] 3011 	ld	-7 (ix), a
   14C8 AF            [ 4] 3012 	xor	a, a
   14C9 DD 77 FA      [19] 3013 	ld	-6 (ix), a
   14CC DD 7E FF      [19] 3014 	ld	a, -1 (ix)
   14CF FD 21 10 00   [14] 3015 	ld	iy, #16
   14D3 FD 39         [15] 3016 	add	iy, sp
   14D5 FD 77 00      [19] 3017 	ld	0 (iy), a
   14D8 AF            [ 4] 3018 	xor	a, a
   14D9 FD 77 01      [19] 3019 	ld	1 (iy), a
   14DC 21 10 00      [10] 3020 	ld	hl, #16
   14DF 39            [11] 3021 	add	hl, sp
   14E0 DD 7E F9      [19] 3022 	ld	a, -7 (ix)
   14E3 96            [ 7] 3023 	sub	a, (hl)
   14E4 DD 77 FC      [19] 3024 	ld	-4 (ix), a
   14E7 DD 7E FA      [19] 3025 	ld	a, -6 (ix)
   14EA 23            [ 6] 3026 	inc	hl
   14EB 9E            [ 7] 3027 	sbc	a, (hl)
   14EC DD 77 FD      [19] 3028 	ld	-3 (ix), a
   14EF 3E 0A         [ 7] 3029 	ld	a, #0x0a
   14F1 DD BE FC      [19] 3030 	cp	a, -4 (ix)
   14F4 3E 00         [ 7] 3031 	ld	a, #0x00
   14F6 DD 9E FD      [19] 3032 	sbc	a, -3 (ix)
   14F9 E2rFEr14      [10] 3033 	jp	PO, 01009$
   14FC EE 80         [ 7] 3034 	xor	a, #0x80
   14FE                    3035 01009$:
   14FE FAr09r15      [10] 3036 	jp	M, 00182$
                           3037 ;src\CFG8266.c:567: ucPageCheck = ucAPs;
   1501 DD 7E F0      [19] 3038 	ld	a, -16 (ix)
   1504 DD 77 FB      [19] 3039 	ld	-5 (ix), a
   1507 18 0B         [12] 3040 	jr	00443$
   1509                    3041 00182$:
                           3042 ;src\CFG8266.c:569: ucPageCheck = ucIndex + scanPageLimit;
   1509 DD 7E FF      [19] 3043 	ld	a, -1 (ix)
   150C DD 77 FD      [19] 3044 	ld	-3 (ix), a
   150F C6 0A         [ 7] 3045 	add	a, #0x0a
   1511 DD 77 FB      [19] 3046 	ld	-5 (ix), a
   1514                    3047 00443$:
   1514                    3048 00382$:
                           3049 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   1514 DD 7E FF      [19] 3050 	ld	a, -1 (ix)
   1517 DD 96 FB      [19] 3051 	sub	a, -5 (ix)
   151A 30 66         [12] 3052 	jr	NC,00187$
                           3053 ;src\CFG8266.c:573: printf("%u - %s",(ucIndex%scanPageLimit),stAP[ucIndex].APName);
   151C DD 4E FF      [19] 3054 	ld	c, -1 (ix)
   151F 06 00         [ 7] 3055 	ld	b, #0x00
   1521 69            [ 4] 3056 	ld	l, c
   1522 60            [ 4] 3057 	ld	h, b
   1523 29            [11] 3058 	add	hl, hl
   1524 29            [11] 3059 	add	hl, hl
   1525 29            [11] 3060 	add	hl, hl
   1526 29            [11] 3061 	add	hl, hl
   1527 09            [11] 3062 	add	hl, bc
   1528 29            [11] 3063 	add	hl, hl
   1529 EB            [ 4] 3064 	ex	de, hl
   152A DD 6E F1      [19] 3065 	ld	l, -15 (ix)
   152D DD 66 F2      [19] 3066 	ld	h, -14 (ix)
   1530 19            [11] 3067 	add	hl, de
   1531 DD 75 FC      [19] 3068 	ld	-4 (ix), l
   1534 DD 74 FD      [19] 3069 	ld	-3 (ix), h
   1537 DD 4E FF      [19] 3070 	ld	c, -1 (ix)
   153A 06 00         [ 7] 3071 	ld	b, #0x00
   153C D5            [11] 3072 	push	de
   153D 21 0A 00      [10] 3073 	ld	hl, #0x000a
   1540 E5            [11] 3074 	push	hl
   1541 C5            [11] 3075 	push	bc
   1542 CDr00r00      [17] 3076 	call	__modsint
   1545 F1            [10] 3077 	pop	af
   1546 F1            [10] 3078 	pop	af
   1547 DD 4E FC      [19] 3079 	ld	c, -4 (ix)
   154A DD 46 FD      [19] 3080 	ld	b, -3 (ix)
   154D C5            [11] 3081 	push	bc
   154E E5            [11] 3082 	push	hl
   154F 21rB2r22      [10] 3083 	ld	hl, #___str_42
   1552 E5            [11] 3084 	push	hl
   1553 CDr00r00      [17] 3085 	call	_printf
   1556 21 06 00      [10] 3086 	ld	hl, #6
   1559 39            [11] 3087 	add	hl, sp
   155A F9            [ 6] 3088 	ld	sp, hl
   155B D1            [10] 3089 	pop	de
                           3090 ;src\CFG8266.c:574: if (stAP[ucIndex].isEncrypted)
   155C DD 6E F1      [19] 3091 	ld	l, -15 (ix)
   155F DD 66 F2      [19] 3092 	ld	h, -14 (ix)
   1562 19            [11] 3093 	add	hl, de
   1563 11 21 00      [10] 3094 	ld	de, #0x0021
   1566 19            [11] 3095 	add	hl, de
   1567 7E            [ 7] 3096 	ld	a, (hl)
   1568 B7            [ 4] 3097 	or	a, a
   1569 28 0A         [12] 3098 	jr	Z,00185$
                           3099 ;src\CFG8266.c:575: printf(" (PWD)\r\n");
   156B 21rBAr22      [10] 3100 	ld	hl, #___str_44
   156E E5            [11] 3101 	push	hl
   156F CDr00r00      [17] 3102 	call	_puts
   1572 F1            [10] 3103 	pop	af
   1573 18 08         [12] 3104 	jr	00383$
   1575                    3105 00185$:
                           3106 ;src\CFG8266.c:577: printf(" (OPEN)\r\n");
   1575 21rC2r22      [10] 3107 	ld	hl, #___str_46
   1578 E5            [11] 3108 	push	hl
   1579 CDr00r00      [17] 3109 	call	_puts
   157C F1            [10] 3110 	pop	af
   157D                    3111 00383$:
                           3112 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   157D DD 34 FF      [23] 3113 	inc	-1 (ix)
   1580 18 92         [12] 3114 	jr	00382$
   1582                    3115 00187$:
                           3116 ;src\CFG8266.c:580: if (ucAPs-ucIndex) // still APs left to list?
   1582 DD 4E FF      [19] 3117 	ld	c, -1 (ix)
   1585 06 00         [ 7] 3118 	ld	b, #0x00
   1587 DD 7E F9      [19] 3119 	ld	a, -7 (ix)
   158A 91            [ 4] 3120 	sub	a, c
   158B DD 77 FC      [19] 3121 	ld	-4 (ix), a
   158E DD 7E FA      [19] 3122 	ld	a, -6 (ix)
   1591 98            [ 4] 3123 	sbc	a, b
   1592 DD 77 FD      [19] 3124 	ld	-3 (ix), a
   1595 DD B6 FC      [19] 3125 	or	a, -4 (ix)
   1598 28 0A         [12] 3126 	jr	Z,00189$
                           3127 ;src\CFG8266.c:581: printf("\r\nWhich one to connect? (ESC exit/SPACE BAR next page)");
   159A 21rCBr22      [10] 3128 	ld	hl, #___str_47
   159D E5            [11] 3129 	push	hl
   159E CDr00r00      [17] 3130 	call	_printf
   15A1 F1            [10] 3131 	pop	af
   15A2 18 08         [12] 3132 	jr	00204$
   15A4                    3133 00189$:
                           3134 ;src\CFG8266.c:583: printf("\r\nWhich one to connect? (ESC exit)");
   15A4 21r02r23      [10] 3135 	ld	hl, #___str_48
   15A7 E5            [11] 3136 	push	hl
   15A8 CDr00r00      [17] 3137 	call	_printf
   15AB F1            [10] 3138 	pop	af
                           3139 ;src\CFG8266.c:585: do
   15AC                    3140 00204$:
                           3141 ;src\CFG8266.c:587: tx_data = Inkey ();
   15AC CDr00r00      [17] 3142 	call	_Inkey
   15AF 4D            [ 4] 3143 	ld	c, l
                           3144 ;src\CFG8266.c:589: if (tx_data==0x1b)
                           3145 ;src\CFG8266.c:592: if ((tx_data==' ')&&(ucAPs-ucIndex))
   15B0 79            [ 4] 3146 	ld	a,c
   15B1 FE 1B         [ 7] 3147 	cp	a,#0x1b
   15B3 28 54         [12] 3148 	jr	Z,00206$
   15B5 D6 20         [ 7] 3149 	sub	a, #0x20
   15B7 20 08         [12] 3150 	jr	NZ,00194$
   15B9 DD 7E FD      [19] 3151 	ld	a, -3 (ix)
   15BC DD B6 FC      [19] 3152 	or	a, -4 (ix)
   15BF 20 48         [12] 3153 	jr	NZ,00206$
                           3154 ;src\CFG8266.c:593: break;
   15C1                    3155 00194$:
                           3156 ;src\CFG8266.c:595: if ((tx_data>='0')&&(tx_data<='9'))
   15C1 79            [ 4] 3157 	ld	a, c
   15C2 D6 30         [ 7] 3158 	sub	a, #0x30
   15C4 38 3A         [12] 3159 	jr	C,00200$
   15C6 3E 39         [ 7] 3160 	ld	a, #0x39
   15C8 91            [ 4] 3161 	sub	a, c
   15C9 38 35         [12] 3162 	jr	C,00200$
                           3163 ;src\CFG8266.c:597: if (((tx_data-'0')<scanPageLimit)&&(((scanPageLimit*ucScanPage)+(tx_data-'0'))<ucAPs))
   15CB 41            [ 4] 3164 	ld	b, c
   15CC 16 00         [ 7] 3165 	ld	d, #0x00
   15CE 78            [ 4] 3166 	ld	a, b
   15CF C6 D0         [ 7] 3167 	add	a, #0xd0
   15D1 5F            [ 4] 3168 	ld	e, a
   15D2 7A            [ 4] 3169 	ld	a, d
   15D3 CE FF         [ 7] 3170 	adc	a, #0xff
   15D5 57            [ 4] 3171 	ld	d, a
   15D6 7B            [ 4] 3172 	ld	a, e
   15D7 D6 0A         [ 7] 3173 	sub	a, #0x0a
   15D9 7A            [ 4] 3174 	ld	a, d
   15DA 17            [ 4] 3175 	rla
   15DB 3F            [ 4] 3176 	ccf
   15DC 1F            [ 4] 3177 	rra
   15DD DE 80         [ 7] 3178 	sbc	a, #0x80
   15DF 30 1F         [12] 3179 	jr	NC,00200$
   15E1 DD 6E FE      [19] 3180 	ld	l, -2 (ix)
   15E4 26 00         [ 7] 3181 	ld	h, #0x00
   15E6 D5            [11] 3182 	push	de
   15E7 5D            [ 4] 3183 	ld	e, l
   15E8 54            [ 4] 3184 	ld	d, h
   15E9 29            [11] 3185 	add	hl, hl
   15EA 29            [11] 3186 	add	hl, hl
   15EB 19            [11] 3187 	add	hl, de
   15EC 29            [11] 3188 	add	hl, hl
   15ED D1            [10] 3189 	pop	de
   15EE 19            [11] 3190 	add	hl, de
   15EF EB            [ 4] 3191 	ex	de, hl
   15F0 7B            [ 4] 3192 	ld	a, e
   15F1 DD 96 F9      [19] 3193 	sub	a, -7 (ix)
   15F4 7A            [ 4] 3194 	ld	a, d
   15F5 DD 9E FA      [19] 3195 	sbc	a, -6 (ix)
   15F8 E2rFDr15      [10] 3196 	jp	PO, 01013$
   15FB EE 80         [ 7] 3197 	xor	a, #0x80
   15FD                    3198 01013$:
   15FD FAr09r16      [10] 3199 	jp	M, 00206$
                           3200 ;src\CFG8266.c:598: break;
   1600                    3201 00200$:
                           3202 ;src\CFG8266.c:600: if (tx_data)
   1600 79            [ 4] 3203 	ld	a, c
   1601 B7            [ 4] 3204 	or	a, a
   1602 28 A8         [12] 3205 	jr	Z,00204$
                           3206 ;src\CFG8266.c:601: Beep();
   1604 CDr00r00      [17] 3207 	call	_Beep
                           3208 ;src\CFG8266.c:603: while (1);
   1607 18 A3         [12] 3209 	jr	00204$
   1609                    3210 00206$:
                           3211 ;src\CFG8266.c:605: if ((tx_data!=0x1b)&&(tx_data!=' ')) // AP Choosen?
   1609 79            [ 4] 3212 	ld	a,c
   160A FE 1B         [ 7] 3213 	cp	a,#0x1b
   160C CAr1Er18      [10] 3214 	jp	Z,00261$
   160F D6 20         [ 7] 3215 	sub	a, #0x20
   1611 CAr1Er18      [10] 3216 	jp	Z,00261$
                           3217 ;src\CFG8266.c:608: printf(" %c\r\n\n",tx_data); // Print accepted char
   1614 59            [ 4] 3218 	ld	e, c
   1615 16 00         [ 7] 3219 	ld	d, #0x00
   1617 C5            [11] 3220 	push	bc
   1618 D5            [11] 3221 	push	de
   1619 21r25r23      [10] 3222 	ld	hl, #___str_49
   161C E5            [11] 3223 	push	hl
   161D CDr00r00      [17] 3224 	call	_printf
   1620 F1            [10] 3225 	pop	af
   1621 F1            [10] 3226 	pop	af
   1622 C1            [10] 3227 	pop	bc
                           3228 ;src\CFG8266.c:609: ucIndex = (scanPageLimit*ucScanPage) + (tx_data-'0');
   1623 DD 7E EF      [19] 3229 	ld	a, -17 (ix)
   1626 5F            [ 4] 3230 	ld	e, a
   1627 87            [ 4] 3231 	add	a, a
   1628 87            [ 4] 3232 	add	a, a
   1629 83            [ 4] 3233 	add	a, e
   162A 87            [ 4] 3234 	add	a, a
   162B 5F            [ 4] 3235 	ld	e, a
   162C 79            [ 4] 3236 	ld	a, c
   162D C6 D0         [ 7] 3237 	add	a, #0xd0
   162F 83            [ 4] 3238 	add	a, e
                           3239 ;src\CFG8266.c:610: if (stAP[ucIndex].isEncrypted)
   1630 4F            [ 4] 3240 	ld	c, a
   1631 06 00         [ 7] 3241 	ld	b, #0x00
   1633 69            [ 4] 3242 	ld	l, c
   1634 60            [ 4] 3243 	ld	h, b
   1635 29            [11] 3244 	add	hl, hl
   1636 29            [11] 3245 	add	hl, hl
   1637 29            [11] 3246 	add	hl, hl
   1638 29            [11] 3247 	add	hl, hl
   1639 09            [11] 3248 	add	hl, bc
   163A 29            [11] 3249 	add	hl, hl
   163B DD 75 FC      [19] 3250 	ld	-4 (ix), l
   163E DD 74 FD      [19] 3251 	ld	-3 (ix), h
   1641 DD 7E F1      [19] 3252 	ld	a, -15 (ix)
   1644 DD 86 FC      [19] 3253 	add	a, -4 (ix)
   1647 4F            [ 4] 3254 	ld	c, a
   1648 DD 7E F2      [19] 3255 	ld	a, -14 (ix)
   164B DD 8E FD      [19] 3256 	adc	a, -3 (ix)
   164E 47            [ 4] 3257 	ld	b, a
   164F 21 21 00      [10] 3258 	ld	hl, #0x0021
   1652 09            [11] 3259 	add	hl, bc
   1653 DD 75 FE      [19] 3260 	ld	-2 (ix), l
   1656 DD 74 FF      [19] 3261 	ld	-1 (ix), h
   1659 7E            [ 7] 3262 	ld	a, (hl)
   165A B7            [ 4] 3263 	or	a, a
   165B 28 21         [12] 3264 	jr	Z,00208$
                           3265 ;src\CFG8266.c:613: printf("Password? ");
   165D C5            [11] 3266 	push	bc
   165E 21r2Cr23      [10] 3267 	ld	hl, #___str_50
   1661 E5            [11] 3268 	push	hl
   1662 CDr00r00      [17] 3269 	call	_printf
   1665 F1            [10] 3270 	pop	af
   1666 C1            [10] 3271 	pop	bc
                           3272 ;src\CFG8266.c:614: InputString(ucPWD,64);
   1667 21 12 00      [10] 3273 	ld	hl, #18
   166A 39            [11] 3274 	add	hl, sp
   166B C5            [11] 3275 	push	bc
   166C 11 40 00      [10] 3276 	ld	de, #0x0040
   166F D5            [11] 3277 	push	de
   1670 E5            [11] 3278 	push	hl
   1671 CDr00r00      [17] 3279 	call	_InputString
   1674 F1            [10] 3280 	pop	af
   1675 21r9Br22      [10] 3281 	ld	hl, #___str_38
   1678 E3            [19] 3282 	ex	(sp),hl
   1679 CDr00r00      [17] 3283 	call	_puts
   167C F1            [10] 3284 	pop	af
   167D C1            [10] 3285 	pop	bc
   167E                    3286 00208$:
                           3287 ;src\CFG8266.c:618: printf("Connecting to: %s \r\n",stAP[ucIndex].APName);
   167E 59            [ 4] 3288 	ld	e, c
   167F 50            [ 4] 3289 	ld	d, b
   1680 C5            [11] 3290 	push	bc
   1681 D5            [11] 3291 	push	de
   1682 21r37r23      [10] 3292 	ld	hl, #___str_52
   1685 E5            [11] 3293 	push	hl
   1686 CDr00r00      [17] 3294 	call	_printf
   1689 F1            [10] 3295 	pop	af
   168A F1            [10] 3296 	pop	af
   168B CDr00r00      [17] 3297 	call	_strlen
   168E F1            [10] 3298 	pop	af
   168F 23            [ 6] 3299 	inc	hl
   1690 4D            [ 4] 3300 	ld	c,l
   1691 44            [ 4] 3301 	ld	b,h
                           3302 ;src\CFG8266.c:621: if (stAP[ucIndex].isEncrypted)
   1692 DD 6E FE      [19] 3303 	ld	l, -2 (ix)
   1695 DD 66 FF      [19] 3304 	ld	h, -1 (ix)
   1698 7E            [ 7] 3305 	ld	a, (hl)
   1699 B7            [ 4] 3306 	or	a, a
   169A 28 0E         [12] 3307 	jr	Z,00210$
                           3308 ;src\CFG8266.c:622: uiCMDLen += strlen(ucPWD);
   169C 21 12 00      [10] 3309 	ld	hl, #18
   169F 39            [11] 3310 	add	hl, sp
   16A0 C5            [11] 3311 	push	bc
   16A1 E5            [11] 3312 	push	hl
   16A2 CDr00r00      [17] 3313 	call	_strlen
   16A5 F1            [10] 3314 	pop	af
   16A6 C1            [10] 3315 	pop	bc
   16A7 09            [11] 3316 	add	hl, bc
   16A8 4D            [ 4] 3317 	ld	c, l
   16A9 44            [ 4] 3318 	ld	b, h
   16AA                    3319 00210$:
                           3320 ;src\CFG8266.c:623: TxByte('A'); //Request connect AP
   16AA C5            [11] 3321 	push	bc
   16AB 3E 41         [ 7] 3322 	ld	a, #0x41
   16AD F5            [11] 3323 	push	af
   16AE 33            [ 6] 3324 	inc	sp
   16AF CDrAEr07      [17] 3325 	call	_TxByte
   16B2 33            [ 6] 3326 	inc	sp
   16B3 C1            [10] 3327 	pop	bc
                           3328 ;src\CFG8266.c:624: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   16B4 78            [ 4] 3329 	ld	a, b
   16B5 C5            [11] 3330 	push	bc
   16B6 F5            [11] 3331 	push	af
   16B7 33            [ 6] 3332 	inc	sp
   16B8 CDrAEr07      [17] 3333 	call	_TxByte
   16BB 33            [ 6] 3334 	inc	sp
   16BC C1            [10] 3335 	pop	bc
                           3336 ;src\CFG8266.c:625: TxByte((unsigned char)(uiCMDLen&0xff));
   16BD 79            [ 4] 3337 	ld	a, c
   16BE C5            [11] 3338 	push	bc
   16BF F5            [11] 3339 	push	af
   16C0 33            [ 6] 3340 	inc	sp
   16C1 CDrAEr07      [17] 3341 	call	_TxByte
   16C4 33            [ 6] 3342 	inc	sp
   16C5 C1            [10] 3343 	pop	bc
                           3344 ;src\CFG8266.c:627: do
   16C6 DD 7E FC      [19] 3345 	ld	a, -4 (ix)
   16C9 DD 86 F1      [19] 3346 	add	a, -15 (ix)
   16CC DD 77 FE      [19] 3347 	ld	-2 (ix), a
   16CF DD 7E FD      [19] 3348 	ld	a, -3 (ix)
   16D2 DD 8E F2      [19] 3349 	adc	a, -14 (ix)
   16D5 DD 77 FF      [19] 3350 	ld	-1 (ix), a
   16D8 1E 00         [ 7] 3351 	ld	e, #0x00
   16DA                    3352 00212$:
                           3353 ;src\CFG8266.c:629: tx_data = stAP[ucIndex].APName[rx_data];
   16DA DD 7E FE      [19] 3354 	ld	a, -2 (ix)
   16DD 83            [ 4] 3355 	add	a, e
   16DE 57            [ 4] 3356 	ld	d, a
   16DF DD 7E FF      [19] 3357 	ld	a, -1 (ix)
   16E2 CE 00         [ 7] 3358 	adc	a, #0x00
   16E4 6A            [ 4] 3359 	ld	l, d
   16E5 67            [ 4] 3360 	ld	h, a
   16E6 56            [ 7] 3361 	ld	d, (hl)
                           3362 ;src\CFG8266.c:630: TxByte(tx_data);
   16E7 C5            [11] 3363 	push	bc
   16E8 D5            [11] 3364 	push	de
   16E9 D5            [11] 3365 	push	de
   16EA 33            [ 6] 3366 	inc	sp
   16EB CDrAEr07      [17] 3367 	call	_TxByte
   16EE 33            [ 6] 3368 	inc	sp
   16EF D1            [10] 3369 	pop	de
   16F0 C1            [10] 3370 	pop	bc
                           3371 ;src\CFG8266.c:631: --uiCMDLen;
   16F1 0B            [ 6] 3372 	dec	bc
                           3373 ;src\CFG8266.c:632: ++rx_data;
   16F2 1C            [ 4] 3374 	inc	e
                           3375 ;src\CFG8266.c:634: while((uiCMDLen)&&(tx_data!=0));
   16F3 78            [ 4] 3376 	ld	a, b
   16F4 B1            [ 4] 3377 	or	a, c
   16F5 28 04         [12] 3378 	jr	Z,00214$
   16F7 7A            [ 4] 3379 	ld	a, d
   16F8 B7            [ 4] 3380 	or	a, a
   16F9 20 DF         [12] 3381 	jr	NZ,00212$
   16FB                    3382 00214$:
                           3383 ;src\CFG8266.c:635: if(uiCMDLen)
   16FB 78            [ 4] 3384 	ld	a, b
   16FC B1            [ 4] 3385 	or	a, c
   16FD 28 2C         [12] 3386 	jr	Z,00219$
                           3387 ;src\CFG8266.c:638: do
   16FF 21 12 00      [10] 3388 	ld	hl, #18
   1702 39            [11] 3389 	add	hl, sp
   1703 DD 75 FD      [19] 3390 	ld	-3 (ix), l
   1706 DD 74 FE      [19] 3391 	ld	-2 (ix), h
   1709 AF            [ 4] 3392 	xor	a, a
   170A DD 77 FF      [19] 3393 	ld	-1 (ix), a
   170D                    3394 00215$:
                           3395 ;src\CFG8266.c:640: tx_data = ucPWD[rx_data];
   170D DD 7E FD      [19] 3396 	ld	a, -3 (ix)
   1710 DD 86 FF      [19] 3397 	add	a, -1 (ix)
   1713 5F            [ 4] 3398 	ld	e, a
   1714 DD 7E FE      [19] 3399 	ld	a, -2 (ix)
   1717 CE 00         [ 7] 3400 	adc	a, #0x00
   1719 57            [ 4] 3401 	ld	d, a
   171A 1A            [ 7] 3402 	ld	a, (de)
                           3403 ;src\CFG8266.c:641: TxByte(tx_data);
   171B C5            [11] 3404 	push	bc
   171C F5            [11] 3405 	push	af
   171D 33            [ 6] 3406 	inc	sp
   171E CDrAEr07      [17] 3407 	call	_TxByte
   1721 33            [ 6] 3408 	inc	sp
   1722 C1            [10] 3409 	pop	bc
                           3410 ;src\CFG8266.c:642: --uiCMDLen;
   1723 0B            [ 6] 3411 	dec	bc
                           3412 ;src\CFG8266.c:643: ++rx_data;
   1724 DD 34 FF      [23] 3413 	inc	-1 (ix)
                           3414 ;src\CFG8266.c:645: while(uiCMDLen);
   1727 78            [ 4] 3415 	ld	a, b
   1728 B1            [ 4] 3416 	or	a, c
   1729 20 E2         [12] 3417 	jr	NZ,00215$
   172B                    3418 00219$:
                           3419 ;src\CFG8266.c:649: bResponse = WaitForRXData(apconfigurationResponse,2,600,true,false,NULL,0); //Wait up to 10s
   172B 21 00 00      [10] 3420 	ld	hl, #0x0000
   172E E5            [11] 3421 	push	hl
   172F 2E 00         [ 7] 3422 	ld	l, #0x00
   1731 E5            [11] 3423 	push	hl
   1732 AF            [ 4] 3424 	xor	a, a
   1733 57            [ 4] 3425 	ld	d,a
   1734 1E 01         [ 7] 3426 	ld	e,#0x01
   1736 D5            [11] 3427 	push	de
   1737 21 58 02      [10] 3428 	ld	hl, #0x0258
   173A E5            [11] 3429 	push	hl
   173B 21 02 00      [10] 3430 	ld	hl, #0x0002
   173E E5            [11] 3431 	push	hl
   173F 21r1Ar01      [10] 3432 	ld	hl, #_apconfigurationResponse
   1742 E5            [11] 3433 	push	hl
   1743 CDr2Ar09      [17] 3434 	call	_WaitForRXData
   1746 FD 21 0C 00   [14] 3435 	ld	iy, #12
   174A FD 39         [15] 3436 	add	iy, sp
   174C FD F9         [10] 3437 	ld	sp, iy
   174E 7D            [ 4] 3438 	ld	a, l
                           3439 ;src\CFG8266.c:650: if (bResponse)
   174F B7            [ 4] 3440 	or	a, a
   1750 28 0B         [12] 3441 	jr	Z,00241$
                           3442 ;src\CFG8266.c:651: printf("Success, AP configured to be used.\r\n");
   1752 21r4Cr23      [10] 3443 	ld	hl, #___str_54
   1755 E5            [11] 3444 	push	hl
   1756 CDr00r00      [17] 3445 	call	_puts
   1759 F1            [10] 3446 	pop	af
   175A C3rC1r21      [10] 3447 	jp	00375$
   175D                    3448 00241$:
                           3449 ;src\CFG8266.c:654: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   175D DD CB F4 46   [20] 3450 	bit	0, -12 (ix)
   1761 C2r13r18      [10] 3451 	jp	NZ, 00237$
   1764 DD CB F3 46   [20] 3452 	bit	0, -13 (ix)
   1768 C2r13r18      [10] 3453 	jp	NZ, 00237$
                           3454 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   176B 01 5A 00      [10] 3455 	ld	bc, #0x005a
   176E                    3456 00384$:
                           3457 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   176E 76            [ 4] 3458 	halt
                           3459 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   176F 0B            [ 6] 3460 	dec	bc
   1770 78            [ 4] 3461 	ld	a, b
   1771 B1            [ 4] 3462 	or	a, c
   1772 20 FA         [12] 3463 	jr	NZ,00384$
                           3464 ;src\CFG8266.c:658: TxByte('g'); //Request current AP status
   1774 3E 67         [ 7] 3465 	ld	a, #0x67
   1776 F5            [11] 3466 	push	af
   1777 33            [ 6] 3467 	inc	sp
   1778 CDrAEr07      [17] 3468 	call	_TxByte
   177B 33            [ 6] 3469 	inc	sp
                           3470 ;src\CFG8266.c:659: bResponse = WaitForRXData(apstsResponse,3,120,true,false,NULL,0);
   177C 21 00 00      [10] 3471 	ld	hl, #0x0000
   177F E5            [11] 3472 	push	hl
   1780 2E 00         [ 7] 3473 	ld	l, #0x00
   1782 E5            [11] 3474 	push	hl
   1783 AF            [ 4] 3475 	xor	a, a
   1784 57            [ 4] 3476 	ld	d,a
   1785 1E 01         [ 7] 3477 	ld	e,#0x01
   1787 D5            [11] 3478 	push	de
   1788 2E 78         [ 7] 3479 	ld	l, #0x78
   178A E5            [11] 3480 	push	hl
   178B 2E 03         [ 7] 3481 	ld	l, #0x03
   178D E5            [11] 3482 	push	hl
   178E 21r1Cr01      [10] 3483 	ld	hl, #_apstsResponse
   1791 E5            [11] 3484 	push	hl
   1792 CDr2Ar09      [17] 3485 	call	_WaitForRXData
   1795 FD 21 0C 00   [14] 3486 	ld	iy, #12
   1799 FD 39         [15] 3487 	add	iy, sp
   179B FD F9         [10] 3488 	ld	sp, iy
   179D 7D            [ 4] 3489 	ld	a, l
                           3490 ;src\CFG8266.c:660: if (bResponse)
   179E B7            [ 4] 3491 	or	a, a
   179F 28 67         [12] 3492 	jr	Z,00234$
                           3493 ;src\CFG8266.c:662: while(!UartRXData());
   17A1                    3494 00221$:
   17A1 DB 07         [11] 3495 	in	a, (_myPort7)
   17A3 D6 01         [ 7] 3496 	sub	a,#0x01
   17A5 3E 00         [ 7] 3497 	ld	a, #0x00
   17A7 17            [ 4] 3498 	rla
   17A8 CB 47         [ 8] 3499 	bit	0, a
   17AA 20 F5         [12] 3500 	jr	NZ,00221$
                           3501 ;src\CFG8266.c:663: ucAPstsRspSize=GetUARTData();
   17AC DB 06         [11] 3502 	in	a, (_myPort6)
   17AE 4F            [ 4] 3503 	ld	c, a
                           3504 ;src\CFG8266.c:667: while(!UartRXData());
   17AF AF            [ 4] 3505 	xor	a, a
   17B0 DD 77 FE      [19] 3506 	ld	-2 (ix), a
   17B3 DD 77 FF      [19] 3507 	ld	-1 (ix), a
   17B6                    3508 00224$:
   17B6 DB 07         [11] 3509 	in	a, (_myPort7)
   17B8 D6 01         [ 7] 3510 	sub	a,#0x01
   17BA 3E 00         [ 7] 3511 	ld	a, #0x00
   17BC 17            [ 4] 3512 	rla
   17BD CB 47         [ 8] 3513 	bit	0, a
   17BF 20 F5         [12] 3514 	jr	NZ,00224$
                           3515 ;src\CFG8266.c:668: chAPStsInfo[i]=GetUARTData();
   17C1 DD 7E F5      [19] 3516 	ld	a, -11 (ix)
   17C4 DD 86 FE      [19] 3517 	add	a, -2 (ix)
   17C7 5F            [ 4] 3518 	ld	e, a
   17C8 DD 7E F6      [19] 3519 	ld	a, -10 (ix)
   17CB DD 8E FF      [19] 3520 	adc	a, -1 (ix)
   17CE 57            [ 4] 3521 	ld	d, a
   17CF DB 06         [11] 3522 	in	a, (_myPort6)
   17D1 12            [ 7] 3523 	ld	(de), a
                           3524 ;src\CFG8266.c:669: ++i;
   17D2 DD 34 FE      [23] 3525 	inc	-2 (ix)
   17D5 20 03         [12] 3526 	jr	NZ,01016$
   17D7 DD 34 FF      [23] 3527 	inc	-1 (ix)
   17DA                    3528 01016$:
                           3529 ;src\CFG8266.c:671: while(i<ucAPstsRspSize);
   17DA 41            [ 4] 3530 	ld	b, c
   17DB 1E 00         [ 7] 3531 	ld	e, #0x00
   17DD DD 7E FE      [19] 3532 	ld	a, -2 (ix)
   17E0 90            [ 4] 3533 	sub	a, b
   17E1 DD 7E FF      [19] 3534 	ld	a, -1 (ix)
   17E4 9B            [ 4] 3535 	sbc	a, e
   17E5 38 CF         [12] 3536 	jr	C,00224$
                           3537 ;src\CFG8266.c:673: if (chAPStsInfo[0]==2)
   17E7 DD 6E F5      [19] 3538 	ld	l, -11 (ix)
   17EA DD 66 F6      [19] 3539 	ld	h, -10 (ix)
   17ED 7E            [ 7] 3540 	ld	a, (hl)
   17EE D6 02         [ 7] 3541 	sub	a, #0x02
   17F0 20 0B         [12] 3542 	jr	NZ,00231$
                           3543 ;src\CFG8266.c:674: printf("Error, wrong password!\r\n");
   17F2 21r70r23      [10] 3544 	ld	hl, #___str_56
   17F5 E5            [11] 3545 	push	hl
   17F6 CDr00r00      [17] 3546 	call	_puts
   17F9 F1            [10] 3547 	pop	af
   17FA C3rC1r21      [10] 3548 	jp	00375$
   17FD                    3549 00231$:
                           3550 ;src\CFG8266.c:676: printf("Error, if protected network, check password.\r\n");
   17FD 21r88r23      [10] 3551 	ld	hl, #___str_58
   1800 E5            [11] 3552 	push	hl
   1801 CDr00r00      [17] 3553 	call	_puts
   1804 F1            [10] 3554 	pop	af
   1805 C3rC1r21      [10] 3555 	jp	00375$
   1808                    3556 00234$:
                           3557 ;src\CFG8266.c:679: printf("Error, if protected network, check password.\r\n");
   1808 21r88r23      [10] 3558 	ld	hl, #___str_58
   180B E5            [11] 3559 	push	hl
   180C CDr00r00      [17] 3560 	call	_puts
   180F F1            [10] 3561 	pop	af
   1810 C3rC1r21      [10] 3562 	jp	00375$
   1813                    3563 00237$:
                           3564 ;src\CFG8266.c:682: printf("Error, if protected network, check password.\r\n");
   1813 21r88r23      [10] 3565 	ld	hl, #___str_58
   1816 E5            [11] 3566 	push	hl
   1817 CDr00r00      [17] 3567 	call	_puts
   181A F1            [10] 3568 	pop	af
                           3569 ;src\CFG8266.c:685: break;
   181B C3rC1r21      [10] 3570 	jp	00375$
   181E                    3571 00261$:
                           3572 ;src\CFG8266.c:687: else if (tx_data==0x1b)
   181E 79            [ 4] 3573 	ld	a, c
   181F D6 1B         [ 7] 3574 	sub	a, #0x1b
   1821 20 0B         [12] 3575 	jr	NZ,00258$
                           3576 ;src\CFG8266.c:689: printf("\r\nUser canceled by ESC key...\r\n");
   1823 21rB6r23      [10] 3577 	ld	hl, #___str_62
   1826 E5            [11] 3578 	push	hl
   1827 CDr00r00      [17] 3579 	call	_puts
   182A F1            [10] 3580 	pop	af
                           3581 ;src\CFG8266.c:690: break;
   182B C3rC1r21      [10] 3582 	jp	00375$
   182E                    3583 00258$:
                           3584 ;src\CFG8266.c:694: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   182E DD CB F4 46   [20] 3585 	bit	0, -12 (ix)
   1832 20 67         [12] 3586 	jr	NZ,00255$
   1834 DD CB F3 46   [20] 3587 	bit	0, -13 (ix)
   1838 20 61         [12] 3588 	jr	NZ,00255$
                           3589 ;src\CFG8266.c:696: TxByte('g'); //Request current AP status
   183A 3E 67         [ 7] 3590 	ld	a, #0x67
   183C F5            [11] 3591 	push	af
   183D 33            [ 6] 3592 	inc	sp
   183E CDrAEr07      [17] 3593 	call	_TxByte
   1841 33            [ 6] 3594 	inc	sp
                           3595 ;src\CFG8266.c:697: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   1842 21 00 00      [10] 3596 	ld	hl, #0x0000
   1845 E5            [11] 3597 	push	hl
   1846 2E 00         [ 7] 3598 	ld	l, #0x00
   1848 E5            [11] 3599 	push	hl
   1849 AF            [ 4] 3600 	xor	a, a
   184A 57            [ 4] 3601 	ld	d,a
   184B 1E 01         [ 7] 3602 	ld	e,#0x01
   184D D5            [11] 3603 	push	de
   184E 2E 1E         [ 7] 3604 	ld	l, #0x1e
   1850 E5            [11] 3605 	push	hl
   1851 2E 03         [ 7] 3606 	ld	l, #0x03
   1853 E5            [11] 3607 	push	hl
   1854 21r1Cr01      [10] 3608 	ld	hl, #_apstsResponse
   1857 E5            [11] 3609 	push	hl
   1858 CDr2Ar09      [17] 3610 	call	_WaitForRXData
   185B FD 21 0C 00   [14] 3611 	ld	iy, #12
   185F FD 39         [15] 3612 	add	iy, sp
   1861 FD F9         [10] 3613 	ld	sp, iy
   1863 7D            [ 4] 3614 	ld	a, l
                           3615 ;src\CFG8266.c:698: if (bResponse)
   1864 B7            [ 4] 3616 	or	a, a
   1865 28 34         [12] 3617 	jr	Z,00255$
                           3618 ;src\CFG8266.c:700: while(!UartRXData());
   1867                    3619 00243$:
   1867 DB 07         [11] 3620 	in	a, (_myPort7)
   1869 D6 01         [ 7] 3621 	sub	a,#0x01
   186B 3E 00         [ 7] 3622 	ld	a, #0x00
   186D 17            [ 4] 3623 	rla
   186E CB 47         [ 8] 3624 	bit	0, a
   1870 20 F5         [12] 3625 	jr	NZ,00243$
                           3626 ;src\CFG8266.c:701: ucAPstsRspSize=GetUARTData();
   1872 DB 06         [11] 3627 	in	a, (_myPort6)
   1874 DD 77 FF      [19] 3628 	ld	-1 (ix), a
                           3629 ;src\CFG8266.c:705: while(!UartRXData());
   1877 11 00 00      [10] 3630 	ld	de, #0x0000
   187A                    3631 00246$:
   187A DB 07         [11] 3632 	in	a, (_myPort7)
   187C D6 01         [ 7] 3633 	sub	a,#0x01
   187E 3E 00         [ 7] 3634 	ld	a, #0x00
   1880 17            [ 4] 3635 	rla
   1881 CB 47         [ 8] 3636 	bit	0, a
   1883 20 F5         [12] 3637 	jr	NZ,00246$
                           3638 ;src\CFG8266.c:706: chAPStsInfo[i]=GetUARTData();
   1885 DD 6E F5      [19] 3639 	ld	l, -11 (ix)
   1888 DD 66 F6      [19] 3640 	ld	h, -10 (ix)
   188B 19            [11] 3641 	add	hl, de
   188C DB 06         [11] 3642 	in	a, (_myPort6)
   188E 77            [ 7] 3643 	ld	(hl), a
                           3644 ;src\CFG8266.c:707: ++i;
   188F 13            [ 6] 3645 	inc	de
                           3646 ;src\CFG8266.c:709: while(i<ucAPstsRspSize);
   1890 DD 4E FF      [19] 3647 	ld	c, -1 (ix)
   1893 06 00         [ 7] 3648 	ld	b, #0x00
   1895 7B            [ 4] 3649 	ld	a, e
   1896 91            [ 4] 3650 	sub	a, c
   1897 7A            [ 4] 3651 	ld	a, d
   1898 98            [ 4] 3652 	sbc	a, b
   1899 38 DF         [12] 3653 	jr	C,00246$
   189B                    3654 00255$:
                           3655 ;src\CFG8266.c:712: ++ucScanPage;
   189B DD 34 FE      [23] 3656 	inc	-2 (ix)
   189E DD 7E FE      [19] 3657 	ld	a, -2 (ix)
   18A1 DD 77 EF      [19] 3658 	ld	-17 (ix), a
                           3659 ;src\CFG8266.c:715: while(1);
   18A4 C3r3Br14      [10] 3660 	jp	00264$
   18A7                    3661 00268$:
                           3662 ;src\CFG8266.c:718: printf("\r\nScan results: no answer...\r\n");
   18A7 21rD5r23      [10] 3663 	ld	hl, #___str_64
   18AA E5            [11] 3664 	push	hl
   18AB CDr00r00      [17] 3665 	call	_puts
   18AE F1            [10] 3666 	pop	af
   18AF C3rC1r21      [10] 3667 	jp	00375$
   18B2                    3668 00294$:
                           3669 ;src\CFG8266.c:722: if (ucScan)
   18B2 3Ar00r00      [13] 3670 	ld	a,(#_ucScan + 0)
   18B5 B7            [ 4] 3671 	or	a, a
   18B6 28 0B         [12] 3672 	jr	Z,00291$
                           3673 ;src\CFG8266.c:723: printf ("\rScan request: no answer...\r\n");
   18B8 21rF3r23      [10] 3674 	ld	hl, #___str_66
   18BB E5            [11] 3675 	push	hl
   18BC CDr00r00      [17] 3676 	call	_puts
   18BF F1            [10] 3677 	pop	af
   18C0 C3rC1r21      [10] 3678 	jp	00375$
   18C3                    3679 00291$:
                           3680 ;src\CFG8266.c:724: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   18C3 3Ar09r00      [13] 3681 	ld	a,(#_ucNagleOff + 0)
   18C6 B7            [ 4] 3682 	or	a, a
   18C7 20 06         [12] 3683 	jr	NZ,00289$
   18C9 3Ar0Ar00      [13] 3684 	ld	a,(#_ucNagleOn + 0)
   18CC B7            [ 4] 3685 	or	a, a
   18CD 28 14         [12] 3686 	jr	Z,00286$
   18CF                    3687 00289$:
   18CF DD 7E FB      [19] 3688 	ld	a, -5 (ix)
   18D2 B7            [ 4] 3689 	or	a, a
   18D3 28 0E         [12] 3690 	jr	Z,00286$
                           3691 ;src\CFG8266.c:726: printf("\rNagle set as requested...\r\n");
   18D5 21r10r24      [10] 3692 	ld	hl, #___str_68
   18D8 E5            [11] 3693 	push	hl
   18D9 CDr00r00      [17] 3694 	call	_puts
   18DC F1            [10] 3695 	pop	af
                           3696 ;src\CFG8266.c:727: return 0;
   18DD 21 00 00      [10] 3697 	ld	hl, #0x0000
   18E0 C3rC4r21      [10] 3698 	jp	00388$
   18E3                    3699 00286$:
                           3700 ;src\CFG8266.c:729: else if ((ucNagleOff)||(ucNagleOn))
   18E3 3Ar09r00      [13] 3701 	ld	a,(#_ucNagleOff + 0)
   18E6 B7            [ 4] 3702 	or	a, a
   18E7 20 06         [12] 3703 	jr	NZ,00281$
   18E9 3Ar0Ar00      [13] 3704 	ld	a,(#_ucNagleOn + 0)
   18EC B7            [ 4] 3705 	or	a, a
   18ED 28 0E         [12] 3706 	jr	Z,00282$
   18EF                    3707 00281$:
                           3708 ;src\CFG8266.c:731: printf("\rNagle not set as requested, error!\r\n");
   18EF 21r2Cr24      [10] 3709 	ld	hl, #___str_70
   18F2 E5            [11] 3710 	push	hl
   18F3 CDr00r00      [17] 3711 	call	_puts
   18F6 F1            [10] 3712 	pop	af
                           3713 ;src\CFG8266.c:732: return 0;
   18F7 21 00 00      [10] 3714 	ld	hl, #0x0000
   18FA C3rC4r21      [10] 3715 	jp	00388$
   18FD                    3716 00282$:
                           3717 ;src\CFG8266.c:734: else if (ucRadioOff)
   18FD 3Ar0Br00      [13] 3718 	ld	a,(#_ucRadioOff + 0)
   1900 B7            [ 4] 3719 	or	a, a
   1901 28 1E         [12] 3720 	jr	Z,00279$
                           3721 ;src\CFG8266.c:736: if (bResponse)
   1903 DD 7E FB      [19] 3722 	ld	a, -5 (ix)
   1906 B7            [ 4] 3723 	or	a, a
   1907 28 0A         [12] 3724 	jr	Z,00271$
                           3725 ;src\CFG8266.c:737: printf("\rRequested to turn off Wi-Fi Radio...\r\n");
   1909 21r51r24      [10] 3726 	ld	hl, #___str_72
   190C E5            [11] 3727 	push	hl
   190D CDr00r00      [17] 3728 	call	_puts
   1910 F1            [10] 3729 	pop	af
   1911 18 08         [12] 3730 	jr	00272$
   1913                    3731 00271$:
                           3732 ;src\CFG8266.c:739: printf("\rRequest to turnoff Wi-Fi Radio error!\r\n");
   1913 21r78r24      [10] 3733 	ld	hl, #___str_74
   1916 E5            [11] 3734 	push	hl
   1917 CDr00r00      [17] 3735 	call	_puts
   191A F1            [10] 3736 	pop	af
   191B                    3737 00272$:
                           3738 ;src\CFG8266.c:740: return 0;
   191B 21 00 00      [10] 3739 	ld	hl, #0x0000
   191E C3rC4r21      [10] 3740 	jp	00388$
   1921                    3741 00279$:
                           3742 ;src\CFG8266.c:742: else if (ucSetTimeout)
   1921 3Ar0Cr00      [13] 3743 	ld	a,(#_ucSetTimeout + 0)
   1924 B7            [ 4] 3744 	or	a, a
   1925 CArC1r21      [10] 3745 	jp	Z, 00375$
                           3746 ;src\CFG8266.c:744: if (bResponse)
   1928 DD 7E FB      [19] 3747 	ld	a, -5 (ix)
   192B B7            [ 4] 3748 	or	a, a
   192C 28 0A         [12] 3749 	jr	Z,00274$
                           3750 ;src\CFG8266.c:745: printf("\rWi-Fi radio on Time-out set successfully...\r\n");
   192E 21rA0r24      [10] 3751 	ld	hl, #___str_76
   1931 E5            [11] 3752 	push	hl
   1932 CDr00r00      [17] 3753 	call	_puts
   1935 F1            [10] 3754 	pop	af
   1936 18 08         [12] 3755 	jr	00275$
   1938                    3756 00274$:
                           3757 ;src\CFG8266.c:747: printf("\rError setting Wi-Fi radio on Time-out!\r\n");
   1938 21rCEr24      [10] 3758 	ld	hl, #___str_78
   193B E5            [11] 3759 	push	hl
   193C CDr00r00      [17] 3760 	call	_puts
   193F F1            [10] 3761 	pop	af
   1940                    3762 00275$:
                           3763 ;src\CFG8266.c:748: return 0;
   1940 21 00 00      [10] 3764 	ld	hl, #0x0000
   1943 C3rC4r21      [10] 3765 	jp	00388$
   1946                    3766 00364$:
                           3767 ;src\CFG8266.c:752: else if (ucLocalUpdate)
   1946 3Ar07r00      [13] 3768 	ld	a,(#_ucLocalUpdate + 0)
   1949 B7            [ 4] 3769 	or	a, a
   194A CArC2r1F      [10] 3770 	jp	Z, 00361$
                           3771 ;src\CFG8266.c:755: iFile = Open (ucFile,O_RDONLY);
   194D DD 4E FC      [19] 3772 	ld	c, -4 (ix)
   1950 DD 46 FD      [19] 3773 	ld	b, -3 (ix)
   1953 21 00 00      [10] 3774 	ld	hl, #0x0000
   1956 E5            [11] 3775 	push	hl
   1957 C5            [11] 3776 	push	bc
   1958 CDr00r00      [17] 3777 	call	_Open
   195B F1            [10] 3778 	pop	af
   195C F1            [10] 3779 	pop	af
   195D DD 75 FE      [19] 3780 	ld	-2 (ix), l
   1960 DD 74 FF      [19] 3781 	ld	-1 (ix), h
                           3782 ;src\CFG8266.c:757: if (iFile!=-1)
   1963 DD 7E FE      [19] 3783 	ld	a, -2 (ix)
   1966 DD A6 FF      [19] 3784 	and	a, -1 (ix)
   1969 3C            [ 4] 3785 	inc	a
   196A CArA0r1F      [10] 3786 	jp	Z,00334$
                           3787 ;src\CFG8266.c:764: regs.Words.HL = 0; //set pointer as 0
   196D 21 9B 0D      [10] 3788 	ld	hl, #3483
   1970 39            [11] 3789 	add	hl, sp
   1971 EB            [ 4] 3790 	ex	de, hl
   1972 21 06 00      [10] 3791 	ld	hl, #0x0006
   1975 19            [11] 3792 	add	hl, de
   1976 AF            [ 4] 3793 	xor	a, a
   1977 77            [ 7] 3794 	ld	(hl), a
   1978 23            [ 6] 3795 	inc	hl
   1979 77            [ 7] 3796 	ld	(hl), a
                           3797 ;src\CFG8266.c:765: regs.Words.DE = 0; //so it will return the position
   197A 13            [ 6] 3798 	inc	de
   197B 13            [ 6] 3799 	inc	de
   197C 13            [ 6] 3800 	inc	de
   197D 13            [ 6] 3801 	inc	de
   197E AF            [ 4] 3802 	xor	a, a
   197F 12            [ 7] 3803 	ld	(de), a
   1980 13            [ 6] 3804 	inc	de
   1981 12            [ 7] 3805 	ld	(de), a
                           3806 ;src\CFG8266.c:766: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   1982 21 9B 0D      [10] 3807 	ld	hl, #3483
   1985 39            [11] 3808 	add	hl, sp
   1986 EB            [ 4] 3809 	ex	de, hl
   1987 6B            [ 4] 3810 	ld	l, e
   1988 62            [ 4] 3811 	ld	h, d
   1989 23            [ 6] 3812 	inc	hl
   198A 36 02         [10] 3813 	ld	(hl), #0x02
                           3814 ;src\CFG8266.c:767: regs.Bytes.B = (unsigned char)(iFile&0xff);
   198C 13            [ 6] 3815 	inc	de
   198D 13            [ 6] 3816 	inc	de
   198E 13            [ 6] 3817 	inc	de
   198F 7A            [ 4] 3818 	ld	a, d
   1990 DD 4E FE      [19] 3819 	ld	c, -2 (ix)
   1993 6B            [ 4] 3820 	ld	l, e
   1994 67            [ 4] 3821 	ld	h, a
   1995 71            [ 7] 3822 	ld	(hl), c
                           3823 ;src\CFG8266.c:768: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   1996 21 9B 0D      [10] 3824 	ld	hl, #3483
   1999 39            [11] 3825 	add	hl, sp
   199A DD 75 FA      [19] 3826 	ld	-6 (ix), l
   199D DD 74 FB      [19] 3827 	ld	-5 (ix), h
   19A0 4D            [ 4] 3828 	ld	c, l
   19A1 44            [ 4] 3829 	ld	b, h
   19A2 11 03 03      [10] 3830 	ld	de, #0x0303
   19A5 D5            [11] 3831 	push	de
   19A6 C5            [11] 3832 	push	bc
   19A7 3E 4A         [ 7] 3833 	ld	a, #0x4a
   19A9 F5            [11] 3834 	push	af
   19AA 33            [ 6] 3835 	inc	sp
   19AB CDr00r00      [17] 3836 	call	_DosCall
   19AE F1            [10] 3837 	pop	af
   19AF F1            [10] 3838 	pop	af
   19B0 33            [ 6] 3839 	inc	sp
                           3840 ;src\CFG8266.c:769: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   19B1 DD 6E FA      [19] 3841 	ld	l, -6 (ix)
   19B4 DD 66 FB      [19] 3842 	ld	h, -5 (ix)
   19B7 23            [ 6] 3843 	inc	hl
   19B8 7E            [ 7] 3844 	ld	a, (hl)
   19B9 DD 77 F9      [19] 3845 	ld	-7 (ix), a
   19BC B7            [ 4] 3846 	or	a, a
   19BD C2r82r1A      [10] 3847 	jp	NZ, 00298$
                           3848 ;src\CFG8266.c:770: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   19C0 DD 7E FA      [19] 3849 	ld	a, -6 (ix)
   19C3 DD 77 F8      [19] 3850 	ld	-8 (ix), a
   19C6 DD 7E FB      [19] 3851 	ld	a, -5 (ix)
   19C9 DD 77 F9      [19] 3852 	ld	-7 (ix), a
   19CC DD 6E F8      [19] 3853 	ld	l, -8 (ix)
   19CF DD 66 F9      [19] 3854 	ld	h, -7 (ix)
   19D2 11 06 00      [10] 3855 	ld	de, #0x0006
   19D5 19            [11] 3856 	add	hl, de
   19D6 7E            [ 7] 3857 	ld	a, (hl)
   19D7 DD 77 F8      [19] 3858 	ld	-8 (ix), a
   19DA 23            [ 6] 3859 	inc	hl
   19DB 7E            [ 7] 3860 	ld	a, (hl)
   19DC DD 77 F9      [19] 3861 	ld	-7 (ix), a
   19DF DD 7E F8      [19] 3862 	ld	a, -8 (ix)
   19E2 DD 77 F1      [19] 3863 	ld	-15 (ix), a
   19E5 DD 7E F9      [19] 3864 	ld	a, -7 (ix)
   19E8 DD 77 F2      [19] 3865 	ld	-14 (ix), a
   19EB 17            [ 4] 3866 	rla
   19EC 9F            [ 4] 3867 	sbc	a, a
   19ED DD 77 F3      [19] 3868 	ld	-13 (ix), a
   19F0 DD 77 F4      [19] 3869 	ld	-12 (ix), a
   19F3 DD 7E F1      [19] 3870 	ld	a, -15 (ix)
   19F6 FD 21 0E 00   [14] 3871 	ld	iy, #14
   19FA FD 39         [15] 3872 	add	iy, sp
   19FC FD 77 00      [19] 3873 	ld	0 (iy), a
   19FF DD 7E F2      [19] 3874 	ld	a, -14 (ix)
   1A02 FD 77 01      [19] 3875 	ld	1 (iy), a
   1A05 FD 36 02 00   [19] 3876 	ld	2 (iy), #0x00
   1A09 FD 36 03 00   [19] 3877 	ld	3 (iy), #0x00
   1A0D DD 6E FA      [19] 3878 	ld	l, -6 (ix)
   1A10 DD 66 FB      [19] 3879 	ld	h, -5 (ix)
   1A13 11 04 00      [10] 3880 	ld	de, #0x0004
   1A16 19            [11] 3881 	add	hl, de
   1A17 7E            [ 7] 3882 	ld	a, (hl)
   1A18 DD 77 FA      [19] 3883 	ld	-6 (ix), a
   1A1B 23            [ 6] 3884 	inc	hl
   1A1C 7E            [ 7] 3885 	ld	a, (hl)
   1A1D DD 77 FB      [19] 3886 	ld	-5 (ix), a
   1A20 DD 7E FA      [19] 3887 	ld	a, -6 (ix)
   1A23 DD 77 F8      [19] 3888 	ld	-8 (ix), a
   1A26 DD 7E FB      [19] 3889 	ld	a, -5 (ix)
   1A29 DD 77 F9      [19] 3890 	ld	-7 (ix), a
   1A2C 17            [ 4] 3891 	rla
   1A2D 9F            [ 4] 3892 	sbc	a, a
   1A2E DD 77 FA      [19] 3893 	ld	-6 (ix), a
   1A31 DD 77 FB      [19] 3894 	ld	-5 (ix), a
   1A34 06 10         [ 7] 3895 	ld	b, #0x10
   1A36                    3896 01022$:
   1A36 DD CB F8 26   [23] 3897 	sla	-8 (ix)
   1A3A DD CB F9 16   [23] 3898 	rl	-7 (ix)
   1A3E DD CB FA 16   [23] 3899 	rl	-6 (ix)
   1A42 DD CB FB 16   [23] 3900 	rl	-5 (ix)
   1A46 10 EE         [13] 3901 	djnz	01022$
   1A48 DD 36 F1 00   [19] 3902 	ld	-15 (ix), #0x00
   1A4C DD 36 F2 00   [19] 3903 	ld	-14 (ix), #0x00
   1A50 DD 7E FA      [19] 3904 	ld	a, -6 (ix)
   1A53 DD 77 F3      [19] 3905 	ld	-13 (ix), a
   1A56 DD 7E FB      [19] 3906 	ld	a, -5 (ix)
   1A59 DD 77 F4      [19] 3907 	ld	-12 (ix), a
   1A5C FD 7E 00      [19] 3908 	ld	a, 0 (iy)
   1A5F DD B6 F1      [19] 3909 	or	a, -15 (ix)
   1A62 DD 77 F8      [19] 3910 	ld	-8 (ix), a
   1A65 FD 7E 01      [19] 3911 	ld	a, 1 (iy)
   1A68 DD B6 F2      [19] 3912 	or	a, -14 (ix)
   1A6B DD 77 F9      [19] 3913 	ld	-7 (ix), a
   1A6E FD 7E 02      [19] 3914 	ld	a, 2 (iy)
   1A71 DD B6 F3      [19] 3915 	or	a, -13 (ix)
   1A74 DD 77 FA      [19] 3916 	ld	-6 (ix), a
   1A77 FD 7E 03      [19] 3917 	ld	a, 3 (iy)
   1A7A DD B6 F4      [19] 3918 	or	a, -12 (ix)
   1A7D DD 77 FB      [19] 3919 	ld	-5 (ix), a
   1A80 18 0D         [12] 3920 	jr	00299$
   1A82                    3921 00298$:
                           3922 ;src\CFG8266.c:772: SentFileSize = 0;
   1A82 AF            [ 4] 3923 	xor	a, a
   1A83 DD 77 F8      [19] 3924 	ld	-8 (ix), a
   1A86 DD 77 F9      [19] 3925 	ld	-7 (ix), a
   1A89 DD 77 FA      [19] 3926 	ld	-6 (ix), a
   1A8C DD 77 FB      [19] 3927 	ld	-5 (ix), a
   1A8F                    3928 00299$:
                           3929 ;src\CFG8266.c:774: ultostr(SentFileSize,chFileSize,10);
   1A8F 21 A7 0D      [10] 3930 	ld	hl, #3495
   1A92 39            [11] 3931 	add	hl, sp
   1A93 4D            [ 4] 3932 	ld	c, l
   1A94 44            [ 4] 3933 	ld	b, h
   1A95 E5            [11] 3934 	push	hl
   1A96 11 0A 00      [10] 3935 	ld	de, #0x000a
   1A99 D5            [11] 3936 	push	de
   1A9A C5            [11] 3937 	push	bc
   1A9B DD 6E FA      [19] 3938 	ld	l, -6 (ix)
   1A9E DD 66 FB      [19] 3939 	ld	h, -5 (ix)
   1AA1 E5            [11] 3940 	push	hl
   1AA2 DD 6E F8      [19] 3941 	ld	l, -8 (ix)
   1AA5 DD 66 F9      [19] 3942 	ld	h, -7 (ix)
   1AA8 E5            [11] 3943 	push	hl
   1AA9 CDrBCr07      [17] 3944 	call	_ultostr
   1AAC 21 08 00      [10] 3945 	ld	hl, #8
   1AAF 39            [11] 3946 	add	hl, sp
   1AB0 F9            [ 6] 3947 	ld	sp, hl
   1AB1 DD 4E FE      [19] 3948 	ld	c, -2 (ix)
   1AB4 DD 46 FF      [19] 3949 	ld	b, -1 (ix)
   1AB7 C5            [11] 3950 	push	bc
   1AB8 CDr00r00      [17] 3951 	call	_Close
   1ABB F1            [10] 3952 	pop	af
   1ABC E1            [10] 3953 	pop	hl
                           3954 ;src\CFG8266.c:776: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   1ABD DD 4E FC      [19] 3955 	ld	c, -4 (ix)
   1AC0 DD 46 FD      [19] 3956 	ld	b, -3 (ix)
   1AC3 11rF7r24      [10] 3957 	ld	de, #___str_79+0
   1AC6 E5            [11] 3958 	push	hl
   1AC7 C5            [11] 3959 	push	bc
   1AC8 D5            [11] 3960 	push	de
   1AC9 CDr00r00      [17] 3961 	call	_printf
   1ACC 21 06 00      [10] 3962 	ld	hl, #6
   1ACF 39            [11] 3963 	add	hl, sp
   1AD0 F9            [ 6] 3964 	ld	sp, hl
                           3965 ;src\CFG8266.c:777: if (SentFileSize)
   1AD1 DD 7E FB      [19] 3966 	ld	a, -5 (ix)
   1AD4 DD B6 FA      [19] 3967 	or	a, -6 (ix)
   1AD7 DD B6 F9      [19] 3968 	or	a, -7 (ix)
   1ADA DD B6 F8      [19] 3969 	or	a, -8 (ix)
   1ADD CAr7Er1F      [10] 3970 	jp	Z, 00331$
                           3971 ;src\CFG8266.c:779: iFile = Open (ucFile,O_RDONLY);
   1AE0 DD 4E FC      [19] 3972 	ld	c, -4 (ix)
   1AE3 DD 46 FD      [19] 3973 	ld	b, -3 (ix)
   1AE6 21 00 00      [10] 3974 	ld	hl, #0x0000
   1AE9 E5            [11] 3975 	push	hl
   1AEA C5            [11] 3976 	push	bc
   1AEB CDr00r00      [17] 3977 	call	_Open
   1AEE F1            [10] 3978 	pop	af
   1AEF F1            [10] 3979 	pop	af
   1AF0 FD 21 10 00   [14] 3980 	ld	iy, #16
   1AF4 FD 39         [15] 3981 	add	iy, sp
   1AF6 FD 75 00      [19] 3982 	ld	0 (iy), l
   1AF9 FD 74 01      [19] 3983 	ld	1 (iy), h
                           3984 ;src\CFG8266.c:780: if (iFile!=-1)
   1AFC FD 7E 00      [19] 3985 	ld	a, 0 (iy)
   1AFF 3C            [ 4] 3986 	inc	a
   1B00 20 07         [12] 3987 	jr	NZ,01024$
   1B02 FD 7E 01      [19] 3988 	ld	a, 1 (iy)
   1B05 3C            [ 4] 3989 	inc	a
   1B06 CAr5Cr1F      [10] 3990 	jp	Z,00328$
   1B09                    3991 01024$:
                           3992 ;src\CFG8266.c:782: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1B09 DD 4E F6      [19] 3993 	ld	c, -10 (ix)
   1B0C DD 46 F7      [19] 3994 	ld	b, -9 (ix)
   1B0F 21 00 01      [10] 3995 	ld	hl, #0x0100
   1B12 E5            [11] 3996 	push	hl
   1B13 C5            [11] 3997 	push	bc
   1B14 FD 6E 00      [19] 3998 	ld	l, 0 (iy)
   1B17 FD 66 01      [19] 3999 	ld	h, 1 (iy)
   1B1A E5            [11] 4000 	push	hl
   1B1B CDr00r00      [17] 4001 	call	_MyRead
   1B1E F1            [10] 4002 	pop	af
   1B1F F1            [10] 4003 	pop	af
   1B20 F1            [10] 4004 	pop	af
   1B21 DD 75 F0      [19] 4005 	ld	-16 (ix), l
   1B24 DD 74 F1      [19] 4006 	ld	-15 (ix), h
                           4007 ;src\CFG8266.c:783: if (FileRead == 256)
   1B27 DD 7E F0      [19] 4008 	ld	a, -16 (ix)
   1B2A B7            [ 4] 4009 	or	a, a
   1B2B C2r45r1F      [10] 4010 	jp	NZ,00325$
   1B2E DD 7E F1      [19] 4011 	ld	a, -15 (ix)
   1B31 3D            [ 4] 4012 	dec	a
   1B32 C2r45r1F      [10] 4013 	jp	NZ,00325$
                           4014 ;src\CFG8266.c:786: if (ucIsFw)
   1B35 3Ar08r00      [13] 4015 	ld	a,(#_ucIsFw + 0)
   1B38 B7            [ 4] 4016 	or	a, a
   1B39 28 0A         [12] 4017 	jr	Z,00301$
                           4018 ;src\CFG8266.c:787: TxByte('Z'); //Request start of RS232 update
   1B3B 3E 5A         [ 7] 4019 	ld	a, #0x5a
   1B3D F5            [11] 4020 	push	af
   1B3E 33            [ 6] 4021 	inc	sp
   1B3F CDrAEr07      [17] 4022 	call	_TxByte
   1B42 33            [ 6] 4023 	inc	sp
   1B43 18 08         [12] 4024 	jr	00302$
   1B45                    4025 00301$:
                           4026 ;src\CFG8266.c:789: TxByte('Y'); //Request start of RS232 cert update
   1B45 3E 59         [ 7] 4027 	ld	a, #0x59
   1B47 F5            [11] 4028 	push	af
   1B48 33            [ 6] 4029 	inc	sp
   1B49 CDrAEr07      [17] 4030 	call	_TxByte
   1B4C 33            [ 6] 4031 	inc	sp
   1B4D                    4032 00302$:
                           4033 ;src\CFG8266.c:790: TxByte(0);
   1B4D AF            [ 4] 4034 	xor	a, a
   1B4E F5            [11] 4035 	push	af
   1B4F 33            [ 6] 4036 	inc	sp
   1B50 CDrAEr07      [17] 4037 	call	_TxByte
   1B53 33            [ 6] 4038 	inc	sp
                           4039 ;src\CFG8266.c:791: TxByte(12);
   1B54 3E 0C         [ 7] 4040 	ld	a, #0x0c
   1B56 F5            [11] 4041 	push	af
   1B57 33            [ 6] 4042 	inc	sp
   1B58 CDrAEr07      [17] 4043 	call	_TxByte
   1B5B 33            [ 6] 4044 	inc	sp
                           4045 ;src\CFG8266.c:792: TxByte((unsigned char)(SentFileSize&0xff));
   1B5C DD 7E F8      [19] 4046 	ld	a, -8 (ix)
   1B5F F5            [11] 4047 	push	af
   1B60 33            [ 6] 4048 	inc	sp
   1B61 CDrAEr07      [17] 4049 	call	_TxByte
   1B64 33            [ 6] 4050 	inc	sp
                           4051 ;src\CFG8266.c:793: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   1B65 DD 46 F9      [19] 4052 	ld	b, -7 (ix)
   1B68 0E 00         [ 7] 4053 	ld	c, #0x00
   1B6A C5            [11] 4054 	push	bc
   1B6B 33            [ 6] 4055 	inc	sp
   1B6C CDrAEr07      [17] 4056 	call	_TxByte
   1B6F 33            [ 6] 4057 	inc	sp
                           4058 ;src\CFG8266.c:794: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   1B70 DD 7E FA      [19] 4059 	ld	a, -6 (ix)
   1B73 F5            [11] 4060 	push	af
   1B74 33            [ 6] 4061 	inc	sp
   1B75 CDrAEr07      [17] 4062 	call	_TxByte
   1B78 33            [ 6] 4063 	inc	sp
                           4064 ;src\CFG8266.c:795: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   1B79 DD 7E FB      [19] 4065 	ld	a, -5 (ix)
   1B7C F5            [11] 4066 	push	af
   1B7D 33            [ 6] 4067 	inc	sp
   1B7E CDrAEr07      [17] 4068 	call	_TxByte
   1B81 33            [ 6] 4069 	inc	sp
                           4070 ;src\CFG8266.c:796: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   1B82 DD 7E F8      [19] 4071 	ld	a, -8 (ix)
   1B85 FD 21 00 00   [14] 4072 	ld	iy, #0
   1B89 FD 39         [15] 4073 	add	iy, sp
   1B8B FD 77 00      [19] 4074 	ld	0 (iy), a
   1B8E DD 7E F9      [19] 4075 	ld	a, -7 (ix)
   1B91 FD 77 01      [19] 4076 	ld	1 (iy), a
   1B94 DD 7E FA      [19] 4077 	ld	a, -6 (ix)
   1B97 FD 77 02      [19] 4078 	ld	2 (iy), a
   1B9A DD 7E FB      [19] 4079 	ld	a, -5 (ix)
   1B9D FD 77 03      [19] 4080 	ld	3 (iy), a
   1BA0 AF            [ 4] 4081 	xor	a, a
   1BA1 FD 77 04      [19] 4082 	ld	4 (iy), a
   1BA4 FD 77 05      [19] 4083 	ld	5 (iy), a
   1BA7 FD 77 06      [19] 4084 	ld	6 (iy), a
   1BAA FD 77 07      [19] 4085 	ld	7 (iy), a
   1BAD FD 21 08 00   [14] 4086 	ld	iy, #8
   1BB1 FD 39         [15] 4087 	add	iy, sp
   1BB3 FD 36 00 00   [19] 4088 	ld	0 (iy), #0x00
   1BB7 FD 36 01 00   [19] 4089 	ld	1 (iy), #0x00
   1BBB FD 36 02 00   [19] 4090 	ld	2 (iy), #0x00
   1BBF FD 36 03 00   [19] 4091 	ld	3 (iy), #0x00
   1BC3 21 04 00      [10] 4092 	ld	hl, #0+4
   1BC6 39            [11] 4093 	add	hl, sp
   1BC7 7E            [ 7] 4094 	ld	a, (hl)
   1BC8 FD 21 08 00   [14] 4095 	ld	iy, #8
   1BCC FD 39         [15] 4096 	add	iy, sp
   1BCE FD 77 04      [19] 4097 	ld	4 (iy), a
   1BD1 FD 36 05 00   [19] 4098 	ld	5 (iy), #0x00
   1BD5 FD 36 06 00   [19] 4099 	ld	6 (iy), #0x00
   1BD9 FD 36 07 00   [19] 4100 	ld	7 (iy), #0x00
   1BDD 06 20         [ 7] 4101 	ld	b, #0x20
   1BDF                    4102 01031$:
   1BDF FD CB 07 2E   [23] 4103 	sra	7 (iy)
   1BE3 FD CB 06 1E   [23] 4104 	rr	6 (iy)
   1BE7 FD CB 05 1E   [23] 4105 	rr	5 (iy)
   1BEB FD CB 04 1E   [23] 4106 	rr	4 (iy)
   1BEF FD CB 03 1E   [23] 4107 	rr	3 (iy)
   1BF3 FD CB 02 1E   [23] 4108 	rr	2 (iy)
   1BF7 FD CB 01 1E   [23] 4109 	rr	1 (iy)
   1BFB FD CB 00 1E   [23] 4110 	rr	0 (iy)
   1BFF 10 DE         [13] 4111 	djnz	01031$
   1C01 FD 7E 00      [19] 4112 	ld	a, 0 (iy)
   1C04 F5            [11] 4113 	push	af
   1C05 33            [ 6] 4114 	inc	sp
   1C06 CDrAEr07      [17] 4115 	call	_TxByte
   1C09 33            [ 6] 4116 	inc	sp
                           4117 ;src\CFG8266.c:797: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1C0A FD 21 08 00   [14] 4118 	ld	iy, #8
   1C0E FD 39         [15] 4119 	add	iy, sp
   1C10 FD 36 00 00   [19] 4120 	ld	0 (iy), #0x00
   1C14 FD 36 01 00   [19] 4121 	ld	1 (iy), #0x00
   1C18 FD 36 02 00   [19] 4122 	ld	2 (iy), #0x00
   1C1C FD 36 03 00   [19] 4123 	ld	3 (iy), #0x00
   1C20 FD 36 04 00   [19] 4124 	ld	4 (iy), #0x00
   1C24 21 05 00      [10] 4125 	ld	hl, #0+5
   1C27 39            [11] 4126 	add	hl, sp
   1C28 7E            [ 7] 4127 	ld	a, (hl)
   1C29 FD 21 08 00   [14] 4128 	ld	iy, #8
   1C2D FD 39         [15] 4129 	add	iy, sp
   1C2F FD 77 05      [19] 4130 	ld	5 (iy), a
   1C32 FD 36 06 00   [19] 4131 	ld	6 (iy), #0x00
   1C36 FD 36 07 00   [19] 4132 	ld	7 (iy), #0x00
   1C3A 06 28         [ 7] 4133 	ld	b, #0x28
   1C3C                    4134 01033$:
   1C3C FD CB 07 2E   [23] 4135 	sra	7 (iy)
   1C40 FD CB 06 1E   [23] 4136 	rr	6 (iy)
   1C44 FD CB 05 1E   [23] 4137 	rr	5 (iy)
   1C48 FD CB 04 1E   [23] 4138 	rr	4 (iy)
   1C4C FD CB 03 1E   [23] 4139 	rr	3 (iy)
   1C50 FD CB 02 1E   [23] 4140 	rr	2 (iy)
   1C54 FD CB 01 1E   [23] 4141 	rr	1 (iy)
   1C58 FD CB 00 1E   [23] 4142 	rr	0 (iy)
   1C5C 10 DE         [13] 4143 	djnz	01033$
   1C5E FD 7E 00      [19] 4144 	ld	a, 0 (iy)
   1C61 F5            [11] 4145 	push	af
   1C62 33            [ 6] 4146 	inc	sp
   1C63 CDrAEr07      [17] 4147 	call	_TxByte
   1C66 33            [ 6] 4148 	inc	sp
                           4149 ;src\CFG8266.c:798: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   1C67 FD 21 08 00   [14] 4150 	ld	iy, #8
   1C6B FD 39         [15] 4151 	add	iy, sp
   1C6D FD 36 00 00   [19] 4152 	ld	0 (iy), #0x00
   1C71 FD 36 01 00   [19] 4153 	ld	1 (iy), #0x00
   1C75 FD 36 02 00   [19] 4154 	ld	2 (iy), #0x00
   1C79 FD 36 03 00   [19] 4155 	ld	3 (iy), #0x00
   1C7D FD 36 04 00   [19] 4156 	ld	4 (iy), #0x00
   1C81 FD 36 05 00   [19] 4157 	ld	5 (iy), #0x00
   1C85 21 06 00      [10] 4158 	ld	hl, #0+6
   1C88 39            [11] 4159 	add	hl, sp
   1C89 7E            [ 7] 4160 	ld	a, (hl)
   1C8A FD 21 08 00   [14] 4161 	ld	iy, #8
   1C8E FD 39         [15] 4162 	add	iy, sp
   1C90 FD 77 06      [19] 4163 	ld	6 (iy), a
   1C93 FD 36 07 00   [19] 4164 	ld	7 (iy), #0x00
   1C97 06 30         [ 7] 4165 	ld	b, #0x30
   1C99                    4166 01035$:
   1C99 FD CB 07 2E   [23] 4167 	sra	7 (iy)
   1C9D FD CB 06 1E   [23] 4168 	rr	6 (iy)
   1CA1 FD CB 05 1E   [23] 4169 	rr	5 (iy)
   1CA5 FD CB 04 1E   [23] 4170 	rr	4 (iy)
   1CA9 FD CB 03 1E   [23] 4171 	rr	3 (iy)
   1CAD FD CB 02 1E   [23] 4172 	rr	2 (iy)
   1CB1 FD CB 01 1E   [23] 4173 	rr	1 (iy)
   1CB5 FD CB 00 1E   [23] 4174 	rr	0 (iy)
   1CB9 10 DE         [13] 4175 	djnz	01035$
   1CBB FD 7E 00      [19] 4176 	ld	a, 0 (iy)
   1CBE F5            [11] 4177 	push	af
   1CBF 33            [ 6] 4178 	inc	sp
   1CC0 CDrAEr07      [17] 4179 	call	_TxByte
   1CC3 33            [ 6] 4180 	inc	sp
                           4181 ;src\CFG8266.c:799: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   1CC4 DD 7E F8      [19] 4182 	ld	a, -8 (ix)
   1CC7 FD 21 08 00   [14] 4183 	ld	iy, #8
   1CCB FD 39         [15] 4184 	add	iy, sp
   1CCD FD 77 00      [19] 4185 	ld	0 (iy), a
   1CD0 DD 7E F9      [19] 4186 	ld	a, -7 (ix)
   1CD3 FD 77 01      [19] 4187 	ld	1 (iy), a
   1CD6 DD 7E FA      [19] 4188 	ld	a, -6 (ix)
   1CD9 FD 77 02      [19] 4189 	ld	2 (iy), a
   1CDC DD 7E FB      [19] 4190 	ld	a, -5 (ix)
   1CDF FD 77 03      [19] 4191 	ld	3 (iy), a
   1CE2 AF            [ 4] 4192 	xor	a, a
   1CE3 FD 77 04      [19] 4193 	ld	4 (iy), a
   1CE6 FD 77 05      [19] 4194 	ld	5 (iy), a
   1CE9 FD 77 06      [19] 4195 	ld	6 (iy), a
   1CEC FD 77 07      [19] 4196 	ld	7 (iy), a
   1CEF FD 36 00 00   [19] 4197 	ld	0 (iy), #0x00
   1CF3 FD 36 01 00   [19] 4198 	ld	1 (iy), #0x00
   1CF7 FD 36 02 00   [19] 4199 	ld	2 (iy), #0x00
   1CFB FD 36 03 00   [19] 4200 	ld	3 (iy), #0x00
   1CFF FD 36 04 00   [19] 4201 	ld	4 (iy), #0x00
   1D03 FD 36 05 00   [19] 4202 	ld	5 (iy), #0x00
   1D07 FD 36 06 00   [19] 4203 	ld	6 (iy), #0x00
   1D0B FD 7E 07      [19] 4204 	ld	a, 7 (iy)
   1D0E FD 77 07      [19] 4205 	ld	7 (iy), a
   1D11 06 38         [ 7] 4206 	ld	b, #0x38
   1D13                    4207 01037$:
   1D13 FD CB 07 3E   [23] 4208 	srl	7 (iy)
   1D17 FD CB 06 1E   [23] 4209 	rr	6 (iy)
   1D1B FD CB 05 1E   [23] 4210 	rr	5 (iy)
   1D1F FD CB 04 1E   [23] 4211 	rr	4 (iy)
   1D23 FD CB 03 1E   [23] 4212 	rr	3 (iy)
   1D27 FD CB 02 1E   [23] 4213 	rr	2 (iy)
   1D2B FD CB 01 1E   [23] 4214 	rr	1 (iy)
   1D2F FD CB 00 1E   [23] 4215 	rr	0 (iy)
   1D33 10 DE         [13] 4216 	djnz	01037$
   1D35 FD 7E 00      [19] 4217 	ld	a, 0 (iy)
   1D38 F5            [11] 4218 	push	af
   1D39 33            [ 6] 4219 	inc	sp
   1D3A CDrAEr07      [17] 4220 	call	_TxByte
   1D3D 33            [ 6] 4221 	inc	sp
                           4222 ;src\CFG8266.c:800: TxByte(ucServer[0]);
   1D3E DD 6E F6      [19] 4223 	ld	l, -10 (ix)
   1D41 DD 66 F7      [19] 4224 	ld	h, -9 (ix)
   1D44 7E            [ 7] 4225 	ld	a, (hl)
   1D45 F5            [11] 4226 	push	af
   1D46 33            [ 6] 4227 	inc	sp
   1D47 CDrAEr07      [17] 4228 	call	_TxByte
   1D4A 33            [ 6] 4229 	inc	sp
                           4230 ;src\CFG8266.c:801: TxByte(ucServer[1]);
   1D4B DD 6E F6      [19] 4231 	ld	l, -10 (ix)
   1D4E DD 66 F7      [19] 4232 	ld	h, -9 (ix)
   1D51 23            [ 6] 4233 	inc	hl
   1D52 7E            [ 7] 4234 	ld	a, (hl)
   1D53 F5            [11] 4235 	push	af
   1D54 33            [ 6] 4236 	inc	sp
   1D55 CDrAEr07      [17] 4237 	call	_TxByte
   1D58 33            [ 6] 4238 	inc	sp
                           4239 ;src\CFG8266.c:802: TxByte(ucServer[2]);
   1D59 DD 6E F6      [19] 4240 	ld	l, -10 (ix)
   1D5C DD 66 F7      [19] 4241 	ld	h, -9 (ix)
   1D5F 23            [ 6] 4242 	inc	hl
   1D60 23            [ 6] 4243 	inc	hl
   1D61 7E            [ 7] 4244 	ld	a, (hl)
   1D62 F5            [11] 4245 	push	af
   1D63 33            [ 6] 4246 	inc	sp
   1D64 CDrAEr07      [17] 4247 	call	_TxByte
   1D67 33            [ 6] 4248 	inc	sp
                           4249 ;src\CFG8266.c:803: TxByte(ucServer[3]);
   1D68 DD 6E F6      [19] 4250 	ld	l, -10 (ix)
   1D6B DD 66 F7      [19] 4251 	ld	h, -9 (ix)
   1D6E 23            [ 6] 4252 	inc	hl
   1D6F 23            [ 6] 4253 	inc	hl
   1D70 23            [ 6] 4254 	inc	hl
   1D71 7E            [ 7] 4255 	ld	a, (hl)
   1D72 F5            [11] 4256 	push	af
   1D73 33            [ 6] 4257 	inc	sp
   1D74 CDrAEr07      [17] 4258 	call	_TxByte
   1D77 33            [ 6] 4259 	inc	sp
                           4260 ;src\CFG8266.c:805: if (ucIsFw)
   1D78 3Ar08r00      [13] 4261 	ld	a,(#_ucIsFw + 0)
   1D7B B7            [ 4] 4262 	or	a, a
   1D7C 28 26         [12] 4263 	jr	Z,00304$
                           4264 ;src\CFG8266.c:806: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false,NULL,0);
   1D7E 21 00 00      [10] 4265 	ld	hl, #0x0000
   1D81 E5            [11] 4266 	push	hl
   1D82 2E 00         [ 7] 4267 	ld	l, #0x00
   1D84 E5            [11] 4268 	push	hl
   1D85 AF            [ 4] 4269 	xor	a, a
   1D86 57            [ 4] 4270 	ld	d,a
   1D87 1E 01         [ 7] 4271 	ld	e,#0x01
   1D89 D5            [11] 4272 	push	de
   1D8A 2E 3C         [ 7] 4273 	ld	l, #0x3c
   1D8C E5            [11] 4274 	push	hl
   1D8D 2E 02         [ 7] 4275 	ld	l, #0x02
   1D8F E5            [11] 4276 	push	hl
   1D90 21r1Fr01      [10] 4277 	ld	hl, #_responseRSFWUpdate
   1D93 E5            [11] 4278 	push	hl
   1D94 CDr2Ar09      [17] 4279 	call	_WaitForRXData
   1D97 FD 21 0C 00   [14] 4280 	ld	iy, #12
   1D9B FD 39         [15] 4281 	add	iy, sp
   1D9D FD F9         [10] 4282 	ld	sp, iy
   1D9F DD 75 F2      [19] 4283 	ld	-14 (ix), l
   1DA2 18 24         [12] 4284 	jr	00305$
   1DA4                    4285 00304$:
                           4286 ;src\CFG8266.c:808: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false,NULL,0);
   1DA4 21 00 00      [10] 4287 	ld	hl, #0x0000
   1DA7 E5            [11] 4288 	push	hl
   1DA8 2E 00         [ 7] 4289 	ld	l, #0x00
   1DAA E5            [11] 4290 	push	hl
   1DAB AF            [ 4] 4291 	xor	a, a
   1DAC 57            [ 4] 4292 	ld	d,a
   1DAD 1E 01         [ 7] 4293 	ld	e,#0x01
   1DAF D5            [11] 4294 	push	de
   1DB0 2E 3C         [ 7] 4295 	ld	l, #0x3c
   1DB2 E5            [11] 4296 	push	hl
   1DB3 2E 02         [ 7] 4297 	ld	l, #0x02
   1DB5 E5            [11] 4298 	push	hl
   1DB6 21r21r01      [10] 4299 	ld	hl, #_responseRSCERTUpdate
   1DB9 E5            [11] 4300 	push	hl
   1DBA CDr2Ar09      [17] 4301 	call	_WaitForRXData
   1DBD FD 21 0C 00   [14] 4302 	ld	iy, #12
   1DC1 FD 39         [15] 4303 	add	iy, sp
   1DC3 FD F9         [10] 4304 	ld	sp, iy
   1DC5 DD 75 F2      [19] 4305 	ld	-14 (ix), l
   1DC8                    4306 00305$:
                           4307 ;src\CFG8266.c:810: if (!bResponse)
   1DC8 DD 7E F2      [19] 4308 	ld	a, -14 (ix)
   1DCB B7            [ 4] 4309 	or	a, a
   1DCC 20 0B         [12] 4310 	jr	NZ,00322$
                           4311 ;src\CFG8266.c:811: printf("Error requesting to start firmware update.\r\n");
   1DCE 21r0Cr25      [10] 4312 	ld	hl, #___str_81
   1DD1 E5            [11] 4313 	push	hl
   1DD2 CDr00r00      [17] 4314 	call	_puts
   1DD5 F1            [10] 4315 	pop	af
   1DD6 C3r4Dr1F      [10] 4316 	jp	00326$
   1DD9                    4317 00322$:
                           4318 ;src\CFG8266.c:814: uiAnimationTimeOut = TickCount + 9;
   1DD9 FD 21 9E FC   [14] 4319 	ld	iy, #_TickCount
   1DDD FD 7E 00      [19] 4320 	ld	a, 0 (iy)
   1DE0 C6 09         [ 7] 4321 	add	a, #0x09
   1DE2 DD 77 FC      [19] 4322 	ld	-4 (ix), a
   1DE5 FD 7E 01      [19] 4323 	ld	a, 1 (iy)
   1DE8 CE 00         [ 7] 4324 	adc	a, #0x00
   1DEA DD 77 FD      [19] 4325 	ld	-3 (ix), a
                           4326 ;src\CFG8266.c:815: do
   1DED DD 7E F6      [19] 4327 	ld	a, -10 (ix)
   1DF0 DD 77 F3      [19] 4328 	ld	-13 (ix), a
   1DF3 DD 7E F7      [19] 4329 	ld	a, -9 (ix)
   1DF6 DD 77 F4      [19] 4330 	ld	-12 (ix), a
   1DF9 AF            [ 4] 4331 	xor	a, a
   1DFA DD 77 FE      [19] 4332 	ld	-2 (ix), a
   1DFD DD 77 FF      [19] 4333 	ld	-1 (ix), a
   1E00                    4334 00316$:
                           4335 ;src\CFG8266.c:817: --uiAnimationTimeOut;
   1E00 DD 6E FC      [19] 4336 	ld	l, -4 (ix)
   1E03 DD 66 FD      [19] 4337 	ld	h, -3 (ix)
   1E06 2B            [ 6] 4338 	dec	hl
   1E07 DD 75 FC      [19] 4339 	ld	-4 (ix), l
   1E0A DD 74 FD      [19] 4340 	ld	-3 (ix), h
                           4341 ;src\CFG8266.c:818: if (TickCount>=uiAnimationTimeOut)
   1E0D FD 21 9E FC   [14] 4342 	ld	iy, #_TickCount
   1E11 FD 7E 00      [19] 4343 	ld	a, 0 (iy)
   1E14 DD 96 FC      [19] 4344 	sub	a, -4 (ix)
   1E17 FD 7E 01      [19] 4345 	ld	a, 1 (iy)
   1E1A DD 9E FD      [19] 4346 	sbc	a, -3 (ix)
   1E1D 38 36         [12] 4347 	jr	C,00307$
                           4348 ;src\CFG8266.c:820: uiAnimationTimeOut = 9;
   1E1F DD 36 FC 09   [19] 4349 	ld	-4 (ix), #0x09
   1E23 AF            [ 4] 4350 	xor	a, a
   1E24 DD 77 FD      [19] 4351 	ld	-3 (ix), a
                           4352 ;src\CFG8266.c:822: printf("%s",advance[i%10]); // next animation step
   1E27 21 0A 00      [10] 4353 	ld	hl, #0x000a
   1E2A E5            [11] 4354 	push	hl
   1E2B DD 6E FE      [19] 4355 	ld	l, -2 (ix)
   1E2E DD 66 FF      [19] 4356 	ld	h, -1 (ix)
   1E31 E5            [11] 4357 	push	hl
   1E32 CDr00r00      [17] 4358 	call	__moduint
   1E35 F1            [10] 4359 	pop	af
   1E36 F1            [10] 4360 	pop	af
   1E37 4D            [ 4] 4361 	ld	c, l
   1E38 44            [ 4] 4362 	ld	b, h
   1E39 29            [11] 4363 	add	hl, hl
   1E3A 09            [11] 4364 	add	hl, bc
   1E3B 29            [11] 4365 	add	hl, hl
   1E3C 09            [11] 4366 	add	hl, bc
   1E3D 29            [11] 4367 	add	hl, hl
   1E3E 09            [11] 4368 	add	hl, bc
   1E3F 11r2Dr01      [10] 4369 	ld	de, #_advance
   1E42 19            [11] 4370 	add	hl, de
   1E43 E5            [11] 4371 	push	hl
   1E44 21r38r25      [10] 4372 	ld	hl, #___str_82
   1E47 E5            [11] 4373 	push	hl
   1E48 CDr00r00      [17] 4374 	call	_printf
   1E4B F1            [10] 4375 	pop	af
   1E4C F1            [10] 4376 	pop	af
                           4377 ;src\CFG8266.c:823: ++i;
   1E4D DD 34 FE      [23] 4378 	inc	-2 (ix)
   1E50 20 03         [12] 4379 	jr	NZ,01039$
   1E52 DD 34 FF      [23] 4380 	inc	-1 (ix)
   1E55                    4381 01039$:
   1E55                    4382 00307$:
                           4383 ;src\CFG8266.c:825: if (!ucFirstBlock)
   1E55 DD 7E F5      [19] 4384 	ld	a, -11 (ix)
   1E58 B7            [ 4] 4385 	or	a, a
   1E59 20 30         [12] 4386 	jr	NZ,00311$
                           4387 ;src\CFG8266.c:827: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1E5B DD 4E F3      [19] 4388 	ld	c, -13 (ix)
   1E5E DD 46 F4      [19] 4389 	ld	b, -12 (ix)
   1E61 21 00 01      [10] 4390 	ld	hl, #0x0100
   1E64 E5            [11] 4391 	push	hl
   1E65 C5            [11] 4392 	push	bc
   1E66 21 14 00      [10] 4393 	ld	hl, #20
   1E69 39            [11] 4394 	add	hl, sp
   1E6A 4E            [ 7] 4395 	ld	c, (hl)
   1E6B 23            [ 6] 4396 	inc	hl
   1E6C 46            [ 7] 4397 	ld	b, (hl)
   1E6D C5            [11] 4398 	push	bc
   1E6E CDr00r00      [17] 4399 	call	_MyRead
   1E71 F1            [10] 4400 	pop	af
   1E72 F1            [10] 4401 	pop	af
   1E73 F1            [10] 4402 	pop	af
   1E74 DD 75 F0      [19] 4403 	ld	-16 (ix), l
                           4404 ;src\CFG8266.c:828: if (FileRead ==0)
   1E77 DD 74 F1      [19] 4405 	ld	-15 (ix), h
   1E7A 7C            [ 4] 4406 	ld	a, h
   1E7B DD B6 F0      [19] 4407 	or	a, -16 (ix)
   1E7E 20 0F         [12] 4408 	jr	NZ,00312$
                           4409 ;src\CFG8266.c:830: printf("\rError reading file...\r\n");
   1E80 21r3Br25      [10] 4410 	ld	hl, #___str_84
   1E83 E5            [11] 4411 	push	hl
   1E84 CDr00r00      [17] 4412 	call	_puts
   1E87 F1            [10] 4413 	pop	af
                           4414 ;src\CFG8266.c:831: break;
   1E88 C3r29r1F      [10] 4415 	jp	00318$
   1E8B                    4416 00311$:
                           4417 ;src\CFG8266.c:835: ucFirstBlock = 0;
   1E8B AF            [ 4] 4418 	xor	a, a
   1E8C DD 77 F5      [19] 4419 	ld	-11 (ix), a
   1E8F                    4420 00312$:
                           4421 ;src\CFG8266.c:837: TxByte('z'); //Write block
   1E8F 3E 7A         [ 7] 4422 	ld	a, #0x7a
   1E91 F5            [11] 4423 	push	af
   1E92 33            [ 6] 4424 	inc	sp
   1E93 CDrAEr07      [17] 4425 	call	_TxByte
   1E96 33            [ 6] 4426 	inc	sp
                           4427 ;src\CFG8266.c:838: TxByte((unsigned char)((FileRead&0xff00)>>8));
   1E97 DD 46 F1      [19] 4428 	ld	b, -15 (ix)
   1E9A 0E 00         [ 7] 4429 	ld	c, #0x00
   1E9C C5            [11] 4430 	push	bc
   1E9D 33            [ 6] 4431 	inc	sp
   1E9E CDrAEr07      [17] 4432 	call	_TxByte
   1EA1 33            [ 6] 4433 	inc	sp
                           4434 ;src\CFG8266.c:839: TxByte((unsigned char)(FileRead&0xff));
   1EA2 DD 7E F0      [19] 4435 	ld	a, -16 (ix)
   1EA5 F5            [11] 4436 	push	af
   1EA6 33            [ 6] 4437 	inc	sp
   1EA7 CDrAEr07      [17] 4438 	call	_TxByte
   1EAA 33            [ 6] 4439 	inc	sp
                           4440 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1EAB 01 00 00      [10] 4441 	ld	bc, #0x0000
   1EAE                    4442 00386$:
                           4443 ;src\CFG8266.c:841: TxByte(ucServer[ii]);
   1EAE DD 6E F6      [19] 4444 	ld	l, -10 (ix)
   1EB1 DD 66 F7      [19] 4445 	ld	h, -9 (ix)
   1EB4 09            [11] 4446 	add	hl, bc
   1EB5 7E            [ 7] 4447 	ld	a, (hl)
   1EB6 C5            [11] 4448 	push	bc
   1EB7 F5            [11] 4449 	push	af
   1EB8 33            [ 6] 4450 	inc	sp
   1EB9 CDrAEr07      [17] 4451 	call	_TxByte
   1EBC 33            [ 6] 4452 	inc	sp
   1EBD C1            [10] 4453 	pop	bc
                           4454 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1EBE 03            [ 6] 4455 	inc	bc
   1EBF 78            [ 4] 4456 	ld	a, b
   1EC0 D6 01         [ 7] 4457 	sub	a, #0x01
   1EC2 38 EA         [12] 4458 	jr	C,00386$
                           4459 ;src\CFG8266.c:843: bResponse = WaitForRXData(responseWRBlock,2,600,true,false,NULL,0);
   1EC4 21 00 00      [10] 4460 	ld	hl, #0x0000
   1EC7 E5            [11] 4461 	push	hl
   1EC8 2E 00         [ 7] 4462 	ld	l, #0x00
   1ECA E5            [11] 4463 	push	hl
   1ECB AF            [ 4] 4464 	xor	a, a
   1ECC 57            [ 4] 4465 	ld	d,a
   1ECD 1E 01         [ 7] 4466 	ld	e,#0x01
   1ECF D5            [11] 4467 	push	de
   1ED0 21 58 02      [10] 4468 	ld	hl, #0x0258
   1ED3 E5            [11] 4469 	push	hl
   1ED4 21 02 00      [10] 4470 	ld	hl, #0x0002
   1ED7 E5            [11] 4471 	push	hl
   1ED8 21r23r01      [10] 4472 	ld	hl, #_responseWRBlock
   1EDB E5            [11] 4473 	push	hl
   1EDC CDr2Ar09      [17] 4474 	call	_WaitForRXData
   1EDF FD 21 0C 00   [14] 4475 	ld	iy, #12
   1EE3 FD 39         [15] 4476 	add	iy, sp
   1EE5 FD F9         [10] 4477 	ld	sp, iy
                           4478 ;src\CFG8266.c:845: if (!bResponse)
   1EE7 DD 75 F2      [19] 4479 	ld	-14 (ix), l
   1EEA 7D            [ 4] 4480 	ld	a, l
   1EEB B7            [ 4] 4481 	or	a, a
   1EEC 20 0A         [12] 4482 	jr	NZ,00315$
                           4483 ;src\CFG8266.c:847: printf("\rError requesting to write firmware block.\r\n");
   1EEE 21r53r25      [10] 4484 	ld	hl, #___str_86
   1EF1 E5            [11] 4485 	push	hl
   1EF2 CDr00r00      [17] 4486 	call	_puts
   1EF5 F1            [10] 4487 	pop	af
                           4488 ;src\CFG8266.c:848: break;
   1EF6 18 31         [12] 4489 	jr	00318$
   1EF8                    4490 00315$:
                           4491 ;src\CFG8266.c:850: SentFileSize = SentFileSize - FileRead;
   1EF8 DD 4E F0      [19] 4492 	ld	c, -16 (ix)
   1EFB DD 46 F1      [19] 4493 	ld	b, -15 (ix)
   1EFE 11 00 00      [10] 4494 	ld	de, #0x0000
   1F01 DD 7E F8      [19] 4495 	ld	a, -8 (ix)
   1F04 91            [ 4] 4496 	sub	a, c
   1F05 DD 77 F8      [19] 4497 	ld	-8 (ix), a
   1F08 DD 7E F9      [19] 4498 	ld	a, -7 (ix)
   1F0B 98            [ 4] 4499 	sbc	a, b
   1F0C DD 77 F9      [19] 4500 	ld	-7 (ix), a
   1F0F DD 7E FA      [19] 4501 	ld	a, -6 (ix)
   1F12 9B            [ 4] 4502 	sbc	a, e
   1F13 DD 77 FA      [19] 4503 	ld	-6 (ix), a
   1F16 DD 7E FB      [19] 4504 	ld	a, -5 (ix)
   1F19 9A            [ 4] 4505 	sbc	a, d
                           4506 ;src\CFG8266.c:852: while(SentFileSize);
   1F1A DD 77 FB      [19] 4507 	ld	-5 (ix), a
   1F1D DD B6 FA      [19] 4508 	or	a, -6 (ix)
   1F20 DD B6 F9      [19] 4509 	or	a, -7 (ix)
   1F23 DD B6 F8      [19] 4510 	or	a, -8 (ix)
   1F26 C2r00r1E      [10] 4511 	jp	NZ, 00316$
   1F29                    4512 00318$:
                           4513 ;src\CFG8266.c:853: printf("%s",aDone);
   1F29 21rC3r01      [10] 4514 	ld	hl, #_aDone
   1F2C E5            [11] 4515 	push	hl
   1F2D 21r38r25      [10] 4516 	ld	hl, #___str_82
   1F30 E5            [11] 4517 	push	hl
   1F31 CDr00r00      [17] 4518 	call	_printf
   1F34 F1            [10] 4519 	pop	af
   1F35 F1            [10] 4520 	pop	af
                           4521 ;src\CFG8266.c:856: if (bResponse)
   1F36 DD 7E F2      [19] 4522 	ld	a, -14 (ix)
   1F39 B7            [ 4] 4523 	or	a, a
   1F3A 28 11         [12] 4524 	jr	Z,00326$
                           4525 ;src\CFG8266.c:857: FinishUpdate(false);
   1F3C AF            [ 4] 4526 	xor	a, a
   1F3D F5            [11] 4527 	push	af
   1F3E 33            [ 6] 4528 	inc	sp
   1F3F CDr1Br0C      [17] 4529 	call	_FinishUpdate
   1F42 33            [ 6] 4530 	inc	sp
   1F43 18 08         [12] 4531 	jr	00326$
   1F45                    4532 00325$:
                           4533 ;src\CFG8266.c:861: Print("\rError reading firmware file!\r\n");
   1F45 21r7Fr25      [10] 4534 	ld	hl, #___str_87
   1F48 E5            [11] 4535 	push	hl
   1F49 CDr00r00      [17] 4536 	call	_Print
   1F4C F1            [10] 4537 	pop	af
   1F4D                    4538 00326$:
                           4539 ;src\CFG8266.c:862: Close(iFile);
   1F4D 21 10 00      [10] 4540 	ld	hl, #16
   1F50 39            [11] 4541 	add	hl, sp
   1F51 4E            [ 7] 4542 	ld	c, (hl)
   1F52 23            [ 6] 4543 	inc	hl
   1F53 46            [ 7] 4544 	ld	b, (hl)
   1F54 C5            [11] 4545 	push	bc
   1F55 CDr00r00      [17] 4546 	call	_Close
   1F58 F1            [10] 4547 	pop	af
   1F59 C3rC1r21      [10] 4548 	jp	00375$
   1F5C                    4549 00328$:
                           4550 ;src\CFG8266.c:866: printf("Error, couldn't open %s ...\r\n",ucFile);
   1F5C DD 7E FC      [19] 4551 	ld	a, -4 (ix)
   1F5F DD 77 FE      [19] 4552 	ld	-2 (ix), a
   1F62 DD 7E FD      [19] 4553 	ld	a, -3 (ix)
   1F65 DD 77 FF      [19] 4554 	ld	-1 (ix), a
   1F68 DD 6E FE      [19] 4555 	ld	l, -2 (ix)
   1F6B DD 66 FF      [19] 4556 	ld	h, -1 (ix)
   1F6E E5            [11] 4557 	push	hl
   1F6F 21r9Fr25      [10] 4558 	ld	hl, #___str_88
   1F72 E5            [11] 4559 	push	hl
   1F73 CDr00r00      [17] 4560 	call	_printf
   1F76 F1            [10] 4561 	pop	af
   1F77 F1            [10] 4562 	pop	af
                           4563 ;src\CFG8266.c:867: return 0;
   1F78 21 00 00      [10] 4564 	ld	hl, #0x0000
   1F7B C3rC4r21      [10] 4565 	jp	00388$
   1F7E                    4566 00331$:
                           4567 ;src\CFG8266.c:872: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1F7E DD 7E FC      [19] 4568 	ld	a, -4 (ix)
   1F81 DD 77 FE      [19] 4569 	ld	-2 (ix), a
   1F84 DD 7E FD      [19] 4570 	ld	a, -3 (ix)
   1F87 DD 77 FF      [19] 4571 	ld	-1 (ix), a
   1F8A DD 6E FE      [19] 4572 	ld	l, -2 (ix)
   1F8D DD 66 FF      [19] 4573 	ld	h, -1 (ix)
   1F90 E5            [11] 4574 	push	hl
   1F91 21rBDr25      [10] 4575 	ld	hl, #___str_89
   1F94 E5            [11] 4576 	push	hl
   1F95 CDr00r00      [17] 4577 	call	_printf
   1F98 F1            [10] 4578 	pop	af
   1F99 F1            [10] 4579 	pop	af
                           4580 ;src\CFG8266.c:873: return 0;
   1F9A 21 00 00      [10] 4581 	ld	hl, #0x0000
   1F9D C3rC4r21      [10] 4582 	jp	00388$
   1FA0                    4583 00334$:
                           4584 ;src\CFG8266.c:878: printf("Error, couldn't open %s ...\r\n",ucFile);
   1FA0 DD 7E FC      [19] 4585 	ld	a, -4 (ix)
   1FA3 DD 77 FE      [19] 4586 	ld	-2 (ix), a
   1FA6 DD 7E FD      [19] 4587 	ld	a, -3 (ix)
   1FA9 DD 77 FF      [19] 4588 	ld	-1 (ix), a
   1FAC DD 6E FE      [19] 4589 	ld	l, -2 (ix)
   1FAF DD 66 FF      [19] 4590 	ld	h, -1 (ix)
   1FB2 E5            [11] 4591 	push	hl
   1FB3 21r9Fr25      [10] 4592 	ld	hl, #___str_88
   1FB6 E5            [11] 4593 	push	hl
   1FB7 CDr00r00      [17] 4594 	call	_printf
   1FBA F1            [10] 4595 	pop	af
   1FBB F1            [10] 4596 	pop	af
                           4597 ;src\CFG8266.c:879: return 0;
   1FBC 21 00 00      [10] 4598 	ld	hl, #0x0000
   1FBF C3rC4r21      [10] 4599 	jp	00388$
   1FC2                    4600 00361$:
                           4601 ;src\CFG8266.c:884: if (ucIsFw)
   1FC2 3Ar08r00      [13] 4602 	ld	a,(#_ucIsFw + 0)
   1FC5 B7            [ 4] 4603 	or	a, a
   1FC6 28 20         [12] 4604 	jr	Z,00337$
                           4605 ;src\CFG8266.c:885: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1FC8 DD 5E FC      [19] 4606 	ld	e, -4 (ix)
   1FCB DD 56 FD      [19] 4607 	ld	d, -3 (ix)
   1FCE DD 4E F6      [19] 4608 	ld	c, -10 (ix)
   1FD1 DD 46 F7      [19] 4609 	ld	b, -9 (ix)
   1FD4 D5            [11] 4610 	push	de
   1FD5 2Ar01r00      [16] 4611 	ld	hl, (_uiPort)
   1FD8 E5            [11] 4612 	push	hl
   1FD9 C5            [11] 4613 	push	bc
   1FDA 21rDCr25      [10] 4614 	ld	hl, #___str_90
   1FDD E5            [11] 4615 	push	hl
   1FDE CDr00r00      [17] 4616 	call	_printf
   1FE1 21 08 00      [10] 4617 	ld	hl, #8
   1FE4 39            [11] 4618 	add	hl, sp
   1FE5 F9            [ 6] 4619 	ld	sp, hl
   1FE6 18 1E         [12] 4620 	jr	00338$
   1FE8                    4621 00337$:
                           4622 ;src\CFG8266.c:887: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1FE8 DD 5E FC      [19] 4623 	ld	e, -4 (ix)
   1FEB DD 56 FD      [19] 4624 	ld	d, -3 (ix)
   1FEE DD 4E F6      [19] 4625 	ld	c, -10 (ix)
   1FF1 DD 46 F7      [19] 4626 	ld	b, -9 (ix)
   1FF4 D5            [11] 4627 	push	de
   1FF5 2Ar01r00      [16] 4628 	ld	hl, (_uiPort)
   1FF8 E5            [11] 4629 	push	hl
   1FF9 C5            [11] 4630 	push	bc
   1FFA 21r45r26      [10] 4631 	ld	hl, #___str_91
   1FFD E5            [11] 4632 	push	hl
   1FFE CDr00r00      [17] 4633 	call	_printf
   2001 21 08 00      [10] 4634 	ld	hl, #8
   2004 39            [11] 4635 	add	hl, sp
   2005 F9            [ 6] 4636 	ld	sp, hl
   2006                    4637 00338$:
                           4638 ;src\CFG8266.c:888: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   2006 DD 4E F6      [19] 4639 	ld	c, -10 (ix)
   2009 DD 46 F7      [19] 4640 	ld	b, -9 (ix)
   200C C5            [11] 4641 	push	bc
   200D CDr00r00      [17] 4642 	call	_strlen
   2010 F1            [10] 4643 	pop	af
   2011 DD 75 FE      [19] 4644 	ld	-2 (ix), l
   2014 DD 74 FF      [19] 4645 	ld	-1 (ix), h
   2017 DD 7E FE      [19] 4646 	ld	a, -2 (ix)
   201A C6 03         [ 7] 4647 	add	a, #0x03
   201C DD 77 F8      [19] 4648 	ld	-8 (ix), a
   201F DD 7E FF      [19] 4649 	ld	a, -1 (ix)
   2022 CE 00         [ 7] 4650 	adc	a, #0x00
   2024 DD 77 F9      [19] 4651 	ld	-7 (ix), a
                           4652 ;src\CFG8266.c:889: uiCMDLen += strlen(ucFile);
   2027 DD 7E FC      [19] 4653 	ld	a, -4 (ix)
   202A DD 77 FE      [19] 4654 	ld	-2 (ix), a
   202D DD 7E FD      [19] 4655 	ld	a, -3 (ix)
   2030 DD 77 FF      [19] 4656 	ld	-1 (ix), a
   2033 DD 6E FE      [19] 4657 	ld	l, -2 (ix)
   2036 DD 66 FF      [19] 4658 	ld	h, -1 (ix)
   2039 E5            [11] 4659 	push	hl
   203A CDr00r00      [17] 4660 	call	_strlen
   203D F1            [10] 4661 	pop	af
   203E DD 75 FE      [19] 4662 	ld	-2 (ix), l
   2041 DD 74 FF      [19] 4663 	ld	-1 (ix), h
   2044 DD 7E FE      [19] 4664 	ld	a, -2 (ix)
   2047 DD 86 F8      [19] 4665 	add	a, -8 (ix)
   204A DD 77 FA      [19] 4666 	ld	-6 (ix), a
   204D DD 7E FF      [19] 4667 	ld	a, -1 (ix)
   2050 DD 8E F9      [19] 4668 	adc	a, -7 (ix)
   2053 DD 77 FB      [19] 4669 	ld	-5 (ix), a
                           4670 ;src\CFG8266.c:890: if (ucIsFw)
   2056 3Ar08r00      [13] 4671 	ld	a,(#_ucIsFw + 0)
   2059 B7            [ 4] 4672 	or	a, a
   205A 28 0A         [12] 4673 	jr	Z,00340$
                           4674 ;src\CFG8266.c:891: TxByte('U'); //Request Update Main Firmware remotely
   205C 3E 55         [ 7] 4675 	ld	a, #0x55
   205E F5            [11] 4676 	push	af
   205F 33            [ 6] 4677 	inc	sp
   2060 CDrAEr07      [17] 4678 	call	_TxByte
   2063 33            [ 6] 4679 	inc	sp
   2064 18 08         [12] 4680 	jr	00341$
   2066                    4681 00340$:
                           4682 ;src\CFG8266.c:893: TxByte('u'); //Request Update spiffs remotely
   2066 3E 75         [ 7] 4683 	ld	a, #0x75
   2068 F5            [11] 4684 	push	af
   2069 33            [ 6] 4685 	inc	sp
   206A CDrAEr07      [17] 4686 	call	_TxByte
   206D 33            [ 6] 4687 	inc	sp
   206E                    4688 00341$:
                           4689 ;src\CFG8266.c:894: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   206E DD 36 FE 00   [19] 4690 	ld	-2 (ix), #0x00
   2072 DD 7E FB      [19] 4691 	ld	a, -5 (ix)
   2075 DD 77 FF      [19] 4692 	ld	-1 (ix), a
   2078 DD 77 FE      [19] 4693 	ld	-2 (ix), a
   207B DD 36 FF 00   [19] 4694 	ld	-1 (ix), #0x00
   207F DD 7E FE      [19] 4695 	ld	a, -2 (ix)
   2082 DD 77 FF      [19] 4696 	ld	-1 (ix), a
   2085 F5            [11] 4697 	push	af
   2086 33            [ 6] 4698 	inc	sp
   2087 CDrAEr07      [17] 4699 	call	_TxByte
   208A 33            [ 6] 4700 	inc	sp
                           4701 ;src\CFG8266.c:895: TxByte((unsigned char)(uiCMDLen&0xff));
   208B DD 7E FA      [19] 4702 	ld	a, -6 (ix)
   208E F5            [11] 4703 	push	af
   208F 33            [ 6] 4704 	inc	sp
   2090 CDrAEr07      [17] 4705 	call	_TxByte
   2093 33            [ 6] 4706 	inc	sp
                           4707 ;src\CFG8266.c:896: TxByte((unsigned char)(uiPort&0xff));
   2094 3Ar01r00      [13] 4708 	ld	a,(#_uiPort + 0)
   2097 F5            [11] 4709 	push	af
   2098 33            [ 6] 4710 	inc	sp
   2099 CDrAEr07      [17] 4711 	call	_TxByte
   209C 33            [ 6] 4712 	inc	sp
                           4713 ;src\CFG8266.c:897: TxByte((unsigned char)((uiPort&0xff00)>>8));
   209D DD 36 FE 00   [19] 4714 	ld	-2 (ix), #0x00
   20A1 3Ar02r00      [13] 4715 	ld	a,(#_uiPort + 1)
   20A4 DD 77 FF      [19] 4716 	ld	-1 (ix), a
   20A7 DD 77 FE      [19] 4717 	ld	-2 (ix), a
   20AA DD 36 FF 00   [19] 4718 	ld	-1 (ix), #0x00
   20AE DD 7E FE      [19] 4719 	ld	a, -2 (ix)
   20B1 DD 77 FF      [19] 4720 	ld	-1 (ix), a
   20B4 F5            [11] 4721 	push	af
   20B5 33            [ 6] 4722 	inc	sp
   20B6 CDrAEr07      [17] 4723 	call	_TxByte
   20B9 33            [ 6] 4724 	inc	sp
                           4725 ;src\CFG8266.c:899: do
   20BA DD 4E FA      [19] 4726 	ld	c, -6 (ix)
   20BD DD 46 FB      [19] 4727 	ld	b, -5 (ix)
   20C0 AF            [ 4] 4728 	xor	a, a
   20C1 DD 77 FF      [19] 4729 	ld	-1 (ix), a
   20C4                    4730 00343$:
                           4731 ;src\CFG8266.c:901: tx_data = ucServer[rx_data];
   20C4 DD 7E F6      [19] 4732 	ld	a, -10 (ix)
   20C7 DD 86 FF      [19] 4733 	add	a, -1 (ix)
   20CA 5F            [ 4] 4734 	ld	e, a
   20CB DD 7E F7      [19] 4735 	ld	a, -9 (ix)
   20CE CE 00         [ 7] 4736 	adc	a, #0x00
   20D0 6B            [ 4] 4737 	ld	l, e
   20D1 67            [ 4] 4738 	ld	h, a
   20D2 56            [ 7] 4739 	ld	d, (hl)
                           4740 ;src\CFG8266.c:902: TxByte(tx_data);
   20D3 C5            [11] 4741 	push	bc
   20D4 D5            [11] 4742 	push	de
   20D5 D5            [11] 4743 	push	de
   20D6 33            [ 6] 4744 	inc	sp
   20D7 CDrAEr07      [17] 4745 	call	_TxByte
   20DA 33            [ 6] 4746 	inc	sp
   20DB D1            [10] 4747 	pop	de
   20DC C1            [10] 4748 	pop	bc
                           4749 ;src\CFG8266.c:903: --uiCMDLen;
   20DD 0B            [ 6] 4750 	dec	bc
                           4751 ;src\CFG8266.c:904: ++rx_data;
   20DE DD 34 FF      [23] 4752 	inc	-1 (ix)
                           4753 ;src\CFG8266.c:906: while((uiCMDLen)&&(tx_data!=0));
   20E1 78            [ 4] 4754 	ld	a, b
   20E2 B1            [ 4] 4755 	or	a, c
   20E3 28 04         [12] 4756 	jr	Z,00345$
   20E5 7A            [ 4] 4757 	ld	a, d
   20E6 B7            [ 4] 4758 	or	a, a
   20E7 20 DB         [12] 4759 	jr	NZ,00343$
   20E9                    4760 00345$:
                           4761 ;src\CFG8266.c:908: do
   20E9 DD 71 FA      [19] 4762 	ld	-6 (ix), c
   20EC DD 70 FB      [19] 4763 	ld	-5 (ix), b
   20EF AF            [ 4] 4764 	xor	a, a
   20F0 DD 77 FF      [19] 4765 	ld	-1 (ix), a
   20F3                    4766 00348$:
                           4767 ;src\CFG8266.c:910: tx_data = ucFile[rx_data];
   20F3 DD 7E FC      [19] 4768 	ld	a, -4 (ix)
   20F6 DD 86 FF      [19] 4769 	add	a, -1 (ix)
   20F9 DD 77 F8      [19] 4770 	ld	-8 (ix), a
   20FC DD 7E FD      [19] 4771 	ld	a, -3 (ix)
   20FF CE 00         [ 7] 4772 	adc	a, #0x00
   2101 DD 77 F9      [19] 4773 	ld	-7 (ix), a
   2104 DD 6E F8      [19] 4774 	ld	l, -8 (ix)
   2107 DD 66 F9      [19] 4775 	ld	h, -7 (ix)
   210A 7E            [ 7] 4776 	ld	a, (hl)
                           4777 ;src\CFG8266.c:911: if (tx_data==0)
   210B B7            [ 4] 4778 	or	a, a
   210C 28 1E         [12] 4779 	jr	Z,00350$
                           4780 ;src\CFG8266.c:913: TxByte(tx_data);
   210E F5            [11] 4781 	push	af
   210F 33            [ 6] 4782 	inc	sp
   2110 CDrAEr07      [17] 4783 	call	_TxByte
   2113 33            [ 6] 4784 	inc	sp
                           4785 ;src\CFG8266.c:914: --uiCMDLen;
   2114 DD 6E FA      [19] 4786 	ld	l, -6 (ix)
   2117 DD 66 FB      [19] 4787 	ld	h, -5 (ix)
   211A 2B            [ 6] 4788 	dec	hl
   211B DD 75 FA      [19] 4789 	ld	-6 (ix), l
   211E DD 74 FB      [19] 4790 	ld	-5 (ix), h
                           4791 ;src\CFG8266.c:915: ++rx_data;
   2121 DD 34 FF      [23] 4792 	inc	-1 (ix)
                           4793 ;src\CFG8266.c:917: while(uiCMDLen);
   2124 DD 7E FB      [19] 4794 	ld	a, -5 (ix)
   2127 DD B6 FA      [19] 4795 	or	a, -6 (ix)
   212A 20 C7         [12] 4796 	jr	NZ,00348$
   212C                    4797 00350$:
                           4798 ;src\CFG8266.c:919: if (ucIsFw)
   212C 3Ar08r00      [13] 4799 	ld	a,(#_ucIsFw + 0)
   212F B7            [ 4] 4800 	or	a, a
   2130 28 26         [12] 4801 	jr	Z,00352$
                           4802 ;src\CFG8266.c:920: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false,NULL,0);
   2132 21 00 00      [10] 4803 	ld	hl, #0x0000
   2135 E5            [11] 4804 	push	hl
   2136 2E 00         [ 7] 4805 	ld	l, #0x00
   2138 E5            [11] 4806 	push	hl
   2139 AF            [ 4] 4807 	xor	a, a
   213A 57            [ 4] 4808 	ld	d,a
   213B 1E 01         [ 7] 4809 	ld	e,#0x01
   213D D5            [11] 4810 	push	de
   213E 21 50 46      [10] 4811 	ld	hl, #0x4650
   2141 E5            [11] 4812 	push	hl
   2142 21 02 00      [10] 4813 	ld	hl, #0x0002
   2145 E5            [11] 4814 	push	hl
   2146 21r25r01      [10] 4815 	ld	hl, #_responseOTAFW
   2149 E5            [11] 4816 	push	hl
   214A CDr2Ar09      [17] 4817 	call	_WaitForRXData
   214D FD 21 0C 00   [14] 4818 	ld	iy, #12
   2151 FD 39         [15] 4819 	add	iy, sp
   2153 FD F9         [10] 4820 	ld	sp, iy
   2155 4D            [ 4] 4821 	ld	c, l
   2156 18 24         [12] 4822 	jr	00353$
   2158                    4823 00352$:
                           4824 ;src\CFG8266.c:922: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false,NULL,0);
   2158 21 00 00      [10] 4825 	ld	hl, #0x0000
   215B E5            [11] 4826 	push	hl
   215C 2E 00         [ 7] 4827 	ld	l, #0x00
   215E E5            [11] 4828 	push	hl
   215F AF            [ 4] 4829 	xor	a, a
   2160 57            [ 4] 4830 	ld	d,a
   2161 1E 01         [ 7] 4831 	ld	e,#0x01
   2163 D5            [11] 4832 	push	de
   2164 21 50 46      [10] 4833 	ld	hl, #0x4650
   2167 E5            [11] 4834 	push	hl
   2168 21 02 00      [10] 4835 	ld	hl, #0x0002
   216B E5            [11] 4836 	push	hl
   216C 21r27r01      [10] 4837 	ld	hl, #_responseOTASPIFF
   216F E5            [11] 4838 	push	hl
   2170 CDr2Ar09      [17] 4839 	call	_WaitForRXData
   2173 FD 21 0C 00   [14] 4840 	ld	iy, #12
   2177 FD 39         [15] 4841 	add	iy, sp
   2179 FD F9         [10] 4842 	ld	sp, iy
   217B 4D            [ 4] 4843 	ld	c, l
   217C                    4844 00353$:
                           4845 ;src\CFG8266.c:924: if (bResponse)
   217C 79            [ 4] 4846 	ld	a, c
   217D B7            [ 4] 4847 	or	a, a
   217E 28 25         [12] 4848 	jr	Z,00358$
                           4849 ;src\CFG8266.c:926: if ((!ucIsFw))
   2180 3Ar08r00      [13] 4850 	ld	a,(#_ucIsFw + 0)
   2183 B7            [ 4] 4851 	or	a, a
   2184 20 0A         [12] 4852 	jr	NZ,00355$
                           4853 ;src\CFG8266.c:927: printf("\rSuccess updating certificates!\r\n");
   2186 21rB8r26      [10] 4854 	ld	hl, #___str_93
   2189 E5            [11] 4855 	push	hl
   218A CDr00r00      [17] 4856 	call	_puts
   218D F1            [10] 4857 	pop	af
   218E 18 08         [12] 4858 	jr	00356$
   2190                    4859 00355$:
                           4860 ;src\CFG8266.c:929: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   2190 21rD9r26      [10] 4861 	ld	hl, #___str_95
   2193 E5            [11] 4862 	push	hl
   2194 CDr00r00      [17] 4863 	call	_puts
   2197 F1            [10] 4864 	pop	af
   2198                    4865 00356$:
                           4866 ;src\CFG8266.c:930: FinishUpdate(true);
   2198 3E 01         [ 7] 4867 	ld	a, #0x01
   219A F5            [11] 4868 	push	af
   219B 33            [ 6] 4869 	inc	sp
   219C CDr1Br0C      [17] 4870 	call	_FinishUpdate
   219F 33            [ 6] 4871 	inc	sp
                           4872 ;src\CFG8266.c:931: return 0;
   21A0 21 00 00      [10] 4873 	ld	hl, #0x0000
   21A3 18 1F         [12] 4874 	jr	00388$
   21A5                    4875 00358$:
                           4876 ;src\CFG8266.c:934: printf("\rFailed to update from remote server...\r\n");
   21A5 21r1Cr27      [10] 4877 	ld	hl, #___str_97
   21A8 E5            [11] 4878 	push	hl
   21A9 CDr00r00      [17] 4879 	call	_puts
   21AC F1            [10] 4880 	pop	af
   21AD 18 12         [12] 4881 	jr	00375$
   21AF                    4882 00371$:
                           4883 ;src\CFG8266.c:938: printf("ESP device not found...\r\n");
   21AF 21r45r27      [10] 4884 	ld	hl, #___str_99
   21B2 E5            [11] 4885 	push	hl
   21B3 CDr00r00      [17] 4886 	call	_puts
   21B6 F1            [10] 4887 	pop	af
   21B7 18 08         [12] 4888 	jr	00375$
   21B9                    4889 00374$:
                           4890 ;src\CFG8266.c:941: printf(strUsage);
   21B9 21rD3r01      [10] 4891 	ld	hl, #_strUsage
   21BC E5            [11] 4892 	push	hl
   21BD CDr00r00      [17] 4893 	call	_printf
   21C0 F1            [10] 4894 	pop	af
   21C1                    4895 00375$:
                           4896 ;src\CFG8266.c:943: return 0;
   21C1 21 00 00      [10] 4897 	ld	hl, #0x0000
   21C4                    4898 00388$:
                           4899 ;src\CFG8266.c:944: }
   21C4 DD F9         [10] 4900 	ld	sp, ix
   21C6 DD E1         [14] 4901 	pop	ix
   21C8 C9            [10] 4902 	ret
   21C9                    4903 ___str_31:
   21C9 3E 20 53 4D 2D 58  4904 	.ascii "> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <"
        20 45 53 50 38 32
        36 36 20 57 69 2D
        46 69 20 4D 6F 64
        75 6C 65 20 43 6F
        6E 66 69 67 75 72
        61 74 69 6F 6E 20
        76 31 2E 33 30 20
        3C
   21FA 0D                 4905 	.db 0x0d
   21FB 0A                 4906 	.db 0x0a
   21FC 28 63 29 20 32 30  4907 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   222D 0D                 4908 	.db 0x0d
   222E 0A                 4909 	.db 0x0a
   222F 00                 4910 	.db 0x00
   2230                    4911 ___str_32:
   2230 42 61 75 64 20 52  4912 	.ascii "Baud Rate: %s"
        61 74 65 3A 20 25
        73
   223D 0D                 4913 	.db 0x0d
   223E 0A                 4914 	.db 0x0a
   223F 00                 4915 	.db 0x00
   2240                    4916 ___str_33:
   2240 46 57 20 56 65 72  4917 	.ascii "FW Version: %c.%c"
        73 69 6F 6E 3A 20
        25 63 2E 25 63
   2251 0D                 4918 	.db 0x0d
   2252 0A                 4919 	.db 0x0a
   2253 00                 4920 	.db 0x00
   2254                    4921 ___str_34:
   2254 0D                 4922 	.db 0x0d
   2255 0A                 4923 	.db 0x0a
   2256 53 65 74 74 69 6E  4924 	.ascii "Setting Wi-Fi idle timeout to %u..."
        67 20 57 69 2D 46
        69 20 69 64 6C 65
        20 74 69 6D 65 6F
        75 74 20 74 6F 20
        25 75 2E 2E 2E
   2279 0D                 4925 	.db 0x0d
   227A 0A                 4926 	.db 0x0a
   227B 00                 4927 	.db 0x00
   227C                    4928 ___str_36:
   227C 0D                 4929 	.db 0x0d
   227D 0A                 4930 	.db 0x0a
   227E 53 65 74 74 69 6E  4931 	.ascii "Setting Wi-Fi to always on!"
        67 20 57 69 2D 46
        69 20 74 6F 20 61
        6C 77 61 79 73 20
        6F 6E 21
   2299 0D                 4932 	.db 0x0d
   229A 00                 4933 	.db 0x00
   229B                    4934 ___str_38:
   229B 0D                 4935 	.db 0x0d
   229C 00                 4936 	.db 0x00
   229D                    4937 ___str_39:
   229D 25 73 25 73        4938 	.ascii "%s%s"
   22A1 0D                 4939 	.db 0x0d
   22A2 0A                 4940 	.db 0x0a
   22A3 0A                 4941 	.db 0x0a
   22A4 00                 4942 	.db 0x00
   22A5                    4943 ___str_41:
   22A5 43 68 6F 6F 73 65  4944 	.ascii "Choose AP:"
        20 41 50 3A
   22AF 0D                 4945 	.db 0x0d
   22B0 0A                 4946 	.db 0x0a
   22B1 00                 4947 	.db 0x00
   22B2                    4948 ___str_42:
   22B2 25 75 20 2D 20 25  4949 	.ascii "%u - %s"
        73
   22B9 00                 4950 	.db 0x00
   22BA                    4951 ___str_44:
   22BA 20 28 50 57 44 29  4952 	.ascii " (PWD)"
   22C0 0D                 4953 	.db 0x0d
   22C1 00                 4954 	.db 0x00
   22C2                    4955 ___str_46:
   22C2 20 28 4F 50 45 4E  4956 	.ascii " (OPEN)"
        29
   22C9 0D                 4957 	.db 0x0d
   22CA 00                 4958 	.db 0x00
   22CB                    4959 ___str_47:
   22CB 0D                 4960 	.db 0x0d
   22CC 0A                 4961 	.db 0x0a
   22CD 57 68 69 63 68 20  4962 	.ascii "Which one to connect? (ESC exit/SPACE BAR next page)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 2F 53 50 41 43
        45 20 42 41 52 20
        6E 65 78 74 20 70
        61 67 65 29
   2301 00                 4963 	.db 0x00
   2302                    4964 ___str_48:
   2302 0D                 4965 	.db 0x0d
   2303 0A                 4966 	.db 0x0a
   2304 57 68 69 63 68 20  4967 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   2324 00                 4968 	.db 0x00
   2325                    4969 ___str_49:
   2325 20 25 63           4970 	.ascii " %c"
   2328 0D                 4971 	.db 0x0d
   2329 0A                 4972 	.db 0x0a
   232A 0A                 4973 	.db 0x0a
   232B 00                 4974 	.db 0x00
   232C                    4975 ___str_50:
   232C 50 61 73 73 77 6F  4976 	.ascii "Password? "
        72 64 3F 20
   2336 00                 4977 	.db 0x00
   2337                    4978 ___str_52:
   2337 43 6F 6E 6E 65 63  4979 	.ascii "Connecting to: %s "
        74 69 6E 67 20 74
        6F 3A 20 25 73 20
   2349 0D                 4980 	.db 0x0d
   234A 0A                 4981 	.db 0x0a
   234B 00                 4982 	.db 0x00
   234C                    4983 ___str_54:
   234C 53 75 63 63 65 73  4984 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   236E 0D                 4985 	.db 0x0d
   236F 00                 4986 	.db 0x00
   2370                    4987 ___str_56:
   2370 45 72 72 6F 72 2C  4988 	.ascii "Error, wrong password!"
        20 77 72 6F 6E 67
        20 70 61 73 73 77
        6F 72 64 21
   2386 0D                 4989 	.db 0x0d
   2387 00                 4990 	.db 0x00
   2388                    4991 ___str_58:
   2388 45 72 72 6F 72 2C  4992 	.ascii "Error, if protected network, check password."
        20 69 66 20 70 72
        6F 74 65 63 74 65
        64 20 6E 65 74 77
        6F 72 6B 2C 20 63
        68 65 63 6B 20 70
        61 73 73 77 6F 72
        64 2E
   23B4 0D                 4993 	.db 0x0d
   23B5 00                 4994 	.db 0x00
   23B6                    4995 ___str_62:
   23B6 0D                 4996 	.db 0x0d
   23B7 0A                 4997 	.db 0x0a
   23B8 55 73 65 72 20 63  4998 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   23D3 0D                 4999 	.db 0x0d
   23D4 00                 5000 	.db 0x00
   23D5                    5001 ___str_64:
   23D5 0D                 5002 	.db 0x0d
   23D6 0A                 5003 	.db 0x0a
   23D7 53 63 61 6E 20 72  5004 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   23F1 0D                 5005 	.db 0x0d
   23F2 00                 5006 	.db 0x00
   23F3                    5007 ___str_66:
   23F3 0D                 5008 	.db 0x0d
   23F4 53 63 61 6E 20 72  5009 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   240E 0D                 5010 	.db 0x0d
   240F 00                 5011 	.db 0x00
   2410                    5012 ___str_68:
   2410 0D                 5013 	.db 0x0d
   2411 4E 61 67 6C 65 20  5014 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   242A 0D                 5015 	.db 0x0d
   242B 00                 5016 	.db 0x00
   242C                    5017 ___str_70:
   242C 0D                 5018 	.db 0x0d
   242D 4E 61 67 6C 65 20  5019 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   244F 0D                 5020 	.db 0x0d
   2450 00                 5021 	.db 0x00
   2451                    5022 ___str_72:
   2451 0D                 5023 	.db 0x0d
   2452 52 65 71 75 65 73  5024 	.ascii "Requested to turn off Wi-Fi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        2D 46 69 20 52 61
        64 69 6F 2E 2E 2E
   2476 0D                 5025 	.db 0x0d
   2477 00                 5026 	.db 0x00
   2478                    5027 ___str_74:
   2478 0D                 5028 	.db 0x0d
   2479 52 65 71 75 65 73  5029 	.ascii "Request to turnoff Wi-Fi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 2D 46 69
        20 52 61 64 69 6F
        20 65 72 72 6F 72
        21
   249E 0D                 5030 	.db 0x0d
   249F 00                 5031 	.db 0x00
   24A0                    5032 ___str_76:
   24A0 0D                 5033 	.db 0x0d
   24A1 57 69 2D 46 69 20  5034 	.ascii "Wi-Fi radio on Time-out set successfully..."
        72 61 64 69 6F 20
        6F 6E 20 54 69 6D
        65 2D 6F 75 74 20
        73 65 74 20 73 75
        63 63 65 73 73 66
        75 6C 6C 79 2E 2E
        2E
   24CC 0D                 5035 	.db 0x0d
   24CD 00                 5036 	.db 0x00
   24CE                    5037 ___str_78:
   24CE 0D                 5038 	.db 0x0d
   24CF 45 72 72 6F 72 20  5039 	.ascii "Error setting Wi-Fi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 2D 46
        69 20 72 61 64 69
        6F 20 6F 6E 20 54
        69 6D 65 2D 6F 75
        74 21
   24F5 0D                 5040 	.db 0x0d
   24F6 00                 5041 	.db 0x00
   24F7                    5042 ___str_79:
   24F7 46 69 6C 65 3A 20  5043 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   2509 0D                 5044 	.db 0x0d
   250A 0A                 5045 	.db 0x0a
   250B 00                 5046 	.db 0x00
   250C                    5047 ___str_81:
   250C 45 72 72 6F 72 20  5048 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   2536 0D                 5049 	.db 0x0d
   2537 00                 5050 	.db 0x00
   2538                    5051 ___str_82:
   2538 25 73              5052 	.ascii "%s"
   253A 00                 5053 	.db 0x00
   253B                    5054 ___str_84:
   253B 0D                 5055 	.db 0x0d
   253C 45 72 72 6F 72 20  5056 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   2551 0D                 5057 	.db 0x0d
   2552 00                 5058 	.db 0x00
   2553                    5059 ___str_86:
   2553 0D                 5060 	.db 0x0d
   2554 45 72 72 6F 72 20  5061 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   257D 0D                 5062 	.db 0x0d
   257E 00                 5063 	.db 0x00
   257F                    5064 ___str_87:
   257F 0D                 5065 	.db 0x0d
   2580 45 72 72 6F 72 20  5066 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   259C 0D                 5067 	.db 0x0d
   259D 0A                 5068 	.db 0x0a
   259E 00                 5069 	.db 0x00
   259F                    5070 ___str_88:
   259F 45 72 72 6F 72 2C  5071 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   25BA 0D                 5072 	.db 0x0d
   25BB 0A                 5073 	.db 0x0a
   25BC 00                 5074 	.db 0x00
   25BD                    5075 ___str_89:
   25BD 45 72 72 6F 72 2C  5076 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   25D9 0D                 5077 	.db 0x0d
   25DA 0A                 5078 	.db 0x0a
   25DB 00                 5079 	.db 0x00
   25DC                    5080 ___str_90:
   25DC 4F 6B 2C 20 75 70  5081 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   2605 0D                 5082 	.db 0x0d
   2606 0A                 5083 	.db 0x0a
   2607 46 69 6C 65 20 70  5084 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   2614 0A                 5085 	.db 0x0a
   2615 50 6C 65 61 73 65  5086 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   2642 0D                 5087 	.db 0x0d
   2643 0A                 5088 	.db 0x0a
   2644 00                 5089 	.db 0x00
   2645                    5090 ___str_91:
   2645 4F 6B 2C 20 75 70  5091 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   2678 0D                 5092 	.db 0x0d
   2679 0A                 5093 	.db 0x0a
   267A 46 69 6C 65 20 70  5094 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   2687 0A                 5095 	.db 0x0a
   2688 50 6C 65 61 73 65  5096 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   26B5 0D                 5097 	.db 0x0d
   26B6 0A                 5098 	.db 0x0a
   26B7 00                 5099 	.db 0x00
   26B8                    5100 ___str_93:
   26B8 0D                 5101 	.db 0x0d
   26B9 53 75 63 63 65 73  5102 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   26D7 0D                 5103 	.db 0x0d
   26D8 00                 5104 	.db 0x00
   26D9                    5105 ___str_95:
   26D9 0D                 5106 	.db 0x0d
   26DA 53 75 63 63 65 73  5107 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   2716 68 65 64 2E        5108 	.ascii "hed."
   271A 0D                 5109 	.db 0x0d
   271B 00                 5110 	.db 0x00
   271C                    5111 ___str_97:
   271C 0D                 5112 	.db 0x0d
   271D 46 61 69 6C 65 64  5113 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   2743 0D                 5114 	.db 0x0d
   2744 00                 5115 	.db 0x00
   2745                    5116 ___str_99:
   2745 45 53 50 20 64 65  5117 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   275C 0D                 5118 	.db 0x0d
   275D 00                 5119 	.db 0x00
                           5120 	.area _CODE
   275E                    5121 ___str_100:
   275E 57 69 2D 46 69 20  5122 	.ascii "Wi-Fi is Idle, AP: "
        69 73 20 49 64 6C
        65 2C 20 41 50 3A
        20
   2771 00                 5123 	.db 0x00
   2772                    5124 ___str_101:
   2772 57 69 2D 46 69 20  5125 	.ascii "Wi-Fi Connecting to AP: "
        43 6F 6E 6E 65 63
        74 69 6E 67 20 74
        6F 20 41 50 3A 20
   278A 00                 5126 	.db 0x00
   278B                    5127 ___str_102:
   278B 57 69 2D 46 69 20  5128 	.ascii "Wi-Fi Wrong Password for AP: "
        57 72 6F 6E 67 20
        50 61 73 73 77 6F
        72 64 20 66 6F 72
        20 41 50 3A 20
   27A8 00                 5129 	.db 0x00
   27A9                    5130 ___str_103:
   27A9 57 69 2D 46 69 20  5131 	.ascii "Wi-Fi Did not find AP: "
        44 69 64 20 6E 6F
        74 20 66 69 6E 64
        20 41 50 3A 20
   27C0 00                 5132 	.db 0x00
   27C1                    5133 ___str_104:
   27C1 57 69 2D 46 69 20  5134 	.ascii "Wi-Fi Failed to connect to: "
        46 61 69 6C 65 64
        20 74 6F 20 63 6F
        6E 6E 65 63 74 20
        74 6F 3A 20
   27DD 00                 5135 	.db 0x00
   27DE                    5136 ___str_105:
   27DE 57 69 2D 46 69 20  5137 	.ascii "Wi-Fi Connected to: "
        43 6F 6E 6E 65 63
        74 65 64 20 74 6F
        3A 20
   27F2 00                 5138 	.db 0x00
   27F3                    5139 ___str_106:
   27F3 38 35 39 33 37 32  5140 	.ascii "859372 bps"
        20 62 70 73
   27FD 00                 5141 	.db 0x00
   27FE                    5142 ___str_107:
   27FE 33 34 36 35 32 30  5143 	.ascii "346520 bps"
        20 62 70 73
   2808 00                 5144 	.db 0x00
   2809                    5145 ___str_108:
   2809 32 33 31 30 31 34  5146 	.ascii "231014 bps"
        20 62 70 73
   2813 00                 5147 	.db 0x00
   2814                    5148 ___str_109:
   2814 31 31 35 32 30 30  5149 	.ascii "115200 bps"
        20 62 70 73
   281E 00                 5150 	.db 0x00
   281F                    5151 ___str_110:
   281F 35 37 36 30 30 20  5152 	.ascii "57600 bps"
        62 70 73
   2828 00                 5153 	.db 0x00
   2829                    5154 ___str_111:
   2829 33 38 34 30 30 20  5155 	.ascii "38400 bps"
        62 70 73
   2832 00                 5156 	.db 0x00
   2833                    5157 ___str_112:
   2833 33 31 32 35 30 20  5158 	.ascii "31250 bps"
        62 70 73
   283C 00                 5159 	.db 0x00
   283D                    5160 ___str_113:
   283D 31 39 32 30 30 20  5161 	.ascii "19200 bps"
        62 70 73
   2846 00                 5162 	.db 0x00
   2847                    5163 ___str_114:
   2847 39 36 30 30 20 62  5164 	.ascii "9600 bps"
        70 73
   284F 00                 5165 	.db 0x00
   2850                    5166 ___str_115:
   2850 34 38 30 30 20 62  5167 	.ascii "4800 bps"
        70 73
   2858 00                 5168 	.db 0x00
                           5169 	.area _INITIALIZER
   0000                    5170 __xinit__strAPSts:
   0000r5Er27              5171 	.dw ___str_100
   0002r72r27              5172 	.dw ___str_101
   0004r8Br27              5173 	.dw ___str_102
   0006rA9r27              5174 	.dw ___str_103
   0008rC1r27              5175 	.dw ___str_104
   000ArDEr27              5176 	.dw ___str_105
   000C                    5177 __xinit__speedStr:
   000CrF3r27              5178 	.dw ___str_106
   000ErFEr27              5179 	.dw ___str_107
   0010r09r28              5180 	.dw ___str_108
   0012r14r28              5181 	.dw ___str_109
   0014r1Fr28              5182 	.dw ___str_110
   0016r29r28              5183 	.dw ___str_111
   0018r33r28              5184 	.dw ___str_112
   001Ar3Dr28              5185 	.dw ___str_113
   001Cr47r28              5186 	.dw ___str_114
   001Er50r28              5187 	.dw ___str_115
                           5188 	.area _CABS (ABS)
