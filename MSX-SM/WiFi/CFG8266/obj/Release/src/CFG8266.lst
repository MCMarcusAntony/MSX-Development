                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _Cls
                             23 	.globl _Beep
                             24 	.globl _InputString
                             25 	.globl _Print
                             26 	.globl _strlen
                             27 	.globl _atol
                             28 	.globl _atoi
                             29 	.globl _puts
                             30 	.globl _printf
                             31 	.globl _speedStr
                             32 	.globl _strAPSts
                             33 	.globl _uiTimeout
                             34 	.globl _ucSetTimeout
                             35 	.globl _ucRadioOff
                             36 	.globl _ucNagleOn
                             37 	.globl _ucNagleOff
                             38 	.globl _ucIsFw
                             39 	.globl _ucLocalUpdate
                             40 	.globl _lPort
                             41 	.globl _uiPort
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _chFiller2
                             45 	.globl _strUsage
                             46 	.globl _responseReady2
                             47 	.globl _aDone
                             48 	.globl _advance
                             49 	.globl _radioOffResponse
                             50 	.globl _responseRadioOnTimeout
                             51 	.globl _responseOTASPIFF
                             52 	.globl _responseOTAFW
                             53 	.globl _responseWRBlock
                             54 	.globl _responseRSCERTUpdate
                             55 	.globl _responseRSFWUpdate
                             56 	.globl _apstsResponse
                             57 	.globl _apconfigurationResponse
                             58 	.globl _scanresResponse
                             59 	.globl _nagleoffResponse
                             60 	.globl _nagleonResponse
                             61 	.globl _scanresNoNetwork
                             62 	.globl _scanResponse
                             63 	.globl _responseOK
                             64 	.globl _certificateDone
                             65 	.globl _versionResponse
                             66 	.globl _endUpdate
                             67 	.globl _chFiller
                             68 ;--------------------------------------------------------
                             69 ; special function registers
                             70 ;--------------------------------------------------------
                     0006    71 _myPort6	=	0x0006
                     0007    72 _myPort7	=	0x0007
                             73 ;--------------------------------------------------------
                             74 ; ram data
                             75 ;--------------------------------------------------------
                             76 	.area _DATA
                     FC9E    77 _TickCount	=	0xfc9e
   0000                      78 _ucScan::
   0000                      79 	.ds 1
   0001                      80 _uiPort::
   0001                      81 	.ds 2
   0003                      82 _lPort::
   0003                      83 	.ds 4
   0007                      84 _ucLocalUpdate::
   0007                      85 	.ds 1
   0008                      86 _ucIsFw::
   0008                      87 	.ds 1
   0009                      88 _ucNagleOff::
   0009                      89 	.ds 1
   000A                      90 _ucNagleOn::
   000A                      91 	.ds 1
   000B                      92 _ucRadioOff::
   000B                      93 	.ds 1
   000C                      94 _ucSetTimeout::
   000C                      95 	.ds 1
   000D                      96 _uiTimeout::
   000D                      97 	.ds 2
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
   0000                     102 _strAPSts::
   0000                     103 	.ds 12
   000C                     104 _speedStr::
   000C                     105 	.ds 20
                            106 ;--------------------------------------------------------
                            107 ; absolute external ram data
                            108 ;--------------------------------------------------------
                            109 	.area _DABS (ABS)
                            110 ;--------------------------------------------------------
                            111 ; global & static initialisations
                            112 ;--------------------------------------------------------
                            113 	.area _HOME
                            114 	.area _GSINIT
                            115 	.area _GSFINAL
                            116 	.area _GSINIT
                            117 ;--------------------------------------------------------
                            118 ; Home
                            119 ;--------------------------------------------------------
                            120 	.area _HOME
                            121 	.area _HOME
                            122 ;--------------------------------------------------------
                            123 ; code
                            124 ;--------------------------------------------------------
                            125 	.area _CODE
                            126 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            127 ;	---------------------------------
                            128 ; Function MyRead
                            129 ; ---------------------------------
   0000                     130 _MyRead::
   0000 DD E5         [15]  131 	push	ix
   0002 DD 21 00 00   [14]  132 	ld	ix,#0
   0006 DD 39         [15]  133 	add	ix,sp
   0008 21 F4 FF      [10]  134 	ld	hl, #-12
   000B 39            [11]  135 	add	hl, sp
   000C F9            [ 6]  136 	ld	sp, hl
                            137 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   000D 21 00 00      [10]  138 	ld	hl, #0
   0010 39            [11]  139 	add	hl, sp
   0011 EB            [ 4]  140 	ex	de, hl
   0012 21 04 00      [10]  141 	ld	hl, #0x0004
   0015 19            [11]  142 	add	hl, de
   0016 DD 4E 06      [19]  143 	ld	c, 6 (ix)
   0019 DD 7E 07      [19]  144 	ld	a, 7 (ix)
   001C 71            [ 7]  145 	ld	(hl), c
   001D 23            [ 6]  146 	inc	hl
   001E 77            [ 7]  147 	ld	(hl), a
                            148 ;src\CFG8266.c:54: regs.Words.HL = Size;
   001F 21 06 00      [10]  149 	ld	hl, #0x0006
   0022 19            [11]  150 	add	hl, de
   0023 DD 7E 08      [19]  151 	ld	a, 8 (ix)
   0026 77            [ 7]  152 	ld	(hl), a
   0027 23            [ 6]  153 	inc	hl
   0028 DD 7E 09      [19]  154 	ld	a, 9 (ix)
   002B 77            [ 7]  155 	ld	(hl), a
                            156 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   002C 21 03 00      [10]  157 	ld	hl, #3
   002F 39            [11]  158 	add	hl, sp
   0030 DD 7E 04      [19]  159 	ld	a, 4 (ix)
   0033 77            [ 7]  160 	ld	(hl), a
                            161 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   0034 21 00 00      [10]  162 	ld	hl, #0
   0037 39            [11]  163 	add	hl, sp
   0038 4D            [ 4]  164 	ld	c, l
   0039 44            [ 4]  165 	ld	b, h
   003A 59            [ 4]  166 	ld	e, c
   003B 50            [ 4]  167 	ld	d, b
   003C C5            [11]  168 	push	bc
   003D 01 02 02      [10]  169 	ld	bc, #0x0202
   0040 C5            [11]  170 	push	bc
   0041 D5            [11]  171 	push	de
   0042 3E 48         [ 7]  172 	ld	a, #0x48
   0044 F5            [11]  173 	push	af
   0045 33            [ 6]  174 	inc	sp
   0046 CDr00r00      [17]  175 	call	_DosCall
   0049 F1            [10]  176 	pop	af
   004A F1            [10]  177 	pop	af
   004B 33            [ 6]  178 	inc	sp
   004C C1            [10]  179 	pop	bc
                            180 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   004D 69            [ 4]  181 	ld	l, c
   004E 60            [ 4]  182 	ld	h, b
   004F 23            [ 6]  183 	inc	hl
   0050 7E            [ 7]  184 	ld	a, (hl)
   0051 B7            [ 4]  185 	or	a, a
   0052 20 0B         [12]  186 	jr	NZ,00102$
                            187 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   0054 69            [ 4]  188 	ld	l, c
   0055 60            [ 4]  189 	ld	h, b
   0056 11 06 00      [10]  190 	ld	de, #0x0006
   0059 19            [11]  191 	add	hl, de
   005A 4E            [ 7]  192 	ld	c, (hl)
   005B 23            [ 6]  193 	inc	hl
   005C 46            [ 7]  194 	ld	b, (hl)
   005D 18 03         [12]  195 	jr	00103$
   005F                     196 00102$:
                            197 ;src\CFG8266.c:63: iRet = 0;
   005F 01 00 00      [10]  198 	ld	bc, #0x0000
   0062                     199 00103$:
                            200 ;src\CFG8266.c:65: return iRet;
   0062 69            [ 4]  201 	ld	l, c
   0063 60            [ 4]  202 	ld	h, b
                            203 ;src\CFG8266.c:66: }
   0064 DD F9         [10]  204 	ld	sp, ix
   0066 DD E1         [14]  205 	pop	ix
   0068 C9            [10]  206 	ret
   0069                     207 _Done_Version:
   0069 4D 61 64 65 20 77   208 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   0088 00                  209 	.db 0x00
   0089                     210 _chFiller:
   0089 43                  211 	.db #0x43	; 67	'C'
   008A 46                  212 	.db #0x46	; 70	'F'
   008B 47                  213 	.db #0x47	; 71	'G'
   008C 38                  214 	.db #0x38	; 56	'8'
   008D 32                  215 	.db #0x32	; 50	'2'
   008E 36                  216 	.db #0x36	; 54	'6'
   008F 36                  217 	.db #0x36	; 54	'6'
   0090 20                  218 	.db #0x20	; 32
   0091 59                  219 	.db #0x59	; 89	'Y'
   0092 6F                  220 	.db #0x6f	; 111	'o'
   0093 75                  221 	.db #0x75	; 117	'u'
   0094 20                  222 	.db #0x20	; 32
   0095 68                  223 	.db #0x68	; 104	'h'
   0096 61                  224 	.db #0x61	; 97	'a'
   0097 76                  225 	.db #0x76	; 118	'v'
   0098 65                  226 	.db #0x65	; 101	'e'
   0099 20                  227 	.db #0x20	; 32
   009A 61                  228 	.db #0x61	; 97	'a'
   009B 20                  229 	.db #0x20	; 32
   009C 67                  230 	.db #0x67	; 103	'g'
   009D 6F                  231 	.db #0x6f	; 111	'o'
   009E 6F                  232 	.db #0x6f	; 111	'o'
   009F 64                  233 	.db #0x64	; 100	'd'
   00A0 20                  234 	.db #0x20	; 32
   00A1 74                  235 	.db #0x74	; 116	't'
   00A2 69                  236 	.db #0x69	; 105	'i'
   00A3 6D                  237 	.db #0x6d	; 109	'm'
   00A4 65                  238 	.db #0x65	; 101	'e'
   00A5 20                  239 	.db #0x20	; 32
   00A6 72                  240 	.db #0x72	; 114	'r'
   00A7 65                  241 	.db #0x65	; 101	'e'
   00A8 61                  242 	.db #0x61	; 97	'a'
   00A9 64                  243 	.db #0x64	; 100	'd'
   00AA 69                  244 	.db #0x69	; 105	'i'
   00AB 6E                  245 	.db #0x6e	; 110	'n'
   00AC 67                  246 	.db #0x67	; 103	'g'
   00AD 20                  247 	.db #0x20	; 32
   00AE 74                  248 	.db #0x74	; 116	't'
   00AF 68                  249 	.db #0x68	; 104	'h'
   00B0 69                  250 	.db #0x69	; 105	'i'
   00B1 73                  251 	.db #0x73	; 115	's'
   00B2 20                  252 	.db #0x20	; 32
   00B3 74                  253 	.db #0x74	; 116	't'
   00B4 61                  254 	.db #0x61	; 97	'a'
   00B5 6C                  255 	.db #0x6c	; 108	'l'
   00B6 65                  256 	.db #0x65	; 101	'e'
   00B7 20                  257 	.db #0x20	; 32
   00B8 6F                  258 	.db #0x6f	; 111	'o'
   00B9 66                  259 	.db #0x66	; 102	'f'
   00BA 20                  260 	.db #0x20	; 32
   00BB 61                  261 	.db #0x61	; 97	'a'
   00BC 6E                  262 	.db #0x6e	; 110	'n'
   00BD 20                  263 	.db #0x20	; 32
   00BE 77                  264 	.db #0x77	; 119	'w'
   00BF 65                  265 	.db #0x65	; 101	'e'
   00C0 69                  266 	.db #0x69	; 105	'i'
   00C1 72                  267 	.db #0x72	; 114	'r'
   00C2 64                  268 	.db #0x64	; 100	'd'
   00C3 20                  269 	.db #0x20	; 32
   00C4 62                  270 	.db #0x62	; 98	'b'
   00C5 65                  271 	.db #0x65	; 101	'e'
   00C6 68                  272 	.db #0x68	; 104	'h'
   00C7 61                  273 	.db #0x61	; 97	'a'
   00C8 76                  274 	.db #0x76	; 118	'v'
   00C9 69                  275 	.db #0x69	; 105	'i'
   00CA 6F                  276 	.db #0x6f	; 111	'o'
   00CB 72                  277 	.db #0x72	; 114	'r'
   00CC 2C                  278 	.db #0x2c	; 44
   00CD 20                  279 	.db #0x20	; 32
   00CE 73                  280 	.db #0x73	; 115	's'
   00CF 69                  281 	.db #0x69	; 105	'i'
   00D0 74                  282 	.db #0x74	; 116	't'
   00D1 20                  283 	.db #0x20	; 32
   00D2 61                  284 	.db #0x61	; 97	'a'
   00D3 6E                  285 	.db #0x6e	; 110	'n'
   00D4 64                  286 	.db #0x64	; 100	'd'
   00D5 20                  287 	.db #0x20	; 32
   00D6 68                  288 	.db #0x68	; 104	'h'
   00D7 61                  289 	.db #0x61	; 97	'a'
   00D8 76                  290 	.db #0x76	; 118	'v'
   00D9 65                  291 	.db #0x65	; 101	'e'
   00DA 20                  292 	.db #0x20	; 32
   00DB 66                  293 	.db #0x66	; 102	'f'
   00DC 75                  294 	.db #0x75	; 117	'u'
   00DD 6E                  295 	.db #0x6e	; 110	'n'
   00DE 20                  296 	.db #0x20	; 32
   00DF 61                  297 	.db #0x61	; 97	'a'
   00E0 73                  298 	.db #0x73	; 115	's'
   00E1 20                  299 	.db #0x20	; 32
   00E2 74                  300 	.db #0x74	; 116	't'
   00E3 68                  301 	.db #0x68	; 104	'h'
   00E4 69                  302 	.db #0x69	; 105	'i'
   00E5 73                  303 	.db #0x73	; 115	's'
   00E6 20                  304 	.db #0x20	; 32
   00E7 69                  305 	.db #0x69	; 105	'i'
   00E8 73                  306 	.db #0x73	; 115	's'
   00E9 20                  307 	.db #0x20	; 32
   00EA 6F                  308 	.db #0x6f	; 111	'o'
   00EB 76                  309 	.db #0x76	; 118	'v'
   00EC 65                  310 	.db #0x65	; 101	'e'
   00ED 72                  311 	.db #0x72	; 114	'r'
   00EE 77                  312 	.db #0x77	; 119	'w'
   00EF 72                  313 	.db #0x72	; 114	'r'
   00F0 69                  314 	.db #0x69	; 105	'i'
   00F1 74                  315 	.db #0x74	; 116	't'
   00F2 74                  316 	.db #0x74	; 116	't'
   00F3 65                  317 	.db #0x65	; 101	'e'
   00F4 6E                  318 	.db #0x6e	; 110	'n'
   00F5 21                  319 	.db #0x21	; 33
   00F6 0D                  320 	.db #0x0d	; 13
   00F7 0A                  321 	.db #0x0a	; 10
   00F8 00                  322 	.db #0x00	; 0
   00F9 00                  323 	.db #0x00	; 0
   00FA 00                  324 	.db #0x00	; 0
   00FB 00                  325 	.db #0x00	; 0
   00FC 00                  326 	.db #0x00	; 0
   00FD 00                  327 	.db #0x00	; 0
   00FE 00                  328 	.db #0x00	; 0
   00FF 00                  329 	.db #0x00	; 0
   0100 00                  330 	.db #0x00	; 0
   0101 00                  331 	.db #0x00	; 0
   0102 00                  332 	.db #0x00	; 0
   0103 00                  333 	.db #0x00	; 0
   0104 00                  334 	.db #0x00	; 0
   0105 00                  335 	.db #0x00	; 0
   0106 00                  336 	.db #0x00	; 0
   0107 00                  337 	.db #0x00	; 0
   0108 00                  338 	.db #0x00	; 0
   0109                     339 _endUpdate:
   0109 45                  340 	.db #0x45	; 69	'E'
   010A 00                  341 	.db #0x00	; 0
   010B                     342 _versionResponse:
   010B 56                  343 	.db #0x56	; 86	'V'
   010C                     344 _certificateDone:
   010C 49                  345 	.db #0x49	; 73	'I'
   010D 00                  346 	.db #0x00	; 0
   010E                     347 _responseOK:
   010E 4F                  348 	.db #0x4f	; 79	'O'
   010F 4B                  349 	.db #0x4b	; 75	'K'
   0110                     350 _scanResponse:
   0110 53                  351 	.db #0x53	; 83	'S'
   0111 00                  352 	.db #0x00	; 0
   0112                     353 _scanresNoNetwork:
   0112 53                  354 	.db #0x53	; 83	'S'
   0113 02                  355 	.db #0x02	; 2
   0114                     356 _nagleonResponse:
   0114 44                  357 	.db #0x44	; 68	'D'
   0115 00                  358 	.db #0x00	; 0
   0116                     359 _nagleoffResponse:
   0116 4E                  360 	.db #0x4e	; 78	'N'
   0117 00                  361 	.db #0x00	; 0
   0118                     362 _scanresResponse:
   0118 73                  363 	.db #0x73	; 115	's'
   0119 00                  364 	.db #0x00	; 0
   011A                     365 _apconfigurationResponse:
   011A 41                  366 	.db #0x41	; 65	'A'
   011B 00                  367 	.db #0x00	; 0
   011C                     368 _apstsResponse:
   011C 67                  369 	.db #0x67	; 103	'g'
   011D 00                  370 	.db #0x00	; 0
   011E 00                  371 	.db #0x00	; 0
   011F                     372 _responseRSFWUpdate:
   011F 5A                  373 	.db #0x5a	; 90	'Z'
   0120 00                  374 	.db #0x00	; 0
   0121                     375 _responseRSCERTUpdate:
   0121 59                  376 	.db #0x59	; 89	'Y'
   0122 00                  377 	.db #0x00	; 0
   0123                     378 _responseWRBlock:
   0123 7A                  379 	.db #0x7a	; 122	'z'
   0124 00                  380 	.db #0x00	; 0
   0125                     381 _responseOTAFW:
   0125 55                  382 	.db #0x55	; 85	'U'
   0126 00                  383 	.db #0x00	; 0
   0127                     384 _responseOTASPIFF:
   0127 75                  385 	.db #0x75	; 117	'u'
   0128 00                  386 	.db #0x00	; 0
   0129                     387 _responseRadioOnTimeout:
   0129 54                  388 	.db #0x54	; 84	'T'
   012A 00                  389 	.db #0x00	; 0
   012B                     390 _radioOffResponse:
   012B 4F                  391 	.db #0x4f	; 79	'O'
   012C 00                  392 	.db #0x00	; 0
   012D                     393 _advance:
   012D 2E                  394 	.db #0x2e	; 46
   012E 20                  395 	.db #0x20	; 32
   012F 20                  396 	.db #0x20	; 32
   0130 20                  397 	.db #0x20	; 32
   0131 1D                  398 	.db #0x1d	; 29
   0132 1D                  399 	.db #0x1d	; 29
   0133 1D                  400 	.db #0x1d	; 29
   0134 1D                  401 	.db #0x1d	; 29
   0135 00                  402 	.db #0x00	; 0
   0136 2E                  403 	.db #0x2e	; 46
   0137 2E                  404 	.db #0x2e	; 46
   0138 20                  405 	.db #0x20	; 32
   0139 20                  406 	.db #0x20	; 32
   013A 1D                  407 	.db #0x1d	; 29
   013B 1D                  408 	.db #0x1d	; 29
   013C 1D                  409 	.db #0x1d	; 29
   013D 1D                  410 	.db #0x1d	; 29
   013E 00                  411 	.db #0x00	; 0
   013F 2E                  412 	.db #0x2e	; 46
   0140 2E                  413 	.db #0x2e	; 46
   0141 2E                  414 	.db #0x2e	; 46
   0142 20                  415 	.db #0x20	; 32
   0143 1D                  416 	.db #0x1d	; 29
   0144 1D                  417 	.db #0x1d	; 29
   0145 1D                  418 	.db #0x1d	; 29
   0146 1D                  419 	.db #0x1d	; 29
   0147 00                  420 	.db #0x00	; 0
   0148 2E                  421 	.db #0x2e	; 46
   0149 2E                  422 	.db #0x2e	; 46
   014A 2E                  423 	.db #0x2e	; 46
   014B 2E                  424 	.db #0x2e	; 46
   014C 1D                  425 	.db #0x1d	; 29
   014D 1D                  426 	.db #0x1d	; 29
   014E 1D                  427 	.db #0x1d	; 29
   014F 1D                  428 	.db #0x1d	; 29
   0150 00                  429 	.db #0x00	; 0
   0151 2E                  430 	.db #0x2e	; 46
   0152 2E                  431 	.db #0x2e	; 46
   0153 2E                  432 	.db #0x2e	; 46
   0154 20                  433 	.db #0x20	; 32
   0155 1D                  434 	.db #0x1d	; 29
   0156 1D                  435 	.db #0x1d	; 29
   0157 1D                  436 	.db #0x1d	; 29
   0158 1D                  437 	.db #0x1d	; 29
   0159 00                  438 	.db #0x00	; 0
   015A 2E                  439 	.db #0x2e	; 46
   015B 2E                  440 	.db #0x2e	; 46
   015C 20                  441 	.db #0x20	; 32
   015D 20                  442 	.db #0x20	; 32
   015E 1D                  443 	.db #0x1d	; 29
   015F 1D                  444 	.db #0x1d	; 29
   0160 1D                  445 	.db #0x1d	; 29
   0161 1D                  446 	.db #0x1d	; 29
   0162 00                  447 	.db #0x00	; 0
   0163 2E                  448 	.db #0x2e	; 46
   0164 20                  449 	.db #0x20	; 32
   0165 20                  450 	.db #0x20	; 32
   0166 20                  451 	.db #0x20	; 32
   0167 1D                  452 	.db #0x1d	; 29
   0168 1D                  453 	.db #0x1d	; 29
   0169 1D                  454 	.db #0x1d	; 29
   016A 1D                  455 	.db #0x1d	; 29
   016B 00                  456 	.db #0x00	; 0
   016C 20                  457 	.db #0x20	; 32
   016D 20                  458 	.db #0x20	; 32
   016E 20                  459 	.db #0x20	; 32
   016F 20                  460 	.db #0x20	; 32
   0170 1D                  461 	.db #0x1d	; 29
   0171 1D                  462 	.db #0x1d	; 29
   0172 1D                  463 	.db #0x1d	; 29
   0173 1D                  464 	.db #0x1d	; 29
   0174 00                  465 	.db #0x00	; 0
   0175                     466 _aDone:
   0175 20                  467 	.db #0x20	; 32
   0176 20                  468 	.db #0x20	; 32
   0177 20                  469 	.db #0x20	; 32
   0178 20                  470 	.db #0x20	; 32
   0179 0D                  471 	.db #0x0d	; 13
   017A 00                  472 	.db #0x00	; 0
   017B                     473 _responseReady2:
   017B 52                  474 	.db #0x52	; 82	'R'
   017C 65                  475 	.db #0x65	; 101	'e'
   017D 61                  476 	.db #0x61	; 97	'a'
   017E 64                  477 	.db #0x64	; 100	'd'
   017F 79                  478 	.db #0x79	; 121	'y'
   0180 0D                  479 	.db #0x0d	; 13
   0181 0A                  480 	.db #0x0a	; 10
   0182                     481 _strUsage:
   0182 55 73 61 67 65 3A   482 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   01BE 0D                  483 	.db 0x0d
   01BF 0A                  484 	.db 0x0a
   01C0 0A                  485 	.db 0x0a
   01C1 20 20 20 20 20 20   486 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   01FD 6D 20 74 6F 20 74   487 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   020C 0D                  488 	.db 0x0d
   020D 0A                  489 	.db 0x0a
   020E 0A                  490 	.db 0x0a
   020F 20 20 20 20 20 20   491 	.ascii "       CFG8266 /o to turn off radio now if no connections ar"
        20 43 46 47 38 32
        36 36 20 2F 6F 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        72 61 64 69 6F 20
        6E 6F 77 20 69 66
        20 6E 6F 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 73 20 61 72
   024B 65 20 6F 70 65 6E   492 	.ascii "e open"
   0251 0D                  493 	.db 0x0d
   0252 0A                  494 	.db 0x0a
   0253 0A                  495 	.db 0x0a
   0254 20 20 20 20 20 20   496 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   0290 79                  497 	.ascii "y"
   0291 0D                  498 	.db 0x0d
   0292 0A                  499 	.db 0x0a
   0293 0A                  500 	.db 0x0a
   0294 20 20 20 20 20 20   501 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   02CC 0D                  502 	.db 0x0d
   02CD 0A                  503 	.db 0x0a
   02CE 0A                  504 	.db 0x0a
   02CF 20 20 20 20 20 20   505 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   030B 6D 77 61 72 65 20   506 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   0319 0D                  507 	.db 0x0d
   031A 0A                  508 	.db 0x0a
   031B 0A                  509 	.db 0x0a
   031C 20 20 20 20 20 20   510 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   0358 63 61 74 65 73 20   511 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   0366 0D                  512 	.db 0x0d
   0367 0A                  513 	.db 0x0a
   0368 20 20 20 20 20 20   514 	.ascii "       CFG8266 /t TIM to change the inactivity time in secon"
        20 43 46 47 38 32
        36 36 20 2F 74 20
        54 49 4D 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
   03A4 64 73 20 74 6F 20   515 	.ascii "ds to disable radio               0-600 (0 means never disab"
        64 69 73 61 62 6C
        65 20 72 61 64 69
        6F 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 30 2D
        36 30 30 20 28 30
        20 6D 65 61 6E 73
        20 6E 65 76 65 72
        20 64 69 73 61 62
   03E0 6C 65 29            516 	.ascii "le)"
   03E3 0D                  517 	.db 0x0d
   03E4 0A                  518 	.db 0x0a
   03E5 45 78 2E 3A 20 20   519 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   0411 00                  520 	.db 0x00
   0412                     521 _chFiller2:
   0412 43                  522 	.db #0x43	; 67	'C'
   0413 46                  523 	.db #0x46	; 70	'F'
   0414 47                  524 	.db #0x47	; 71	'G'
   0415 38                  525 	.db #0x38	; 56	'8'
   0416 32                  526 	.db #0x32	; 50	'2'
   0417 36                  527 	.db #0x36	; 54	'6'
   0418 36                  528 	.db #0x36	; 54	'6'
   0419 20                  529 	.db #0x20	; 32
   041A 59                  530 	.db #0x59	; 89	'Y'
   041B 6F                  531 	.db #0x6f	; 111	'o'
   041C 75                  532 	.db #0x75	; 117	'u'
   041D 20                  533 	.db #0x20	; 32
   041E 68                  534 	.db #0x68	; 104	'h'
   041F 61                  535 	.db #0x61	; 97	'a'
   0420 76                  536 	.db #0x76	; 118	'v'
   0421 65                  537 	.db #0x65	; 101	'e'
   0422 20                  538 	.db #0x20	; 32
   0423 61                  539 	.db #0x61	; 97	'a'
   0424 20                  540 	.db #0x20	; 32
   0425 67                  541 	.db #0x67	; 103	'g'
   0426 6F                  542 	.db #0x6f	; 111	'o'
   0427 6F                  543 	.db #0x6f	; 111	'o'
   0428 64                  544 	.db #0x64	; 100	'd'
   0429 20                  545 	.db #0x20	; 32
   042A 74                  546 	.db #0x74	; 116	't'
   042B 69                  547 	.db #0x69	; 105	'i'
   042C 6D                  548 	.db #0x6d	; 109	'm'
   042D 65                  549 	.db #0x65	; 101	'e'
   042E 20                  550 	.db #0x20	; 32
   042F 72                  551 	.db #0x72	; 114	'r'
   0430 65                  552 	.db #0x65	; 101	'e'
   0431 61                  553 	.db #0x61	; 97	'a'
   0432 64                  554 	.db #0x64	; 100	'd'
   0433 69                  555 	.db #0x69	; 105	'i'
   0434 6E                  556 	.db #0x6e	; 110	'n'
   0435 67                  557 	.db #0x67	; 103	'g'
   0436 20                  558 	.db #0x20	; 32
   0437 74                  559 	.db #0x74	; 116	't'
   0438 68                  560 	.db #0x68	; 104	'h'
   0439 69                  561 	.db #0x69	; 105	'i'
   043A 73                  562 	.db #0x73	; 115	's'
   043B 20                  563 	.db #0x20	; 32
   043C 74                  564 	.db #0x74	; 116	't'
   043D 61                  565 	.db #0x61	; 97	'a'
   043E 6C                  566 	.db #0x6c	; 108	'l'
   043F 65                  567 	.db #0x65	; 101	'e'
   0440 20                  568 	.db #0x20	; 32
   0441 6F                  569 	.db #0x6f	; 111	'o'
   0442 66                  570 	.db #0x66	; 102	'f'
   0443 20                  571 	.db #0x20	; 32
   0444 61                  572 	.db #0x61	; 97	'a'
   0445 6E                  573 	.db #0x6e	; 110	'n'
   0446 20                  574 	.db #0x20	; 32
   0447 77                  575 	.db #0x77	; 119	'w'
   0448 65                  576 	.db #0x65	; 101	'e'
   0449 69                  577 	.db #0x69	; 105	'i'
   044A 72                  578 	.db #0x72	; 114	'r'
   044B 64                  579 	.db #0x64	; 100	'd'
   044C 20                  580 	.db #0x20	; 32
   044D 62                  581 	.db #0x62	; 98	'b'
   044E 65                  582 	.db #0x65	; 101	'e'
   044F 68                  583 	.db #0x68	; 104	'h'
   0450 61                  584 	.db #0x61	; 97	'a'
   0451 76                  585 	.db #0x76	; 118	'v'
   0452 69                  586 	.db #0x69	; 105	'i'
   0453 6F                  587 	.db #0x6f	; 111	'o'
   0454 72                  588 	.db #0x72	; 114	'r'
   0455 2C                  589 	.db #0x2c	; 44
   0456 20                  590 	.db #0x20	; 32
   0457 73                  591 	.db #0x73	; 115	's'
   0458 69                  592 	.db #0x69	; 105	'i'
   0459 74                  593 	.db #0x74	; 116	't'
   045A 20                  594 	.db #0x20	; 32
   045B 61                  595 	.db #0x61	; 97	'a'
   045C 6E                  596 	.db #0x6e	; 110	'n'
   045D 64                  597 	.db #0x64	; 100	'd'
   045E 20                  598 	.db #0x20	; 32
   045F 68                  599 	.db #0x68	; 104	'h'
   0460 61                  600 	.db #0x61	; 97	'a'
   0461 76                  601 	.db #0x76	; 118	'v'
   0462 65                  602 	.db #0x65	; 101	'e'
   0463 20                  603 	.db #0x20	; 32
   0464 66                  604 	.db #0x66	; 102	'f'
   0465 75                  605 	.db #0x75	; 117	'u'
   0466 6E                  606 	.db #0x6e	; 110	'n'
   0467 20                  607 	.db #0x20	; 32
   0468 61                  608 	.db #0x61	; 97	'a'
   0469 73                  609 	.db #0x73	; 115	's'
   046A 20                  610 	.db #0x20	; 32
   046B 74                  611 	.db #0x74	; 116	't'
   046C 68                  612 	.db #0x68	; 104	'h'
   046D 69                  613 	.db #0x69	; 105	'i'
   046E 73                  614 	.db #0x73	; 115	's'
   046F 20                  615 	.db #0x20	; 32
   0470 69                  616 	.db #0x69	; 105	'i'
   0471 73                  617 	.db #0x73	; 115	's'
   0472 20                  618 	.db #0x20	; 32
   0473 6F                  619 	.db #0x6f	; 111	'o'
   0474 76                  620 	.db #0x76	; 118	'v'
   0475 65                  621 	.db #0x65	; 101	'e'
   0476 72                  622 	.db #0x72	; 114	'r'
   0477 77                  623 	.db #0x77	; 119	'w'
   0478 72                  624 	.db #0x72	; 114	'r'
   0479 69                  625 	.db #0x69	; 105	'i'
   047A 74                  626 	.db #0x74	; 116	't'
   047B 74                  627 	.db #0x74	; 116	't'
   047C 65                  628 	.db #0x65	; 101	'e'
   047D 6E                  629 	.db #0x6e	; 110	'n'
   047E 21                  630 	.db #0x21	; 33
   047F 0D                  631 	.db #0x0d	; 13
   0480 0A                  632 	.db #0x0a	; 10
   0481 00                  633 	.db #0x00	; 0
   0482 00                  634 	.db #0x00	; 0
   0483 00                  635 	.db #0x00	; 0
   0484 00                  636 	.db #0x00	; 0
   0485 00                  637 	.db #0x00	; 0
   0486 00                  638 	.db #0x00	; 0
   0487 00                  639 	.db #0x00	; 0
   0488 00                  640 	.db #0x00	; 0
   0489 00                  641 	.db #0x00	; 0
   048A 00                  642 	.db #0x00	; 0
   048B 00                  643 	.db #0x00	; 0
   048C 00                  644 	.db #0x00	; 0
   048D 00                  645 	.db #0x00	; 0
   048E 00                  646 	.db #0x00	; 0
   048F 00                  647 	.db #0x00	; 0
   0490 00                  648 	.db #0x00	; 0
   0491 00                  649 	.db #0x00	; 0
                            650 ;src\CFG8266.c:69: unsigned int IsValidInput (char**argv, int argc, unsigned char *cServer, unsigned char *cFile, unsigned char *cPort)
                            651 ;	---------------------------------
                            652 ; Function IsValidInput
                            653 ; ---------------------------------
   0492                     654 _IsValidInput::
   0492 DD E5         [15]  655 	push	ix
   0494 DD 21 00 00   [14]  656 	ld	ix,#0
   0498 DD 39         [15]  657 	add	ix,sp
   049A F5            [11]  658 	push	af
   049B F5            [11]  659 	push	af
                            660 ;src\CFG8266.c:71: unsigned int ret = 1;
   049C 01 01 00      [10]  661 	ld	bc, #0x0001
                            662 ;src\CFG8266.c:72: unsigned char * Input = (unsigned char*)argv[0];
   049F DD 7E 04      [19]  663 	ld	a, 4 (ix)
   04A2 DD 77 FC      [19]  664 	ld	-4 (ix), a
   04A5 DD 7E 05      [19]  665 	ld	a, 5 (ix)
   04A8 DD 77 FD      [19]  666 	ld	-3 (ix), a
   04AB E1            [10]  667 	pop	hl
   04AC E5            [11]  668 	push	hl
   04AD 7E            [ 7]  669 	ld	a, (hl)
   04AE DD 77 FE      [19]  670 	ld	-2 (ix), a
   04B1 23            [ 6]  671 	inc	hl
   04B2 7E            [ 7]  672 	ld	a, (hl)
   04B3 DD 77 FF      [19]  673 	ld	-1 (ix), a
                            674 ;src\CFG8266.c:74: ucScan = 0;
   04B6 21r00r00      [10]  675 	ld	hl,#_ucScan + 0
   04B9 36 00         [10]  676 	ld	(hl), #0x00
                            677 ;src\CFG8266.c:76: if (argc)
   04BB DD 7E 07      [19]  678 	ld	a, 7 (ix)
   04BE DD B6 06      [19]  679 	or	a, 6 (ix)
   04C1 CAr53r07      [10]  680 	jp	Z, 00162$
                            681 ;src\CFG8266.c:78: if ((argc==1)||(argc==2)||(argc==4))
   04C4 DD 7E 06      [19]  682 	ld	a, 6 (ix)
   04C7 3D            [ 4]  683 	dec	a
   04C8 DD B6 07      [19]  684 	or	a, 7 (ix)
   04CB 3E 01         [ 7]  685 	ld	a, #0x01
   04CD 28 01         [12]  686 	jr	Z,00287$
   04CF AF            [ 4]  687 	xor	a, a
   04D0                     688 00287$:
   04D0 57            [ 4]  689 	ld	d, a
   04D1 B7            [ 4]  690 	or	a, a
   04D2 20 15         [12]  691 	jr	NZ,00156$
   04D4 DD 7E 06      [19]  692 	ld	a, 6 (ix)
   04D7 D6 02         [ 7]  693 	sub	a, #0x02
   04D9 DD B6 07      [19]  694 	or	a, 7 (ix)
   04DC 28 0B         [12]  695 	jr	Z,00156$
   04DE DD 7E 06      [19]  696 	ld	a, 6 (ix)
   04E1 D6 04         [ 7]  697 	sub	a, #0x04
   04E3 DD B6 07      [19]  698 	or	a, 7 (ix)
   04E6 C2r4Er07      [10]  699 	jp	NZ,00157$
   04E9                     700 00156$:
                            701 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   04E9 DD 6E FE      [19]  702 	ld	l, -2 (ix)
   04EC DD 66 FF      [19]  703 	ld	h, -1 (ix)
   04EF 7E            [ 7]  704 	ld	a, (hl)
   04F0 D6 2F         [ 7]  705 	sub	a, #0x2f
   04F2 3E 01         [ 7]  706 	ld	a, #0x01
   04F4 28 01         [12]  707 	jr	Z,00292$
   04F6 AF            [ 4]  708 	xor	a, a
   04F7                     709 00292$:
   04F7 5F            [ 4]  710 	ld	e, a
                            711 ;src\CFG8266.c:80: if ((argc==1)||(argc==2))
   04F8 7A            [ 4]  712 	ld	a, d
   04F9 B7            [ 4]  713 	or	a, a
   04FA 20 0B         [12]  714 	jr	NZ,00152$
   04FC DD 7E 06      [19]  715 	ld	a, 6 (ix)
   04FF D6 02         [ 7]  716 	sub	a, #0x02
   0501 DD B6 07      [19]  717 	or	a, 7 (ix)
   0504 C2r09r06      [10]  718 	jp	NZ,00153$
   0507                     719 00152$:
                            720 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0507 7B            [ 4]  721 	ld	a, e
   0508 B7            [ 4]  722 	or	a, a
   0509 28 18         [12]  723 	jr	Z,00132$
   050B DD 6E FE      [19]  724 	ld	l, -2 (ix)
   050E DD 66 FF      [19]  725 	ld	h, -1 (ix)
   0511 23            [ 6]  726 	inc	hl
   0512 7E            [ 7]  727 	ld	a, (hl)
   0513 FE 73         [ 7]  728 	cp	a, #0x73
   0515 28 04         [12]  729 	jr	Z,00131$
   0517 D6 53         [ 7]  730 	sub	a, #0x53
   0519 20 08         [12]  731 	jr	NZ,00132$
   051B                     732 00131$:
                            733 ;src\CFG8266.c:83: ucScan = 1;
   051B 21r00r00      [10]  734 	ld	hl,#_ucScan + 0
   051E 36 01         [10]  735 	ld	(hl), #0x01
   0520 C3r56r07      [10]  736 	jp	00163$
   0523                     737 00132$:
                            738 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   0523 7B            [ 4]  739 	ld	a, e
   0524 B7            [ 4]  740 	or	a, a
   0525 28 18         [12]  741 	jr	Z,00127$
   0527 DD 6E FE      [19]  742 	ld	l, -2 (ix)
   052A DD 66 FF      [19]  743 	ld	h, -1 (ix)
   052D 23            [ 6]  744 	inc	hl
   052E 7E            [ 7]  745 	ld	a, (hl)
   052F FE 6E         [ 7]  746 	cp	a, #0x6e
   0531 28 04         [12]  747 	jr	Z,00126$
   0533 D6 4E         [ 7]  748 	sub	a, #0x4e
   0535 20 08         [12]  749 	jr	NZ,00127$
   0537                     750 00126$:
                            751 ;src\CFG8266.c:85: ucNagleOff = 1;
   0537 21r09r00      [10]  752 	ld	hl,#_ucNagleOff + 0
   053A 36 01         [10]  753 	ld	(hl), #0x01
   053C C3r56r07      [10]  754 	jp	00163$
   053F                     755 00127$:
                            756 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   053F 7B            [ 4]  757 	ld	a, e
   0540 B7            [ 4]  758 	or	a, a
   0541 28 18         [12]  759 	jr	Z,00122$
   0543 DD 6E FE      [19]  760 	ld	l, -2 (ix)
   0546 DD 66 FF      [19]  761 	ld	h, -1 (ix)
   0549 23            [ 6]  762 	inc	hl
   054A 7E            [ 7]  763 	ld	a, (hl)
   054B FE 6D         [ 7]  764 	cp	a, #0x6d
   054D 28 04         [12]  765 	jr	Z,00121$
   054F D6 4D         [ 7]  766 	sub	a, #0x4d
   0551 20 08         [12]  767 	jr	NZ,00122$
   0553                     768 00121$:
                            769 ;src\CFG8266.c:87: ucNagleOn = 1;
   0553 21r0Ar00      [10]  770 	ld	hl,#_ucNagleOn + 0
   0556 36 01         [10]  771 	ld	(hl), #0x01
   0558 C3r56r07      [10]  772 	jp	00163$
   055B                     773 00122$:
                            774 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   055B 7B            [ 4]  775 	ld	a, e
   055C B7            [ 4]  776 	or	a, a
   055D 28 18         [12]  777 	jr	Z,00117$
   055F DD 6E FE      [19]  778 	ld	l, -2 (ix)
   0562 DD 66 FF      [19]  779 	ld	h, -1 (ix)
   0565 23            [ 6]  780 	inc	hl
   0566 7E            [ 7]  781 	ld	a, (hl)
   0567 FE 6F         [ 7]  782 	cp	a, #0x6f
   0569 28 04         [12]  783 	jr	Z,00116$
   056B D6 4F         [ 7]  784 	sub	a, #0x4f
   056D 20 08         [12]  785 	jr	NZ,00117$
   056F                     786 00116$:
                            787 ;src\CFG8266.c:89: ucRadioOff = 1;
   056F 21r0Br00      [10]  788 	ld	hl,#_ucRadioOff + 0
   0572 36 01         [10]  789 	ld	(hl), #0x01
   0574 C3r56r07      [10]  790 	jp	00163$
   0577                     791 00117$:
                            792 ;src\CFG8266.c:90: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   0577 7B            [ 4]  793 	ld	a, e
   0578 B7            [ 4]  794 	or	a, a
   0579 28 3E         [12]  795 	jr	Z,00112$
   057B D1            [10]  796 	pop	de
   057C E1            [10]  797 	pop	hl
   057D E5            [11]  798 	push	hl
   057E D5            [11]  799 	push	de
   057F 23            [ 6]  800 	inc	hl
   0580 7E            [ 7]  801 	ld	a, (hl)
   0581 FE 74         [ 7]  802 	cp	a, #0x74
   0583 28 04         [12]  803 	jr	Z,00111$
   0585 D6 54         [ 7]  804 	sub	a, #0x54
   0587 20 30         [12]  805 	jr	NZ,00112$
   0589                     806 00111$:
                            807 ;src\CFG8266.c:92: ucSetTimeout = 1;
   0589 21r0Cr00      [10]  808 	ld	hl,#_ucSetTimeout + 0
   058C 36 01         [10]  809 	ld	(hl), #0x01
                            810 ;src\CFG8266.c:93: Input = (unsigned char*)argv[1];
   058E E1            [10]  811 	pop	hl
   058F E5            [11]  812 	push	hl
   0590 23            [ 6]  813 	inc	hl
   0591 23            [ 6]  814 	inc	hl
   0592 5E            [ 7]  815 	ld	e, (hl)
   0593 23            [ 6]  816 	inc	hl
   0594 56            [ 7]  817 	ld	d, (hl)
                            818 ;src\CFG8266.c:94: uiTimeout = atoi (Input);
   0595 C5            [11]  819 	push	bc
   0596 D5            [11]  820 	push	de
   0597 CDr00r00      [17]  821 	call	_atoi
   059A F1            [10]  822 	pop	af
   059B C1            [10]  823 	pop	bc
   059C 22r0Dr00      [16]  824 	ld	(_uiTimeout), hl
                            825 ;src\CFG8266.c:95: if (uiTimeout > 600)
   059F 3E 58         [ 7]  826 	ld	a, #0x58
   05A1 FD 21r0Dr00   [14]  827 	ld	iy, #_uiTimeout
   05A5 FD BE 00      [19]  828 	cp	a, 0 (iy)
   05A8 3E 02         [ 7]  829 	ld	a, #0x02
   05AA FD 9E 01      [19]  830 	sbc	a, 1 (iy)
   05AD D2r56r07      [10]  831 	jp	NC, 00163$
                            832 ;src\CFG8266.c:96: uiTimeout = 600;
   05B0 21 58 02      [10]  833 	ld	hl, #0x0258
   05B3 22r0Dr00      [16]  834 	ld	(_uiTimeout), hl
   05B6 C3r56r07      [10]  835 	jp	00163$
   05B9                     836 00112$:
                            837 ;src\CFG8266.c:100: strcpy (cFile,Input);
   05B9 C5            [11]  838 	push	bc
   05BA DD 5E 0A      [19]  839 	ld	e, 10 (ix)
   05BD DD 56 0B      [19]  840 	ld	d, 11 (ix)
   05C0 DD 6E FE      [19]  841 	ld	l, -2 (ix)
   05C3 DD 66 FF      [19]  842 	ld	h, -1 (ix)
   05C6 AF            [ 4]  843 	xor	a, a
   05C7                     844 00310$:
   05C7 BE            [ 7]  845 	cp	a, (hl)
   05C8 ED A0         [16]  846 	ldi
   05CA 20 FB         [12]  847 	jr	NZ, 00310$
   05CC C1            [10]  848 	pop	bc
                            849 ;src\CFG8266.c:101: ucLocalUpdate = 1;
   05CD 21r07r00      [10]  850 	ld	hl,#_ucLocalUpdate + 0
   05D0 36 01         [10]  851 	ld	(hl), #0x01
                            852 ;src\CFG8266.c:102: if (argc==2)
   05D2 DD 7E 06      [19]  853 	ld	a, 6 (ix)
   05D5 D6 02         [ 7]  854 	sub	a, #0x02
   05D7 DD B6 07      [19]  855 	or	a, 7 (ix)
   05DA 20 25         [12]  856 	jr	NZ,00109$
                            857 ;src\CFG8266.c:104: Input = (unsigned char*)argv[1];
   05DC E1            [10]  858 	pop	hl
   05DD E5            [11]  859 	push	hl
   05DE 23            [ 6]  860 	inc	hl
   05DF 23            [ 6]  861 	inc	hl
   05E0 5E            [ 7]  862 	ld	e, (hl)
   05E1 23            [ 6]  863 	inc	hl
   05E2 56            [ 7]  864 	ld	d, (hl)
                            865 ;src\CFG8266.c:105: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   05E3 1A            [ 7]  866 	ld	a, (de)
   05E4 D6 2F         [ 7]  867 	sub	a, #0x2f
   05E6 20 13         [12]  868 	jr	NZ,00104$
   05E8 EB            [ 4]  869 	ex	de,hl
   05E9 23            [ 6]  870 	inc	hl
   05EA 7E            [ 7]  871 	ld	a, (hl)
   05EB FE 63         [ 7]  872 	cp	a, #0x63
   05ED 28 04         [12]  873 	jr	Z,00103$
   05EF D6 43         [ 7]  874 	sub	a, #0x43
   05F1 20 08         [12]  875 	jr	NZ,00104$
   05F3                     876 00103$:
                            877 ;src\CFG8266.c:106: ucIsFw=0;
   05F3 21r08r00      [10]  878 	ld	hl,#_ucIsFw + 0
   05F6 36 00         [10]  879 	ld	(hl), #0x00
   05F8 C3r56r07      [10]  880 	jp	00163$
   05FB                     881 00104$:
                            882 ;src\CFG8266.c:108: ret=0;
   05FB 01 00 00      [10]  883 	ld	bc, #0x0000
   05FE C3r56r07      [10]  884 	jp	00163$
   0601                     885 00109$:
                            886 ;src\CFG8266.c:112: ucIsFw=1;
   0601 21r08r00      [10]  887 	ld	hl,#_ucIsFw + 0
   0604 36 01         [10]  888 	ld	(hl), #0x01
   0606 C3r56r07      [10]  889 	jp	00163$
   0609                     890 00153$:
                            891 ;src\CFG8266.c:117: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   0609 7B            [ 4]  892 	ld	a, e
   060A B7            [ 4]  893 	or	a, a
   060B CArABr06      [10]  894 	jp	Z, 00148$
   060E DD 6E FE      [19]  895 	ld	l, -2 (ix)
   0611 DD 66 FF      [19]  896 	ld	h, -1 (ix)
   0614 23            [ 6]  897 	inc	hl
   0615 7E            [ 7]  898 	ld	a, (hl)
   0616 FE 75         [ 7]  899 	cp	a, #0x75
   0618 28 05         [12]  900 	jr	Z,00147$
   061A D6 55         [ 7]  901 	sub	a, #0x55
   061C C2rABr06      [10]  902 	jp	NZ,00148$
   061F                     903 00147$:
                            904 ;src\CFG8266.c:119: ucIsFw = 1;
   061F 21r08r00      [10]  905 	ld	hl,#_ucIsFw + 0
   0622 36 01         [10]  906 	ld	(hl), #0x01
                            907 ;src\CFG8266.c:120: Input = (unsigned char*)argv[2];
   0624 E1            [10]  908 	pop	hl
   0625 E5            [11]  909 	push	hl
   0626 11 04 00      [10]  910 	ld	de, #0x0004
   0629 19            [11]  911 	add	hl, de
   062A 5E            [ 7]  912 	ld	e, (hl)
   062B 23            [ 6]  913 	inc	hl
   062C 56            [ 7]  914 	ld	d, (hl)
                            915 ;src\CFG8266.c:121: if (strlen (Input)<7)
   062D C5            [11]  916 	push	bc
   062E D5            [11]  917 	push	de
   062F CDr00r00      [17]  918 	call	_strlen
   0632 F1            [10]  919 	pop	af
   0633 C1            [10]  920 	pop	bc
   0634 7D            [ 4]  921 	ld	a, l
   0635 D6 07         [ 7]  922 	sub	a, #0x07
   0637 7C            [ 4]  923 	ld	a, h
   0638 DE 00         [ 7]  924 	sbc	a, #0x00
   063A 30 69         [12]  925 	jr	NC,00137$
                            926 ;src\CFG8266.c:123: strcpy(cPort,Input);
   063C C5            [11]  927 	push	bc
   063D EB            [ 4]  928 	ex	de,hl
   063E DD 5E 0C      [19]  929 	ld	e, 12 (ix)
   0641 DD 56 0D      [19]  930 	ld	d, 13 (ix)
   0644 AF            [ 4]  931 	xor	a, a
   0645                     932 00321$:
   0645 BE            [ 7]  933 	cp	a, (hl)
   0646 ED A0         [16]  934 	ldi
   0648 20 FB         [12]  935 	jr	NZ, 00321$
   064A C1            [10]  936 	pop	bc
                            937 ;src\CFG8266.c:124: Input = (unsigned char*)argv[1];
   064B E1            [10]  938 	pop	hl
   064C E5            [11]  939 	push	hl
   064D 23            [ 6]  940 	inc	hl
   064E 23            [ 6]  941 	inc	hl
   064F 5E            [ 7]  942 	ld	e, (hl)
   0650 23            [ 6]  943 	inc	hl
   0651 66            [ 7]  944 	ld	h, (hl)
                            945 ;src\CFG8266.c:125: strcpy(cServer,Input);
   0652 C5            [11]  946 	push	bc
   0653 6B            [ 4]  947 	ld	l, e
   0654 DD 5E 08      [19]  948 	ld	e, 8 (ix)
   0657 DD 56 09      [19]  949 	ld	d, 9 (ix)
   065A AF            [ 4]  950 	xor	a, a
   065B                     951 00322$:
   065B BE            [ 7]  952 	cp	a, (hl)
   065C ED A0         [16]  953 	ldi
   065E 20 FB         [12]  954 	jr	NZ, 00322$
   0660 C1            [10]  955 	pop	bc
                            956 ;src\CFG8266.c:126: Input = (unsigned char*)argv[3];
   0661 E1            [10]  957 	pop	hl
   0662 E5            [11]  958 	push	hl
   0663 11 06 00      [10]  959 	ld	de, #0x0006
   0666 19            [11]  960 	add	hl, de
   0667 5E            [ 7]  961 	ld	e, (hl)
   0668 23            [ 6]  962 	inc	hl
   0669 66            [ 7]  963 	ld	h, (hl)
                            964 ;src\CFG8266.c:127: strcpy(cFile,Input);
   066A C5            [11]  965 	push	bc
   066B 6B            [ 4]  966 	ld	l, e
   066C DD 5E 0A      [19]  967 	ld	e, 10 (ix)
   066F DD 56 0B      [19]  968 	ld	d, 11 (ix)
   0672 AF            [ 4]  969 	xor	a, a
   0673                     970 00323$:
   0673 BE            [ 7]  971 	cp	a, (hl)
   0674 ED A0         [16]  972 	ldi
   0676 20 FB         [12]  973 	jr	NZ, 00323$
   0678 DD 6E 0C      [19]  974 	ld	l, 12 (ix)
   067B DD 66 0D      [19]  975 	ld	h, 13 (ix)
   067E E5            [11]  976 	push	hl
   067F CDr00r00      [17]  977 	call	_atol
   0682 F1            [10]  978 	pop	af
   0683 DD 75 FC      [19]  979 	ld	-4 (ix), l
   0686 DD 74 FD      [19]  980 	ld	-3 (ix), h
   0689 DD 73 FE      [19]  981 	ld	-2 (ix), e
   068C DD 72 FF      [19]  982 	ld	-1 (ix), d
   068F 11r03r00      [10]  983 	ld	de, #_lPort
   0692 21 02 00      [10]  984 	ld	hl, #2
   0695 39            [11]  985 	add	hl, sp
   0696 01 04 00      [10]  986 	ld	bc, #4
   0699 ED B0         [21]  987 	ldir
   069B C1            [10]  988 	pop	bc
                            989 ;src\CFG8266.c:129: uiPort = (lPort&0xffff);
   069C 2Ar03r00      [16]  990 	ld	hl, (_lPort)
   069F 22r01r00      [16]  991 	ld	(_uiPort), hl
   06A2 C3r56r07      [10]  992 	jp	00163$
   06A5                     993 00137$:
                            994 ;src\CFG8266.c:132: ret = 0;
   06A5 01 00 00      [10]  995 	ld	bc, #0x0000
   06A8 C3r56r07      [10]  996 	jp	00163$
   06AB                     997 00148$:
                            998 ;src\CFG8266.c:134: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   06AB 7B            [ 4]  999 	ld	a, e
   06AC B7            [ 4] 1000 	or	a, a
   06AD CAr49r07      [10] 1001 	jp	Z, 00143$
   06B0 D1            [10] 1002 	pop	de
   06B1 E1            [10] 1003 	pop	hl
   06B2 E5            [11] 1004 	push	hl
   06B3 D5            [11] 1005 	push	de
   06B4 23            [ 6] 1006 	inc	hl
   06B5 7E            [ 7] 1007 	ld	a, (hl)
   06B6 FE 63         [ 7] 1008 	cp	a, #0x63
   06B8 28 05         [12] 1009 	jr	Z,00142$
   06BA D6 43         [ 7] 1010 	sub	a, #0x43
   06BC C2r49r07      [10] 1011 	jp	NZ,00143$
   06BF                    1012 00142$:
                           1013 ;src\CFG8266.c:136: ucIsFw = 0;
   06BF 21r08r00      [10] 1014 	ld	hl,#_ucIsFw + 0
   06C2 36 00         [10] 1015 	ld	(hl), #0x00
                           1016 ;src\CFG8266.c:137: Input = (unsigned char*)argv[2];
   06C4 E1            [10] 1017 	pop	hl
   06C5 E5            [11] 1018 	push	hl
   06C6 11 04 00      [10] 1019 	ld	de, #0x0004
   06C9 19            [11] 1020 	add	hl, de
   06CA 5E            [ 7] 1021 	ld	e, (hl)
   06CB 23            [ 6] 1022 	inc	hl
   06CC 56            [ 7] 1023 	ld	d, (hl)
                           1024 ;src\CFG8266.c:138: if (strlen (Input)<7)
   06CD C5            [11] 1025 	push	bc
   06CE D5            [11] 1026 	push	de
   06CF CDr00r00      [17] 1027 	call	_strlen
   06D2 F1            [10] 1028 	pop	af
   06D3 C1            [10] 1029 	pop	bc
   06D4 7D            [ 4] 1030 	ld	a, l
   06D5 D6 07         [ 7] 1031 	sub	a, #0x07
   06D7 7C            [ 4] 1032 	ld	a, h
   06D8 DE 00         [ 7] 1033 	sbc	a, #0x00
   06DA 30 68         [12] 1034 	jr	NC,00140$
                           1035 ;src\CFG8266.c:140: strcpy(cPort,Input);
   06DC C5            [11] 1036 	push	bc
   06DD EB            [ 4] 1037 	ex	de,hl
   06DE DD 5E 0C      [19] 1038 	ld	e, 12 (ix)
   06E1 DD 56 0D      [19] 1039 	ld	d, 13 (ix)
   06E4 AF            [ 4] 1040 	xor	a, a
   06E5                    1041 00327$:
   06E5 BE            [ 7] 1042 	cp	a, (hl)
   06E6 ED A0         [16] 1043 	ldi
   06E8 20 FB         [12] 1044 	jr	NZ, 00327$
   06EA C1            [10] 1045 	pop	bc
                           1046 ;src\CFG8266.c:141: Input = (unsigned char*)argv[1];
   06EB E1            [10] 1047 	pop	hl
   06EC E5            [11] 1048 	push	hl
   06ED 23            [ 6] 1049 	inc	hl
   06EE 23            [ 6] 1050 	inc	hl
   06EF 5E            [ 7] 1051 	ld	e, (hl)
   06F0 23            [ 6] 1052 	inc	hl
   06F1 66            [ 7] 1053 	ld	h, (hl)
                           1054 ;src\CFG8266.c:142: strcpy(cServer,Input);
   06F2 C5            [11] 1055 	push	bc
   06F3 6B            [ 4] 1056 	ld	l, e
   06F4 DD 5E 08      [19] 1057 	ld	e, 8 (ix)
   06F7 DD 56 09      [19] 1058 	ld	d, 9 (ix)
   06FA AF            [ 4] 1059 	xor	a, a
   06FB                    1060 00328$:
   06FB BE            [ 7] 1061 	cp	a, (hl)
   06FC ED A0         [16] 1062 	ldi
   06FE 20 FB         [12] 1063 	jr	NZ, 00328$
   0700 C1            [10] 1064 	pop	bc
                           1065 ;src\CFG8266.c:143: Input = (unsigned char*)argv[3];
   0701 E1            [10] 1066 	pop	hl
   0702 E5            [11] 1067 	push	hl
   0703 11 06 00      [10] 1068 	ld	de, #0x0006
   0706 19            [11] 1069 	add	hl, de
   0707 5E            [ 7] 1070 	ld	e, (hl)
   0708 23            [ 6] 1071 	inc	hl
   0709 66            [ 7] 1072 	ld	h, (hl)
                           1073 ;src\CFG8266.c:144: strcpy(cFile,Input);
   070A C5            [11] 1074 	push	bc
   070B 6B            [ 4] 1075 	ld	l, e
   070C DD 5E 0A      [19] 1076 	ld	e, 10 (ix)
   070F DD 56 0B      [19] 1077 	ld	d, 11 (ix)
   0712 AF            [ 4] 1078 	xor	a, a
   0713                    1079 00329$:
   0713 BE            [ 7] 1080 	cp	a, (hl)
   0714 ED A0         [16] 1081 	ldi
   0716 20 FB         [12] 1082 	jr	NZ, 00329$
   0718 DD 6E 0C      [19] 1083 	ld	l, 12 (ix)
   071B DD 66 0D      [19] 1084 	ld	h, 13 (ix)
   071E E5            [11] 1085 	push	hl
   071F CDr00r00      [17] 1086 	call	_atol
   0722 F1            [10] 1087 	pop	af
   0723 DD 75 FC      [19] 1088 	ld	-4 (ix), l
   0726 DD 74 FD      [19] 1089 	ld	-3 (ix), h
   0729 DD 73 FE      [19] 1090 	ld	-2 (ix), e
   072C DD 72 FF      [19] 1091 	ld	-1 (ix), d
   072F 11r03r00      [10] 1092 	ld	de, #_lPort
   0732 21 02 00      [10] 1093 	ld	hl, #2
   0735 39            [11] 1094 	add	hl, sp
   0736 01 04 00      [10] 1095 	ld	bc, #4
   0739 ED B0         [21] 1096 	ldir
   073B C1            [10] 1097 	pop	bc
                           1098 ;src\CFG8266.c:146: uiPort = (lPort&0xffff);
   073C 2Ar03r00      [16] 1099 	ld	hl, (_lPort)
   073F 22r01r00      [16] 1100 	ld	(_uiPort), hl
   0742 18 12         [12] 1101 	jr	00163$
   0744                    1102 00140$:
                           1103 ;src\CFG8266.c:149: ret = 0;
   0744 01 00 00      [10] 1104 	ld	bc, #0x0000
   0747 18 0D         [12] 1105 	jr	00163$
   0749                    1106 00143$:
                           1107 ;src\CFG8266.c:152: ret = 0;
   0749 01 00 00      [10] 1108 	ld	bc, #0x0000
   074C 18 08         [12] 1109 	jr	00163$
   074E                    1110 00157$:
                           1111 ;src\CFG8266.c:156: ret = 0;
   074E 01 00 00      [10] 1112 	ld	bc, #0x0000
   0751 18 03         [12] 1113 	jr	00163$
   0753                    1114 00162$:
                           1115 ;src\CFG8266.c:159: ret=0;
   0753 01 00 00      [10] 1116 	ld	bc, #0x0000
   0756                    1117 00163$:
                           1118 ;src\CFG8266.c:161: return ret;
   0756 69            [ 4] 1119 	ld	l, c
   0757 60            [ 4] 1120 	ld	h, b
                           1121 ;src\CFG8266.c:162: }
   0758 DD F9         [10] 1122 	ld	sp, ix
   075A DD E1         [14] 1123 	pop	ix
   075C C9            [10] 1124 	ret
                           1125 ;src\CFG8266.c:164: void TxByte(char chTxByte)
                           1126 ;	---------------------------------
                           1127 ; Function TxByte
                           1128 ; ---------------------------------
   075D                    1129 _TxByte::
                           1130 ;src\CFG8266.c:166: while (myPort7&2);
   075D                    1131 00101$:
   075D DB 07         [11] 1132 	in	a, (_myPort7)
   075F CB 4F         [ 8] 1133 	bit	1, a
   0761 20 FA         [12] 1134 	jr	NZ,00101$
                           1135 ;src\CFG8266.c:170: myPort7 = chTxByte;
   0763 21 02 00      [10] 1136 	ld	hl, #2+0
   0766 39            [11] 1137 	add	hl, sp
   0767 7E            [ 7] 1138 	ld	a, (hl)
   0768 D3 07         [11] 1139 	out	(_myPort7), a
                           1140 ;src\CFG8266.c:171: }
   076A C9            [10] 1141 	ret
                           1142 ;src\CFG8266.c:173: char *ultostr(unsigned long value, char *ptr, int base)
                           1143 ;	---------------------------------
                           1144 ; Function ultostr
                           1145 ; ---------------------------------
   076B                    1146 _ultostr::
   076B DD E5         [15] 1147 	push	ix
   076D DD 21 00 00   [14] 1148 	ld	ix,#0
   0771 DD 39         [15] 1149 	add	ix,sp
   0773 21 F4 FF      [10] 1150 	ld	hl, #-12
   0776 39            [11] 1151 	add	hl, sp
   0777 F9            [ 6] 1152 	ld	sp, hl
                           1153 ;src\CFG8266.c:176: unsigned long tmp = value;
   0778 DD 4E 04      [19] 1154 	ld	c, 4 (ix)
   077B DD 46 05      [19] 1155 	ld	b, 5 (ix)
   077E DD 5E 06      [19] 1156 	ld	e, 6 (ix)
   0781 DD 56 07      [19] 1157 	ld	d, 7 (ix)
                           1158 ;src\CFG8266.c:179: if (NULL == ptr) //if null pointer
   0784 DD 7E 09      [19] 1159 	ld	a, 9 (ix)
   0787 DD B6 08      [19] 1160 	or	a, 8 (ix)
   078A 20 06         [12] 1161 	jr	NZ,00102$
                           1162 ;src\CFG8266.c:180: return NULL; //nothing to do
   078C 21 00 00      [10] 1163 	ld	hl, #0x0000
   078F C3rD4r08      [10] 1164 	jp	00118$
   0792                    1165 00102$:
                           1166 ;src\CFG8266.c:188: tmp = tmp/base;
   0792 DD 7E 0A      [19] 1167 	ld	a, 10 (ix)
   0795 DD 77 F8      [19] 1168 	ld	-8 (ix), a
   0798 DD 7E 0B      [19] 1169 	ld	a, 11 (ix)
   079B DD 77 F9      [19] 1170 	ld	-7 (ix), a
   079E 17            [ 4] 1171 	rla
   079F 9F            [ 4] 1172 	sbc	a, a
   07A0 DD 77 FA      [19] 1173 	ld	-6 (ix), a
   07A3 DD 77 FB      [19] 1174 	ld	-5 (ix), a
                           1175 ;src\CFG8266.c:182: if (tmp == 0) //if value is zero
   07A6 7A            [ 4] 1176 	ld	a, d
   07A7 B3            [ 4] 1177 	or	a, e
   07A8 B0            [ 4] 1178 	or	a, b
   07A9 B1            [ 4] 1179 	or	a, c
   07AA 20 04         [12] 1180 	jr	NZ,00123$
                           1181 ;src\CFG8266.c:183: ++count; //one digit
   07AC 0E 01         [ 7] 1182 	ld	c, #0x01
   07AE 18 2B         [12] 1183 	jr	00108$
                           1184 ;src\CFG8266.c:186: while(tmp > 0)
   07B0                    1185 00123$:
   07B0 AF            [ 4] 1186 	xor	a, a
   07B1 DD 77 FF      [19] 1187 	ld	-1 (ix), a
   07B4                    1188 00103$:
   07B4 7A            [ 4] 1189 	ld	a, d
   07B5 B3            [ 4] 1190 	or	a, e
   07B6 B0            [ 4] 1191 	or	a, b
   07B7 B1            [ 4] 1192 	or	a, c
   07B8 28 1E         [12] 1193 	jr	Z,00129$
                           1194 ;src\CFG8266.c:188: tmp = tmp/base;
   07BA DD 6E FA      [19] 1195 	ld	l, -6 (ix)
   07BD DD 66 FB      [19] 1196 	ld	h, -5 (ix)
   07C0 E5            [11] 1197 	push	hl
   07C1 DD 6E F8      [19] 1198 	ld	l, -8 (ix)
   07C4 DD 66 F9      [19] 1199 	ld	h, -7 (ix)
   07C7 E5            [11] 1200 	push	hl
   07C8 D5            [11] 1201 	push	de
   07C9 C5            [11] 1202 	push	bc
   07CA CDr00r00      [17] 1203 	call	__divulong
   07CD F1            [10] 1204 	pop	af
   07CE F1            [10] 1205 	pop	af
   07CF F1            [10] 1206 	pop	af
   07D0 F1            [10] 1207 	pop	af
   07D1 4D            [ 4] 1208 	ld	c, l
   07D2 44            [ 4] 1209 	ld	b, h
                           1210 ;src\CFG8266.c:189: ++count;
   07D3 DD 34 FF      [23] 1211 	inc	-1 (ix)
   07D6 18 DC         [12] 1212 	jr	00103$
   07D8                    1213 00129$:
   07D8 DD 4E FF      [19] 1214 	ld	c, -1 (ix)
   07DB                    1215 00108$:
                           1216 ;src\CFG8266.c:193: ptr += count; // so, after the LSB
   07DB DD 7E 08      [19] 1217 	ld	a, 8 (ix)
   07DE 81            [ 4] 1218 	add	a, c
   07DF DD 77 08      [19] 1219 	ld	8 (ix), a
   07E2 30 03         [12] 1220 	jr	NC,00166$
   07E4 DD 34 09      [23] 1221 	inc	9 (ix)
   07E7                    1222 00166$:
                           1223 ;src\CFG8266.c:194: *ptr = '\0'; // null terminator
   07E7 DD 4E 08      [19] 1224 	ld	c, 8 (ix)
   07EA DD 46 09      [19] 1225 	ld	b, 9 (ix)
   07ED AF            [ 4] 1226 	xor	a, a
   07EE 02            [ 7] 1227 	ld	(bc), a
                           1228 ;src\CFG8266.c:196: do
   07EF                    1229 00115$:
                           1230 ;src\CFG8266.c:198: t = value / base; // useful now (find remainder) as well later (next value of value)
   07EF DD 6E FA      [19] 1231 	ld	l, -6 (ix)
   07F2 DD 66 FB      [19] 1232 	ld	h, -5 (ix)
   07F5 E5            [11] 1233 	push	hl
   07F6 DD 6E F8      [19] 1234 	ld	l, -8 (ix)
   07F9 DD 66 F9      [19] 1235 	ld	h, -7 (ix)
   07FC E5            [11] 1236 	push	hl
   07FD DD 6E 06      [19] 1237 	ld	l, 6 (ix)
   0800 DD 66 07      [19] 1238 	ld	h, 7 (ix)
   0803 E5            [11] 1239 	push	hl
   0804 DD 6E 04      [19] 1240 	ld	l, 4 (ix)
   0807 DD 66 05      [19] 1241 	ld	h, 5 (ix)
   080A E5            [11] 1242 	push	hl
   080B CDr00r00      [17] 1243 	call	__divulong
   080E F1            [10] 1244 	pop	af
   080F F1            [10] 1245 	pop	af
   0810 F1            [10] 1246 	pop	af
   0811 F1            [10] 1247 	pop	af
   0812 4D            [ 4] 1248 	ld	c, l
   0813 44            [ 4] 1249 	ld	b, h
                           1250 ;src\CFG8266.c:199: res = value - base * t; // get what remains of dividing base
   0814 C5            [11] 1251 	push	bc
   0815 D5            [11] 1252 	push	de
   0816 D5            [11] 1253 	push	de
   0817 C5            [11] 1254 	push	bc
   0818 DD 6E FA      [19] 1255 	ld	l, -6 (ix)
   081B DD 66 FB      [19] 1256 	ld	h, -5 (ix)
   081E E5            [11] 1257 	push	hl
   081F DD 6E F8      [19] 1258 	ld	l, -8 (ix)
   0822 DD 66 F9      [19] 1259 	ld	h, -7 (ix)
   0825 E5            [11] 1260 	push	hl
   0826 CDr00r00      [17] 1261 	call	__mullong
   0829 F1            [10] 1262 	pop	af
   082A F1            [10] 1263 	pop	af
   082B F1            [10] 1264 	pop	af
   082C F1            [10] 1265 	pop	af
   082D DD 75 F4      [19] 1266 	ld	-12 (ix), l
   0830 DD 74 F5      [19] 1267 	ld	-11 (ix), h
   0833 DD 73 F6      [19] 1268 	ld	-10 (ix), e
   0836 DD 72 F7      [19] 1269 	ld	-9 (ix), d
   0839 D1            [10] 1270 	pop	de
   083A C1            [10] 1271 	pop	bc
   083B DD 7E 04      [19] 1272 	ld	a, 4 (ix)
   083E DD 96 F4      [19] 1273 	sub	a, -12 (ix)
   0841 DD 77 FC      [19] 1274 	ld	-4 (ix), a
   0844 DD 7E 05      [19] 1275 	ld	a, 5 (ix)
   0847 DD 9E F5      [19] 1276 	sbc	a, -11 (ix)
   084A DD 77 FD      [19] 1277 	ld	-3 (ix), a
   084D DD 7E 06      [19] 1278 	ld	a, 6 (ix)
   0850 DD 9E F6      [19] 1279 	sbc	a, -10 (ix)
   0853 DD 77 FE      [19] 1280 	ld	-2 (ix), a
   0856 DD 7E 07      [19] 1281 	ld	a, 7 (ix)
   0859 DD 9E F7      [19] 1282 	sbc	a, -9 (ix)
   085C DD 77 FF      [19] 1283 	ld	-1 (ix), a
                           1284 ;src\CFG8266.c:201: if (res < 10)
   085F DD 7E FC      [19] 1285 	ld	a, -4 (ix)
   0862 D6 0A         [ 7] 1286 	sub	a, #0x0a
   0864 DD 7E FD      [19] 1287 	ld	a, -3 (ix)
   0867 DE 00         [ 7] 1288 	sbc	a, #0x00
   0869 DD 7E FE      [19] 1289 	ld	a, -2 (ix)
   086C DE 00         [ 7] 1290 	sbc	a, #0x00
   086E DD 7E FF      [19] 1291 	ld	a, -1 (ix)
   0871 DE 00         [ 7] 1292 	sbc	a, #0x00
   0873 3E 00         [ 7] 1293 	ld	a, #0x00
   0875 17            [ 4] 1294 	rla
   0876 B7            [ 4] 1295 	or	a, a
   0877 28 15         [12] 1296 	jr	Z,00113$
                           1297 ;src\CFG8266.c:202: * -- ptr = '0' + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   0879 DD 6E 08      [19] 1298 	ld	l, 8 (ix)
   087C DD 66 09      [19] 1299 	ld	h, 9 (ix)
   087F 2B            [ 6] 1300 	dec	hl
   0880 DD 75 08      [19] 1301 	ld	8 (ix), l
   0883 DD 74 09      [19] 1302 	ld	9 (ix), h
   0886 DD 7E FC      [19] 1303 	ld	a, -4 (ix)
   0889 C6 30         [ 7] 1304 	add	a, #0x30
   088B 77            [ 7] 1305 	ld	(hl), a
   088C 18 2D         [12] 1306 	jr	00116$
   088E                    1307 00113$:
                           1308 ;src\CFG8266.c:203: else if ((res >= 10) && (res < 16)) // Otherwise is a HEX value and a digit above 9
   088E CB 47         [ 8] 1309 	bit	0, a
   0890 20 29         [12] 1310 	jr	NZ,00116$
   0892 DD 7E FC      [19] 1311 	ld	a, -4 (ix)
   0895 D6 10         [ 7] 1312 	sub	a, #0x10
   0897 DD 7E FD      [19] 1313 	ld	a, -3 (ix)
   089A DE 00         [ 7] 1314 	sbc	a, #0x00
   089C DD 7E FE      [19] 1315 	ld	a, -2 (ix)
   089F DE 00         [ 7] 1316 	sbc	a, #0x00
   08A1 DD 7E FF      [19] 1317 	ld	a, -1 (ix)
   08A4 DE 00         [ 7] 1318 	sbc	a, #0x00
   08A6 30 13         [12] 1319 	jr	NC,00116$
                           1320 ;src\CFG8266.c:204: * --ptr = 'A' - 10 + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   08A8 DD 6E 08      [19] 1321 	ld	l, 8 (ix)
   08AB DD 66 09      [19] 1322 	ld	h, 9 (ix)
   08AE 2B            [ 6] 1323 	dec	hl
   08AF DD 75 08      [19] 1324 	ld	8 (ix), l
   08B2 DD 74 09      [19] 1325 	ld	9 (ix), h
   08B5 DD 7E FC      [19] 1326 	ld	a, -4 (ix)
   08B8 C6 37         [ 7] 1327 	add	a, #0x37
   08BA 77            [ 7] 1328 	ld	(hl), a
   08BB                    1329 00116$:
                           1330 ;src\CFG8266.c:205: } while ((value = t) != 0); //value is now t, and if t is other than zero, still work to do
   08BB DD 71 04      [19] 1331 	ld	4 (ix), c
   08BE DD 70 05      [19] 1332 	ld	5 (ix), b
   08C1 DD 73 06      [19] 1333 	ld	6 (ix), e
   08C4 DD 72 07      [19] 1334 	ld	7 (ix), d
   08C7 7A            [ 4] 1335 	ld	a, d
   08C8 B3            [ 4] 1336 	or	a, e
   08C9 B0            [ 4] 1337 	or	a, b
   08CA B1            [ 4] 1338 	or	a, c
   08CB C2rEFr07      [10] 1339 	jp	NZ, 00115$
                           1340 ;src\CFG8266.c:207: return(ptr); // and return own pointer as successful conversion has been made
   08CE DD 6E 08      [19] 1341 	ld	l, 8 (ix)
   08D1 DD 66 09      [19] 1342 	ld	h, 9 (ix)
   08D4                    1343 00118$:
                           1344 ;src\CFG8266.c:208: }
   08D4 DD F9         [10] 1345 	ld	sp, ix
   08D6 DD E1         [14] 1346 	pop	ix
   08D8 C9            [10] 1347 	ret
                           1348 ;src\CFG8266.c:210: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData, unsigned char *uchData2, unsigned int uiDataSize2)
                           1349 ;	---------------------------------
                           1350 ; Function WaitForRXData
                           1351 ; ---------------------------------
   08D9                    1352 _WaitForRXData::
   08D9 DD E5         [15] 1353 	push	ix
   08DB DD 21 00 00   [14] 1354 	ld	ix,#0
   08DF DD 39         [15] 1355 	add	ix,sp
   08E1 21 EE FF      [10] 1356 	ld	hl, #-18
   08E4 39            [11] 1357 	add	hl, sp
   08E5 F9            [ 6] 1358 	ld	sp, hl
                           1359 ;src\CFG8266.c:212: bool bReturn = false;
   08E6 AF            [ 4] 1360 	xor	a, a
   08E7 DD 77 F0      [19] 1361 	ld	-16 (ix), a
                           1362 ;src\CFG8266.c:217: unsigned int i = 0;
   08EA AF            [ 4] 1363 	xor	a, a
   08EB DD 77 FE      [19] 1364 	ld	-2 (ix), a
   08EE DD 77 FF      [19] 1365 	ld	-1 (ix), a
                           1366 ;src\CFG8266.c:219: if (bShowReceivedData)
   08F1 DD 7E 0B      [19] 1367 	ld	a, 11 (ix)
   08F4 B7            [ 4] 1368 	or	a, a
   08F5 28 6B         [12] 1369 	jr	Z,00104$
                           1370 ;src\CFG8266.c:221: printf ("Waiting for: ");
   08F7 21r74r0B      [10] 1371 	ld	hl, #___str_2
   08FA E5            [11] 1372 	push	hl
   08FB CDr00r00      [17] 1373 	call	_printf
   08FE F1            [10] 1374 	pop	af
                           1375 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   08FF 01 00 00      [10] 1376 	ld	bc, #0x0000
   0902                    1377 00144$:
   0902 79            [ 4] 1378 	ld	a, c
   0903 DD 96 06      [19] 1379 	sub	a, 6 (ix)
   0906 78            [ 4] 1380 	ld	a, b
   0907 DD 9E 07      [19] 1381 	sbc	a, 7 (ix)
   090A 30 19         [12] 1382 	jr	NC,00101$
                           1383 ;src\CFG8266.c:223: printf("%c",uchData[i]);
   090C DD 6E 04      [19] 1384 	ld	l, 4 (ix)
   090F DD 66 05      [19] 1385 	ld	h, 5 (ix)
   0912 09            [11] 1386 	add	hl, bc
   0913 5E            [ 7] 1387 	ld	e, (hl)
   0914 16 00         [ 7] 1388 	ld	d, #0x00
   0916 C5            [11] 1389 	push	bc
   0917 D5            [11] 1390 	push	de
   0918 21r82r0B      [10] 1391 	ld	hl, #___str_3
   091B E5            [11] 1392 	push	hl
   091C CDr00r00      [17] 1393 	call	_printf
   091F F1            [10] 1394 	pop	af
   0920 F1            [10] 1395 	pop	af
   0921 C1            [10] 1396 	pop	bc
                           1397 ;src\CFG8266.c:222: for (i=0;i<uiDataSize;++i)
   0922 03            [ 6] 1398 	inc	bc
   0923 18 DD         [12] 1399 	jr	00144$
   0925                    1400 00101$:
                           1401 ;src\CFG8266.c:224: printf (" / ");
   0925 21r85r0B      [10] 1402 	ld	hl, #___str_4
   0928 E5            [11] 1403 	push	hl
   0929 CDr00r00      [17] 1404 	call	_printf
   092C F1            [10] 1405 	pop	af
                           1406 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   092D 01 00 00      [10] 1407 	ld	bc, #0x0000
   0930                    1408 00147$:
   0930 79            [ 4] 1409 	ld	a, c
   0931 DD 96 06      [19] 1410 	sub	a, 6 (ix)
   0934 78            [ 4] 1411 	ld	a, b
   0935 DD 9E 07      [19] 1412 	sbc	a, 7 (ix)
   0938 30 19         [12] 1413 	jr	NC,00102$
                           1414 ;src\CFG8266.c:226: printf("{%x}",uchData[i]);
   093A DD 6E 04      [19] 1415 	ld	l, 4 (ix)
   093D DD 66 05      [19] 1416 	ld	h, 5 (ix)
   0940 09            [11] 1417 	add	hl, bc
   0941 5E            [ 7] 1418 	ld	e, (hl)
   0942 16 00         [ 7] 1419 	ld	d, #0x00
   0944 C5            [11] 1420 	push	bc
   0945 D5            [11] 1421 	push	de
   0946 21r89r0B      [10] 1422 	ld	hl, #___str_5
   0949 E5            [11] 1423 	push	hl
   094A CDr00r00      [17] 1424 	call	_printf
   094D F1            [10] 1425 	pop	af
   094E F1            [10] 1426 	pop	af
   094F C1            [10] 1427 	pop	bc
                           1428 ;src\CFG8266.c:225: for (i=0;i<uiDataSize;++i)
   0950 03            [ 6] 1429 	inc	bc
   0951 18 DD         [12] 1430 	jr	00147$
   0953                    1431 00102$:
                           1432 ;src\CFG8266.c:227: printf ("\r\n");
   0953 21r8Er0B      [10] 1433 	ld	hl, #___str_7
   0956 E5            [11] 1434 	push	hl
   0957 CDr00r00      [17] 1435 	call	_puts
   095A F1            [10] 1436 	pop	af
                           1437 ;src\CFG8266.c:228: i = 0;
   095B AF            [ 4] 1438 	xor	a, a
   095C DD 77 FE      [19] 1439 	ld	-2 (ix), a
   095F DD 77 FF      [19] 1440 	ld	-1 (ix), a
   0962                    1441 00104$:
                           1442 ;src\CFG8266.c:231: Timeout1 = TickCount + 9; //Drives the animation every 9 ticks or so
   0962 FD 21 9E FC   [14] 1443 	ld	iy, #_TickCount
   0966 FD 7E 00      [19] 1444 	ld	a, 0 (iy)
   0969 C6 09         [ 7] 1445 	add	a, #0x09
   096B DD 77 F1      [19] 1446 	ld	-15 (ix), a
   096E FD 7E 01      [19] 1447 	ld	a, 1 (iy)
   0971 CE 00         [ 7] 1448 	adc	a, #0x00
   0973 DD 77 F2      [19] 1449 	ld	-14 (ix), a
                           1450 ;src\CFG8266.c:232: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   0976 FD 7E 00      [19] 1451 	ld	a, 0 (iy)
   0979 DD 86 08      [19] 1452 	add	a, 8 (ix)
   097C 4F            [ 4] 1453 	ld	c, a
   097D FD 7E 01      [19] 1454 	ld	a, 1 (iy)
   0980 DD 8E 09      [19] 1455 	adc	a, 9 (ix)
   0983 47            [ 4] 1456 	ld	b, a
   0984 DD 71 F3      [19] 1457 	ld	-13 (ix), c
   0987 DD 70 F4      [19] 1458 	ld	-12 (ix), b
                           1459 ;src\CFG8266.c:234: ResponseSt = 0;
   098A AF            [ 4] 1460 	xor	a, a
   098B DD 77 FA      [19] 1461 	ld	-6 (ix), a
   098E DD 77 FB      [19] 1462 	ld	-5 (ix), a
                           1463 ;src\CFG8266.c:235: ResponseSt2 = 0;
   0991 AF            [ 4] 1464 	xor	a, a
   0992 DD 77 FC      [19] 1465 	ld	-4 (ix), a
   0995 DD 77 FD      [19] 1466 	ld	-3 (ix), a
                           1467 ;src\CFG8266.c:237: do
   0998 DD 7E 06      [19] 1468 	ld	a, 6 (ix)
   099B D6 02         [ 7] 1469 	sub	a, #0x02
   099D DD B6 07      [19] 1470 	or	a, 7 (ix)
   09A0 3E 01         [ 7] 1471 	ld	a, #0x01
   09A2 28 01         [12] 1472 	jr	Z,00269$
   09A4 AF            [ 4] 1473 	xor	a, a
   09A5                    1474 00269$:
   09A5 DD 77 F5      [19] 1475 	ld	-11 (ix), a
   09A8 3E 84         [ 7] 1476 	ld	a, #0x84
   09AA DD BE 08      [19] 1477 	cp	a, 8 (ix)
   09AD 3E 03         [ 7] 1478 	ld	a, #0x03
   09AF DD 9E 09      [19] 1479 	sbc	a, 9 (ix)
   09B2 3E 00         [ 7] 1480 	ld	a, #0x00
   09B4 17            [ 4] 1481 	rla
   09B5 DD 77 F6      [19] 1482 	ld	-10 (ix), a
   09B8                    1483 00138$:
                           1484 ;src\CFG8266.c:239: if (Timeout>900)
   09B8 DD 7E F6      [19] 1485 	ld	a, -10 (ix)
   09BB B7            [ 4] 1486 	or	a, a
   09BC 28 60         [12] 1487 	jr	Z,00108$
                           1488 ;src\CFG8266.c:241: if (TickCount>Timeout1)
   09BE DD 7E F1      [19] 1489 	ld	a, -15 (ix)
   09C1 FD 21 9E FC   [14] 1490 	ld	iy, #_TickCount
   09C5 FD 96 00      [19] 1491 	sub	a, 0 (iy)
   09C8 DD 7E F2      [19] 1492 	ld	a, -14 (ix)
   09CB FD 9E 01      [19] 1493 	sbc	a, 1 (iy)
   09CE 30 4E         [12] 1494 	jr	NC,00108$
                           1495 ;src\CFG8266.c:243: Timeout1 = TickCount + 9;
   09D0 FD 7E 00      [19] 1496 	ld	a, 0 (iy)
   09D3 C6 09         [ 7] 1497 	add	a, #0x09
   09D5 DD 77 F1      [19] 1498 	ld	-15 (ix), a
   09D8 FD 7E 01      [19] 1499 	ld	a, 1 (iy)
   09DB CE 00         [ 7] 1500 	adc	a, #0x00
   09DD DD 77 F2      [19] 1501 	ld	-14 (ix), a
                           1502 ;src\CFG8266.c:244: printf("%s",advance[i%8]); // next char
   09E0 DD 7E FE      [19] 1503 	ld	a, -2 (ix)
   09E3 E6 07         [ 7] 1504 	and	a, #0x07
   09E5 DD 77 F8      [19] 1505 	ld	-8 (ix), a
   09E8 DD 36 F9 00   [19] 1506 	ld	-7 (ix), #0x00
   09EC 4F            [ 4] 1507 	ld	c, a
   09ED 06 00         [ 7] 1508 	ld	b, #0x00
   09EF 69            [ 4] 1509 	ld	l, c
   09F0 60            [ 4] 1510 	ld	h, b
   09F1 29            [11] 1511 	add	hl, hl
   09F2 29            [11] 1512 	add	hl, hl
   09F3 29            [11] 1513 	add	hl, hl
   09F4 09            [11] 1514 	add	hl, bc
   09F5 E3            [19] 1515 	ex	(sp), hl
   09F6 3Er2D         [ 7] 1516 	ld	a, #<(_advance)
   09F8 DD 86 EE      [19] 1517 	add	a, -18 (ix)
   09FB DD 77 F8      [19] 1518 	ld	-8 (ix), a
   09FE 3Es01         [ 7] 1519 	ld	a, #>(_advance)
   0A00 DD 8E EF      [19] 1520 	adc	a, -17 (ix)
   0A03 DD 77 F9      [19] 1521 	ld	-7 (ix), a
   0A06 DD 6E F8      [19] 1522 	ld	l, -8 (ix)
   0A09 DD 66 F9      [19] 1523 	ld	h, -7 (ix)
   0A0C E5            [11] 1524 	push	hl
   0A0D 21r90r0B      [10] 1525 	ld	hl, #___str_8
   0A10 E5            [11] 1526 	push	hl
   0A11 CDr00r00      [17] 1527 	call	_printf
   0A14 F1            [10] 1528 	pop	af
   0A15 F1            [10] 1529 	pop	af
                           1530 ;src\CFG8266.c:245: ++i;
   0A16 DD 34 FE      [23] 1531 	inc	-2 (ix)
   0A19 20 03         [12] 1532 	jr	NZ,00270$
   0A1B DD 34 FF      [23] 1533 	inc	-1 (ix)
   0A1E                    1534 00270$:
   0A1E                    1535 00108$:
                           1536 ;src\CFG8266.c:248: if(UartRXData())
   0A1E DB 07         [11] 1537 	in	a, (_myPort7)
   0A20 0F            [ 4] 1538 	rrca
   0A21 D2r46r0B      [10] 1539 	jp	NC,00135$
                           1540 ;src\CFG8266.c:250: rx_data = GetUARTData();
   0A24 DB 06         [11] 1541 	in	a, (_myPort6)
   0A26 DD 77 F7      [19] 1542 	ld	-9 (ix), a
                           1543 ;src\CFG8266.c:252: if (rx_data == uchData[ResponseSt])
   0A29 DD 7E 04      [19] 1544 	ld	a, 4 (ix)
   0A2C DD 86 FA      [19] 1545 	add	a, -6 (ix)
   0A2F 6F            [ 4] 1546 	ld	l, a
   0A30 DD 7E 05      [19] 1547 	ld	a, 5 (ix)
   0A33 DD 8E FB      [19] 1548 	adc	a, -5 (ix)
   0A36 67            [ 4] 1549 	ld	h, a
   0A37 7E            [ 7] 1550 	ld	a, (hl)
   0A38 DD 77 F9      [19] 1551 	ld	-7 (ix), a
   0A3B DD 7E F7      [19] 1552 	ld	a, -9 (ix)
   0A3E DD 96 F9      [19] 1553 	sub	a, -7 (ix)
   0A41 20 36         [12] 1554 	jr	NZ,00126$
                           1555 ;src\CFG8266.c:254: if (bShowReceivedData)
   0A43 DD 7E 0B      [19] 1556 	ld	a, 11 (ix)
   0A46 B7            [ 4] 1557 	or	a, a
   0A47 28 0F         [12] 1558 	jr	Z,00110$
                           1559 ;src\CFG8266.c:255: printf ("{%x}",rx_data);
   0A49 DD 4E F7      [19] 1560 	ld	c, -9 (ix)
   0A4C 06 00         [ 7] 1561 	ld	b, #0x00
   0A4E C5            [11] 1562 	push	bc
   0A4F 21r89r0B      [10] 1563 	ld	hl, #___str_5
   0A52 E5            [11] 1564 	push	hl
   0A53 CDr00r00      [17] 1565 	call	_printf
   0A56 F1            [10] 1566 	pop	af
   0A57 F1            [10] 1567 	pop	af
   0A58                    1568 00110$:
                           1569 ;src\CFG8266.c:256: ++ResponseSt;
   0A58 DD 34 FA      [23] 1570 	inc	-6 (ix)
   0A5B 20 03         [12] 1571 	jr	NZ,00274$
   0A5D DD 34 FB      [23] 1572 	inc	-5 (ix)
   0A60                    1573 00274$:
                           1574 ;src\CFG8266.c:257: if (ResponseSt == uiDataSize)
   0A60 DD 7E FA      [19] 1575 	ld	a, -6 (ix)
   0A63 DD 96 06      [19] 1576 	sub	a, 6 (ix)
   0A66 C2rFBr0A      [10] 1577 	jp	NZ,00127$
   0A69 DD 7E FB      [19] 1578 	ld	a, -5 (ix)
   0A6C DD 96 07      [19] 1579 	sub	a, 7 (ix)
   0A6F C2rFBr0A      [10] 1580 	jp	NZ,00127$
                           1581 ;src\CFG8266.c:259: bReturn = 1;
   0A72 DD 36 F0 01   [19] 1582 	ld	-16 (ix), #0x01
                           1583 ;src\CFG8266.c:260: break;
   0A76 C3r59r0B      [10] 1584 	jp	00140$
   0A79                    1585 00126$:
                           1586 ;src\CFG8266.c:265: if ((ResponseSt)&&(bShowReceivedData))
   0A79 DD 7E FB      [19] 1587 	ld	a, -5 (ix)
   0A7C DD B6 FA      [19] 1588 	or	a, -6 (ix)
   0A7F 28 20         [12] 1589 	jr	Z,00116$
   0A81 DD 7E 0B      [19] 1590 	ld	a, 11 (ix)
   0A84 B7            [ 4] 1591 	or	a, a
   0A85 28 1A         [12] 1592 	jr	Z,00116$
                           1593 ;src\CFG8266.c:266: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   0A87 DD 5E F9      [19] 1594 	ld	e, -7 (ix)
   0A8A 16 00         [ 7] 1595 	ld	d, #0x00
   0A8C DD 4E F7      [19] 1596 	ld	c, -9 (ix)
   0A8F 06 00         [ 7] 1597 	ld	b, #0x00
   0A91 D5            [11] 1598 	push	de
   0A92 C5            [11] 1599 	push	bc
   0A93 21r93r0B      [10] 1600 	ld	hl, #___str_9
   0A96 E5            [11] 1601 	push	hl
   0A97 CDr00r00      [17] 1602 	call	_printf
   0A9A 21 06 00      [10] 1603 	ld	hl, #6
   0A9D 39            [11] 1604 	add	hl, sp
   0A9E F9            [ 6] 1605 	ld	sp, hl
   0A9F 18 15         [12] 1606 	jr	00117$
   0AA1                    1607 00116$:
                           1608 ;src\CFG8266.c:267: else if (bShowReceivedData)
   0AA1 DD 7E 0B      [19] 1609 	ld	a, 11 (ix)
   0AA4 B7            [ 4] 1610 	or	a, a
   0AA5 28 0F         [12] 1611 	jr	Z,00117$
                           1612 ;src\CFG8266.c:268: printf ("}%x{",rx_data);
   0AA7 DD 4E F7      [19] 1613 	ld	c, -9 (ix)
   0AAA 06 00         [ 7] 1614 	ld	b, #0x00
   0AAC C5            [11] 1615 	push	bc
   0AAD 21rA0r0B      [10] 1616 	ld	hl, #___str_10
   0AB0 E5            [11] 1617 	push	hl
   0AB1 CDr00r00      [17] 1618 	call	_printf
   0AB4 F1            [10] 1619 	pop	af
   0AB5 F1            [10] 1620 	pop	af
   0AB6                    1621 00117$:
                           1622 ;src\CFG8266.c:269: if ((uiDataSize==2)&&(ResponseSt==1))
   0AB6 DD 7E F5      [19] 1623 	ld	a, -11 (ix)
   0AB9 B7            [ 4] 1624 	or	a, a
   0ABA 28 38         [12] 1625 	jr	Z,00123$
   0ABC DD 7E FA      [19] 1626 	ld	a, -6 (ix)
   0ABF 3D            [ 4] 1627 	dec	a
   0AC0 DD B6 FB      [19] 1628 	or	a, -5 (ix)
   0AC3 20 2F         [12] 1629 	jr	NZ,00123$
                           1630 ;src\CFG8266.c:271: if ((bVerbose)&&(!uchData2))
   0AC5 DD 7E 0A      [19] 1631 	ld	a, 10 (ix)
   0AC8 B7            [ 4] 1632 	or	a, a
   0AC9 28 24         [12] 1633 	jr	Z,00120$
   0ACB DD 7E 0D      [19] 1634 	ld	a, 13 (ix)
   0ACE DD B6 0C      [19] 1635 	or	a, 12 (ix)
   0AD1 20 1C         [12] 1636 	jr	NZ,00120$
                           1637 ;src\CFG8266.c:272: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   0AD3 DD 6E 04      [19] 1638 	ld	l, 4 (ix)
   0AD6 DD 66 05      [19] 1639 	ld	h, 5 (ix)
   0AD9 5E            [ 7] 1640 	ld	e, (hl)
   0ADA 16 00         [ 7] 1641 	ld	d, #0x00
   0ADC DD 4E F7      [19] 1642 	ld	c, -9 (ix)
   0ADF 06 00         [ 7] 1643 	ld	b, #0x00
   0AE1 D5            [11] 1644 	push	de
   0AE2 C5            [11] 1645 	push	bc
   0AE3 21rA5r0B      [10] 1646 	ld	hl, #___str_11
   0AE6 E5            [11] 1647 	push	hl
   0AE7 CDr00r00      [17] 1648 	call	_printf
   0AEA 21 06 00      [10] 1649 	ld	hl, #6
   0AED 39            [11] 1650 	add	hl, sp
   0AEE F9            [ 6] 1651 	ld	sp, hl
   0AEF                    1652 00120$:
                           1653 ;src\CFG8266.c:273: return false;
   0AEF 2E 00         [ 7] 1654 	ld	l, #0x00
   0AF1 C3r6Fr0B      [10] 1655 	jp	00149$
   0AF4                    1656 00123$:
                           1657 ;src\CFG8266.c:275: ResponseSt = 0;
   0AF4 AF            [ 4] 1658 	xor	a, a
   0AF5 DD 77 FA      [19] 1659 	ld	-6 (ix), a
   0AF8 DD 77 FB      [19] 1660 	ld	-5 (ix), a
   0AFB                    1661 00127$:
                           1662 ;src\CFG8266.c:278: if ((uchData2)&&(rx_data == uchData2[ResponseSt2]))
   0AFB DD 7E 0D      [19] 1663 	ld	a, 13 (ix)
   0AFE DD B6 0C      [19] 1664 	or	a, 12 (ix)
   0B01 28 3C         [12] 1665 	jr	Z,00131$
   0B03 DD 7E 0C      [19] 1666 	ld	a, 12 (ix)
   0B06 DD 86 FC      [19] 1667 	add	a, -4 (ix)
   0B09 DD 77 F8      [19] 1668 	ld	-8 (ix), a
   0B0C DD 7E 0D      [19] 1669 	ld	a, 13 (ix)
   0B0F DD 8E FD      [19] 1670 	adc	a, -3 (ix)
   0B12 DD 77 F9      [19] 1671 	ld	-7 (ix), a
   0B15 DD 6E F8      [19] 1672 	ld	l, -8 (ix)
   0B18 DD 66 F9      [19] 1673 	ld	h, -7 (ix)
   0B1B DD 7E F7      [19] 1674 	ld	a,-9 (ix)
   0B1E 96            [ 7] 1675 	sub	a,(hl)
   0B1F 20 1E         [12] 1676 	jr	NZ,00131$
                           1677 ;src\CFG8266.c:280: ++ResponseSt2;
   0B21 DD 34 FC      [23] 1678 	inc	-4 (ix)
   0B24 20 03         [12] 1679 	jr	NZ,00281$
   0B26 DD 34 FD      [23] 1680 	inc	-3 (ix)
   0B29                    1681 00281$:
                           1682 ;src\CFG8266.c:281: if (ResponseSt2 == uiDataSize2)
   0B29 DD 7E FC      [19] 1683 	ld	a, -4 (ix)
   0B2C DD 96 0E      [19] 1684 	sub	a, 14 (ix)
   0B2F 20 15         [12] 1685 	jr	NZ,00135$
   0B31 DD 7E FD      [19] 1686 	ld	a, -3 (ix)
   0B34 DD 96 0F      [19] 1687 	sub	a, 15 (ix)
   0B37 20 0D         [12] 1688 	jr	NZ,00135$
                           1689 ;src\CFG8266.c:283: bReturn = 2;
   0B39 DD 36 F0 02   [19] 1690 	ld	-16 (ix), #0x02
                           1691 ;src\CFG8266.c:284: break;
   0B3D 18 1A         [12] 1692 	jr	00140$
   0B3F                    1693 00131$:
                           1694 ;src\CFG8266.c:288: ResponseSt2 = 0;
   0B3F AF            [ 4] 1695 	xor	a, a
   0B40 DD 77 FC      [19] 1696 	ld	-4 (ix), a
   0B43 DD 77 FD      [19] 1697 	ld	-3 (ix), a
   0B46                    1698 00135$:
                           1699 ;src\CFG8266.c:291: if (TickCount>Timeout2)
   0B46 DD 7E F3      [19] 1700 	ld	a, -13 (ix)
   0B49 FD 21 9E FC   [14] 1701 	ld	iy, #_TickCount
   0B4D FD 96 00      [19] 1702 	sub	a, 0 (iy)
   0B50 DD 7E F4      [19] 1703 	ld	a, -12 (ix)
   0B53 FD 9E 01      [19] 1704 	sbc	a, 1 (iy)
   0B56 D2rB8r09      [10] 1705 	jp	NC, 00138$
                           1706 ;src\CFG8266.c:294: while (1);
   0B59                    1707 00140$:
                           1708 ;src\CFG8266.c:296: if (Timeout>900)
   0B59 DD 7E F6      [19] 1709 	ld	a, -10 (ix)
   0B5C B7            [ 4] 1710 	or	a, a
   0B5D 28 0D         [12] 1711 	jr	Z,00142$
                           1712 ;src\CFG8266.c:297: printf("%s",aDone); // clear line
   0B5F 21r75r01      [10] 1713 	ld	hl, #_aDone
   0B62 E5            [11] 1714 	push	hl
   0B63 21r90r0B      [10] 1715 	ld	hl, #___str_8
   0B66 E5            [11] 1716 	push	hl
   0B67 CDr00r00      [17] 1717 	call	_printf
   0B6A F1            [10] 1718 	pop	af
   0B6B F1            [10] 1719 	pop	af
   0B6C                    1720 00142$:
                           1721 ;src\CFG8266.c:299: return bReturn;
   0B6C DD 6E F0      [19] 1722 	ld	l, -16 (ix)
   0B6F                    1723 00149$:
                           1724 ;src\CFG8266.c:300: }
   0B6F DD F9         [10] 1725 	ld	sp, ix
   0B71 DD E1         [14] 1726 	pop	ix
   0B73 C9            [10] 1727 	ret
   0B74                    1728 ___str_2:
   0B74 57 61 69 74 69 6E  1729 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   0B81 00                 1730 	.db 0x00
   0B82                    1731 ___str_3:
   0B82 25 63              1732 	.ascii "%c"
   0B84 00                 1733 	.db 0x00
   0B85                    1734 ___str_4:
   0B85 20 2F 20           1735 	.ascii " / "
   0B88 00                 1736 	.db 0x00
   0B89                    1737 ___str_5:
   0B89 7B 25 78 7D        1738 	.ascii "{%x}"
   0B8D 00                 1739 	.db 0x00
   0B8E                    1740 ___str_7:
   0B8E 0D                 1741 	.db 0x0d
   0B8F 00                 1742 	.db 0x00
   0B90                    1743 ___str_8:
   0B90 25 73              1744 	.ascii "%s"
   0B92 00                 1745 	.db 0x00
   0B93                    1746 ___str_9:
   0B93 7B 25 78 7D 20 21  1747 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0B9F 00                 1748 	.db 0x00
   0BA0                    1749 ___str_10:
   0BA0 7D 25 78 7B        1750 	.ascii "}%x{"
   0BA4 00                 1751 	.db 0x00
   0BA5                    1752 ___str_11:
   0BA5 45 72 72 6F 72 20  1753 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0BBE 0D                 1754 	.db 0x0d
   0BBF 0A                 1755 	.db 0x0a
   0BC0 00                 1756 	.db 0x00
                           1757 ;src\CFG8266.c:302: void FinishUpdate (bool bSendReset)
                           1758 ;	---------------------------------
                           1759 ; Function FinishUpdate
                           1760 ; ---------------------------------
   0BC1                    1761 _FinishUpdate::
   0BC1 DD E5         [15] 1762 	push	ix
   0BC3 DD 21 00 00   [14] 1763 	ld	ix,#0
   0BC7 DD 39         [15] 1764 	add	ix,sp
   0BC9 F5            [11] 1765 	push	af
   0BCA F5            [11] 1766 	push	af
                           1767 ;src\CFG8266.c:304: unsigned int iRetries = 3;
   0BCB 21 03 00      [10] 1768 	ld	hl, #0x0003
   0BCE E3            [19] 1769 	ex	(sp), hl
                           1770 ;src\CFG8266.c:308: bool bReset = bSendReset;
   0BCF DD 7E 04      [19] 1771 	ld	a, 4 (ix)
   0BD2 DD 77 FE      [19] 1772 	ld	-2 (ix), a
                           1773 ;src\CFG8266.c:310: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0BD5 21r3Cr0D      [10] 1774 	ld	hl, #___str_13
   0BD8 E5            [11] 1775 	push	hl
   0BD9 CDr00r00      [17] 1776 	call	_puts
   0BDC F1            [10] 1777 	pop	af
                           1778 ;src\CFG8266.c:312: do
   0BDD DD 36 FF 02   [19] 1779 	ld	-1 (ix), #0x02
   0BE1                    1780 00135$:
                           1781 ;src\CFG8266.c:314: bRet = true;
   0BE1 2E 01         [ 7] 1782 	ld	l, #0x01
                           1783 ;src\CFG8266.c:315: --ucRetries;
   0BE3 DD 35 FF      [23] 1784 	dec	-1 (ix)
                           1785 ;src\CFG8266.c:316: if (bReset)
   0BE6 DD 7E FE      [19] 1786 	ld	a, -2 (ix)
   0BE9 B7            [ 4] 1787 	or	a, a
   0BEA 28 0C         [12] 1788 	jr	Z,00154$
                           1789 ;src\CFG8266.c:317: TxByte('R'); //Request Reset
   0BEC E5            [11] 1790 	push	hl
   0BED 3E 52         [ 7] 1791 	ld	a, #0x52
   0BEF F5            [11] 1792 	push	af
   0BF0 33            [ 6] 1793 	inc	sp
   0BF1 CDr5Dr07      [17] 1794 	call	_TxByte
   0BF4 33            [ 6] 1795 	inc	sp
   0BF5 E1            [10] 1796 	pop	hl
   0BF6 18 49         [12] 1797 	jr	00110$
                           1798 ;src\CFG8266.c:320: do
   0BF8                    1799 00154$:
   0BF8 D1            [10] 1800 	pop	de
   0BF9 D5            [11] 1801 	push	de
                           1802 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BFA                    1803 00152$:
   0BFA 3E 3C         [ 7] 1804 	ld	a, #0x3c
   0BFC                    1805 00140$:
                           1806 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0BFC 76            [ 4] 1807 	halt
                           1808 ;src\CFG8266.c:322: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BFD 3D            [ 4] 1809 	dec	a
   0BFE 20 FC         [12] 1810 	jr	NZ,00140$
                           1811 ;src\CFG8266.c:324: TxByte('E'); //End Update
   0C00 D5            [11] 1812 	push	de
   0C01 3E 45         [ 7] 1813 	ld	a, #0x45
   0C03 F5            [11] 1814 	push	af
   0C04 33            [ 6] 1815 	inc	sp
   0C05 CDr5Dr07      [17] 1816 	call	_TxByte
   0C08 33            [ 6] 1817 	inc	sp
   0C09 21 00 00      [10] 1818 	ld	hl, #0x0000
   0C0C E5            [11] 1819 	push	hl
   0C0D 2E 00         [ 7] 1820 	ld	l, #0x00
   0C0F E5            [11] 1821 	push	hl
   0C10 AF            [ 4] 1822 	xor	a, a
   0C11 57            [ 4] 1823 	ld	d,a
   0C12 1E 01         [ 7] 1824 	ld	e,#0x01
   0C14 D5            [11] 1825 	push	de
   0C15 21 08 07      [10] 1826 	ld	hl, #0x0708
   0C18 E5            [11] 1827 	push	hl
   0C19 21 02 00      [10] 1828 	ld	hl, #0x0002
   0C1C E5            [11] 1829 	push	hl
   0C1D 21r09r01      [10] 1830 	ld	hl, #_endUpdate
   0C20 E5            [11] 1831 	push	hl
   0C21 CDrD9r08      [17] 1832 	call	_WaitForRXData
   0C24 FD 21 0C 00   [14] 1833 	ld	iy, #12
   0C28 FD 39         [15] 1834 	add	iy, sp
   0C2A FD F9         [10] 1835 	ld	sp, iy
   0C2C D1            [10] 1836 	pop	de
                           1837 ;src\CFG8266.c:326: iRetries--;
   0C2D 1B            [ 6] 1838 	dec	de
                           1839 ;src\CFG8266.c:328: while ((!bRet)&&(iRetries));
   0C2E 7D            [ 4] 1840 	ld	a, l
   0C2F B7            [ 4] 1841 	or	a, a
   0C30 20 04         [12] 1842 	jr	NZ,00170$
   0C32 7A            [ 4] 1843 	ld	a, d
   0C33 B3            [ 4] 1844 	or	a, e
   0C34 20 C4         [12] 1845 	jr	NZ,00152$
   0C36                    1846 00170$:
   0C36 33            [ 6] 1847 	inc	sp
   0C37 33            [ 6] 1848 	inc	sp
   0C38 D5            [11] 1849 	push	de
                           1850 ;src\CFG8266.c:330: if (bRet)
   0C39 7D            [ 4] 1851 	ld	a, l
   0C3A B7            [ 4] 1852 	or	a, a
   0C3B 28 04         [12] 1853 	jr	Z,00110$
                           1854 ;src\CFG8266.c:331: bReset=true;
   0C3D DD 36 FE 01   [19] 1855 	ld	-2 (ix), #0x01
   0C41                    1856 00110$:
                           1857 ;src\CFG8266.c:334: if (!bRet)
   0C41 7D            [ 4] 1858 	ld	a, l
   0C42 B7            [ 4] 1859 	or	a, a
   0C43 20 0B         [12] 1860 	jr	NZ,00133$
                           1861 ;src\CFG8266.c:335: printf("\rTimeout waiting to end update...\r\n");
   0C45 21r6Fr0D      [10] 1862 	ld	hl, #___str_15
   0C48 E5            [11] 1863 	push	hl
   0C49 CDr00r00      [17] 1864 	call	_puts
   0C4C F1            [10] 1865 	pop	af
   0C4D C3r30r0D      [10] 1866 	jp	00136$
   0C50                    1867 00133$:
                           1868 ;src\CFG8266.c:338: if (ucRetries)
   0C50 DD 7E FF      [19] 1869 	ld	a, -1 (ix)
   0C53 B7            [ 4] 1870 	or	a, a
   0C54 28 18         [12] 1871 	jr	Z,00115$
                           1872 ;src\CFG8266.c:340: if (ucIsFw)
   0C56 3Ar08r00      [13] 1873 	ld	a,(#_ucIsFw + 0)
   0C59 B7            [ 4] 1874 	or	a, a
   0C5A 28 0A         [12] 1875 	jr	Z,00112$
                           1876 ;src\CFG8266.c:341: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0C5C 21r92r0D      [10] 1877 	ld	hl, #___str_17
   0C5F E5            [11] 1878 	push	hl
   0C60 CDr00r00      [17] 1879 	call	_puts
   0C63 F1            [10] 1880 	pop	af
   0C64 18 08         [12] 1881 	jr	00115$
   0C66                    1882 00112$:
                           1883 ;src\CFG8266.c:343: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0C66 21rC5r0D      [10] 1884 	ld	hl, #___str_19
   0C69 E5            [11] 1885 	push	hl
   0C6A CDr00r00      [17] 1886 	call	_puts
   0C6D F1            [10] 1887 	pop	af
   0C6E                    1888 00115$:
                           1889 ;src\CFG8266.c:346: if (WaitForRXData(responseReady2,7,2700,false,false,NULL,0)) //Wait up to 45 seconds
   0C6E 21 00 00      [10] 1890 	ld	hl, #0x0000
   0C71 E5            [11] 1891 	push	hl
   0C72 2E 00         [ 7] 1892 	ld	l, #0x00
   0C74 E5            [11] 1893 	push	hl
   0C75 AF            [ 4] 1894 	xor	a, a
   0C76 F5            [11] 1895 	push	af
   0C77 33            [ 6] 1896 	inc	sp
   0C78 AF            [ 4] 1897 	xor	a, a
   0C79 F5            [11] 1898 	push	af
   0C7A 33            [ 6] 1899 	inc	sp
   0C7B 21 8C 0A      [10] 1900 	ld	hl, #0x0a8c
   0C7E E5            [11] 1901 	push	hl
   0C7F 21 07 00      [10] 1902 	ld	hl, #0x0007
   0C82 E5            [11] 1903 	push	hl
   0C83 21r7Br01      [10] 1904 	ld	hl, #_responseReady2
   0C86 E5            [11] 1905 	push	hl
   0C87 CDrD9r08      [17] 1906 	call	_WaitForRXData
   0C8A FD 21 0C 00   [14] 1907 	ld	iy, #12
   0C8E FD 39         [15] 1908 	add	iy, sp
   0C90 FD F9         [10] 1909 	ld	sp, iy
   0C92 7D            [ 4] 1910 	ld	a, l
   0C93 B7            [ 4] 1911 	or	a, a
   0C94 CAr22r0D      [10] 1912 	jp	Z, 00130$
                           1913 ;src\CFG8266.c:348: if (!ucIsFw)
   0C97 3Ar08r00      [13] 1914 	ld	a,(#_ucIsFw + 0)
   0C9A B7            [ 4] 1915 	or	a, a
   0C9B C2r18r0D      [10] 1916 	jp	NZ, 00125$
                           1917 ;src\CFG8266.c:350: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0C9E 21rFCr0D      [10] 1918 	ld	hl, #___str_21
   0CA1 E5            [11] 1919 	push	hl
   0CA2 CDr00r00      [17] 1920 	call	_puts
   0CA5 F1            [10] 1921 	pop	af
                           1922 ;src\CFG8266.c:352: do
   0CA6 DD 36 FE 0A   [19] 1923 	ld	-2 (ix), #0x0a
   0CAA AF            [ 4] 1924 	xor	a, a
   0CAB DD 77 FF      [19] 1925 	ld	-1 (ix), a
                           1926 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0CAE                    1927 00162$:
   0CAE 3E 3C         [ 7] 1928 	ld	a, #0x3c
   0CB0                    1929 00142$:
                           1930 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0CB0 76            [ 4] 1931 	halt
                           1932 ;src\CFG8266.c:354: for (uchHalt=60;uchHalt>0;--uchHalt)
   0CB1 3D            [ 4] 1933 	dec	a
   0CB2 20 FC         [12] 1934 	jr	NZ,00142$
                           1935 ;src\CFG8266.c:356: TxByte('I'); //End Update
   0CB4 3E 49         [ 7] 1936 	ld	a, #0x49
   0CB6 F5            [11] 1937 	push	af
   0CB7 33            [ 6] 1938 	inc	sp
   0CB8 CDr5Dr07      [17] 1939 	call	_TxByte
   0CBB 33            [ 6] 1940 	inc	sp
                           1941 ;src\CFG8266.c:357: bRet = WaitForRXData(certificateDone,2,3600,false,false,NULL,0); //Wait up to 1 minute, certificate index creation takes time
   0CBC 21 00 00      [10] 1942 	ld	hl, #0x0000
   0CBF E5            [11] 1943 	push	hl
   0CC0 2E 00         [ 7] 1944 	ld	l, #0x00
   0CC2 E5            [11] 1945 	push	hl
   0CC3 AF            [ 4] 1946 	xor	a, a
   0CC4 F5            [11] 1947 	push	af
   0CC5 33            [ 6] 1948 	inc	sp
   0CC6 AF            [ 4] 1949 	xor	a, a
   0CC7 F5            [11] 1950 	push	af
   0CC8 33            [ 6] 1951 	inc	sp
   0CC9 21 10 0E      [10] 1952 	ld	hl, #0x0e10
   0CCC E5            [11] 1953 	push	hl
   0CCD 21 02 00      [10] 1954 	ld	hl, #0x0002
   0CD0 E5            [11] 1955 	push	hl
   0CD1 21r0Cr01      [10] 1956 	ld	hl, #_certificateDone
   0CD4 E5            [11] 1957 	push	hl
   0CD5 CDrD9r08      [17] 1958 	call	_WaitForRXData
   0CD8 FD 21 0C 00   [14] 1959 	ld	iy, #12
   0CDC FD 39         [15] 1960 	add	iy, sp
   0CDE FD F9         [10] 1961 	ld	sp, iy
   0CE0 DD 75 FD      [19] 1962 	ld	-3 (ix), l
                           1963 ;src\CFG8266.c:358: iRetries--;
   0CE3 DD 6E FE      [19] 1964 	ld	l, -2 (ix)
   0CE6 DD 66 FF      [19] 1965 	ld	h, -1 (ix)
   0CE9 2B            [ 6] 1966 	dec	hl
   0CEA DD 75 FE      [19] 1967 	ld	-2 (ix), l
   0CED DD 74 FF      [19] 1968 	ld	-1 (ix), h
                           1969 ;src\CFG8266.c:360: while ((!bRet)&&(iRetries));
   0CF0 DD 7E FD      [19] 1970 	ld	a, -3 (ix)
   0CF3 B7            [ 4] 1971 	or	a, a
   0CF4 20 08         [12] 1972 	jr	NZ,00120$
   0CF6 DD 7E FF      [19] 1973 	ld	a, -1 (ix)
   0CF9 DD B6 FE      [19] 1974 	or	a, -2 (ix)
   0CFC 20 B0         [12] 1975 	jr	NZ,00162$
   0CFE                    1976 00120$:
                           1977 ;src\CFG8266.c:361: if (bRet)
   0CFE DD 7E FD      [19] 1978 	ld	a, -3 (ix)
   0D01 B7            [ 4] 1979 	or	a, a
   0D02 28 0A         [12] 1980 	jr	Z,00122$
                           1981 ;src\CFG8266.c:362: printf("\rDone!                                \r\n");
   0D04 21r38r0E      [10] 1982 	ld	hl, #___str_23
   0D07 E5            [11] 1983 	push	hl
   0D08 CDr00r00      [17] 1984 	call	_puts
   0D0B F1            [10] 1985 	pop	af
   0D0C 18 29         [12] 1986 	jr	00137$
   0D0E                    1987 00122$:
                           1988 ;src\CFG8266.c:364: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0D0E 21r60r0E      [10] 1989 	ld	hl, #___str_25
   0D11 E5            [11] 1990 	push	hl
   0D12 CDr00r00      [17] 1991 	call	_puts
   0D15 F1            [10] 1992 	pop	af
   0D16 18 1F         [12] 1993 	jr	00137$
   0D18                    1994 00125$:
                           1995 ;src\CFG8266.c:367: printf("\rDone!                              \r\n");
   0D18 21r9Ar0E      [10] 1996 	ld	hl, #___str_27
   0D1B E5            [11] 1997 	push	hl
   0D1C CDr00r00      [17] 1998 	call	_puts
   0D1F F1            [10] 1999 	pop	af
                           2000 ;src\CFG8266.c:368: break;
   0D20 18 15         [12] 2001 	jr	00137$
   0D22                    2002 00130$:
                           2003 ;src\CFG8266.c:371: if (!ucRetries)
   0D22 DD 7E FF      [19] 2004 	ld	a, -1 (ix)
   0D25 B7            [ 4] 2005 	or	a, a
   0D26 20 08         [12] 2006 	jr	NZ,00136$
                           2007 ;src\CFG8266.c:372: printf("\rTimeout error\r\n");
   0D28 21rC0r0E      [10] 2008 	ld	hl, #___str_29
   0D2B E5            [11] 2009 	push	hl
   0D2C CDr00r00      [17] 2010 	call	_puts
   0D2F F1            [10] 2011 	pop	af
   0D30                    2012 00136$:
                           2013 ;src\CFG8266.c:375: while (ucRetries);
   0D30 DD 7E FF      [19] 2014 	ld	a, -1 (ix)
   0D33 B7            [ 4] 2015 	or	a, a
   0D34 C2rE1r0B      [10] 2016 	jp	NZ, 00135$
   0D37                    2017 00137$:
                           2018 ;src\CFG8266.c:377: return;
                           2019 ;src\CFG8266.c:378: }
   0D37 DD F9         [10] 2020 	ld	sp, ix
   0D39 DD E1         [14] 2021 	pop	ix
   0D3B C9            [10] 2022 	ret
   0D3C                    2023 ___str_13:
   0D3C 0D                 2024 	.db 0x0d
   0D3D 46 69 6E 69 73 68  2025 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0D6D 0D                 2026 	.db 0x0d
   0D6E 00                 2027 	.db 0x00
   0D6F                    2028 ___str_15:
   0D6F 0D                 2029 	.db 0x0d
   0D70 54 69 6D 65 6F 75  2030 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0D90 0D                 2031 	.db 0x0d
   0D91 00                 2032 	.db 0x00
   0D92                    2033 ___str_17:
   0D92 0D                 2034 	.db 0x0d
   0D93 46 69 72 6D 77 61  2035 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0DC3 0D                 2036 	.db 0x0d
   0DC4 00                 2037 	.db 0x00
   0DC5                    2038 ___str_19:
   0DC5 0D                 2039 	.db 0x0d
   0DC6 43 65 72 74 69 66  2040 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0DFA 0D                 2041 	.db 0x0d
   0DFB 00                 2042 	.db 0x00
   0DFC                    2043 ___str_21:
   0DFC 0D                 2044 	.db 0x0d
   0DFD 45 53 50 20 52 65  2045 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0E36 0D                 2046 	.db 0x0d
   0E37 00                 2047 	.db 0x00
   0E38                    2048 ___str_23:
   0E38 0D                 2049 	.db 0x0d
   0E39 44 6F 6E 65 21 20  2050 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0E5E 0D                 2051 	.db 0x0d
   0E5F 00                 2052 	.db 0x00
   0E60                    2053 ___str_25:
   0E60 0D                 2054 	.db 0x0d
   0E61 44 6F 6E 65 2C 20  2055 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0E98 0D                 2056 	.db 0x0d
   0E99 00                 2057 	.db 0x00
   0E9A                    2058 ___str_27:
   0E9A 0D                 2059 	.db 0x0d
   0E9B 44 6F 6E 65 21 20  2060 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0EBE 0D                 2061 	.db 0x0d
   0EBF 00                 2062 	.db 0x00
   0EC0                    2063 ___str_29:
   0EC0 0D                 2064 	.db 0x0d
   0EC1 54 69 6D 65 6F 75  2065 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0ECE 0D                 2066 	.db 0x0d
   0ECF 00                 2067 	.db 0x00
                           2068 ;src\CFG8266.c:380: int main(char** argv, int argc)
                           2069 ;	---------------------------------
                           2070 ; Function main
                           2071 ; ---------------------------------
   0ED0                    2072 _main::
   0ED0 DD E5         [15] 2073 	push	ix
   0ED2 DD 21 00 00   [14] 2074 	ld	ix,#0
   0ED6 DD 39         [15] 2075 	add	ix,sp
   0ED8 21 A4 EF      [10] 2076 	ld	hl, #-4188
   0EDB 39            [11] 2077 	add	hl, sp
   0EDC F9            [ 6] 2078 	ld	sp, hl
                           2079 ;src\CFG8266.c:397: unsigned char ucFirstBlock = 1;
   0EDD DD 36 F5 01   [19] 2080 	ld	-11 (ix), #0x01
                           2081 ;src\CFG8266.c:415: ucLocalUpdate = 0;
   0EE1 21r07r00      [10] 2082 	ld	hl,#_ucLocalUpdate + 0
   0EE4 36 00         [10] 2083 	ld	(hl), #0x00
                           2084 ;src\CFG8266.c:416: ucNagleOff = 0;
   0EE6 21r09r00      [10] 2085 	ld	hl,#_ucNagleOff + 0
   0EE9 36 00         [10] 2086 	ld	(hl), #0x00
                           2087 ;src\CFG8266.c:417: ucNagleOn = 0;
   0EEB 21r0Ar00      [10] 2088 	ld	hl,#_ucNagleOn + 0
   0EEE 36 00         [10] 2089 	ld	(hl), #0x00
                           2090 ;src\CFG8266.c:418: ucRadioOff = 0;
   0EF0 21r0Br00      [10] 2091 	ld	hl,#_ucRadioOff + 0
   0EF3 36 00         [10] 2092 	ld	(hl), #0x00
                           2093 ;src\CFG8266.c:419: ucSetTimeout = 0;
   0EF5 21r0Cr00      [10] 2094 	ld	hl,#_ucSetTimeout + 0
   0EF8 36 00         [10] 2095 	ld	(hl), #0x00
                           2096 ;src\CFG8266.c:420: ucScanPage = 0;
   0EFA AF            [ 4] 2097 	xor	a, a
   0EFB DD 77 EF      [19] 2098 	ld	-17 (ix), a
                           2099 ;src\CFG8266.c:422: ucVerMajor = 0;
   0EFE AF            [ 4] 2100 	xor	a, a
   0EFF DD 77 FF      [19] 2101 	ld	-1 (ix), a
                           2102 ;src\CFG8266.c:423: ucVerMinor = 0;
   0F02 AF            [ 4] 2103 	xor	a, a
   0F03 DD 77 FE      [19] 2104 	ld	-2 (ix), a
                           2105 ;src\CFG8266.c:424: TickCount = 0; //this guarantees no leap for 18 minutes, more than enough so we do not need to check for jiffy leaping
   0F06 21 00 00      [10] 2106 	ld	hl, #0x0000
   0F09 22 9E FC      [16] 2107 	ld	(_TickCount), hl
                           2108 ;src\CFG8266.c:426: printf("> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0F0C 21r65r21      [10] 2109 	ld	hl, #___str_31
   0F0F E5            [11] 2110 	push	hl
   0F10 CDr00r00      [17] 2111 	call	_puts
   0F13 F1            [10] 2112 	pop	af
                           2113 ;src\CFG8266.c:428: if (IsValidInput(argv, argc, ucServer, ucFile, ucPort))
   0F14 21 45 10      [10] 2114 	ld	hl, #4165
   0F17 39            [11] 2115 	add	hl, sp
   0F18 DD 75 FC      [19] 2116 	ld	-4 (ix), l
   0F1B DD 74 FD      [19] 2117 	ld	-3 (ix), h
   0F1E DD 7E FC      [19] 2118 	ld	a, -4 (ix)
   0F21 DD 77 FA      [19] 2119 	ld	-6 (ix), a
   0F24 DD 7E FD      [19] 2120 	ld	a, -3 (ix)
   0F27 DD 77 FB      [19] 2121 	ld	-5 (ix), a
   0F2A 21 19 0F      [10] 2122 	ld	hl, #3865
   0F2D 39            [11] 2123 	add	hl, sp
   0F2E DD 75 FC      [19] 2124 	ld	-4 (ix), l
   0F31 DD 74 FD      [19] 2125 	ld	-3 (ix), h
   0F34 EB            [ 4] 2126 	ex	de,hl
   0F35 21 ED 0D      [10] 2127 	ld	hl, #3565
   0F38 39            [11] 2128 	add	hl, sp
   0F39 DD 75 F6      [19] 2129 	ld	-10 (ix), l
   0F3C DD 74 F7      [19] 2130 	ld	-9 (ix), h
   0F3F 4D            [ 4] 2131 	ld	c, l
   0F40 44            [ 4] 2132 	ld	b, h
   0F41 DD 6E FA      [19] 2133 	ld	l, -6 (ix)
   0F44 DD 66 FB      [19] 2134 	ld	h, -5 (ix)
   0F47 E5            [11] 2135 	push	hl
   0F48 D5            [11] 2136 	push	de
   0F49 C5            [11] 2137 	push	bc
   0F4A DD 6E 06      [19] 2138 	ld	l, 6 (ix)
   0F4D DD 66 07      [19] 2139 	ld	h, 7 (ix)
   0F50 E5            [11] 2140 	push	hl
   0F51 DD 6E 04      [19] 2141 	ld	l, 4 (ix)
   0F54 DD 66 05      [19] 2142 	ld	h, 5 (ix)
   0F57 E5            [11] 2143 	push	hl
   0F58 CDr92r04      [17] 2144 	call	_IsValidInput
   0F5B FD 21 0A 00   [14] 2145 	ld	iy, #10
   0F5F FD 39         [15] 2146 	add	iy, sp
   0F61 FD F9         [10] 2147 	ld	sp, iy
   0F63 DD 75 FA      [19] 2148 	ld	-6 (ix), l
   0F66 DD 74 FB      [19] 2149 	ld	-5 (ix), h
   0F69 7C            [ 4] 2150 	ld	a, h
   0F6A DD B6 FA      [19] 2151 	or	a, -6 (ix)
   0F6D CAr55r21      [10] 2152 	jp	Z, 00374$
                           2153 ;src\CFG8266.c:430: do
   0F70 AF            [ 4] 2154 	xor	a, a
   0F71 DD 77 FB      [19] 2155 	ld	-5 (ix), a
   0F74                    2156 00103$:
                           2157 ;src\CFG8266.c:433: myPort6 = speed;
   0F74 DD 7E FB      [19] 2158 	ld	a, -5 (ix)
   0F77 D3 06         [11] 2159 	out	(_myPort6), a
                           2160 ;src\CFG8266.c:434: ClearUartData();
   0F79 3E 14         [ 7] 2161 	ld	a, #0x14
   0F7B D3 06         [11] 2162 	out	(_myPort6), a
                           2163 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0F7D 76            [ 4] 2164 	halt
                           2165 ;src\CFG8266.c:436: TxByte('?');
   0F7E 3E 3F         [ 7] 2166 	ld	a, #0x3f
   0F80 F5            [11] 2167 	push	af
   0F81 33            [ 6] 2168 	inc	sp
   0F82 CDr5Dr07      [17] 2169 	call	_TxByte
   0F85 33            [ 6] 2170 	inc	sp
                           2171 ;src\CFG8266.c:438: bResponse = WaitForRXData(responseOK,2,60,false,false,NULL,0);
   0F86 21 00 00      [10] 2172 	ld	hl, #0x0000
   0F89 E5            [11] 2173 	push	hl
   0F8A 2E 00         [ 7] 2174 	ld	l, #0x00
   0F8C E5            [11] 2175 	push	hl
   0F8D AF            [ 4] 2176 	xor	a, a
   0F8E F5            [11] 2177 	push	af
   0F8F 33            [ 6] 2178 	inc	sp
   0F90 AF            [ 4] 2179 	xor	a, a
   0F91 F5            [11] 2180 	push	af
   0F92 33            [ 6] 2181 	inc	sp
   0F93 2E 3C         [ 7] 2182 	ld	l, #0x3c
   0F95 E5            [11] 2183 	push	hl
   0F96 2E 02         [ 7] 2184 	ld	l, #0x02
   0F98 E5            [11] 2185 	push	hl
   0F99 21r0Er01      [10] 2186 	ld	hl, #_responseOK
   0F9C E5            [11] 2187 	push	hl
   0F9D CDrD9r08      [17] 2188 	call	_WaitForRXData
   0FA0 FD 21 0C 00   [14] 2189 	ld	iy, #12
   0FA4 FD 39         [15] 2190 	add	iy, sp
   0FA6 FD F9         [10] 2191 	ld	sp, iy
   0FA8 7D            [ 4] 2192 	ld	a, l
                           2193 ;src\CFG8266.c:440: if (bResponse)
   0FA9 B7            [ 4] 2194 	or	a, a
   0FAA 20 0A         [12] 2195 	jr	NZ,00105$
                           2196 ;src\CFG8266.c:442: ++speed;
   0FAC DD 34 FB      [23] 2197 	inc	-5 (ix)
                           2198 ;src\CFG8266.c:444: while (speed<10);
   0FAF DD 7E FB      [19] 2199 	ld	a, -5 (ix)
   0FB2 D6 0A         [ 7] 2200 	sub	a, #0x0a
   0FB4 38 BE         [12] 2201 	jr	C,00103$
   0FB6                    2202 00105$:
                           2203 ;src\CFG8266.c:446: if (speed<10)
   0FB6 DD 7E FB      [19] 2204 	ld	a, -5 (ix)
   0FB9 D6 0A         [ 7] 2205 	sub	a, #0x0a
   0FBB D2r4Br21      [10] 2206 	jp	NC, 00371$
                           2207 ;src\CFG8266.c:448: printf ("Baud Rate: %s\r\n",speedStr[speed]);
   0FBE DD 7E FB      [19] 2208 	ld	a, -5 (ix)
   0FC1 DD 77 FA      [19] 2209 	ld	-6 (ix), a
   0FC4 AF            [ 4] 2210 	xor	a, a
   0FC5 DD 77 FB      [19] 2211 	ld	-5 (ix), a
   0FC8 DD 7E FA      [19] 2212 	ld	a, -6 (ix)
   0FCB DD 77 FA      [19] 2213 	ld	-6 (ix), a
   0FCE DD 7E FB      [19] 2214 	ld	a, -5 (ix)
   0FD1 DD 77 FB      [19] 2215 	ld	-5 (ix), a
   0FD4 DD CB FA 26   [23] 2216 	sla	-6 (ix)
   0FD8 DD CB FB 16   [23] 2217 	rl	-5 (ix)
   0FDC 3Er0C         [ 7] 2218 	ld	a, #<(_speedStr)
   0FDE DD 86 FA      [19] 2219 	add	a, -6 (ix)
   0FE1 DD 77 F8      [19] 2220 	ld	-8 (ix), a
   0FE4 3Es00         [ 7] 2221 	ld	a, #>(_speedStr)
   0FE6 DD 8E FB      [19] 2222 	adc	a, -5 (ix)
   0FE9 DD 77 F9      [19] 2223 	ld	-7 (ix), a
   0FEC DD 6E F8      [19] 2224 	ld	l, -8 (ix)
   0FEF DD 66 F9      [19] 2225 	ld	h, -7 (ix)
   0FF2 7E            [ 7] 2226 	ld	a, (hl)
   0FF3 DD 77 FA      [19] 2227 	ld	-6 (ix), a
   0FF6 23            [ 6] 2228 	inc	hl
   0FF7 7E            [ 7] 2229 	ld	a, (hl)
   0FF8 DD 77 FB      [19] 2230 	ld	-5 (ix), a
   0FFB DD 6E FA      [19] 2231 	ld	l, -6 (ix)
   0FFE DD 66 FB      [19] 2232 	ld	h, -5 (ix)
   1001 E5            [11] 2233 	push	hl
   1002 21rCCr21      [10] 2234 	ld	hl, #___str_32
   1005 E5            [11] 2235 	push	hl
   1006 CDr00r00      [17] 2236 	call	_printf
   1009 F1            [10] 2237 	pop	af
                           2238 ;src\CFG8266.c:449: TxByte('V'); //Request version
   100A 26 56         [ 7] 2239 	ld	h,#0x56
   100C E3            [19] 2240 	ex	(sp),hl
   100D 33            [ 6] 2241 	inc	sp
   100E CDr5Dr07      [17] 2242 	call	_TxByte
   1011 33            [ 6] 2243 	inc	sp
                           2244 ;src\CFG8266.c:450: bResponse = WaitForRXData(versionResponse,1,20,true,false,NULL,0);
   1012 21 00 00      [10] 2245 	ld	hl, #0x0000
   1015 E5            [11] 2246 	push	hl
   1016 2E 00         [ 7] 2247 	ld	l, #0x00
   1018 E5            [11] 2248 	push	hl
   1019 AF            [ 4] 2249 	xor	a, a
   101A 57            [ 4] 2250 	ld	d,a
   101B 1E 01         [ 7] 2251 	ld	e,#0x01
   101D D5            [11] 2252 	push	de
   101E 2E 14         [ 7] 2253 	ld	l, #0x14
   1020 E5            [11] 2254 	push	hl
   1021 2E 01         [ 7] 2255 	ld	l, #0x01
   1023 E5            [11] 2256 	push	hl
   1024 21r0Br01      [10] 2257 	ld	hl, #_versionResponse
   1027 E5            [11] 2258 	push	hl
   1028 CDrD9r08      [17] 2259 	call	_WaitForRXData
   102B FD 21 0C 00   [14] 2260 	ld	iy, #12
   102F FD 39         [15] 2261 	add	iy, sp
   1031 FD F9         [10] 2262 	ld	sp, iy
                           2263 ;src\CFG8266.c:451: if (bResponse)
   1033 DD 75 FB      [19] 2264 	ld	-5 (ix), l
   1036 7D            [ 4] 2265 	ld	a, l
   1037 B7            [ 4] 2266 	or	a, a
   1038 28 20         [12] 2267 	jr	Z,00113$
                           2268 ;src\CFG8266.c:453: while(!UartRXData());
   103A                    2269 00106$:
   103A DB 07         [11] 2270 	in	a, (_myPort7)
   103C D6 01         [ 7] 2271 	sub	a,#0x01
   103E 3E 00         [ 7] 2272 	ld	a, #0x00
   1040 17            [ 4] 2273 	rla
   1041 CB 47         [ 8] 2274 	bit	0, a
   1043 20 F5         [12] 2275 	jr	NZ,00106$
                           2276 ;src\CFG8266.c:454: ucVerMajor = GetUARTData();
   1045 DB 06         [11] 2277 	in	a, (_myPort6)
   1047 DD 77 FF      [19] 2278 	ld	-1 (ix), a
                           2279 ;src\CFG8266.c:455: while(!UartRXData());
   104A                    2280 00109$:
   104A DB 07         [11] 2281 	in	a, (_myPort7)
   104C D6 01         [ 7] 2282 	sub	a,#0x01
   104E 3E 00         [ 7] 2283 	ld	a, #0x00
   1050 17            [ 4] 2284 	rla
   1051 CB 47         [ 8] 2285 	bit	0, a
   1053 20 F5         [12] 2286 	jr	NZ,00109$
                           2287 ;src\CFG8266.c:456: ucVerMinor = GetUARTData();
   1055 DB 06         [11] 2288 	in	a, (_myPort6)
   1057 DD 77 FE      [19] 2289 	ld	-2 (ix), a
   105A                    2290 00113$:
                           2291 ;src\CFG8266.c:458: printf ("FW Version: %c.%c\r\n",ucVerMajor+'0',ucVerMinor+'0');
   105A DD 4E FE      [19] 2292 	ld	c, -2 (ix)
   105D 06 00         [ 7] 2293 	ld	b, #0x00
   105F 21 30 00      [10] 2294 	ld	hl, #0x0030
   1062 09            [11] 2295 	add	hl, bc
   1063 EB            [ 4] 2296 	ex	de, hl
   1064 DD 4E FF      [19] 2297 	ld	c, -1 (ix)
   1067 06 00         [ 7] 2298 	ld	b, #0x00
   1069 21 30 00      [10] 2299 	ld	hl, #0x0030
   106C 09            [11] 2300 	add	hl, bc
   106D D5            [11] 2301 	push	de
   106E E5            [11] 2302 	push	hl
   106F 21rDCr21      [10] 2303 	ld	hl, #___str_33
   1072 E5            [11] 2304 	push	hl
   1073 CDr00r00      [17] 2305 	call	_printf
   1076 21 06 00      [10] 2306 	ld	hl, #6
   1079 39            [11] 2307 	add	hl, sp
   107A F9            [ 6] 2308 	ld	sp, hl
                           2309 ;src\CFG8266.c:460: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   107B 3Ar00r00      [13] 2310 	ld	a,(#_ucScan + 0)
   107E B7            [ 4] 2311 	or	a, a
   107F 20 19         [12] 2312 	jr	NZ,00363$
   1081 3Ar09r00      [13] 2313 	ld	a,(#_ucNagleOff + 0)
   1084 B7            [ 4] 2314 	or	a, a
   1085 20 13         [12] 2315 	jr	NZ,00363$
   1087 3Ar0Ar00      [13] 2316 	ld	a,(#_ucNagleOn + 0)
   108A B7            [ 4] 2317 	or	a, a
   108B 20 0D         [12] 2318 	jr	NZ,00363$
   108D 3Ar0Br00      [13] 2319 	ld	a,(#_ucRadioOff + 0)
   1090 B7            [ 4] 2320 	or	a, a
   1091 20 07         [12] 2321 	jr	NZ,00363$
   1093 3Ar0Cr00      [13] 2322 	ld	a,(#_ucSetTimeout + 0)
   1096 B7            [ 4] 2323 	or	a, a
   1097 CArECr18      [10] 2324 	jp	Z, 00364$
   109A                    2325 00363$:
                           2326 ;src\CFG8266.c:463: if (ucScan)
   109A 3Ar00r00      [13] 2327 	ld	a,(#_ucScan + 0)
   109D B7            [ 4] 2328 	or	a, a
   109E CAr1Fr11      [10] 2329 	jp	Z, 00143$
                           2330 ;src\CFG8266.c:465: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   10A1 DD 7E FF      [19] 2331 	ld	a, -1 (ix)
   10A4 D6 01         [ 7] 2332 	sub	a, #0x01
   10A6 38 6C         [12] 2333 	jr	C,00126$
   10A8 DD 7E FE      [19] 2334 	ld	a, -2 (ix)
   10AB D6 02         [ 7] 2335 	sub	a, #0x02
   10AD 38 65         [12] 2336 	jr	C,00126$
                           2337 ;src\CFG8266.c:467: TxByte('g'); //Request current AP status
   10AF 3E 67         [ 7] 2338 	ld	a, #0x67
   10B1 F5            [11] 2339 	push	af
   10B2 33            [ 6] 2340 	inc	sp
   10B3 CDr5Dr07      [17] 2341 	call	_TxByte
   10B6 33            [ 6] 2342 	inc	sp
                           2343 ;src\CFG8266.c:468: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   10B7 21 00 00      [10] 2344 	ld	hl, #0x0000
   10BA E5            [11] 2345 	push	hl
   10BB 2E 00         [ 7] 2346 	ld	l, #0x00
   10BD E5            [11] 2347 	push	hl
   10BE AF            [ 4] 2348 	xor	a, a
   10BF 57            [ 4] 2349 	ld	d,a
   10C0 1E 01         [ 7] 2350 	ld	e,#0x01
   10C2 D5            [11] 2351 	push	de
   10C3 2E 1E         [ 7] 2352 	ld	l, #0x1e
   10C5 E5            [11] 2353 	push	hl
   10C6 2E 03         [ 7] 2354 	ld	l, #0x03
   10C8 E5            [11] 2355 	push	hl
   10C9 21r1Cr01      [10] 2356 	ld	hl, #_apstsResponse
   10CC E5            [11] 2357 	push	hl
   10CD CDrD9r08      [17] 2358 	call	_WaitForRXData
   10D0 FD 21 0C 00   [14] 2359 	ld	iy, #12
   10D4 FD 39         [15] 2360 	add	iy, sp
   10D6 FD F9         [10] 2361 	ld	sp, iy
                           2362 ;src\CFG8266.c:469: if (bResponse)
   10D8 DD 75 FB      [19] 2363 	ld	-5 (ix), l
   10DB 7D            [ 4] 2364 	ld	a, l
   10DC B7            [ 4] 2365 	or	a, a
   10DD 28 35         [12] 2366 	jr	Z,00126$
                           2367 ;src\CFG8266.c:471: while(!UartRXData());
   10DF                    2368 00114$:
   10DF DB 07         [11] 2369 	in	a, (_myPort7)
   10E1 D6 01         [ 7] 2370 	sub	a,#0x01
   10E3 3E 00         [ 7] 2371 	ld	a, #0x00
   10E5 17            [ 4] 2372 	rla
   10E6 CB 47         [ 8] 2373 	bit	0, a
   10E8 20 F5         [12] 2374 	jr	NZ,00114$
                           2375 ;src\CFG8266.c:472: ucAPstsRspSize=GetUARTData();
   10EA DB 06         [11] 2376 	in	a, (_myPort6)
   10EC DD 77 FD      [19] 2377 	ld	-3 (ix), a
                           2378 ;src\CFG8266.c:476: while(!UartRXData());
   10EF 21 C5 0D      [10] 2379 	ld	hl, #3525
   10F2 39            [11] 2380 	add	hl, sp
   10F3 EB            [ 4] 2381 	ex	de, hl
   10F4 01 00 00      [10] 2382 	ld	bc, #0x0000
   10F7                    2383 00117$:
   10F7 DB 07         [11] 2384 	in	a, (_myPort7)
   10F9 D6 01         [ 7] 2385 	sub	a,#0x01
   10FB 3E 00         [ 7] 2386 	ld	a, #0x00
   10FD 17            [ 4] 2387 	rla
   10FE CB 47         [ 8] 2388 	bit	0, a
   1100 20 F5         [12] 2389 	jr	NZ,00117$
                           2390 ;src\CFG8266.c:477: chAPStsInfo[i]=GetUARTData();
   1102 6B            [ 4] 2391 	ld	l, e
   1103 62            [ 4] 2392 	ld	h, d
   1104 09            [11] 2393 	add	hl, bc
   1105 DB 06         [11] 2394 	in	a, (_myPort6)
   1107 77            [ 7] 2395 	ld	(hl), a
                           2396 ;src\CFG8266.c:478: ++i;
   1108 03            [ 6] 2397 	inc	bc
                           2398 ;src\CFG8266.c:480: while(i<ucAPstsRspSize);
   1109 DD 6E FD      [19] 2399 	ld	l, -3 (ix)
   110C 26 00         [ 7] 2400 	ld	h, #0x00
   110E 79            [ 4] 2401 	ld	a, c
   110F 95            [ 4] 2402 	sub	a, l
   1110 78            [ 4] 2403 	ld	a, b
   1111 9C            [ 4] 2404 	sbc	a, h
   1112 38 E3         [12] 2405 	jr	C,00117$
   1114                    2406 00126$:
                           2407 ;src\CFG8266.c:483: TxByte('S'); //Request SCAN
   1114 3E 53         [ 7] 2408 	ld	a, #0x53
   1116 F5            [11] 2409 	push	af
   1117 33            [ 6] 2410 	inc	sp
   1118 CDr5Dr07      [17] 2411 	call	_TxByte
   111B 33            [ 6] 2412 	inc	sp
   111C C3rAEr11      [10] 2413 	jp	00144$
   111F                    2414 00143$:
                           2415 ;src\CFG8266.c:485: else if (ucNagleOff)
   111F 3Ar09r00      [13] 2416 	ld	a,(#_ucNagleOff + 0)
   1122 B7            [ 4] 2417 	or	a, a
   1123 28 0B         [12] 2418 	jr	Z,00140$
                           2419 ;src\CFG8266.c:486: TxByte('N'); //Request nagle off for future connections
   1125 3E 4E         [ 7] 2420 	ld	a, #0x4e
   1127 F5            [11] 2421 	push	af
   1128 33            [ 6] 2422 	inc	sp
   1129 CDr5Dr07      [17] 2423 	call	_TxByte
   112C 33            [ 6] 2424 	inc	sp
   112D C3rAEr11      [10] 2425 	jp	00144$
   1130                    2426 00140$:
                           2427 ;src\CFG8266.c:487: else if (ucNagleOn)
   1130 3Ar0Ar00      [13] 2428 	ld	a,(#_ucNagleOn + 0)
   1133 B7            [ 4] 2429 	or	a, a
   1134 28 0A         [12] 2430 	jr	Z,00137$
                           2431 ;src\CFG8266.c:488: TxByte('D'); //Request nagle on for future connections
   1136 3E 44         [ 7] 2432 	ld	a, #0x44
   1138 F5            [11] 2433 	push	af
   1139 33            [ 6] 2434 	inc	sp
   113A CDr5Dr07      [17] 2435 	call	_TxByte
   113D 33            [ 6] 2436 	inc	sp
   113E 18 6E         [12] 2437 	jr	00144$
   1140                    2438 00137$:
                           2439 ;src\CFG8266.c:489: else if (ucRadioOff)
   1140 3Ar0Br00      [13] 2440 	ld	a,(#_ucRadioOff + 0)
   1143 B7            [ 4] 2441 	or	a, a
   1144 28 0A         [12] 2442 	jr	Z,00134$
                           2443 ;src\CFG8266.c:490: TxByte('O'); //Request to turn off Wi-Fi radio immediately
   1146 3E 4F         [ 7] 2444 	ld	a, #0x4f
   1148 F5            [11] 2445 	push	af
   1149 33            [ 6] 2446 	inc	sp
   114A CDr5Dr07      [17] 2447 	call	_TxByte
   114D 33            [ 6] 2448 	inc	sp
   114E 18 5E         [12] 2449 	jr	00144$
   1150                    2450 00134$:
                           2451 ;src\CFG8266.c:491: else if (ucSetTimeout)
   1150 3Ar0Cr00      [13] 2452 	ld	a,(#_ucSetTimeout + 0)
   1153 B7            [ 4] 2453 	or	a, a
   1154 28 58         [12] 2454 	jr	Z,00144$
                           2455 ;src\CFG8266.c:493: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   1156 FD 21r0Dr00   [14] 2456 	ld	iy, #_uiTimeout
   115A FD 4E 01      [19] 2457 	ld	c, 1 (iy)
   115D DD 71 FC      [19] 2458 	ld	-4 (ix), c
                           2459 ;src\CFG8266.c:494: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   1160 FD 7E 00      [19] 2460 	ld	a, 0 (iy)
   1163 DD 77 FD      [19] 2461 	ld	-3 (ix), a
                           2462 ;src\CFG8266.c:495: if (uiTimeout)
   1166 FD 7E 01      [19] 2463 	ld	a, 1 (iy)
   1169 FD B6 00      [19] 2464 	or	a, 0 (iy)
   116C 28 0F         [12] 2465 	jr	Z,00129$
                           2466 ;src\CFG8266.c:496: printf("\r\nSetting Wi-Fi idle timeout to %u...\r\n",uiTimeout);
   116E 2Ar0Dr00      [16] 2467 	ld	hl, (_uiTimeout)
   1171 E5            [11] 2468 	push	hl
   1172 21rF0r21      [10] 2469 	ld	hl, #___str_34
   1175 E5            [11] 2470 	push	hl
   1176 CDr00r00      [17] 2471 	call	_printf
   1179 F1            [10] 2472 	pop	af
   117A F1            [10] 2473 	pop	af
   117B 18 08         [12] 2474 	jr	00130$
   117D                    2475 00129$:
                           2476 ;src\CFG8266.c:498: printf("\r\nSetting Wi-Fi to always on!\r\n");
   117D 21r18r22      [10] 2477 	ld	hl, #___str_36
   1180 E5            [11] 2478 	push	hl
   1181 CDr00r00      [17] 2479 	call	_puts
   1184 F1            [10] 2480 	pop	af
   1185                    2481 00130$:
                           2482 ;src\CFG8266.c:499: TxByte('T'); //Request to set time-out
   1185 3E 54         [ 7] 2483 	ld	a, #0x54
   1187 F5            [11] 2484 	push	af
   1188 33            [ 6] 2485 	inc	sp
   1189 CDr5Dr07      [17] 2486 	call	_TxByte
   118C 33            [ 6] 2487 	inc	sp
                           2488 ;src\CFG8266.c:500: TxByte(0);
   118D AF            [ 4] 2489 	xor	a, a
   118E F5            [11] 2490 	push	af
   118F 33            [ 6] 2491 	inc	sp
   1190 CDr5Dr07      [17] 2492 	call	_TxByte
   1193 33            [ 6] 2493 	inc	sp
                           2494 ;src\CFG8266.c:501: TxByte(2);
   1194 3E 02         [ 7] 2495 	ld	a, #0x02
   1196 F5            [11] 2496 	push	af
   1197 33            [ 6] 2497 	inc	sp
   1198 CDr5Dr07      [17] 2498 	call	_TxByte
   119B 33            [ 6] 2499 	inc	sp
                           2500 ;src\CFG8266.c:502: TxByte(ucTimeOutMSB);
   119C DD 7E FC      [19] 2501 	ld	a, -4 (ix)
   119F F5            [11] 2502 	push	af
   11A0 33            [ 6] 2503 	inc	sp
   11A1 CDr5Dr07      [17] 2504 	call	_TxByte
   11A4 33            [ 6] 2505 	inc	sp
                           2506 ;src\CFG8266.c:503: TxByte(ucTimeOutLSB);
   11A5 DD 7E FD      [19] 2507 	ld	a, -3 (ix)
   11A8 F5            [11] 2508 	push	af
   11A9 33            [ 6] 2509 	inc	sp
   11AA CDr5Dr07      [17] 2510 	call	_TxByte
   11AD 33            [ 6] 2511 	inc	sp
   11AE                    2512 00144$:
                           2513 ;src\CFG8266.c:506: if (ucScan)
   11AE 3Ar00r00      [13] 2514 	ld	a,(#_ucScan + 0)
   11B1 B7            [ 4] 2515 	or	a, a
   11B2 28 27         [12] 2516 	jr	Z,00157$
                           2517 ;src\CFG8266.c:507: bResponse = WaitForRXData(scanResponse,2,60,true,false,NULL,0);
   11B4 21 00 00      [10] 2518 	ld	hl, #0x0000
   11B7 E5            [11] 2519 	push	hl
   11B8 2E 00         [ 7] 2520 	ld	l, #0x00
   11BA E5            [11] 2521 	push	hl
   11BB AF            [ 4] 2522 	xor	a, a
   11BC 57            [ 4] 2523 	ld	d,a
   11BD 1E 01         [ 7] 2524 	ld	e,#0x01
   11BF D5            [11] 2525 	push	de
   11C0 2E 3C         [ 7] 2526 	ld	l, #0x3c
   11C2 E5            [11] 2527 	push	hl
   11C3 2E 02         [ 7] 2528 	ld	l, #0x02
   11C5 E5            [11] 2529 	push	hl
   11C6 21r10r01      [10] 2530 	ld	hl, #_scanResponse
   11C9 E5            [11] 2531 	push	hl
   11CA CDrD9r08      [17] 2532 	call	_WaitForRXData
   11CD FD 21 0C 00   [14] 2533 	ld	iy, #12
   11D1 FD 39         [15] 2534 	add	iy, sp
   11D3 FD F9         [10] 2535 	ld	sp, iy
   11D5 DD 75 FB      [19] 2536 	ld	-5 (ix), l
   11D8 C3r8Ar12      [10] 2537 	jp	00158$
   11DB                    2538 00157$:
                           2539 ;src\CFG8266.c:508: else if (ucNagleOff)
   11DB 3Ar09r00      [13] 2540 	ld	a,(#_ucNagleOff + 0)
   11DE B7            [ 4] 2541 	or	a, a
   11DF 28 27         [12] 2542 	jr	Z,00154$
                           2543 ;src\CFG8266.c:509: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false,NULL,0);
   11E1 21 00 00      [10] 2544 	ld	hl, #0x0000
   11E4 E5            [11] 2545 	push	hl
   11E5 2E 00         [ 7] 2546 	ld	l, #0x00
   11E7 E5            [11] 2547 	push	hl
   11E8 AF            [ 4] 2548 	xor	a, a
   11E9 57            [ 4] 2549 	ld	d,a
   11EA 1E 01         [ 7] 2550 	ld	e,#0x01
   11EC D5            [11] 2551 	push	de
   11ED 2E 3C         [ 7] 2552 	ld	l, #0x3c
   11EF E5            [11] 2553 	push	hl
   11F0 2E 02         [ 7] 2554 	ld	l, #0x02
   11F2 E5            [11] 2555 	push	hl
   11F3 21r16r01      [10] 2556 	ld	hl, #_nagleoffResponse
   11F6 E5            [11] 2557 	push	hl
   11F7 CDrD9r08      [17] 2558 	call	_WaitForRXData
   11FA FD 21 0C 00   [14] 2559 	ld	iy, #12
   11FE FD 39         [15] 2560 	add	iy, sp
   1200 FD F9         [10] 2561 	ld	sp, iy
   1202 DD 75 FB      [19] 2562 	ld	-5 (ix), l
   1205 C3r8Ar12      [10] 2563 	jp	00158$
   1208                    2564 00154$:
                           2565 ;src\CFG8266.c:510: else if (ucNagleOn)
   1208 3Ar0Ar00      [13] 2566 	ld	a,(#_ucNagleOn + 0)
   120B B7            [ 4] 2567 	or	a, a
   120C 28 26         [12] 2568 	jr	Z,00151$
                           2569 ;src\CFG8266.c:511: bResponse = WaitForRXData(nagleonResponse,2,60,true,false,NULL,0);
   120E 21 00 00      [10] 2570 	ld	hl, #0x0000
   1211 E5            [11] 2571 	push	hl
   1212 2E 00         [ 7] 2572 	ld	l, #0x00
   1214 E5            [11] 2573 	push	hl
   1215 AF            [ 4] 2574 	xor	a, a
   1216 57            [ 4] 2575 	ld	d,a
   1217 1E 01         [ 7] 2576 	ld	e,#0x01
   1219 D5            [11] 2577 	push	de
   121A 2E 3C         [ 7] 2578 	ld	l, #0x3c
   121C E5            [11] 2579 	push	hl
   121D 2E 02         [ 7] 2580 	ld	l, #0x02
   121F E5            [11] 2581 	push	hl
   1220 21r14r01      [10] 2582 	ld	hl, #_nagleonResponse
   1223 E5            [11] 2583 	push	hl
   1224 CDrD9r08      [17] 2584 	call	_WaitForRXData
   1227 FD 21 0C 00   [14] 2585 	ld	iy, #12
   122B FD 39         [15] 2586 	add	iy, sp
   122D FD F9         [10] 2587 	ld	sp, iy
   122F DD 75 FB      [19] 2588 	ld	-5 (ix), l
   1232 18 56         [12] 2589 	jr	00158$
   1234                    2590 00151$:
                           2591 ;src\CFG8266.c:512: else if (ucRadioOff)
   1234 3Ar0Br00      [13] 2592 	ld	a,(#_ucRadioOff + 0)
   1237 B7            [ 4] 2593 	or	a, a
   1238 28 26         [12] 2594 	jr	Z,00148$
                           2595 ;src\CFG8266.c:513: bResponse = WaitForRXData(radioOffResponse,2,60,true,false,NULL,0);
   123A 21 00 00      [10] 2596 	ld	hl, #0x0000
   123D E5            [11] 2597 	push	hl
   123E 2E 00         [ 7] 2598 	ld	l, #0x00
   1240 E5            [11] 2599 	push	hl
   1241 AF            [ 4] 2600 	xor	a, a
   1242 57            [ 4] 2601 	ld	d,a
   1243 1E 01         [ 7] 2602 	ld	e,#0x01
   1245 D5            [11] 2603 	push	de
   1246 2E 3C         [ 7] 2604 	ld	l, #0x3c
   1248 E5            [11] 2605 	push	hl
   1249 2E 02         [ 7] 2606 	ld	l, #0x02
   124B E5            [11] 2607 	push	hl
   124C 21r2Br01      [10] 2608 	ld	hl, #_radioOffResponse
   124F E5            [11] 2609 	push	hl
   1250 CDrD9r08      [17] 2610 	call	_WaitForRXData
   1253 FD 21 0C 00   [14] 2611 	ld	iy, #12
   1257 FD 39         [15] 2612 	add	iy, sp
   1259 FD F9         [10] 2613 	ld	sp, iy
   125B DD 75 FB      [19] 2614 	ld	-5 (ix), l
   125E 18 2A         [12] 2615 	jr	00158$
   1260                    2616 00148$:
                           2617 ;src\CFG8266.c:514: else if (ucSetTimeout)
   1260 3Ar0Cr00      [13] 2618 	ld	a,(#_ucSetTimeout + 0)
   1263 B7            [ 4] 2619 	or	a, a
   1264 28 24         [12] 2620 	jr	Z,00158$
                           2621 ;src\CFG8266.c:515: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false,NULL,0);
   1266 21 00 00      [10] 2622 	ld	hl, #0x0000
   1269 E5            [11] 2623 	push	hl
   126A 2E 00         [ 7] 2624 	ld	l, #0x00
   126C E5            [11] 2625 	push	hl
   126D AF            [ 4] 2626 	xor	a, a
   126E 57            [ 4] 2627 	ld	d,a
   126F 1E 01         [ 7] 2628 	ld	e,#0x01
   1271 D5            [11] 2629 	push	de
   1272 2E 3C         [ 7] 2630 	ld	l, #0x3c
   1274 E5            [11] 2631 	push	hl
   1275 2E 02         [ 7] 2632 	ld	l, #0x02
   1277 E5            [11] 2633 	push	hl
   1278 21r29r01      [10] 2634 	ld	hl, #_responseRadioOnTimeout
   127B E5            [11] 2635 	push	hl
   127C CDrD9r08      [17] 2636 	call	_WaitForRXData
   127F FD 21 0C 00   [14] 2637 	ld	iy, #12
   1283 FD 39         [15] 2638 	add	iy, sp
   1285 FD F9         [10] 2639 	ld	sp, iy
   1287 DD 75 FB      [19] 2640 	ld	-5 (ix), l
   128A                    2641 00158$:
                           2642 ;src\CFG8266.c:518: if ((bResponse)&&(ucScan))
   128A DD 7E FB      [19] 2643 	ld	a, -5 (ix)
   128D B7            [ 4] 2644 	or	a, a
   128E CAr58r18      [10] 2645 	jp	Z, 00294$
   1291 FD 21r00r00   [14] 2646 	ld	iy, #_ucScan
   1295 FD 7E 00      [19] 2647 	ld	a, 0 (iy)
   1298 B7            [ 4] 2648 	or	a, a
   1299 CAr58r18      [10] 2649 	jp	Z, 00294$
                           2650 ;src\CFG8266.c:521: do
   129C 0E 14         [ 7] 2651 	ld	c, #0x14
   129E                    2652 00161$:
                           2653 ;src\CFG8266.c:523: --ucRetries;
   129E 0D            [ 4] 2654 	dec	c
                           2655 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   129F 06 1E         [ 7] 2656 	ld	b, #0x1e
   12A1                    2657 00379$:
                           2658 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   12A1 76            [ 4] 2659 	halt
                           2660 ;src\CFG8266.c:524: for (ucHalt = 30;ucHalt>0;--ucHalt)
   12A2 78            [ 4] 2661 	ld	a, b
   12A3 3D            [ 4] 2662 	dec	a
   12A4 47            [ 4] 2663 	ld	b, a
   12A5 B7            [ 4] 2664 	or	a, a
   12A6 20 F9         [12] 2665 	jr	NZ,00379$
                           2666 ;src\CFG8266.c:526: TxByte('s'); //Request SCAN result
   12A8 C5            [11] 2667 	push	bc
   12A9 3E 73         [ 7] 2668 	ld	a, #0x73
   12AB F5            [11] 2669 	push	af
   12AC 33            [ 6] 2670 	inc	sp
   12AD CDr5Dr07      [17] 2671 	call	_TxByte
   12B0 33            [ 6] 2672 	inc	sp
   12B1 21 02 00      [10] 2673 	ld	hl, #0x0002
   12B4 E5            [11] 2674 	push	hl
   12B5 21r12r01      [10] 2675 	ld	hl, #_scanresNoNetwork
   12B8 E5            [11] 2676 	push	hl
   12B9 AF            [ 4] 2677 	xor	a, a
   12BA F5            [11] 2678 	push	af
   12BB 33            [ 6] 2679 	inc	sp
   12BC AF            [ 4] 2680 	xor	a, a
   12BD F5            [11] 2681 	push	af
   12BE 33            [ 6] 2682 	inc	sp
   12BF 21 3C 00      [10] 2683 	ld	hl, #0x003c
   12C2 E5            [11] 2684 	push	hl
   12C3 2E 02         [ 7] 2685 	ld	l, #0x02
   12C5 E5            [11] 2686 	push	hl
   12C6 21r18r01      [10] 2687 	ld	hl, #_scanresResponse
   12C9 E5            [11] 2688 	push	hl
   12CA CDrD9r08      [17] 2689 	call	_WaitForRXData
   12CD FD 21 0C 00   [14] 2690 	ld	iy, #12
   12D1 FD 39         [15] 2691 	add	iy, sp
   12D3 FD F9         [10] 2692 	ld	sp, iy
   12D5 C1            [10] 2693 	pop	bc
                           2694 ;src\CFG8266.c:529: while ((ucRetries)&&(!bResponse));
   12D6 79            [ 4] 2695 	ld	a, c
   12D7 B7            [ 4] 2696 	or	a, a
   12D8 28 04         [12] 2697 	jr	Z,00163$
   12DA 7D            [ 4] 2698 	ld	a, l
   12DB B7            [ 4] 2699 	or	a, a
   12DC 28 C0         [12] 2700 	jr	Z,00161$
   12DE                    2701 00163$:
                           2702 ;src\CFG8266.c:531: if (bResponse==1)
   12DE 2D            [ 4] 2703 	dec	l
   12DF C2r4Dr18      [10] 2704 	jp	NZ,00268$
                           2705 ;src\CFG8266.c:534: while(!UartRXData());
   12E2                    2706 00164$:
   12E2 DB 07         [11] 2707 	in	a, (_myPort7)
   12E4 D6 01         [ 7] 2708 	sub	a,#0x01
   12E6 3E 00         [ 7] 2709 	ld	a, #0x00
   12E8 17            [ 4] 2710 	rla
   12E9 CB 47         [ 8] 2711 	bit	0, a
   12EB 20 F5         [12] 2712 	jr	NZ,00164$
                           2713 ;src\CFG8266.c:535: ucAPs = GetUARTData();
   12ED DB 06         [11] 2714 	in	a, (_myPort6)
   12EF DD 77 F0      [19] 2715 	ld	-16 (ix), a
                           2716 ;src\CFG8266.c:536: if (ucAPs>100)
   12F2 3E 64         [ 7] 2717 	ld	a, #0x64
   12F4 DD 96 F0      [19] 2718 	sub	a, -16 (ix)
   12F7 30 04         [12] 2719 	jr	NC,00168$
                           2720 ;src\CFG8266.c:537: ucAPs=100;
   12F9 DD 36 F0 64   [19] 2721 	ld	-16 (ix), #0x64
   12FD                    2722 00168$:
                           2723 ;src\CFG8266.c:539: printf ("\r\n");
   12FD 21r37r22      [10] 2724 	ld	hl, #___str_38
   1300 E5            [11] 2725 	push	hl
   1301 CDr00r00      [17] 2726 	call	_puts
   1304 F1            [10] 2727 	pop	af
                           2728 ;src\CFG8266.c:540: do
   1305 21 53 00      [10] 2729 	ld	hl, #83
   1308 39            [11] 2730 	add	hl, sp
   1309 DD 75 F1      [19] 2731 	ld	-15 (ix), l
   130C DD 74 F2      [19] 2732 	ld	-14 (ix), h
   130F AF            [ 4] 2733 	xor	a, a
   1310 DD 77 FD      [19] 2734 	ld	-3 (ix), a
                           2735 ;src\CFG8266.c:545: while(!UartRXData());
   1313                    2736 00433$:
   1313 DD 4E FD      [19] 2737 	ld	c, -3 (ix)
   1316 06 00         [ 7] 2738 	ld	b, #0x00
   1318 69            [ 4] 2739 	ld	l, c
   1319 60            [ 4] 2740 	ld	h, b
   131A 29            [11] 2741 	add	hl, hl
   131B 29            [11] 2742 	add	hl, hl
   131C 29            [11] 2743 	add	hl, hl
   131D 29            [11] 2744 	add	hl, hl
   131E 09            [11] 2745 	add	hl, bc
   131F 29            [11] 2746 	add	hl, hl
   1320 EB            [ 4] 2747 	ex	de, hl
   1321 7B            [ 4] 2748 	ld	a, e
   1322 DD 86 F1      [19] 2749 	add	a, -15 (ix)
   1325 4F            [ 4] 2750 	ld	c, a
   1326 7A            [ 4] 2751 	ld	a, d
   1327 DD 8E F2      [19] 2752 	adc	a, -14 (ix)
   132A 47            [ 4] 2753 	ld	b, a
   132B 1E 00         [ 7] 2754 	ld	e, #0x00
   132D                    2755 00169$:
   132D DB 07         [11] 2756 	in	a, (_myPort7)
   132F D6 01         [ 7] 2757 	sub	a,#0x01
   1331 3E 00         [ 7] 2758 	ld	a, #0x00
   1333 17            [ 4] 2759 	rla
   1334 CB 47         [ 8] 2760 	bit	0, a
   1336 20 F5         [12] 2761 	jr	NZ,00169$
                           2762 ;src\CFG8266.c:546: rx_data=GetUARTData();
   1338 DB 06         [11] 2763 	in	a, (_myPort6)
   133A DD 77 FC      [19] 2764 	ld	-4 (ix), a
                           2765 ;src\CFG8266.c:547: stAP[tx_data].APName[ucIndex++]=rx_data;
   133D 7B            [ 4] 2766 	ld	a, e
   133E 1C            [ 4] 2767 	inc	e
   133F 6F            [ 4] 2768 	ld	l, a
   1340 26 00         [ 7] 2769 	ld	h, #0x00
   1342 09            [11] 2770 	add	hl, bc
   1343 DD 7E FC      [19] 2771 	ld	a, -4 (ix)
   1346 77            [ 7] 2772 	ld	(hl), a
                           2773 ;src\CFG8266.c:549: while(rx_data!=0);
   1347 DD 7E FC      [19] 2774 	ld	a, -4 (ix)
   134A B7            [ 4] 2775 	or	a, a
   134B 20 E0         [12] 2776 	jr	NZ,00169$
                           2777 ;src\CFG8266.c:550: while(!UartRXData());
   134D                    2778 00175$:
   134D DB 07         [11] 2779 	in	a, (_myPort7)
   134F D6 01         [ 7] 2780 	sub	a,#0x01
   1351 3E 00         [ 7] 2781 	ld	a, #0x00
   1353 17            [ 4] 2782 	rla
   1354 CB 47         [ 8] 2783 	bit	0, a
   1356 20 F5         [12] 2784 	jr	NZ,00175$
                           2785 ;src\CFG8266.c:551: rx_data=GetUARTData();
   1358 DB 06         [11] 2786 	in	a, (_myPort6)
   135A 4F            [ 4] 2787 	ld	c, a
                           2788 ;src\CFG8266.c:552: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   135B DD 5E FD      [19] 2789 	ld	e, -3 (ix)
   135E 16 00         [ 7] 2790 	ld	d, #0x00
   1360 6B            [ 4] 2791 	ld	l, e
   1361 62            [ 4] 2792 	ld	h, d
   1362 29            [11] 2793 	add	hl, hl
   1363 29            [11] 2794 	add	hl, hl
   1364 29            [11] 2795 	add	hl, hl
   1365 29            [11] 2796 	add	hl, hl
   1366 19            [11] 2797 	add	hl, de
   1367 29            [11] 2798 	add	hl, hl
   1368 EB            [ 4] 2799 	ex	de, hl
   1369 DD 7E F1      [19] 2800 	ld	a, -15 (ix)
   136C 83            [ 4] 2801 	add	a, e
   136D 5F            [ 4] 2802 	ld	e, a
   136E DD 7E F2      [19] 2803 	ld	a, -14 (ix)
   1371 8A            [ 4] 2804 	adc	a, d
   1372 57            [ 4] 2805 	ld	d, a
   1373 21 21 00      [10] 2806 	ld	hl, #0x0021
   1376 19            [11] 2807 	add	hl, de
   1377 DD 75 F9      [19] 2808 	ld	-7 (ix), l
   137A DD 74 FA      [19] 2809 	ld	-6 (ix), h
   137D 79            [ 4] 2810 	ld	a, c
   137E D6 45         [ 7] 2811 	sub	a, #0x45
   1380 20 0A         [12] 2812 	jr	NZ,00392$
   1382 DD 36 FB 01   [19] 2813 	ld	-5 (ix), #0x01
   1386 AF            [ 4] 2814 	xor	a, a
   1387 DD 77 FC      [19] 2815 	ld	-4 (ix), a
   138A 18 07         [12] 2816 	jr	00393$
   138C                    2817 00392$:
   138C AF            [ 4] 2818 	xor	a, a
   138D DD 77 FB      [19] 2819 	ld	-5 (ix), a
   1390 DD 77 FC      [19] 2820 	ld	-4 (ix), a
   1393                    2821 00393$:
   1393 DD 7E FB      [19] 2822 	ld	a, -5 (ix)
   1396 DD 6E F9      [19] 2823 	ld	l, -7 (ix)
   1399 DD 66 FA      [19] 2824 	ld	h, -6 (ix)
   139C 77            [ 7] 2825 	ld	(hl), a
                           2826 ;src\CFG8266.c:553: ++tx_data;
   139D DD 34 FD      [23] 2827 	inc	-3 (ix)
                           2828 ;src\CFG8266.c:555: while (tx_data!=ucAPs);
   13A0 DD 7E FD      [19] 2829 	ld	a, -3 (ix)
   13A3 DD 96 F0      [19] 2830 	sub	a, -16 (ix)
   13A6 C2r13r13      [10] 2831 	jp	NZ,00433$
                           2832 ;src\CFG8266.c:556: ClearUartData();
   13A9 3E 14         [ 7] 2833 	ld	a, #0x14
   13AB D3 06         [11] 2834 	out	(_myPort6), a
                           2835 ;src\CFG8266.c:558: do
   13AD DD 7E FE      [19] 2836 	ld	a, -2 (ix)
   13B0 D6 02         [ 7] 2837 	sub	a, #0x02
   13B2 3E 00         [ 7] 2838 	ld	a, #0x00
   13B4 17            [ 4] 2839 	rla
   13B5 DD 77 F3      [19] 2840 	ld	-13 (ix), a
   13B8 DD 7E FF      [19] 2841 	ld	a, -1 (ix)
   13BB D6 01         [ 7] 2842 	sub	a, #0x01
   13BD 3E 00         [ 7] 2843 	ld	a, #0x00
   13BF 17            [ 4] 2844 	rla
   13C0 DD 77 F4      [19] 2845 	ld	-12 (ix), a
   13C3 21 C5 0D      [10] 2846 	ld	hl, #3525
   13C6 39            [11] 2847 	add	hl, sp
   13C7 DD 75 F5      [19] 2848 	ld	-11 (ix), l
   13CA DD 74 F6      [19] 2849 	ld	-10 (ix), h
   13CD DD 7E F5      [19] 2850 	ld	a, -11 (ix)
   13D0 C6 01         [ 7] 2851 	add	a, #0x01
   13D2 DD 77 F7      [19] 2852 	ld	-9 (ix), a
   13D5 DD 7E F6      [19] 2853 	ld	a, -10 (ix)
   13D8 CE 00         [ 7] 2854 	adc	a, #0x00
   13DA DD 77 F8      [19] 2855 	ld	-8 (ix), a
   13DD AF            [ 4] 2856 	xor	a, a
   13DE DD 77 FE      [19] 2857 	ld	-2 (ix), a
   13E1                    2858 00264$:
                           2859 ;src\CFG8266.c:560: Cls();
   13E1 CDr00r00      [17] 2860 	call	_Cls
                           2861 ;src\CFG8266.c:561: printf("%s%s\r\n\n",strAPSts[chAPStsInfo[0]],&chAPStsInfo[1]);
   13E4 DD 7E F7      [19] 2862 	ld	a, -9 (ix)
   13E7 DD 77 FA      [19] 2863 	ld	-6 (ix), a
   13EA DD 7E F8      [19] 2864 	ld	a, -8 (ix)
   13ED DD 77 FB      [19] 2865 	ld	-5 (ix), a
   13F0 DD 6E F5      [19] 2866 	ld	l, -11 (ix)
   13F3 DD 66 F6      [19] 2867 	ld	h, -10 (ix)
   13F6 7E            [ 7] 2868 	ld	a, (hl)
   13F7 DD 77 FF      [19] 2869 	ld	-1 (ix), a
   13FA DD 77 FC      [19] 2870 	ld	-4 (ix), a
   13FD AF            [ 4] 2871 	xor	a, a
   13FE DD 77 FD      [19] 2872 	ld	-3 (ix), a
   1401 DD 7E FC      [19] 2873 	ld	a, -4 (ix)
   1404 FD 21 10 00   [14] 2874 	ld	iy, #16
   1408 FD 39         [15] 2875 	add	iy, sp
   140A FD 77 00      [19] 2876 	ld	0 (iy), a
   140D DD 7E FD      [19] 2877 	ld	a, -3 (ix)
   1410 FD 77 01      [19] 2878 	ld	1 (iy), a
   1413 FD CB 00 26   [23] 2879 	sla	0 (iy)
   1417 FD CB 01 16   [23] 2880 	rl	1 (iy)
   141B 3Er00         [ 7] 2881 	ld	a, #<(_strAPSts)
   141D 21 10 00      [10] 2882 	ld	hl, #16
   1420 39            [11] 2883 	add	hl, sp
   1421 86            [ 7] 2884 	add	a, (hl)
   1422 DD 77 FC      [19] 2885 	ld	-4 (ix), a
   1425 3Es00         [ 7] 2886 	ld	a, #>(_strAPSts)
   1427 23            [ 6] 2887 	inc	hl
   1428 8E            [ 7] 2888 	adc	a, (hl)
   1429 DD 77 FD      [19] 2889 	ld	-3 (ix), a
   142C DD 6E FC      [19] 2890 	ld	l, -4 (ix)
   142F DD 66 FD      [19] 2891 	ld	h, -3 (ix)
   1432 7E            [ 7] 2892 	ld	a, (hl)
   1433 DD 77 FC      [19] 2893 	ld	-4 (ix), a
   1436 23            [ 6] 2894 	inc	hl
   1437 7E            [ 7] 2895 	ld	a, (hl)
   1438 DD 77 FD      [19] 2896 	ld	-3 (ix), a
   143B DD 6E FA      [19] 2897 	ld	l, -6 (ix)
   143E DD 66 FB      [19] 2898 	ld	h, -5 (ix)
   1441 E5            [11] 2899 	push	hl
   1442 DD 6E FC      [19] 2900 	ld	l, -4 (ix)
   1445 DD 66 FD      [19] 2901 	ld	h, -3 (ix)
   1448 E5            [11] 2902 	push	hl
   1449 21r39r22      [10] 2903 	ld	hl, #___str_39
   144C E5            [11] 2904 	push	hl
   144D CDr00r00      [17] 2905 	call	_printf
   1450 21 06 00      [10] 2906 	ld	hl, #6
   1453 39            [11] 2907 	add	hl, sp
   1454 F9            [ 6] 2908 	ld	sp, hl
                           2909 ;src\CFG8266.c:562: printf("Choose AP:\r\n\n");
   1455 21r41r22      [10] 2910 	ld	hl, #___str_41
   1458 E5            [11] 2911 	push	hl
   1459 CDr00r00      [17] 2912 	call	_puts
   145C F1            [10] 2913 	pop	af
                           2914 ;src\CFG8266.c:564: ucIndex = scanPageLimit*ucScanPage;
   145D DD 7E FE      [19] 2915 	ld	a, -2 (ix)
   1460 4F            [ 4] 2916 	ld	c, a
   1461 87            [ 4] 2917 	add	a, a
   1462 87            [ 4] 2918 	add	a, a
   1463 81            [ 4] 2919 	add	a, c
   1464 87            [ 4] 2920 	add	a, a
   1465 DD 77 FF      [19] 2921 	ld	-1 (ix), a
                           2922 ;src\CFG8266.c:566: if ((ucAPs-ucIndex)<=scanPageLimit)
   1468 DD 7E F0      [19] 2923 	ld	a, -16 (ix)
   146B DD 77 F9      [19] 2924 	ld	-7 (ix), a
   146E AF            [ 4] 2925 	xor	a, a
   146F DD 77 FA      [19] 2926 	ld	-6 (ix), a
   1472 DD 7E FF      [19] 2927 	ld	a, -1 (ix)
   1475 FD 21 10 00   [14] 2928 	ld	iy, #16
   1479 FD 39         [15] 2929 	add	iy, sp
   147B FD 77 00      [19] 2930 	ld	0 (iy), a
   147E AF            [ 4] 2931 	xor	a, a
   147F FD 77 01      [19] 2932 	ld	1 (iy), a
   1482 21 10 00      [10] 2933 	ld	hl, #16
   1485 39            [11] 2934 	add	hl, sp
   1486 DD 7E F9      [19] 2935 	ld	a, -7 (ix)
   1489 96            [ 7] 2936 	sub	a, (hl)
   148A DD 77 FC      [19] 2937 	ld	-4 (ix), a
   148D DD 7E FA      [19] 2938 	ld	a, -6 (ix)
   1490 23            [ 6] 2939 	inc	hl
   1491 9E            [ 7] 2940 	sbc	a, (hl)
   1492 DD 77 FD      [19] 2941 	ld	-3 (ix), a
   1495 3E 0A         [ 7] 2942 	ld	a, #0x0a
   1497 DD BE FC      [19] 2943 	cp	a, -4 (ix)
   149A 3E 00         [ 7] 2944 	ld	a, #0x00
   149C DD 9E FD      [19] 2945 	sbc	a, -3 (ix)
   149F E2rA4r14      [10] 2946 	jp	PO, 01009$
   14A2 EE 80         [ 7] 2947 	xor	a, #0x80
   14A4                    2948 01009$:
   14A4 FArAFr14      [10] 2949 	jp	M, 00182$
                           2950 ;src\CFG8266.c:567: ucPageCheck = ucAPs;
   14A7 DD 7E F0      [19] 2951 	ld	a, -16 (ix)
   14AA DD 77 FB      [19] 2952 	ld	-5 (ix), a
   14AD 18 0B         [12] 2953 	jr	00443$
   14AF                    2954 00182$:
                           2955 ;src\CFG8266.c:569: ucPageCheck = ucIndex + scanPageLimit;
   14AF DD 7E FF      [19] 2956 	ld	a, -1 (ix)
   14B2 DD 77 FD      [19] 2957 	ld	-3 (ix), a
   14B5 C6 0A         [ 7] 2958 	add	a, #0x0a
   14B7 DD 77 FB      [19] 2959 	ld	-5 (ix), a
   14BA                    2960 00443$:
   14BA                    2961 00382$:
                           2962 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   14BA DD 7E FF      [19] 2963 	ld	a, -1 (ix)
   14BD DD 96 FB      [19] 2964 	sub	a, -5 (ix)
   14C0 30 66         [12] 2965 	jr	NC,00187$
                           2966 ;src\CFG8266.c:573: printf("%u - %s",(ucIndex%scanPageLimit),stAP[ucIndex].APName);
   14C2 DD 4E FF      [19] 2967 	ld	c, -1 (ix)
   14C5 06 00         [ 7] 2968 	ld	b, #0x00
   14C7 69            [ 4] 2969 	ld	l, c
   14C8 60            [ 4] 2970 	ld	h, b
   14C9 29            [11] 2971 	add	hl, hl
   14CA 29            [11] 2972 	add	hl, hl
   14CB 29            [11] 2973 	add	hl, hl
   14CC 29            [11] 2974 	add	hl, hl
   14CD 09            [11] 2975 	add	hl, bc
   14CE 29            [11] 2976 	add	hl, hl
   14CF EB            [ 4] 2977 	ex	de, hl
   14D0 DD 6E F1      [19] 2978 	ld	l, -15 (ix)
   14D3 DD 66 F2      [19] 2979 	ld	h, -14 (ix)
   14D6 19            [11] 2980 	add	hl, de
   14D7 DD 75 FC      [19] 2981 	ld	-4 (ix), l
   14DA DD 74 FD      [19] 2982 	ld	-3 (ix), h
   14DD DD 4E FF      [19] 2983 	ld	c, -1 (ix)
   14E0 06 00         [ 7] 2984 	ld	b, #0x00
   14E2 D5            [11] 2985 	push	de
   14E3 21 0A 00      [10] 2986 	ld	hl, #0x000a
   14E6 E5            [11] 2987 	push	hl
   14E7 C5            [11] 2988 	push	bc
   14E8 CDr00r00      [17] 2989 	call	__modsint
   14EB F1            [10] 2990 	pop	af
   14EC F1            [10] 2991 	pop	af
   14ED DD 4E FC      [19] 2992 	ld	c, -4 (ix)
   14F0 DD 46 FD      [19] 2993 	ld	b, -3 (ix)
   14F3 C5            [11] 2994 	push	bc
   14F4 E5            [11] 2995 	push	hl
   14F5 21r4Er22      [10] 2996 	ld	hl, #___str_42
   14F8 E5            [11] 2997 	push	hl
   14F9 CDr00r00      [17] 2998 	call	_printf
   14FC 21 06 00      [10] 2999 	ld	hl, #6
   14FF 39            [11] 3000 	add	hl, sp
   1500 F9            [ 6] 3001 	ld	sp, hl
   1501 D1            [10] 3002 	pop	de
                           3003 ;src\CFG8266.c:574: if (stAP[ucIndex].isEncrypted)
   1502 DD 6E F1      [19] 3004 	ld	l, -15 (ix)
   1505 DD 66 F2      [19] 3005 	ld	h, -14 (ix)
   1508 19            [11] 3006 	add	hl, de
   1509 11 21 00      [10] 3007 	ld	de, #0x0021
   150C 19            [11] 3008 	add	hl, de
   150D 7E            [ 7] 3009 	ld	a, (hl)
   150E B7            [ 4] 3010 	or	a, a
   150F 28 0A         [12] 3011 	jr	Z,00185$
                           3012 ;src\CFG8266.c:575: printf(" (PWD)\r\n");
   1511 21r56r22      [10] 3013 	ld	hl, #___str_44
   1514 E5            [11] 3014 	push	hl
   1515 CDr00r00      [17] 3015 	call	_puts
   1518 F1            [10] 3016 	pop	af
   1519 18 08         [12] 3017 	jr	00383$
   151B                    3018 00185$:
                           3019 ;src\CFG8266.c:577: printf(" (OPEN)\r\n");
   151B 21r5Er22      [10] 3020 	ld	hl, #___str_46
   151E E5            [11] 3021 	push	hl
   151F CDr00r00      [17] 3022 	call	_puts
   1522 F1            [10] 3023 	pop	af
   1523                    3024 00383$:
                           3025 ;src\CFG8266.c:571: for (;ucIndex<ucPageCheck;ucIndex++)
   1523 DD 34 FF      [23] 3026 	inc	-1 (ix)
   1526 18 92         [12] 3027 	jr	00382$
   1528                    3028 00187$:
                           3029 ;src\CFG8266.c:580: if (ucAPs-ucIndex) // still APs left to list?
   1528 DD 4E FF      [19] 3030 	ld	c, -1 (ix)
   152B 06 00         [ 7] 3031 	ld	b, #0x00
   152D DD 7E F9      [19] 3032 	ld	a, -7 (ix)
   1530 91            [ 4] 3033 	sub	a, c
   1531 DD 77 FC      [19] 3034 	ld	-4 (ix), a
   1534 DD 7E FA      [19] 3035 	ld	a, -6 (ix)
   1537 98            [ 4] 3036 	sbc	a, b
   1538 DD 77 FD      [19] 3037 	ld	-3 (ix), a
   153B DD B6 FC      [19] 3038 	or	a, -4 (ix)
   153E 28 0A         [12] 3039 	jr	Z,00189$
                           3040 ;src\CFG8266.c:581: printf("\r\nWhich one to connect? (ESC exit/SPACE BAR next page)");
   1540 21r67r22      [10] 3041 	ld	hl, #___str_47
   1543 E5            [11] 3042 	push	hl
   1544 CDr00r00      [17] 3043 	call	_printf
   1547 F1            [10] 3044 	pop	af
   1548 18 08         [12] 3045 	jr	00204$
   154A                    3046 00189$:
                           3047 ;src\CFG8266.c:583: printf("\r\nWhich one to connect? (ESC exit)");
   154A 21r9Er22      [10] 3048 	ld	hl, #___str_48
   154D E5            [11] 3049 	push	hl
   154E CDr00r00      [17] 3050 	call	_printf
   1551 F1            [10] 3051 	pop	af
                           3052 ;src\CFG8266.c:585: do
   1552                    3053 00204$:
                           3054 ;src\CFG8266.c:587: tx_data = Inkey ();
   1552 CDr00r00      [17] 3055 	call	_Inkey
   1555 4D            [ 4] 3056 	ld	c, l
                           3057 ;src\CFG8266.c:589: if (tx_data==0x1b)
                           3058 ;src\CFG8266.c:592: if ((tx_data==' ')&&(ucAPs-ucIndex))
   1556 79            [ 4] 3059 	ld	a,c
   1557 FE 1B         [ 7] 3060 	cp	a,#0x1b
   1559 28 54         [12] 3061 	jr	Z,00206$
   155B D6 20         [ 7] 3062 	sub	a, #0x20
   155D 20 08         [12] 3063 	jr	NZ,00194$
   155F DD 7E FD      [19] 3064 	ld	a, -3 (ix)
   1562 DD B6 FC      [19] 3065 	or	a, -4 (ix)
   1565 20 48         [12] 3066 	jr	NZ,00206$
                           3067 ;src\CFG8266.c:593: break;
   1567                    3068 00194$:
                           3069 ;src\CFG8266.c:595: if ((tx_data>='0')&&(tx_data<='9'))
   1567 79            [ 4] 3070 	ld	a, c
   1568 D6 30         [ 7] 3071 	sub	a, #0x30
   156A 38 3A         [12] 3072 	jr	C,00200$
   156C 3E 39         [ 7] 3073 	ld	a, #0x39
   156E 91            [ 4] 3074 	sub	a, c
   156F 38 35         [12] 3075 	jr	C,00200$
                           3076 ;src\CFG8266.c:597: if (((tx_data-'0')<scanPageLimit)&&(((scanPageLimit*ucScanPage)+(tx_data-'0'))<ucAPs))
   1571 41            [ 4] 3077 	ld	b, c
   1572 16 00         [ 7] 3078 	ld	d, #0x00
   1574 78            [ 4] 3079 	ld	a, b
   1575 C6 D0         [ 7] 3080 	add	a, #0xd0
   1577 5F            [ 4] 3081 	ld	e, a
   1578 7A            [ 4] 3082 	ld	a, d
   1579 CE FF         [ 7] 3083 	adc	a, #0xff
   157B 57            [ 4] 3084 	ld	d, a
   157C 7B            [ 4] 3085 	ld	a, e
   157D D6 0A         [ 7] 3086 	sub	a, #0x0a
   157F 7A            [ 4] 3087 	ld	a, d
   1580 17            [ 4] 3088 	rla
   1581 3F            [ 4] 3089 	ccf
   1582 1F            [ 4] 3090 	rra
   1583 DE 80         [ 7] 3091 	sbc	a, #0x80
   1585 30 1F         [12] 3092 	jr	NC,00200$
   1587 DD 6E FE      [19] 3093 	ld	l, -2 (ix)
   158A 26 00         [ 7] 3094 	ld	h, #0x00
   158C D5            [11] 3095 	push	de
   158D 5D            [ 4] 3096 	ld	e, l
   158E 54            [ 4] 3097 	ld	d, h
   158F 29            [11] 3098 	add	hl, hl
   1590 29            [11] 3099 	add	hl, hl
   1591 19            [11] 3100 	add	hl, de
   1592 29            [11] 3101 	add	hl, hl
   1593 D1            [10] 3102 	pop	de
   1594 19            [11] 3103 	add	hl, de
   1595 EB            [ 4] 3104 	ex	de, hl
   1596 7B            [ 4] 3105 	ld	a, e
   1597 DD 96 F9      [19] 3106 	sub	a, -7 (ix)
   159A 7A            [ 4] 3107 	ld	a, d
   159B DD 9E FA      [19] 3108 	sbc	a, -6 (ix)
   159E E2rA3r15      [10] 3109 	jp	PO, 01013$
   15A1 EE 80         [ 7] 3110 	xor	a, #0x80
   15A3                    3111 01013$:
   15A3 FArAFr15      [10] 3112 	jp	M, 00206$
                           3113 ;src\CFG8266.c:598: break;
   15A6                    3114 00200$:
                           3115 ;src\CFG8266.c:600: if (tx_data)
   15A6 79            [ 4] 3116 	ld	a, c
   15A7 B7            [ 4] 3117 	or	a, a
   15A8 28 A8         [12] 3118 	jr	Z,00204$
                           3119 ;src\CFG8266.c:601: Beep();
   15AA CDr00r00      [17] 3120 	call	_Beep
                           3121 ;src\CFG8266.c:603: while (1);
   15AD 18 A3         [12] 3122 	jr	00204$
   15AF                    3123 00206$:
                           3124 ;src\CFG8266.c:605: if ((tx_data!=0x1b)&&(tx_data!=' ')) // AP Choosen?
   15AF 79            [ 4] 3125 	ld	a,c
   15B0 FE 1B         [ 7] 3126 	cp	a,#0x1b
   15B2 CArC4r17      [10] 3127 	jp	Z,00261$
   15B5 D6 20         [ 7] 3128 	sub	a, #0x20
   15B7 CArC4r17      [10] 3129 	jp	Z,00261$
                           3130 ;src\CFG8266.c:608: printf(" %c\r\n\n",tx_data); // Print accepted char
   15BA 59            [ 4] 3131 	ld	e, c
   15BB 16 00         [ 7] 3132 	ld	d, #0x00
   15BD C5            [11] 3133 	push	bc
   15BE D5            [11] 3134 	push	de
   15BF 21rC1r22      [10] 3135 	ld	hl, #___str_49
   15C2 E5            [11] 3136 	push	hl
   15C3 CDr00r00      [17] 3137 	call	_printf
   15C6 F1            [10] 3138 	pop	af
   15C7 F1            [10] 3139 	pop	af
   15C8 C1            [10] 3140 	pop	bc
                           3141 ;src\CFG8266.c:609: ucIndex = (scanPageLimit*ucScanPage) + (tx_data-'0');
   15C9 DD 7E EF      [19] 3142 	ld	a, -17 (ix)
   15CC 5F            [ 4] 3143 	ld	e, a
   15CD 87            [ 4] 3144 	add	a, a
   15CE 87            [ 4] 3145 	add	a, a
   15CF 83            [ 4] 3146 	add	a, e
   15D0 87            [ 4] 3147 	add	a, a
   15D1 5F            [ 4] 3148 	ld	e, a
   15D2 79            [ 4] 3149 	ld	a, c
   15D3 C6 D0         [ 7] 3150 	add	a, #0xd0
   15D5 83            [ 4] 3151 	add	a, e
                           3152 ;src\CFG8266.c:610: if (stAP[ucIndex].isEncrypted)
   15D6 4F            [ 4] 3153 	ld	c, a
   15D7 06 00         [ 7] 3154 	ld	b, #0x00
   15D9 69            [ 4] 3155 	ld	l, c
   15DA 60            [ 4] 3156 	ld	h, b
   15DB 29            [11] 3157 	add	hl, hl
   15DC 29            [11] 3158 	add	hl, hl
   15DD 29            [11] 3159 	add	hl, hl
   15DE 29            [11] 3160 	add	hl, hl
   15DF 09            [11] 3161 	add	hl, bc
   15E0 29            [11] 3162 	add	hl, hl
   15E1 DD 75 FC      [19] 3163 	ld	-4 (ix), l
   15E4 DD 74 FD      [19] 3164 	ld	-3 (ix), h
   15E7 DD 7E F1      [19] 3165 	ld	a, -15 (ix)
   15EA DD 86 FC      [19] 3166 	add	a, -4 (ix)
   15ED 4F            [ 4] 3167 	ld	c, a
   15EE DD 7E F2      [19] 3168 	ld	a, -14 (ix)
   15F1 DD 8E FD      [19] 3169 	adc	a, -3 (ix)
   15F4 47            [ 4] 3170 	ld	b, a
   15F5 21 21 00      [10] 3171 	ld	hl, #0x0021
   15F8 09            [11] 3172 	add	hl, bc
   15F9 DD 75 FE      [19] 3173 	ld	-2 (ix), l
   15FC DD 74 FF      [19] 3174 	ld	-1 (ix), h
   15FF 7E            [ 7] 3175 	ld	a, (hl)
   1600 B7            [ 4] 3176 	or	a, a
   1601 28 21         [12] 3177 	jr	Z,00208$
                           3178 ;src\CFG8266.c:613: printf("Password? ");
   1603 C5            [11] 3179 	push	bc
   1604 21rC8r22      [10] 3180 	ld	hl, #___str_50
   1607 E5            [11] 3181 	push	hl
   1608 CDr00r00      [17] 3182 	call	_printf
   160B F1            [10] 3183 	pop	af
   160C C1            [10] 3184 	pop	bc
                           3185 ;src\CFG8266.c:614: InputString(ucPWD,64);
   160D 21 12 00      [10] 3186 	ld	hl, #18
   1610 39            [11] 3187 	add	hl, sp
   1611 C5            [11] 3188 	push	bc
   1612 11 40 00      [10] 3189 	ld	de, #0x0040
   1615 D5            [11] 3190 	push	de
   1616 E5            [11] 3191 	push	hl
   1617 CDr00r00      [17] 3192 	call	_InputString
   161A F1            [10] 3193 	pop	af
   161B 21r37r22      [10] 3194 	ld	hl, #___str_38
   161E E3            [19] 3195 	ex	(sp),hl
   161F CDr00r00      [17] 3196 	call	_puts
   1622 F1            [10] 3197 	pop	af
   1623 C1            [10] 3198 	pop	bc
   1624                    3199 00208$:
                           3200 ;src\CFG8266.c:618: printf("Connecting to: %s \r\n",stAP[ucIndex].APName);
   1624 59            [ 4] 3201 	ld	e, c
   1625 50            [ 4] 3202 	ld	d, b
   1626 C5            [11] 3203 	push	bc
   1627 D5            [11] 3204 	push	de
   1628 21rD3r22      [10] 3205 	ld	hl, #___str_52
   162B E5            [11] 3206 	push	hl
   162C CDr00r00      [17] 3207 	call	_printf
   162F F1            [10] 3208 	pop	af
   1630 F1            [10] 3209 	pop	af
   1631 CDr00r00      [17] 3210 	call	_strlen
   1634 F1            [10] 3211 	pop	af
   1635 23            [ 6] 3212 	inc	hl
   1636 4D            [ 4] 3213 	ld	c,l
   1637 44            [ 4] 3214 	ld	b,h
                           3215 ;src\CFG8266.c:621: if (stAP[ucIndex].isEncrypted)
   1638 DD 6E FE      [19] 3216 	ld	l, -2 (ix)
   163B DD 66 FF      [19] 3217 	ld	h, -1 (ix)
   163E 7E            [ 7] 3218 	ld	a, (hl)
   163F B7            [ 4] 3219 	or	a, a
   1640 28 0E         [12] 3220 	jr	Z,00210$
                           3221 ;src\CFG8266.c:622: uiCMDLen += strlen(ucPWD);
   1642 21 12 00      [10] 3222 	ld	hl, #18
   1645 39            [11] 3223 	add	hl, sp
   1646 C5            [11] 3224 	push	bc
   1647 E5            [11] 3225 	push	hl
   1648 CDr00r00      [17] 3226 	call	_strlen
   164B F1            [10] 3227 	pop	af
   164C C1            [10] 3228 	pop	bc
   164D 09            [11] 3229 	add	hl, bc
   164E 4D            [ 4] 3230 	ld	c, l
   164F 44            [ 4] 3231 	ld	b, h
   1650                    3232 00210$:
                           3233 ;src\CFG8266.c:623: TxByte('A'); //Request connect AP
   1650 C5            [11] 3234 	push	bc
   1651 3E 41         [ 7] 3235 	ld	a, #0x41
   1653 F5            [11] 3236 	push	af
   1654 33            [ 6] 3237 	inc	sp
   1655 CDr5Dr07      [17] 3238 	call	_TxByte
   1658 33            [ 6] 3239 	inc	sp
   1659 C1            [10] 3240 	pop	bc
                           3241 ;src\CFG8266.c:624: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   165A 78            [ 4] 3242 	ld	a, b
   165B C5            [11] 3243 	push	bc
   165C F5            [11] 3244 	push	af
   165D 33            [ 6] 3245 	inc	sp
   165E CDr5Dr07      [17] 3246 	call	_TxByte
   1661 33            [ 6] 3247 	inc	sp
   1662 C1            [10] 3248 	pop	bc
                           3249 ;src\CFG8266.c:625: TxByte((unsigned char)(uiCMDLen&0xff));
   1663 79            [ 4] 3250 	ld	a, c
   1664 C5            [11] 3251 	push	bc
   1665 F5            [11] 3252 	push	af
   1666 33            [ 6] 3253 	inc	sp
   1667 CDr5Dr07      [17] 3254 	call	_TxByte
   166A 33            [ 6] 3255 	inc	sp
   166B C1            [10] 3256 	pop	bc
                           3257 ;src\CFG8266.c:627: do
   166C DD 7E FC      [19] 3258 	ld	a, -4 (ix)
   166F DD 86 F1      [19] 3259 	add	a, -15 (ix)
   1672 DD 77 FE      [19] 3260 	ld	-2 (ix), a
   1675 DD 7E FD      [19] 3261 	ld	a, -3 (ix)
   1678 DD 8E F2      [19] 3262 	adc	a, -14 (ix)
   167B DD 77 FF      [19] 3263 	ld	-1 (ix), a
   167E 1E 00         [ 7] 3264 	ld	e, #0x00
   1680                    3265 00212$:
                           3266 ;src\CFG8266.c:629: tx_data = stAP[ucIndex].APName[rx_data];
   1680 DD 7E FE      [19] 3267 	ld	a, -2 (ix)
   1683 83            [ 4] 3268 	add	a, e
   1684 57            [ 4] 3269 	ld	d, a
   1685 DD 7E FF      [19] 3270 	ld	a, -1 (ix)
   1688 CE 00         [ 7] 3271 	adc	a, #0x00
   168A 6A            [ 4] 3272 	ld	l, d
   168B 67            [ 4] 3273 	ld	h, a
   168C 56            [ 7] 3274 	ld	d, (hl)
                           3275 ;src\CFG8266.c:630: TxByte(tx_data);
   168D C5            [11] 3276 	push	bc
   168E D5            [11] 3277 	push	de
   168F D5            [11] 3278 	push	de
   1690 33            [ 6] 3279 	inc	sp
   1691 CDr5Dr07      [17] 3280 	call	_TxByte
   1694 33            [ 6] 3281 	inc	sp
   1695 D1            [10] 3282 	pop	de
   1696 C1            [10] 3283 	pop	bc
                           3284 ;src\CFG8266.c:631: --uiCMDLen;
   1697 0B            [ 6] 3285 	dec	bc
                           3286 ;src\CFG8266.c:632: ++rx_data;
   1698 1C            [ 4] 3287 	inc	e
                           3288 ;src\CFG8266.c:634: while((uiCMDLen)&&(tx_data!=0));
   1699 78            [ 4] 3289 	ld	a, b
   169A B1            [ 4] 3290 	or	a, c
   169B 28 04         [12] 3291 	jr	Z,00214$
   169D 7A            [ 4] 3292 	ld	a, d
   169E B7            [ 4] 3293 	or	a, a
   169F 20 DF         [12] 3294 	jr	NZ,00212$
   16A1                    3295 00214$:
                           3296 ;src\CFG8266.c:635: if(uiCMDLen)
   16A1 78            [ 4] 3297 	ld	a, b
   16A2 B1            [ 4] 3298 	or	a, c
   16A3 28 2C         [12] 3299 	jr	Z,00219$
                           3300 ;src\CFG8266.c:638: do
   16A5 21 12 00      [10] 3301 	ld	hl, #18
   16A8 39            [11] 3302 	add	hl, sp
   16A9 DD 75 FD      [19] 3303 	ld	-3 (ix), l
   16AC DD 74 FE      [19] 3304 	ld	-2 (ix), h
   16AF AF            [ 4] 3305 	xor	a, a
   16B0 DD 77 FF      [19] 3306 	ld	-1 (ix), a
   16B3                    3307 00215$:
                           3308 ;src\CFG8266.c:640: tx_data = ucPWD[rx_data];
   16B3 DD 7E FD      [19] 3309 	ld	a, -3 (ix)
   16B6 DD 86 FF      [19] 3310 	add	a, -1 (ix)
   16B9 5F            [ 4] 3311 	ld	e, a
   16BA DD 7E FE      [19] 3312 	ld	a, -2 (ix)
   16BD CE 00         [ 7] 3313 	adc	a, #0x00
   16BF 57            [ 4] 3314 	ld	d, a
   16C0 1A            [ 7] 3315 	ld	a, (de)
                           3316 ;src\CFG8266.c:641: TxByte(tx_data);
   16C1 C5            [11] 3317 	push	bc
   16C2 F5            [11] 3318 	push	af
   16C3 33            [ 6] 3319 	inc	sp
   16C4 CDr5Dr07      [17] 3320 	call	_TxByte
   16C7 33            [ 6] 3321 	inc	sp
   16C8 C1            [10] 3322 	pop	bc
                           3323 ;src\CFG8266.c:642: --uiCMDLen;
   16C9 0B            [ 6] 3324 	dec	bc
                           3325 ;src\CFG8266.c:643: ++rx_data;
   16CA DD 34 FF      [23] 3326 	inc	-1 (ix)
                           3327 ;src\CFG8266.c:645: while(uiCMDLen);
   16CD 78            [ 4] 3328 	ld	a, b
   16CE B1            [ 4] 3329 	or	a, c
   16CF 20 E2         [12] 3330 	jr	NZ,00215$
   16D1                    3331 00219$:
                           3332 ;src\CFG8266.c:649: bResponse = WaitForRXData(apconfigurationResponse,2,600,true,false,NULL,0); //Wait up to 10s
   16D1 21 00 00      [10] 3333 	ld	hl, #0x0000
   16D4 E5            [11] 3334 	push	hl
   16D5 2E 00         [ 7] 3335 	ld	l, #0x00
   16D7 E5            [11] 3336 	push	hl
   16D8 AF            [ 4] 3337 	xor	a, a
   16D9 57            [ 4] 3338 	ld	d,a
   16DA 1E 01         [ 7] 3339 	ld	e,#0x01
   16DC D5            [11] 3340 	push	de
   16DD 21 58 02      [10] 3341 	ld	hl, #0x0258
   16E0 E5            [11] 3342 	push	hl
   16E1 21 02 00      [10] 3343 	ld	hl, #0x0002
   16E4 E5            [11] 3344 	push	hl
   16E5 21r1Ar01      [10] 3345 	ld	hl, #_apconfigurationResponse
   16E8 E5            [11] 3346 	push	hl
   16E9 CDrD9r08      [17] 3347 	call	_WaitForRXData
   16EC FD 21 0C 00   [14] 3348 	ld	iy, #12
   16F0 FD 39         [15] 3349 	add	iy, sp
   16F2 FD F9         [10] 3350 	ld	sp, iy
   16F4 7D            [ 4] 3351 	ld	a, l
                           3352 ;src\CFG8266.c:650: if (bResponse)
   16F5 B7            [ 4] 3353 	or	a, a
   16F6 28 0B         [12] 3354 	jr	Z,00241$
                           3355 ;src\CFG8266.c:651: printf("Success, AP configured to be used.\r\n");
   16F8 21rE8r22      [10] 3356 	ld	hl, #___str_54
   16FB E5            [11] 3357 	push	hl
   16FC CDr00r00      [17] 3358 	call	_puts
   16FF F1            [10] 3359 	pop	af
   1700 C3r5Dr21      [10] 3360 	jp	00375$
   1703                    3361 00241$:
                           3362 ;src\CFG8266.c:654: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   1703 DD CB F4 46   [20] 3363 	bit	0, -12 (ix)
   1707 C2rB9r17      [10] 3364 	jp	NZ, 00237$
   170A DD CB F3 46   [20] 3365 	bit	0, -13 (ix)
   170E C2rB9r17      [10] 3366 	jp	NZ, 00237$
                           3367 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   1711 01 5A 00      [10] 3368 	ld	bc, #0x005a
   1714                    3369 00384$:
                           3370 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   1714 76            [ 4] 3371 	halt
                           3372 ;src\CFG8266.c:656: for (i=90;i>0;--i)
   1715 0B            [ 6] 3373 	dec	bc
   1716 78            [ 4] 3374 	ld	a, b
   1717 B1            [ 4] 3375 	or	a, c
   1718 20 FA         [12] 3376 	jr	NZ,00384$
                           3377 ;src\CFG8266.c:658: TxByte('g'); //Request current AP status
   171A 3E 67         [ 7] 3378 	ld	a, #0x67
   171C F5            [11] 3379 	push	af
   171D 33            [ 6] 3380 	inc	sp
   171E CDr5Dr07      [17] 3381 	call	_TxByte
   1721 33            [ 6] 3382 	inc	sp
                           3383 ;src\CFG8266.c:659: bResponse = WaitForRXData(apstsResponse,3,120,true,false,NULL,0);
   1722 21 00 00      [10] 3384 	ld	hl, #0x0000
   1725 E5            [11] 3385 	push	hl
   1726 2E 00         [ 7] 3386 	ld	l, #0x00
   1728 E5            [11] 3387 	push	hl
   1729 AF            [ 4] 3388 	xor	a, a
   172A 57            [ 4] 3389 	ld	d,a
   172B 1E 01         [ 7] 3390 	ld	e,#0x01
   172D D5            [11] 3391 	push	de
   172E 2E 78         [ 7] 3392 	ld	l, #0x78
   1730 E5            [11] 3393 	push	hl
   1731 2E 03         [ 7] 3394 	ld	l, #0x03
   1733 E5            [11] 3395 	push	hl
   1734 21r1Cr01      [10] 3396 	ld	hl, #_apstsResponse
   1737 E5            [11] 3397 	push	hl
   1738 CDrD9r08      [17] 3398 	call	_WaitForRXData
   173B FD 21 0C 00   [14] 3399 	ld	iy, #12
   173F FD 39         [15] 3400 	add	iy, sp
   1741 FD F9         [10] 3401 	ld	sp, iy
   1743 7D            [ 4] 3402 	ld	a, l
                           3403 ;src\CFG8266.c:660: if (bResponse)
   1744 B7            [ 4] 3404 	or	a, a
   1745 28 67         [12] 3405 	jr	Z,00234$
                           3406 ;src\CFG8266.c:662: while(!UartRXData());
   1747                    3407 00221$:
   1747 DB 07         [11] 3408 	in	a, (_myPort7)
   1749 D6 01         [ 7] 3409 	sub	a,#0x01
   174B 3E 00         [ 7] 3410 	ld	a, #0x00
   174D 17            [ 4] 3411 	rla
   174E CB 47         [ 8] 3412 	bit	0, a
   1750 20 F5         [12] 3413 	jr	NZ,00221$
                           3414 ;src\CFG8266.c:663: ucAPstsRspSize=GetUARTData();
   1752 DB 06         [11] 3415 	in	a, (_myPort6)
   1754 4F            [ 4] 3416 	ld	c, a
                           3417 ;src\CFG8266.c:667: while(!UartRXData());
   1755 AF            [ 4] 3418 	xor	a, a
   1756 DD 77 FE      [19] 3419 	ld	-2 (ix), a
   1759 DD 77 FF      [19] 3420 	ld	-1 (ix), a
   175C                    3421 00224$:
   175C DB 07         [11] 3422 	in	a, (_myPort7)
   175E D6 01         [ 7] 3423 	sub	a,#0x01
   1760 3E 00         [ 7] 3424 	ld	a, #0x00
   1762 17            [ 4] 3425 	rla
   1763 CB 47         [ 8] 3426 	bit	0, a
   1765 20 F5         [12] 3427 	jr	NZ,00224$
                           3428 ;src\CFG8266.c:668: chAPStsInfo[i]=GetUARTData();
   1767 DD 7E F5      [19] 3429 	ld	a, -11 (ix)
   176A DD 86 FE      [19] 3430 	add	a, -2 (ix)
   176D 5F            [ 4] 3431 	ld	e, a
   176E DD 7E F6      [19] 3432 	ld	a, -10 (ix)
   1771 DD 8E FF      [19] 3433 	adc	a, -1 (ix)
   1774 57            [ 4] 3434 	ld	d, a
   1775 DB 06         [11] 3435 	in	a, (_myPort6)
   1777 12            [ 7] 3436 	ld	(de), a
                           3437 ;src\CFG8266.c:669: ++i;
   1778 DD 34 FE      [23] 3438 	inc	-2 (ix)
   177B 20 03         [12] 3439 	jr	NZ,01016$
   177D DD 34 FF      [23] 3440 	inc	-1 (ix)
   1780                    3441 01016$:
                           3442 ;src\CFG8266.c:671: while(i<ucAPstsRspSize);
   1780 41            [ 4] 3443 	ld	b, c
   1781 1E 00         [ 7] 3444 	ld	e, #0x00
   1783 DD 7E FE      [19] 3445 	ld	a, -2 (ix)
   1786 90            [ 4] 3446 	sub	a, b
   1787 DD 7E FF      [19] 3447 	ld	a, -1 (ix)
   178A 9B            [ 4] 3448 	sbc	a, e
   178B 38 CF         [12] 3449 	jr	C,00224$
                           3450 ;src\CFG8266.c:673: if (chAPStsInfo[0]==2)
   178D DD 6E F5      [19] 3451 	ld	l, -11 (ix)
   1790 DD 66 F6      [19] 3452 	ld	h, -10 (ix)
   1793 7E            [ 7] 3453 	ld	a, (hl)
   1794 D6 02         [ 7] 3454 	sub	a, #0x02
   1796 20 0B         [12] 3455 	jr	NZ,00231$
                           3456 ;src\CFG8266.c:674: printf("Error, wrong password!\r\n");
   1798 21r0Cr23      [10] 3457 	ld	hl, #___str_56
   179B E5            [11] 3458 	push	hl
   179C CDr00r00      [17] 3459 	call	_puts
   179F F1            [10] 3460 	pop	af
   17A0 C3r5Dr21      [10] 3461 	jp	00375$
   17A3                    3462 00231$:
                           3463 ;src\CFG8266.c:676: printf("Error, if protected network, check password.\r\n");
   17A3 21r24r23      [10] 3464 	ld	hl, #___str_58
   17A6 E5            [11] 3465 	push	hl
   17A7 CDr00r00      [17] 3466 	call	_puts
   17AA F1            [10] 3467 	pop	af
   17AB C3r5Dr21      [10] 3468 	jp	00375$
   17AE                    3469 00234$:
                           3470 ;src\CFG8266.c:679: printf("Error, if protected network, check password.\r\n");
   17AE 21r24r23      [10] 3471 	ld	hl, #___str_58
   17B1 E5            [11] 3472 	push	hl
   17B2 CDr00r00      [17] 3473 	call	_puts
   17B5 F1            [10] 3474 	pop	af
   17B6 C3r5Dr21      [10] 3475 	jp	00375$
   17B9                    3476 00237$:
                           3477 ;src\CFG8266.c:682: printf("Error, if protected network, check password.\r\n");
   17B9 21r24r23      [10] 3478 	ld	hl, #___str_58
   17BC E5            [11] 3479 	push	hl
   17BD CDr00r00      [17] 3480 	call	_puts
   17C0 F1            [10] 3481 	pop	af
                           3482 ;src\CFG8266.c:685: break;
   17C1 C3r5Dr21      [10] 3483 	jp	00375$
   17C4                    3484 00261$:
                           3485 ;src\CFG8266.c:687: else if (tx_data==0x1b)
   17C4 79            [ 4] 3486 	ld	a, c
   17C5 D6 1B         [ 7] 3487 	sub	a, #0x1b
   17C7 20 0B         [12] 3488 	jr	NZ,00258$
                           3489 ;src\CFG8266.c:689: printf("\r\nUser canceled by ESC key...\r\n");
   17C9 21r52r23      [10] 3490 	ld	hl, #___str_62
   17CC E5            [11] 3491 	push	hl
   17CD CDr00r00      [17] 3492 	call	_puts
   17D0 F1            [10] 3493 	pop	af
                           3494 ;src\CFG8266.c:690: break;
   17D1 C3r5Dr21      [10] 3495 	jp	00375$
   17D4                    3496 00258$:
                           3497 ;src\CFG8266.c:694: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   17D4 DD CB F4 46   [20] 3498 	bit	0, -12 (ix)
   17D8 20 67         [12] 3499 	jr	NZ,00255$
   17DA DD CB F3 46   [20] 3500 	bit	0, -13 (ix)
   17DE 20 61         [12] 3501 	jr	NZ,00255$
                           3502 ;src\CFG8266.c:696: TxByte('g'); //Request current AP status
   17E0 3E 67         [ 7] 3503 	ld	a, #0x67
   17E2 F5            [11] 3504 	push	af
   17E3 33            [ 6] 3505 	inc	sp
   17E4 CDr5Dr07      [17] 3506 	call	_TxByte
   17E7 33            [ 6] 3507 	inc	sp
                           3508 ;src\CFG8266.c:697: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   17E8 21 00 00      [10] 3509 	ld	hl, #0x0000
   17EB E5            [11] 3510 	push	hl
   17EC 2E 00         [ 7] 3511 	ld	l, #0x00
   17EE E5            [11] 3512 	push	hl
   17EF AF            [ 4] 3513 	xor	a, a
   17F0 57            [ 4] 3514 	ld	d,a
   17F1 1E 01         [ 7] 3515 	ld	e,#0x01
   17F3 D5            [11] 3516 	push	de
   17F4 2E 1E         [ 7] 3517 	ld	l, #0x1e
   17F6 E5            [11] 3518 	push	hl
   17F7 2E 03         [ 7] 3519 	ld	l, #0x03
   17F9 E5            [11] 3520 	push	hl
   17FA 21r1Cr01      [10] 3521 	ld	hl, #_apstsResponse
   17FD E5            [11] 3522 	push	hl
   17FE CDrD9r08      [17] 3523 	call	_WaitForRXData
   1801 FD 21 0C 00   [14] 3524 	ld	iy, #12
   1805 FD 39         [15] 3525 	add	iy, sp
   1807 FD F9         [10] 3526 	ld	sp, iy
   1809 7D            [ 4] 3527 	ld	a, l
                           3528 ;src\CFG8266.c:698: if (bResponse)
   180A B7            [ 4] 3529 	or	a, a
   180B 28 34         [12] 3530 	jr	Z,00255$
                           3531 ;src\CFG8266.c:700: while(!UartRXData());
   180D                    3532 00243$:
   180D DB 07         [11] 3533 	in	a, (_myPort7)
   180F D6 01         [ 7] 3534 	sub	a,#0x01
   1811 3E 00         [ 7] 3535 	ld	a, #0x00
   1813 17            [ 4] 3536 	rla
   1814 CB 47         [ 8] 3537 	bit	0, a
   1816 20 F5         [12] 3538 	jr	NZ,00243$
                           3539 ;src\CFG8266.c:701: ucAPstsRspSize=GetUARTData();
   1818 DB 06         [11] 3540 	in	a, (_myPort6)
   181A DD 77 FF      [19] 3541 	ld	-1 (ix), a
                           3542 ;src\CFG8266.c:705: while(!UartRXData());
   181D 11 00 00      [10] 3543 	ld	de, #0x0000
   1820                    3544 00246$:
   1820 DB 07         [11] 3545 	in	a, (_myPort7)
   1822 D6 01         [ 7] 3546 	sub	a,#0x01
   1824 3E 00         [ 7] 3547 	ld	a, #0x00
   1826 17            [ 4] 3548 	rla
   1827 CB 47         [ 8] 3549 	bit	0, a
   1829 20 F5         [12] 3550 	jr	NZ,00246$
                           3551 ;src\CFG8266.c:706: chAPStsInfo[i]=GetUARTData();
   182B DD 6E F5      [19] 3552 	ld	l, -11 (ix)
   182E DD 66 F6      [19] 3553 	ld	h, -10 (ix)
   1831 19            [11] 3554 	add	hl, de
   1832 DB 06         [11] 3555 	in	a, (_myPort6)
   1834 77            [ 7] 3556 	ld	(hl), a
                           3557 ;src\CFG8266.c:707: ++i;
   1835 13            [ 6] 3558 	inc	de
                           3559 ;src\CFG8266.c:709: while(i<ucAPstsRspSize);
   1836 DD 4E FF      [19] 3560 	ld	c, -1 (ix)
   1839 06 00         [ 7] 3561 	ld	b, #0x00
   183B 7B            [ 4] 3562 	ld	a, e
   183C 91            [ 4] 3563 	sub	a, c
   183D 7A            [ 4] 3564 	ld	a, d
   183E 98            [ 4] 3565 	sbc	a, b
   183F 38 DF         [12] 3566 	jr	C,00246$
   1841                    3567 00255$:
                           3568 ;src\CFG8266.c:712: ++ucScanPage;
   1841 DD 34 FE      [23] 3569 	inc	-2 (ix)
   1844 DD 7E FE      [19] 3570 	ld	a, -2 (ix)
   1847 DD 77 EF      [19] 3571 	ld	-17 (ix), a
                           3572 ;src\CFG8266.c:715: while(1);
   184A C3rE1r13      [10] 3573 	jp	00264$
   184D                    3574 00268$:
                           3575 ;src\CFG8266.c:718: printf("\r\nScan results: no answer...\r\n");
   184D 21r71r23      [10] 3576 	ld	hl, #___str_64
   1850 E5            [11] 3577 	push	hl
   1851 CDr00r00      [17] 3578 	call	_puts
   1854 F1            [10] 3579 	pop	af
   1855 C3r5Dr21      [10] 3580 	jp	00375$
   1858                    3581 00294$:
                           3582 ;src\CFG8266.c:722: if (ucScan)
   1858 3Ar00r00      [13] 3583 	ld	a,(#_ucScan + 0)
   185B B7            [ 4] 3584 	or	a, a
   185C 28 0B         [12] 3585 	jr	Z,00291$
                           3586 ;src\CFG8266.c:723: printf ("\rScan request: no answer...\r\n");
   185E 21r8Fr23      [10] 3587 	ld	hl, #___str_66
   1861 E5            [11] 3588 	push	hl
   1862 CDr00r00      [17] 3589 	call	_puts
   1865 F1            [10] 3590 	pop	af
   1866 C3r5Dr21      [10] 3591 	jp	00375$
   1869                    3592 00291$:
                           3593 ;src\CFG8266.c:724: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   1869 3Ar09r00      [13] 3594 	ld	a,(#_ucNagleOff + 0)
   186C B7            [ 4] 3595 	or	a, a
   186D 20 06         [12] 3596 	jr	NZ,00289$
   186F 3Ar0Ar00      [13] 3597 	ld	a,(#_ucNagleOn + 0)
   1872 B7            [ 4] 3598 	or	a, a
   1873 28 14         [12] 3599 	jr	Z,00286$
   1875                    3600 00289$:
   1875 DD 7E FB      [19] 3601 	ld	a, -5 (ix)
   1878 B7            [ 4] 3602 	or	a, a
   1879 28 0E         [12] 3603 	jr	Z,00286$
                           3604 ;src\CFG8266.c:726: printf("\rNagle set as requested...\r\n");
   187B 21rACr23      [10] 3605 	ld	hl, #___str_68
   187E E5            [11] 3606 	push	hl
   187F CDr00r00      [17] 3607 	call	_puts
   1882 F1            [10] 3608 	pop	af
                           3609 ;src\CFG8266.c:727: return 0;
   1883 21 00 00      [10] 3610 	ld	hl, #0x0000
   1886 C3r60r21      [10] 3611 	jp	00388$
   1889                    3612 00286$:
                           3613 ;src\CFG8266.c:729: else if ((ucNagleOff)||(ucNagleOn))
   1889 3Ar09r00      [13] 3614 	ld	a,(#_ucNagleOff + 0)
   188C B7            [ 4] 3615 	or	a, a
   188D 20 06         [12] 3616 	jr	NZ,00281$
   188F 3Ar0Ar00      [13] 3617 	ld	a,(#_ucNagleOn + 0)
   1892 B7            [ 4] 3618 	or	a, a
   1893 28 0E         [12] 3619 	jr	Z,00282$
   1895                    3620 00281$:
                           3621 ;src\CFG8266.c:731: printf("\rNagle not set as requested, error!\r\n");
   1895 21rC8r23      [10] 3622 	ld	hl, #___str_70
   1898 E5            [11] 3623 	push	hl
   1899 CDr00r00      [17] 3624 	call	_puts
   189C F1            [10] 3625 	pop	af
                           3626 ;src\CFG8266.c:732: return 0;
   189D 21 00 00      [10] 3627 	ld	hl, #0x0000
   18A0 C3r60r21      [10] 3628 	jp	00388$
   18A3                    3629 00282$:
                           3630 ;src\CFG8266.c:734: else if (ucRadioOff)
   18A3 3Ar0Br00      [13] 3631 	ld	a,(#_ucRadioOff + 0)
   18A6 B7            [ 4] 3632 	or	a, a
   18A7 28 1E         [12] 3633 	jr	Z,00279$
                           3634 ;src\CFG8266.c:736: if (bResponse)
   18A9 DD 7E FB      [19] 3635 	ld	a, -5 (ix)
   18AC B7            [ 4] 3636 	or	a, a
   18AD 28 0A         [12] 3637 	jr	Z,00271$
                           3638 ;src\CFG8266.c:737: printf("\rRequested to turn off Wi-Fi Radio...\r\n");
   18AF 21rEDr23      [10] 3639 	ld	hl, #___str_72
   18B2 E5            [11] 3640 	push	hl
   18B3 CDr00r00      [17] 3641 	call	_puts
   18B6 F1            [10] 3642 	pop	af
   18B7 18 08         [12] 3643 	jr	00272$
   18B9                    3644 00271$:
                           3645 ;src\CFG8266.c:739: printf("\rRequest to turnoff Wi-Fi Radio error!\r\n");
   18B9 21r14r24      [10] 3646 	ld	hl, #___str_74
   18BC E5            [11] 3647 	push	hl
   18BD CDr00r00      [17] 3648 	call	_puts
   18C0 F1            [10] 3649 	pop	af
   18C1                    3650 00272$:
                           3651 ;src\CFG8266.c:740: return 0;
   18C1 21 00 00      [10] 3652 	ld	hl, #0x0000
   18C4 C3r60r21      [10] 3653 	jp	00388$
   18C7                    3654 00279$:
                           3655 ;src\CFG8266.c:742: else if (ucSetTimeout)
   18C7 3Ar0Cr00      [13] 3656 	ld	a,(#_ucSetTimeout + 0)
   18CA B7            [ 4] 3657 	or	a, a
   18CB CAr5Dr21      [10] 3658 	jp	Z, 00375$
                           3659 ;src\CFG8266.c:744: if (bResponse)
   18CE DD 7E FB      [19] 3660 	ld	a, -5 (ix)
   18D1 B7            [ 4] 3661 	or	a, a
   18D2 28 0A         [12] 3662 	jr	Z,00274$
                           3663 ;src\CFG8266.c:745: printf("\rWi-Fi radio on Time-out set successfully...\r\n");
   18D4 21r3Cr24      [10] 3664 	ld	hl, #___str_76
   18D7 E5            [11] 3665 	push	hl
   18D8 CDr00r00      [17] 3666 	call	_puts
   18DB F1            [10] 3667 	pop	af
   18DC 18 08         [12] 3668 	jr	00275$
   18DE                    3669 00274$:
                           3670 ;src\CFG8266.c:747: printf("\rError setting Wi-Fi radio on Time-out!\r\n");
   18DE 21r6Ar24      [10] 3671 	ld	hl, #___str_78
   18E1 E5            [11] 3672 	push	hl
   18E2 CDr00r00      [17] 3673 	call	_puts
   18E5 F1            [10] 3674 	pop	af
   18E6                    3675 00275$:
                           3676 ;src\CFG8266.c:748: return 0;
   18E6 21 00 00      [10] 3677 	ld	hl, #0x0000
   18E9 C3r60r21      [10] 3678 	jp	00388$
   18EC                    3679 00364$:
                           3680 ;src\CFG8266.c:752: else if (ucLocalUpdate)
   18EC 3Ar07r00      [13] 3681 	ld	a,(#_ucLocalUpdate + 0)
   18EF B7            [ 4] 3682 	or	a, a
   18F0 CAr5Er1F      [10] 3683 	jp	Z, 00361$
                           3684 ;src\CFG8266.c:755: iFile = Open (ucFile,O_RDONLY);
   18F3 DD 4E FC      [19] 3685 	ld	c, -4 (ix)
   18F6 DD 46 FD      [19] 3686 	ld	b, -3 (ix)
   18F9 21 00 00      [10] 3687 	ld	hl, #0x0000
   18FC E5            [11] 3688 	push	hl
   18FD C5            [11] 3689 	push	bc
   18FE CDr00r00      [17] 3690 	call	_Open
   1901 F1            [10] 3691 	pop	af
   1902 F1            [10] 3692 	pop	af
   1903 DD 75 FE      [19] 3693 	ld	-2 (ix), l
   1906 DD 74 FF      [19] 3694 	ld	-1 (ix), h
                           3695 ;src\CFG8266.c:757: if (iFile!=-1)
   1909 DD 7E FE      [19] 3696 	ld	a, -2 (ix)
   190C DD A6 FF      [19] 3697 	and	a, -1 (ix)
   190F 3C            [ 4] 3698 	inc	a
   1910 CAr3Cr1F      [10] 3699 	jp	Z,00334$
                           3700 ;src\CFG8266.c:764: regs.Words.HL = 0; //set pointer as 0
   1913 21 9B 0D      [10] 3701 	ld	hl, #3483
   1916 39            [11] 3702 	add	hl, sp
   1917 EB            [ 4] 3703 	ex	de, hl
   1918 21 06 00      [10] 3704 	ld	hl, #0x0006
   191B 19            [11] 3705 	add	hl, de
   191C AF            [ 4] 3706 	xor	a, a
   191D 77            [ 7] 3707 	ld	(hl), a
   191E 23            [ 6] 3708 	inc	hl
   191F 77            [ 7] 3709 	ld	(hl), a
                           3710 ;src\CFG8266.c:765: regs.Words.DE = 0; //so it will return the position
   1920 13            [ 6] 3711 	inc	de
   1921 13            [ 6] 3712 	inc	de
   1922 13            [ 6] 3713 	inc	de
   1923 13            [ 6] 3714 	inc	de
   1924 AF            [ 4] 3715 	xor	a, a
   1925 12            [ 7] 3716 	ld	(de), a
   1926 13            [ 6] 3717 	inc	de
   1927 12            [ 7] 3718 	ld	(de), a
                           3719 ;src\CFG8266.c:766: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   1928 21 9B 0D      [10] 3720 	ld	hl, #3483
   192B 39            [11] 3721 	add	hl, sp
   192C EB            [ 4] 3722 	ex	de, hl
   192D 6B            [ 4] 3723 	ld	l, e
   192E 62            [ 4] 3724 	ld	h, d
   192F 23            [ 6] 3725 	inc	hl
   1930 36 02         [10] 3726 	ld	(hl), #0x02
                           3727 ;src\CFG8266.c:767: regs.Bytes.B = (unsigned char)(iFile&0xff);
   1932 13            [ 6] 3728 	inc	de
   1933 13            [ 6] 3729 	inc	de
   1934 13            [ 6] 3730 	inc	de
   1935 7A            [ 4] 3731 	ld	a, d
   1936 DD 4E FE      [19] 3732 	ld	c, -2 (ix)
   1939 6B            [ 4] 3733 	ld	l, e
   193A 67            [ 4] 3734 	ld	h, a
   193B 71            [ 7] 3735 	ld	(hl), c
                           3736 ;src\CFG8266.c:768: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   193C 21 9B 0D      [10] 3737 	ld	hl, #3483
   193F 39            [11] 3738 	add	hl, sp
   1940 DD 75 FA      [19] 3739 	ld	-6 (ix), l
   1943 DD 74 FB      [19] 3740 	ld	-5 (ix), h
   1946 4D            [ 4] 3741 	ld	c, l
   1947 44            [ 4] 3742 	ld	b, h
   1948 11 03 03      [10] 3743 	ld	de, #0x0303
   194B D5            [11] 3744 	push	de
   194C C5            [11] 3745 	push	bc
   194D 3E 4A         [ 7] 3746 	ld	a, #0x4a
   194F F5            [11] 3747 	push	af
   1950 33            [ 6] 3748 	inc	sp
   1951 CDr00r00      [17] 3749 	call	_DosCall
   1954 F1            [10] 3750 	pop	af
   1955 F1            [10] 3751 	pop	af
   1956 33            [ 6] 3752 	inc	sp
                           3753 ;src\CFG8266.c:769: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   1957 DD 6E FA      [19] 3754 	ld	l, -6 (ix)
   195A DD 66 FB      [19] 3755 	ld	h, -5 (ix)
   195D 23            [ 6] 3756 	inc	hl
   195E 7E            [ 7] 3757 	ld	a, (hl)
   195F DD 77 F9      [19] 3758 	ld	-7 (ix), a
   1962 B7            [ 4] 3759 	or	a, a
   1963 C2r28r1A      [10] 3760 	jp	NZ, 00298$
                           3761 ;src\CFG8266.c:770: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   1966 DD 7E FA      [19] 3762 	ld	a, -6 (ix)
   1969 DD 77 F8      [19] 3763 	ld	-8 (ix), a
   196C DD 7E FB      [19] 3764 	ld	a, -5 (ix)
   196F DD 77 F9      [19] 3765 	ld	-7 (ix), a
   1972 DD 6E F8      [19] 3766 	ld	l, -8 (ix)
   1975 DD 66 F9      [19] 3767 	ld	h, -7 (ix)
   1978 11 06 00      [10] 3768 	ld	de, #0x0006
   197B 19            [11] 3769 	add	hl, de
   197C 7E            [ 7] 3770 	ld	a, (hl)
   197D DD 77 F8      [19] 3771 	ld	-8 (ix), a
   1980 23            [ 6] 3772 	inc	hl
   1981 7E            [ 7] 3773 	ld	a, (hl)
   1982 DD 77 F9      [19] 3774 	ld	-7 (ix), a
   1985 DD 7E F8      [19] 3775 	ld	a, -8 (ix)
   1988 DD 77 F1      [19] 3776 	ld	-15 (ix), a
   198B DD 7E F9      [19] 3777 	ld	a, -7 (ix)
   198E DD 77 F2      [19] 3778 	ld	-14 (ix), a
   1991 17            [ 4] 3779 	rla
   1992 9F            [ 4] 3780 	sbc	a, a
   1993 DD 77 F3      [19] 3781 	ld	-13 (ix), a
   1996 DD 77 F4      [19] 3782 	ld	-12 (ix), a
   1999 DD 7E F1      [19] 3783 	ld	a, -15 (ix)
   199C FD 21 0E 00   [14] 3784 	ld	iy, #14
   19A0 FD 39         [15] 3785 	add	iy, sp
   19A2 FD 77 00      [19] 3786 	ld	0 (iy), a
   19A5 DD 7E F2      [19] 3787 	ld	a, -14 (ix)
   19A8 FD 77 01      [19] 3788 	ld	1 (iy), a
   19AB FD 36 02 00   [19] 3789 	ld	2 (iy), #0x00
   19AF FD 36 03 00   [19] 3790 	ld	3 (iy), #0x00
   19B3 DD 6E FA      [19] 3791 	ld	l, -6 (ix)
   19B6 DD 66 FB      [19] 3792 	ld	h, -5 (ix)
   19B9 11 04 00      [10] 3793 	ld	de, #0x0004
   19BC 19            [11] 3794 	add	hl, de
   19BD 7E            [ 7] 3795 	ld	a, (hl)
   19BE DD 77 FA      [19] 3796 	ld	-6 (ix), a
   19C1 23            [ 6] 3797 	inc	hl
   19C2 7E            [ 7] 3798 	ld	a, (hl)
   19C3 DD 77 FB      [19] 3799 	ld	-5 (ix), a
   19C6 DD 7E FA      [19] 3800 	ld	a, -6 (ix)
   19C9 DD 77 F8      [19] 3801 	ld	-8 (ix), a
   19CC DD 7E FB      [19] 3802 	ld	a, -5 (ix)
   19CF DD 77 F9      [19] 3803 	ld	-7 (ix), a
   19D2 17            [ 4] 3804 	rla
   19D3 9F            [ 4] 3805 	sbc	a, a
   19D4 DD 77 FA      [19] 3806 	ld	-6 (ix), a
   19D7 DD 77 FB      [19] 3807 	ld	-5 (ix), a
   19DA 06 10         [ 7] 3808 	ld	b, #0x10
   19DC                    3809 01022$:
   19DC DD CB F8 26   [23] 3810 	sla	-8 (ix)
   19E0 DD CB F9 16   [23] 3811 	rl	-7 (ix)
   19E4 DD CB FA 16   [23] 3812 	rl	-6 (ix)
   19E8 DD CB FB 16   [23] 3813 	rl	-5 (ix)
   19EC 10 EE         [13] 3814 	djnz	01022$
   19EE DD 36 F1 00   [19] 3815 	ld	-15 (ix), #0x00
   19F2 DD 36 F2 00   [19] 3816 	ld	-14 (ix), #0x00
   19F6 DD 7E FA      [19] 3817 	ld	a, -6 (ix)
   19F9 DD 77 F3      [19] 3818 	ld	-13 (ix), a
   19FC DD 7E FB      [19] 3819 	ld	a, -5 (ix)
   19FF DD 77 F4      [19] 3820 	ld	-12 (ix), a
   1A02 FD 7E 00      [19] 3821 	ld	a, 0 (iy)
   1A05 DD B6 F1      [19] 3822 	or	a, -15 (ix)
   1A08 DD 77 F8      [19] 3823 	ld	-8 (ix), a
   1A0B FD 7E 01      [19] 3824 	ld	a, 1 (iy)
   1A0E DD B6 F2      [19] 3825 	or	a, -14 (ix)
   1A11 DD 77 F9      [19] 3826 	ld	-7 (ix), a
   1A14 FD 7E 02      [19] 3827 	ld	a, 2 (iy)
   1A17 DD B6 F3      [19] 3828 	or	a, -13 (ix)
   1A1A DD 77 FA      [19] 3829 	ld	-6 (ix), a
   1A1D FD 7E 03      [19] 3830 	ld	a, 3 (iy)
   1A20 DD B6 F4      [19] 3831 	or	a, -12 (ix)
   1A23 DD 77 FB      [19] 3832 	ld	-5 (ix), a
   1A26 18 0D         [12] 3833 	jr	00299$
   1A28                    3834 00298$:
                           3835 ;src\CFG8266.c:772: SentFileSize = 0;
   1A28 AF            [ 4] 3836 	xor	a, a
   1A29 DD 77 F8      [19] 3837 	ld	-8 (ix), a
   1A2C DD 77 F9      [19] 3838 	ld	-7 (ix), a
   1A2F DD 77 FA      [19] 3839 	ld	-6 (ix), a
   1A32 DD 77 FB      [19] 3840 	ld	-5 (ix), a
   1A35                    3841 00299$:
                           3842 ;src\CFG8266.c:774: ultostr(SentFileSize,chFileSize,10);
   1A35 21 A7 0D      [10] 3843 	ld	hl, #3495
   1A38 39            [11] 3844 	add	hl, sp
   1A39 4D            [ 4] 3845 	ld	c, l
   1A3A 44            [ 4] 3846 	ld	b, h
   1A3B E5            [11] 3847 	push	hl
   1A3C 11 0A 00      [10] 3848 	ld	de, #0x000a
   1A3F D5            [11] 3849 	push	de
   1A40 C5            [11] 3850 	push	bc
   1A41 DD 6E FA      [19] 3851 	ld	l, -6 (ix)
   1A44 DD 66 FB      [19] 3852 	ld	h, -5 (ix)
   1A47 E5            [11] 3853 	push	hl
   1A48 DD 6E F8      [19] 3854 	ld	l, -8 (ix)
   1A4B DD 66 F9      [19] 3855 	ld	h, -7 (ix)
   1A4E E5            [11] 3856 	push	hl
   1A4F CDr6Br07      [17] 3857 	call	_ultostr
   1A52 21 08 00      [10] 3858 	ld	hl, #8
   1A55 39            [11] 3859 	add	hl, sp
   1A56 F9            [ 6] 3860 	ld	sp, hl
   1A57 DD 4E FE      [19] 3861 	ld	c, -2 (ix)
   1A5A DD 46 FF      [19] 3862 	ld	b, -1 (ix)
   1A5D C5            [11] 3863 	push	bc
   1A5E CDr00r00      [17] 3864 	call	_Close
   1A61 F1            [10] 3865 	pop	af
   1A62 E1            [10] 3866 	pop	hl
                           3867 ;src\CFG8266.c:776: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   1A63 DD 4E FC      [19] 3868 	ld	c, -4 (ix)
   1A66 DD 46 FD      [19] 3869 	ld	b, -3 (ix)
   1A69 11r93r24      [10] 3870 	ld	de, #___str_79+0
   1A6C E5            [11] 3871 	push	hl
   1A6D C5            [11] 3872 	push	bc
   1A6E D5            [11] 3873 	push	de
   1A6F CDr00r00      [17] 3874 	call	_printf
   1A72 21 06 00      [10] 3875 	ld	hl, #6
   1A75 39            [11] 3876 	add	hl, sp
   1A76 F9            [ 6] 3877 	ld	sp, hl
                           3878 ;src\CFG8266.c:777: if (SentFileSize)
   1A77 DD 7E FB      [19] 3879 	ld	a, -5 (ix)
   1A7A DD B6 FA      [19] 3880 	or	a, -6 (ix)
   1A7D DD B6 F9      [19] 3881 	or	a, -7 (ix)
   1A80 DD B6 F8      [19] 3882 	or	a, -8 (ix)
   1A83 CAr1Ar1F      [10] 3883 	jp	Z, 00331$
                           3884 ;src\CFG8266.c:779: iFile = Open (ucFile,O_RDONLY);
   1A86 DD 4E FC      [19] 3885 	ld	c, -4 (ix)
   1A89 DD 46 FD      [19] 3886 	ld	b, -3 (ix)
   1A8C 21 00 00      [10] 3887 	ld	hl, #0x0000
   1A8F E5            [11] 3888 	push	hl
   1A90 C5            [11] 3889 	push	bc
   1A91 CDr00r00      [17] 3890 	call	_Open
   1A94 F1            [10] 3891 	pop	af
   1A95 F1            [10] 3892 	pop	af
   1A96 FD 21 10 00   [14] 3893 	ld	iy, #16
   1A9A FD 39         [15] 3894 	add	iy, sp
   1A9C FD 75 00      [19] 3895 	ld	0 (iy), l
   1A9F FD 74 01      [19] 3896 	ld	1 (iy), h
                           3897 ;src\CFG8266.c:780: if (iFile!=-1)
   1AA2 FD 7E 00      [19] 3898 	ld	a, 0 (iy)
   1AA5 3C            [ 4] 3899 	inc	a
   1AA6 20 07         [12] 3900 	jr	NZ,01024$
   1AA8 FD 7E 01      [19] 3901 	ld	a, 1 (iy)
   1AAB 3C            [ 4] 3902 	inc	a
   1AAC CArF8r1E      [10] 3903 	jp	Z,00328$
   1AAF                    3904 01024$:
                           3905 ;src\CFG8266.c:782: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1AAF DD 4E F6      [19] 3906 	ld	c, -10 (ix)
   1AB2 DD 46 F7      [19] 3907 	ld	b, -9 (ix)
   1AB5 21 00 01      [10] 3908 	ld	hl, #0x0100
   1AB8 E5            [11] 3909 	push	hl
   1AB9 C5            [11] 3910 	push	bc
   1ABA FD 6E 00      [19] 3911 	ld	l, 0 (iy)
   1ABD FD 66 01      [19] 3912 	ld	h, 1 (iy)
   1AC0 E5            [11] 3913 	push	hl
   1AC1 CDr00r00      [17] 3914 	call	_MyRead
   1AC4 F1            [10] 3915 	pop	af
   1AC5 F1            [10] 3916 	pop	af
   1AC6 F1            [10] 3917 	pop	af
   1AC7 DD 75 F0      [19] 3918 	ld	-16 (ix), l
   1ACA DD 74 F1      [19] 3919 	ld	-15 (ix), h
                           3920 ;src\CFG8266.c:783: if (FileRead == 256)
   1ACD DD 7E F0      [19] 3921 	ld	a, -16 (ix)
   1AD0 B7            [ 4] 3922 	or	a, a
   1AD1 C2rE1r1E      [10] 3923 	jp	NZ,00325$
   1AD4 DD 7E F1      [19] 3924 	ld	a, -15 (ix)
   1AD7 3D            [ 4] 3925 	dec	a
   1AD8 C2rE1r1E      [10] 3926 	jp	NZ,00325$
                           3927 ;src\CFG8266.c:786: if (ucIsFw)
   1ADB 3Ar08r00      [13] 3928 	ld	a,(#_ucIsFw + 0)
   1ADE B7            [ 4] 3929 	or	a, a
   1ADF 28 0A         [12] 3930 	jr	Z,00301$
                           3931 ;src\CFG8266.c:787: TxByte('Z'); //Request start of RS232 update
   1AE1 3E 5A         [ 7] 3932 	ld	a, #0x5a
   1AE3 F5            [11] 3933 	push	af
   1AE4 33            [ 6] 3934 	inc	sp
   1AE5 CDr5Dr07      [17] 3935 	call	_TxByte
   1AE8 33            [ 6] 3936 	inc	sp
   1AE9 18 08         [12] 3937 	jr	00302$
   1AEB                    3938 00301$:
                           3939 ;src\CFG8266.c:789: TxByte('Y'); //Request start of RS232 cert update
   1AEB 3E 59         [ 7] 3940 	ld	a, #0x59
   1AED F5            [11] 3941 	push	af
   1AEE 33            [ 6] 3942 	inc	sp
   1AEF CDr5Dr07      [17] 3943 	call	_TxByte
   1AF2 33            [ 6] 3944 	inc	sp
   1AF3                    3945 00302$:
                           3946 ;src\CFG8266.c:790: TxByte(0);
   1AF3 AF            [ 4] 3947 	xor	a, a
   1AF4 F5            [11] 3948 	push	af
   1AF5 33            [ 6] 3949 	inc	sp
   1AF6 CDr5Dr07      [17] 3950 	call	_TxByte
   1AF9 33            [ 6] 3951 	inc	sp
                           3952 ;src\CFG8266.c:791: TxByte(12);
   1AFA 3E 0C         [ 7] 3953 	ld	a, #0x0c
   1AFC F5            [11] 3954 	push	af
   1AFD 33            [ 6] 3955 	inc	sp
   1AFE CDr5Dr07      [17] 3956 	call	_TxByte
   1B01 33            [ 6] 3957 	inc	sp
                           3958 ;src\CFG8266.c:792: TxByte((unsigned char)(SentFileSize&0xff));
   1B02 DD 7E F8      [19] 3959 	ld	a, -8 (ix)
   1B05 F5            [11] 3960 	push	af
   1B06 33            [ 6] 3961 	inc	sp
   1B07 CDr5Dr07      [17] 3962 	call	_TxByte
   1B0A 33            [ 6] 3963 	inc	sp
                           3964 ;src\CFG8266.c:793: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   1B0B DD 46 F9      [19] 3965 	ld	b, -7 (ix)
   1B0E 0E 00         [ 7] 3966 	ld	c, #0x00
   1B10 C5            [11] 3967 	push	bc
   1B11 33            [ 6] 3968 	inc	sp
   1B12 CDr5Dr07      [17] 3969 	call	_TxByte
   1B15 33            [ 6] 3970 	inc	sp
                           3971 ;src\CFG8266.c:794: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   1B16 DD 7E FA      [19] 3972 	ld	a, -6 (ix)
   1B19 F5            [11] 3973 	push	af
   1B1A 33            [ 6] 3974 	inc	sp
   1B1B CDr5Dr07      [17] 3975 	call	_TxByte
   1B1E 33            [ 6] 3976 	inc	sp
                           3977 ;src\CFG8266.c:795: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   1B1F DD 7E FB      [19] 3978 	ld	a, -5 (ix)
   1B22 F5            [11] 3979 	push	af
   1B23 33            [ 6] 3980 	inc	sp
   1B24 CDr5Dr07      [17] 3981 	call	_TxByte
   1B27 33            [ 6] 3982 	inc	sp
                           3983 ;src\CFG8266.c:796: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   1B28 DD 7E F8      [19] 3984 	ld	a, -8 (ix)
   1B2B FD 21 00 00   [14] 3985 	ld	iy, #0
   1B2F FD 39         [15] 3986 	add	iy, sp
   1B31 FD 77 00      [19] 3987 	ld	0 (iy), a
   1B34 DD 7E F9      [19] 3988 	ld	a, -7 (ix)
   1B37 FD 77 01      [19] 3989 	ld	1 (iy), a
   1B3A DD 7E FA      [19] 3990 	ld	a, -6 (ix)
   1B3D FD 77 02      [19] 3991 	ld	2 (iy), a
   1B40 DD 7E FB      [19] 3992 	ld	a, -5 (ix)
   1B43 FD 77 03      [19] 3993 	ld	3 (iy), a
   1B46 AF            [ 4] 3994 	xor	a, a
   1B47 FD 77 04      [19] 3995 	ld	4 (iy), a
   1B4A FD 77 05      [19] 3996 	ld	5 (iy), a
   1B4D FD 77 06      [19] 3997 	ld	6 (iy), a
   1B50 FD 77 07      [19] 3998 	ld	7 (iy), a
   1B53 FD 21 08 00   [14] 3999 	ld	iy, #8
   1B57 FD 39         [15] 4000 	add	iy, sp
   1B59 FD 36 00 00   [19] 4001 	ld	0 (iy), #0x00
   1B5D FD 36 01 00   [19] 4002 	ld	1 (iy), #0x00
   1B61 FD 36 02 00   [19] 4003 	ld	2 (iy), #0x00
   1B65 FD 36 03 00   [19] 4004 	ld	3 (iy), #0x00
   1B69 21 04 00      [10] 4005 	ld	hl, #0+4
   1B6C 39            [11] 4006 	add	hl, sp
   1B6D 7E            [ 7] 4007 	ld	a, (hl)
   1B6E FD 21 08 00   [14] 4008 	ld	iy, #8
   1B72 FD 39         [15] 4009 	add	iy, sp
   1B74 FD 77 04      [19] 4010 	ld	4 (iy), a
   1B77 FD 36 05 00   [19] 4011 	ld	5 (iy), #0x00
   1B7B FD 36 06 00   [19] 4012 	ld	6 (iy), #0x00
   1B7F FD 36 07 00   [19] 4013 	ld	7 (iy), #0x00
   1B83 06 20         [ 7] 4014 	ld	b, #0x20
   1B85                    4015 01031$:
   1B85 FD CB 07 2E   [23] 4016 	sra	7 (iy)
   1B89 FD CB 06 1E   [23] 4017 	rr	6 (iy)
   1B8D FD CB 05 1E   [23] 4018 	rr	5 (iy)
   1B91 FD CB 04 1E   [23] 4019 	rr	4 (iy)
   1B95 FD CB 03 1E   [23] 4020 	rr	3 (iy)
   1B99 FD CB 02 1E   [23] 4021 	rr	2 (iy)
   1B9D FD CB 01 1E   [23] 4022 	rr	1 (iy)
   1BA1 FD CB 00 1E   [23] 4023 	rr	0 (iy)
   1BA5 10 DE         [13] 4024 	djnz	01031$
   1BA7 FD 7E 00      [19] 4025 	ld	a, 0 (iy)
   1BAA F5            [11] 4026 	push	af
   1BAB 33            [ 6] 4027 	inc	sp
   1BAC CDr5Dr07      [17] 4028 	call	_TxByte
   1BAF 33            [ 6] 4029 	inc	sp
                           4030 ;src\CFG8266.c:797: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1BB0 FD 21 08 00   [14] 4031 	ld	iy, #8
   1BB4 FD 39         [15] 4032 	add	iy, sp
   1BB6 FD 36 00 00   [19] 4033 	ld	0 (iy), #0x00
   1BBA FD 36 01 00   [19] 4034 	ld	1 (iy), #0x00
   1BBE FD 36 02 00   [19] 4035 	ld	2 (iy), #0x00
   1BC2 FD 36 03 00   [19] 4036 	ld	3 (iy), #0x00
   1BC6 FD 36 04 00   [19] 4037 	ld	4 (iy), #0x00
   1BCA 21 05 00      [10] 4038 	ld	hl, #0+5
   1BCD 39            [11] 4039 	add	hl, sp
   1BCE 7E            [ 7] 4040 	ld	a, (hl)
   1BCF FD 21 08 00   [14] 4041 	ld	iy, #8
   1BD3 FD 39         [15] 4042 	add	iy, sp
   1BD5 FD 77 05      [19] 4043 	ld	5 (iy), a
   1BD8 FD 36 06 00   [19] 4044 	ld	6 (iy), #0x00
   1BDC FD 36 07 00   [19] 4045 	ld	7 (iy), #0x00
   1BE0 06 28         [ 7] 4046 	ld	b, #0x28
   1BE2                    4047 01033$:
   1BE2 FD CB 07 2E   [23] 4048 	sra	7 (iy)
   1BE6 FD CB 06 1E   [23] 4049 	rr	6 (iy)
   1BEA FD CB 05 1E   [23] 4050 	rr	5 (iy)
   1BEE FD CB 04 1E   [23] 4051 	rr	4 (iy)
   1BF2 FD CB 03 1E   [23] 4052 	rr	3 (iy)
   1BF6 FD CB 02 1E   [23] 4053 	rr	2 (iy)
   1BFA FD CB 01 1E   [23] 4054 	rr	1 (iy)
   1BFE FD CB 00 1E   [23] 4055 	rr	0 (iy)
   1C02 10 DE         [13] 4056 	djnz	01033$
   1C04 FD 7E 00      [19] 4057 	ld	a, 0 (iy)
   1C07 F5            [11] 4058 	push	af
   1C08 33            [ 6] 4059 	inc	sp
   1C09 CDr5Dr07      [17] 4060 	call	_TxByte
   1C0C 33            [ 6] 4061 	inc	sp
                           4062 ;src\CFG8266.c:798: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   1C0D FD 21 08 00   [14] 4063 	ld	iy, #8
   1C11 FD 39         [15] 4064 	add	iy, sp
   1C13 FD 36 00 00   [19] 4065 	ld	0 (iy), #0x00
   1C17 FD 36 01 00   [19] 4066 	ld	1 (iy), #0x00
   1C1B FD 36 02 00   [19] 4067 	ld	2 (iy), #0x00
   1C1F FD 36 03 00   [19] 4068 	ld	3 (iy), #0x00
   1C23 FD 36 04 00   [19] 4069 	ld	4 (iy), #0x00
   1C27 FD 36 05 00   [19] 4070 	ld	5 (iy), #0x00
   1C2B 21 06 00      [10] 4071 	ld	hl, #0+6
   1C2E 39            [11] 4072 	add	hl, sp
   1C2F 7E            [ 7] 4073 	ld	a, (hl)
   1C30 FD 21 08 00   [14] 4074 	ld	iy, #8
   1C34 FD 39         [15] 4075 	add	iy, sp
   1C36 FD 77 06      [19] 4076 	ld	6 (iy), a
   1C39 FD 36 07 00   [19] 4077 	ld	7 (iy), #0x00
   1C3D 06 30         [ 7] 4078 	ld	b, #0x30
   1C3F                    4079 01035$:
   1C3F FD CB 07 2E   [23] 4080 	sra	7 (iy)
   1C43 FD CB 06 1E   [23] 4081 	rr	6 (iy)
   1C47 FD CB 05 1E   [23] 4082 	rr	5 (iy)
   1C4B FD CB 04 1E   [23] 4083 	rr	4 (iy)
   1C4F FD CB 03 1E   [23] 4084 	rr	3 (iy)
   1C53 FD CB 02 1E   [23] 4085 	rr	2 (iy)
   1C57 FD CB 01 1E   [23] 4086 	rr	1 (iy)
   1C5B FD CB 00 1E   [23] 4087 	rr	0 (iy)
   1C5F 10 DE         [13] 4088 	djnz	01035$
   1C61 FD 7E 00      [19] 4089 	ld	a, 0 (iy)
   1C64 F5            [11] 4090 	push	af
   1C65 33            [ 6] 4091 	inc	sp
   1C66 CDr5Dr07      [17] 4092 	call	_TxByte
   1C69 33            [ 6] 4093 	inc	sp
                           4094 ;src\CFG8266.c:799: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   1C6A DD 7E F8      [19] 4095 	ld	a, -8 (ix)
   1C6D FD 21 08 00   [14] 4096 	ld	iy, #8
   1C71 FD 39         [15] 4097 	add	iy, sp
   1C73 FD 77 00      [19] 4098 	ld	0 (iy), a
   1C76 DD 7E F9      [19] 4099 	ld	a, -7 (ix)
   1C79 FD 77 01      [19] 4100 	ld	1 (iy), a
   1C7C DD 7E FA      [19] 4101 	ld	a, -6 (ix)
   1C7F FD 77 02      [19] 4102 	ld	2 (iy), a
   1C82 DD 7E FB      [19] 4103 	ld	a, -5 (ix)
   1C85 FD 77 03      [19] 4104 	ld	3 (iy), a
   1C88 AF            [ 4] 4105 	xor	a, a
   1C89 FD 77 04      [19] 4106 	ld	4 (iy), a
   1C8C FD 77 05      [19] 4107 	ld	5 (iy), a
   1C8F FD 77 06      [19] 4108 	ld	6 (iy), a
   1C92 FD 77 07      [19] 4109 	ld	7 (iy), a
   1C95 FD 36 00 00   [19] 4110 	ld	0 (iy), #0x00
   1C99 FD 36 01 00   [19] 4111 	ld	1 (iy), #0x00
   1C9D FD 36 02 00   [19] 4112 	ld	2 (iy), #0x00
   1CA1 FD 36 03 00   [19] 4113 	ld	3 (iy), #0x00
   1CA5 FD 36 04 00   [19] 4114 	ld	4 (iy), #0x00
   1CA9 FD 36 05 00   [19] 4115 	ld	5 (iy), #0x00
   1CAD FD 36 06 00   [19] 4116 	ld	6 (iy), #0x00
   1CB1 FD 7E 07      [19] 4117 	ld	a, 7 (iy)
   1CB4 FD 77 07      [19] 4118 	ld	7 (iy), a
   1CB7 06 38         [ 7] 4119 	ld	b, #0x38
   1CB9                    4120 01037$:
   1CB9 FD CB 07 3E   [23] 4121 	srl	7 (iy)
   1CBD FD CB 06 1E   [23] 4122 	rr	6 (iy)
   1CC1 FD CB 05 1E   [23] 4123 	rr	5 (iy)
   1CC5 FD CB 04 1E   [23] 4124 	rr	4 (iy)
   1CC9 FD CB 03 1E   [23] 4125 	rr	3 (iy)
   1CCD FD CB 02 1E   [23] 4126 	rr	2 (iy)
   1CD1 FD CB 01 1E   [23] 4127 	rr	1 (iy)
   1CD5 FD CB 00 1E   [23] 4128 	rr	0 (iy)
   1CD9 10 DE         [13] 4129 	djnz	01037$
   1CDB FD 7E 00      [19] 4130 	ld	a, 0 (iy)
   1CDE F5            [11] 4131 	push	af
   1CDF 33            [ 6] 4132 	inc	sp
   1CE0 CDr5Dr07      [17] 4133 	call	_TxByte
   1CE3 33            [ 6] 4134 	inc	sp
                           4135 ;src\CFG8266.c:800: TxByte(ucServer[0]);
   1CE4 DD 6E F6      [19] 4136 	ld	l, -10 (ix)
   1CE7 DD 66 F7      [19] 4137 	ld	h, -9 (ix)
   1CEA 7E            [ 7] 4138 	ld	a, (hl)
   1CEB F5            [11] 4139 	push	af
   1CEC 33            [ 6] 4140 	inc	sp
   1CED CDr5Dr07      [17] 4141 	call	_TxByte
   1CF0 33            [ 6] 4142 	inc	sp
                           4143 ;src\CFG8266.c:801: TxByte(ucServer[1]);
   1CF1 DD 6E F6      [19] 4144 	ld	l, -10 (ix)
   1CF4 DD 66 F7      [19] 4145 	ld	h, -9 (ix)
   1CF7 23            [ 6] 4146 	inc	hl
   1CF8 7E            [ 7] 4147 	ld	a, (hl)
   1CF9 F5            [11] 4148 	push	af
   1CFA 33            [ 6] 4149 	inc	sp
   1CFB CDr5Dr07      [17] 4150 	call	_TxByte
   1CFE 33            [ 6] 4151 	inc	sp
                           4152 ;src\CFG8266.c:802: TxByte(ucServer[2]);
   1CFF DD 6E F6      [19] 4153 	ld	l, -10 (ix)
   1D02 DD 66 F7      [19] 4154 	ld	h, -9 (ix)
   1D05 23            [ 6] 4155 	inc	hl
   1D06 23            [ 6] 4156 	inc	hl
   1D07 7E            [ 7] 4157 	ld	a, (hl)
   1D08 F5            [11] 4158 	push	af
   1D09 33            [ 6] 4159 	inc	sp
   1D0A CDr5Dr07      [17] 4160 	call	_TxByte
   1D0D 33            [ 6] 4161 	inc	sp
                           4162 ;src\CFG8266.c:803: TxByte(ucServer[3]);
   1D0E DD 6E F6      [19] 4163 	ld	l, -10 (ix)
   1D11 DD 66 F7      [19] 4164 	ld	h, -9 (ix)
   1D14 23            [ 6] 4165 	inc	hl
   1D15 23            [ 6] 4166 	inc	hl
   1D16 23            [ 6] 4167 	inc	hl
   1D17 7E            [ 7] 4168 	ld	a, (hl)
   1D18 F5            [11] 4169 	push	af
   1D19 33            [ 6] 4170 	inc	sp
   1D1A CDr5Dr07      [17] 4171 	call	_TxByte
   1D1D 33            [ 6] 4172 	inc	sp
                           4173 ;src\CFG8266.c:805: if (ucIsFw)
   1D1E 3Ar08r00      [13] 4174 	ld	a,(#_ucIsFw + 0)
   1D21 B7            [ 4] 4175 	or	a, a
   1D22 28 26         [12] 4176 	jr	Z,00304$
                           4177 ;src\CFG8266.c:806: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false,NULL,0);
   1D24 21 00 00      [10] 4178 	ld	hl, #0x0000
   1D27 E5            [11] 4179 	push	hl
   1D28 2E 00         [ 7] 4180 	ld	l, #0x00
   1D2A E5            [11] 4181 	push	hl
   1D2B AF            [ 4] 4182 	xor	a, a
   1D2C 57            [ 4] 4183 	ld	d,a
   1D2D 1E 01         [ 7] 4184 	ld	e,#0x01
   1D2F D5            [11] 4185 	push	de
   1D30 2E 3C         [ 7] 4186 	ld	l, #0x3c
   1D32 E5            [11] 4187 	push	hl
   1D33 2E 02         [ 7] 4188 	ld	l, #0x02
   1D35 E5            [11] 4189 	push	hl
   1D36 21r1Fr01      [10] 4190 	ld	hl, #_responseRSFWUpdate
   1D39 E5            [11] 4191 	push	hl
   1D3A CDrD9r08      [17] 4192 	call	_WaitForRXData
   1D3D FD 21 0C 00   [14] 4193 	ld	iy, #12
   1D41 FD 39         [15] 4194 	add	iy, sp
   1D43 FD F9         [10] 4195 	ld	sp, iy
   1D45 DD 75 F2      [19] 4196 	ld	-14 (ix), l
   1D48 18 24         [12] 4197 	jr	00305$
   1D4A                    4198 00304$:
                           4199 ;src\CFG8266.c:808: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false,NULL,0);
   1D4A 21 00 00      [10] 4200 	ld	hl, #0x0000
   1D4D E5            [11] 4201 	push	hl
   1D4E 2E 00         [ 7] 4202 	ld	l, #0x00
   1D50 E5            [11] 4203 	push	hl
   1D51 AF            [ 4] 4204 	xor	a, a
   1D52 57            [ 4] 4205 	ld	d,a
   1D53 1E 01         [ 7] 4206 	ld	e,#0x01
   1D55 D5            [11] 4207 	push	de
   1D56 2E 3C         [ 7] 4208 	ld	l, #0x3c
   1D58 E5            [11] 4209 	push	hl
   1D59 2E 02         [ 7] 4210 	ld	l, #0x02
   1D5B E5            [11] 4211 	push	hl
   1D5C 21r21r01      [10] 4212 	ld	hl, #_responseRSCERTUpdate
   1D5F E5            [11] 4213 	push	hl
   1D60 CDrD9r08      [17] 4214 	call	_WaitForRXData
   1D63 FD 21 0C 00   [14] 4215 	ld	iy, #12
   1D67 FD 39         [15] 4216 	add	iy, sp
   1D69 FD F9         [10] 4217 	ld	sp, iy
   1D6B DD 75 F2      [19] 4218 	ld	-14 (ix), l
   1D6E                    4219 00305$:
                           4220 ;src\CFG8266.c:810: if (!bResponse)
   1D6E DD 7E F2      [19] 4221 	ld	a, -14 (ix)
   1D71 B7            [ 4] 4222 	or	a, a
   1D72 20 0B         [12] 4223 	jr	NZ,00322$
                           4224 ;src\CFG8266.c:811: printf("Error requesting to start firmware update.\r\n");
   1D74 21rA8r24      [10] 4225 	ld	hl, #___str_81
   1D77 E5            [11] 4226 	push	hl
   1D78 CDr00r00      [17] 4227 	call	_puts
   1D7B F1            [10] 4228 	pop	af
   1D7C C3rE9r1E      [10] 4229 	jp	00326$
   1D7F                    4230 00322$:
                           4231 ;src\CFG8266.c:814: uiAnimationTimeOut = TickCount + 9;
   1D7F FD 21 9E FC   [14] 4232 	ld	iy, #_TickCount
   1D83 FD 7E 00      [19] 4233 	ld	a, 0 (iy)
   1D86 C6 09         [ 7] 4234 	add	a, #0x09
   1D88 DD 77 FC      [19] 4235 	ld	-4 (ix), a
   1D8B FD 7E 01      [19] 4236 	ld	a, 1 (iy)
   1D8E CE 00         [ 7] 4237 	adc	a, #0x00
   1D90 DD 77 FD      [19] 4238 	ld	-3 (ix), a
                           4239 ;src\CFG8266.c:815: do
   1D93 DD 7E F6      [19] 4240 	ld	a, -10 (ix)
   1D96 DD 77 F3      [19] 4241 	ld	-13 (ix), a
   1D99 DD 7E F7      [19] 4242 	ld	a, -9 (ix)
   1D9C DD 77 F4      [19] 4243 	ld	-12 (ix), a
   1D9F AF            [ 4] 4244 	xor	a, a
   1DA0 DD 77 FE      [19] 4245 	ld	-2 (ix), a
   1DA3 DD 77 FF      [19] 4246 	ld	-1 (ix), a
   1DA6                    4247 00316$:
                           4248 ;src\CFG8266.c:817: --uiAnimationTimeOut;
   1DA6 DD 6E FC      [19] 4249 	ld	l, -4 (ix)
   1DA9 DD 66 FD      [19] 4250 	ld	h, -3 (ix)
   1DAC 2B            [ 6] 4251 	dec	hl
   1DAD DD 75 FC      [19] 4252 	ld	-4 (ix), l
   1DB0 DD 74 FD      [19] 4253 	ld	-3 (ix), h
                           4254 ;src\CFG8266.c:818: if (TickCount>=uiAnimationTimeOut)
   1DB3 FD 21 9E FC   [14] 4255 	ld	iy, #_TickCount
   1DB7 FD 7E 00      [19] 4256 	ld	a, 0 (iy)
   1DBA DD 96 FC      [19] 4257 	sub	a, -4 (ix)
   1DBD FD 7E 01      [19] 4258 	ld	a, 1 (iy)
   1DC0 DD 9E FD      [19] 4259 	sbc	a, -3 (ix)
   1DC3 38 2C         [12] 4260 	jr	C,00307$
                           4261 ;src\CFG8266.c:820: uiAnimationTimeOut = 9;
   1DC5 DD 36 FC 09   [19] 4262 	ld	-4 (ix), #0x09
   1DC9 AF            [ 4] 4263 	xor	a, a
   1DCA DD 77 FD      [19] 4264 	ld	-3 (ix), a
                           4265 ;src\CFG8266.c:822: printf("%s",advance[i%8]); // next animation step
   1DCD DD 7E FE      [19] 4266 	ld	a, -2 (ix)
   1DD0 E6 07         [ 7] 4267 	and	a, #0x07
   1DD2 4F            [ 4] 4268 	ld	c, a
   1DD3 06 00         [ 7] 4269 	ld	b, #0x00
   1DD5 69            [ 4] 4270 	ld	l, c
   1DD6 60            [ 4] 4271 	ld	h, b
   1DD7 29            [11] 4272 	add	hl, hl
   1DD8 29            [11] 4273 	add	hl, hl
   1DD9 29            [11] 4274 	add	hl, hl
   1DDA 09            [11] 4275 	add	hl, bc
   1DDB 11r2Dr01      [10] 4276 	ld	de, #_advance
   1DDE 19            [11] 4277 	add	hl, de
   1DDF E5            [11] 4278 	push	hl
   1DE0 21rD4r24      [10] 4279 	ld	hl, #___str_82
   1DE3 E5            [11] 4280 	push	hl
   1DE4 CDr00r00      [17] 4281 	call	_printf
   1DE7 F1            [10] 4282 	pop	af
   1DE8 F1            [10] 4283 	pop	af
                           4284 ;src\CFG8266.c:823: ++i;
   1DE9 DD 34 FE      [23] 4285 	inc	-2 (ix)
   1DEC 20 03         [12] 4286 	jr	NZ,01039$
   1DEE DD 34 FF      [23] 4287 	inc	-1 (ix)
   1DF1                    4288 01039$:
   1DF1                    4289 00307$:
                           4290 ;src\CFG8266.c:825: if (!ucFirstBlock)
   1DF1 DD 7E F5      [19] 4291 	ld	a, -11 (ix)
   1DF4 B7            [ 4] 4292 	or	a, a
   1DF5 20 30         [12] 4293 	jr	NZ,00311$
                           4294 ;src\CFG8266.c:827: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1DF7 DD 4E F3      [19] 4295 	ld	c, -13 (ix)
   1DFA DD 46 F4      [19] 4296 	ld	b, -12 (ix)
   1DFD 21 00 01      [10] 4297 	ld	hl, #0x0100
   1E00 E5            [11] 4298 	push	hl
   1E01 C5            [11] 4299 	push	bc
   1E02 21 14 00      [10] 4300 	ld	hl, #20
   1E05 39            [11] 4301 	add	hl, sp
   1E06 4E            [ 7] 4302 	ld	c, (hl)
   1E07 23            [ 6] 4303 	inc	hl
   1E08 46            [ 7] 4304 	ld	b, (hl)
   1E09 C5            [11] 4305 	push	bc
   1E0A CDr00r00      [17] 4306 	call	_MyRead
   1E0D F1            [10] 4307 	pop	af
   1E0E F1            [10] 4308 	pop	af
   1E0F F1            [10] 4309 	pop	af
   1E10 DD 75 F0      [19] 4310 	ld	-16 (ix), l
                           4311 ;src\CFG8266.c:828: if (FileRead ==0)
   1E13 DD 74 F1      [19] 4312 	ld	-15 (ix), h
   1E16 7C            [ 4] 4313 	ld	a, h
   1E17 DD B6 F0      [19] 4314 	or	a, -16 (ix)
   1E1A 20 0F         [12] 4315 	jr	NZ,00312$
                           4316 ;src\CFG8266.c:830: printf("\rError reading file...\r\n");
   1E1C 21rD7r24      [10] 4317 	ld	hl, #___str_84
   1E1F E5            [11] 4318 	push	hl
   1E20 CDr00r00      [17] 4319 	call	_puts
   1E23 F1            [10] 4320 	pop	af
                           4321 ;src\CFG8266.c:831: break;
   1E24 C3rC5r1E      [10] 4322 	jp	00318$
   1E27                    4323 00311$:
                           4324 ;src\CFG8266.c:835: ucFirstBlock = 0;
   1E27 AF            [ 4] 4325 	xor	a, a
   1E28 DD 77 F5      [19] 4326 	ld	-11 (ix), a
   1E2B                    4327 00312$:
                           4328 ;src\CFG8266.c:837: TxByte('z'); //Write block
   1E2B 3E 7A         [ 7] 4329 	ld	a, #0x7a
   1E2D F5            [11] 4330 	push	af
   1E2E 33            [ 6] 4331 	inc	sp
   1E2F CDr5Dr07      [17] 4332 	call	_TxByte
   1E32 33            [ 6] 4333 	inc	sp
                           4334 ;src\CFG8266.c:838: TxByte((unsigned char)((FileRead&0xff00)>>8));
   1E33 DD 46 F1      [19] 4335 	ld	b, -15 (ix)
   1E36 0E 00         [ 7] 4336 	ld	c, #0x00
   1E38 C5            [11] 4337 	push	bc
   1E39 33            [ 6] 4338 	inc	sp
   1E3A CDr5Dr07      [17] 4339 	call	_TxByte
   1E3D 33            [ 6] 4340 	inc	sp
                           4341 ;src\CFG8266.c:839: TxByte((unsigned char)(FileRead&0xff));
   1E3E DD 7E F0      [19] 4342 	ld	a, -16 (ix)
   1E41 F5            [11] 4343 	push	af
   1E42 33            [ 6] 4344 	inc	sp
   1E43 CDr5Dr07      [17] 4345 	call	_TxByte
   1E46 33            [ 6] 4346 	inc	sp
                           4347 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1E47 01 00 00      [10] 4348 	ld	bc, #0x0000
   1E4A                    4349 00386$:
                           4350 ;src\CFG8266.c:841: TxByte(ucServer[ii]);
   1E4A DD 6E F6      [19] 4351 	ld	l, -10 (ix)
   1E4D DD 66 F7      [19] 4352 	ld	h, -9 (ix)
   1E50 09            [11] 4353 	add	hl, bc
   1E51 7E            [ 7] 4354 	ld	a, (hl)
   1E52 C5            [11] 4355 	push	bc
   1E53 F5            [11] 4356 	push	af
   1E54 33            [ 6] 4357 	inc	sp
   1E55 CDr5Dr07      [17] 4358 	call	_TxByte
   1E58 33            [ 6] 4359 	inc	sp
   1E59 C1            [10] 4360 	pop	bc
                           4361 ;src\CFG8266.c:840: for (ii=0;ii<256;ii++)
   1E5A 03            [ 6] 4362 	inc	bc
   1E5B 78            [ 4] 4363 	ld	a, b
   1E5C D6 01         [ 7] 4364 	sub	a, #0x01
   1E5E 38 EA         [12] 4365 	jr	C,00386$
                           4366 ;src\CFG8266.c:843: bResponse = WaitForRXData(responseWRBlock,2,600,true,false,NULL,0);
   1E60 21 00 00      [10] 4367 	ld	hl, #0x0000
   1E63 E5            [11] 4368 	push	hl
   1E64 2E 00         [ 7] 4369 	ld	l, #0x00
   1E66 E5            [11] 4370 	push	hl
   1E67 AF            [ 4] 4371 	xor	a, a
   1E68 57            [ 4] 4372 	ld	d,a
   1E69 1E 01         [ 7] 4373 	ld	e,#0x01
   1E6B D5            [11] 4374 	push	de
   1E6C 21 58 02      [10] 4375 	ld	hl, #0x0258
   1E6F E5            [11] 4376 	push	hl
   1E70 21 02 00      [10] 4377 	ld	hl, #0x0002
   1E73 E5            [11] 4378 	push	hl
   1E74 21r23r01      [10] 4379 	ld	hl, #_responseWRBlock
   1E77 E5            [11] 4380 	push	hl
   1E78 CDrD9r08      [17] 4381 	call	_WaitForRXData
   1E7B FD 21 0C 00   [14] 4382 	ld	iy, #12
   1E7F FD 39         [15] 4383 	add	iy, sp
   1E81 FD F9         [10] 4384 	ld	sp, iy
                           4385 ;src\CFG8266.c:845: if (!bResponse)
   1E83 DD 75 F2      [19] 4386 	ld	-14 (ix), l
   1E86 7D            [ 4] 4387 	ld	a, l
   1E87 B7            [ 4] 4388 	or	a, a
   1E88 20 0A         [12] 4389 	jr	NZ,00315$
                           4390 ;src\CFG8266.c:847: printf("\rError requesting to write firmware block.\r\n");
   1E8A 21rEFr24      [10] 4391 	ld	hl, #___str_86
   1E8D E5            [11] 4392 	push	hl
   1E8E CDr00r00      [17] 4393 	call	_puts
   1E91 F1            [10] 4394 	pop	af
                           4395 ;src\CFG8266.c:848: break;
   1E92 18 31         [12] 4396 	jr	00318$
   1E94                    4397 00315$:
                           4398 ;src\CFG8266.c:850: SentFileSize = SentFileSize - FileRead;
   1E94 DD 4E F0      [19] 4399 	ld	c, -16 (ix)
   1E97 DD 46 F1      [19] 4400 	ld	b, -15 (ix)
   1E9A 11 00 00      [10] 4401 	ld	de, #0x0000
   1E9D DD 7E F8      [19] 4402 	ld	a, -8 (ix)
   1EA0 91            [ 4] 4403 	sub	a, c
   1EA1 DD 77 F8      [19] 4404 	ld	-8 (ix), a
   1EA4 DD 7E F9      [19] 4405 	ld	a, -7 (ix)
   1EA7 98            [ 4] 4406 	sbc	a, b
   1EA8 DD 77 F9      [19] 4407 	ld	-7 (ix), a
   1EAB DD 7E FA      [19] 4408 	ld	a, -6 (ix)
   1EAE 9B            [ 4] 4409 	sbc	a, e
   1EAF DD 77 FA      [19] 4410 	ld	-6 (ix), a
   1EB2 DD 7E FB      [19] 4411 	ld	a, -5 (ix)
   1EB5 9A            [ 4] 4412 	sbc	a, d
                           4413 ;src\CFG8266.c:852: while(SentFileSize);
   1EB6 DD 77 FB      [19] 4414 	ld	-5 (ix), a
   1EB9 DD B6 FA      [19] 4415 	or	a, -6 (ix)
   1EBC DD B6 F9      [19] 4416 	or	a, -7 (ix)
   1EBF DD B6 F8      [19] 4417 	or	a, -8 (ix)
   1EC2 C2rA6r1D      [10] 4418 	jp	NZ, 00316$
   1EC5                    4419 00318$:
                           4420 ;src\CFG8266.c:853: printf("%s",aDone);
   1EC5 21r75r01      [10] 4421 	ld	hl, #_aDone
   1EC8 E5            [11] 4422 	push	hl
   1EC9 21rD4r24      [10] 4423 	ld	hl, #___str_82
   1ECC E5            [11] 4424 	push	hl
   1ECD CDr00r00      [17] 4425 	call	_printf
   1ED0 F1            [10] 4426 	pop	af
   1ED1 F1            [10] 4427 	pop	af
                           4428 ;src\CFG8266.c:856: if (bResponse)
   1ED2 DD 7E F2      [19] 4429 	ld	a, -14 (ix)
   1ED5 B7            [ 4] 4430 	or	a, a
   1ED6 28 11         [12] 4431 	jr	Z,00326$
                           4432 ;src\CFG8266.c:857: FinishUpdate(false);
   1ED8 AF            [ 4] 4433 	xor	a, a
   1ED9 F5            [11] 4434 	push	af
   1EDA 33            [ 6] 4435 	inc	sp
   1EDB CDrC1r0B      [17] 4436 	call	_FinishUpdate
   1EDE 33            [ 6] 4437 	inc	sp
   1EDF 18 08         [12] 4438 	jr	00326$
   1EE1                    4439 00325$:
                           4440 ;src\CFG8266.c:861: Print("\rError reading firmware file!\r\n");
   1EE1 21r1Br25      [10] 4441 	ld	hl, #___str_87
   1EE4 E5            [11] 4442 	push	hl
   1EE5 CDr00r00      [17] 4443 	call	_Print
   1EE8 F1            [10] 4444 	pop	af
   1EE9                    4445 00326$:
                           4446 ;src\CFG8266.c:862: Close(iFile);
   1EE9 21 10 00      [10] 4447 	ld	hl, #16
   1EEC 39            [11] 4448 	add	hl, sp
   1EED 4E            [ 7] 4449 	ld	c, (hl)
   1EEE 23            [ 6] 4450 	inc	hl
   1EEF 46            [ 7] 4451 	ld	b, (hl)
   1EF0 C5            [11] 4452 	push	bc
   1EF1 CDr00r00      [17] 4453 	call	_Close
   1EF4 F1            [10] 4454 	pop	af
   1EF5 C3r5Dr21      [10] 4455 	jp	00375$
   1EF8                    4456 00328$:
                           4457 ;src\CFG8266.c:866: printf("Error, couldn't open %s ...\r\n",ucFile);
   1EF8 DD 7E FC      [19] 4458 	ld	a, -4 (ix)
   1EFB DD 77 FE      [19] 4459 	ld	-2 (ix), a
   1EFE DD 7E FD      [19] 4460 	ld	a, -3 (ix)
   1F01 DD 77 FF      [19] 4461 	ld	-1 (ix), a
   1F04 DD 6E FE      [19] 4462 	ld	l, -2 (ix)
   1F07 DD 66 FF      [19] 4463 	ld	h, -1 (ix)
   1F0A E5            [11] 4464 	push	hl
   1F0B 21r3Br25      [10] 4465 	ld	hl, #___str_88
   1F0E E5            [11] 4466 	push	hl
   1F0F CDr00r00      [17] 4467 	call	_printf
   1F12 F1            [10] 4468 	pop	af
   1F13 F1            [10] 4469 	pop	af
                           4470 ;src\CFG8266.c:867: return 0;
   1F14 21 00 00      [10] 4471 	ld	hl, #0x0000
   1F17 C3r60r21      [10] 4472 	jp	00388$
   1F1A                    4473 00331$:
                           4474 ;src\CFG8266.c:872: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1F1A DD 7E FC      [19] 4475 	ld	a, -4 (ix)
   1F1D DD 77 FE      [19] 4476 	ld	-2 (ix), a
   1F20 DD 7E FD      [19] 4477 	ld	a, -3 (ix)
   1F23 DD 77 FF      [19] 4478 	ld	-1 (ix), a
   1F26 DD 6E FE      [19] 4479 	ld	l, -2 (ix)
   1F29 DD 66 FF      [19] 4480 	ld	h, -1 (ix)
   1F2C E5            [11] 4481 	push	hl
   1F2D 21r59r25      [10] 4482 	ld	hl, #___str_89
   1F30 E5            [11] 4483 	push	hl
   1F31 CDr00r00      [17] 4484 	call	_printf
   1F34 F1            [10] 4485 	pop	af
   1F35 F1            [10] 4486 	pop	af
                           4487 ;src\CFG8266.c:873: return 0;
   1F36 21 00 00      [10] 4488 	ld	hl, #0x0000
   1F39 C3r60r21      [10] 4489 	jp	00388$
   1F3C                    4490 00334$:
                           4491 ;src\CFG8266.c:878: printf("Error, couldn't open %s ...\r\n",ucFile);
   1F3C DD 7E FC      [19] 4492 	ld	a, -4 (ix)
   1F3F DD 77 FE      [19] 4493 	ld	-2 (ix), a
   1F42 DD 7E FD      [19] 4494 	ld	a, -3 (ix)
   1F45 DD 77 FF      [19] 4495 	ld	-1 (ix), a
   1F48 DD 6E FE      [19] 4496 	ld	l, -2 (ix)
   1F4B DD 66 FF      [19] 4497 	ld	h, -1 (ix)
   1F4E E5            [11] 4498 	push	hl
   1F4F 21r3Br25      [10] 4499 	ld	hl, #___str_88
   1F52 E5            [11] 4500 	push	hl
   1F53 CDr00r00      [17] 4501 	call	_printf
   1F56 F1            [10] 4502 	pop	af
   1F57 F1            [10] 4503 	pop	af
                           4504 ;src\CFG8266.c:879: return 0;
   1F58 21 00 00      [10] 4505 	ld	hl, #0x0000
   1F5B C3r60r21      [10] 4506 	jp	00388$
   1F5E                    4507 00361$:
                           4508 ;src\CFG8266.c:884: if (ucIsFw)
   1F5E 3Ar08r00      [13] 4509 	ld	a,(#_ucIsFw + 0)
   1F61 B7            [ 4] 4510 	or	a, a
   1F62 28 20         [12] 4511 	jr	Z,00337$
                           4512 ;src\CFG8266.c:885: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1F64 DD 5E FC      [19] 4513 	ld	e, -4 (ix)
   1F67 DD 56 FD      [19] 4514 	ld	d, -3 (ix)
   1F6A DD 4E F6      [19] 4515 	ld	c, -10 (ix)
   1F6D DD 46 F7      [19] 4516 	ld	b, -9 (ix)
   1F70 D5            [11] 4517 	push	de
   1F71 2Ar01r00      [16] 4518 	ld	hl, (_uiPort)
   1F74 E5            [11] 4519 	push	hl
   1F75 C5            [11] 4520 	push	bc
   1F76 21r78r25      [10] 4521 	ld	hl, #___str_90
   1F79 E5            [11] 4522 	push	hl
   1F7A CDr00r00      [17] 4523 	call	_printf
   1F7D 21 08 00      [10] 4524 	ld	hl, #8
   1F80 39            [11] 4525 	add	hl, sp
   1F81 F9            [ 6] 4526 	ld	sp, hl
   1F82 18 1E         [12] 4527 	jr	00338$
   1F84                    4528 00337$:
                           4529 ;src\CFG8266.c:887: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1F84 DD 5E FC      [19] 4530 	ld	e, -4 (ix)
   1F87 DD 56 FD      [19] 4531 	ld	d, -3 (ix)
   1F8A DD 4E F6      [19] 4532 	ld	c, -10 (ix)
   1F8D DD 46 F7      [19] 4533 	ld	b, -9 (ix)
   1F90 D5            [11] 4534 	push	de
   1F91 2Ar01r00      [16] 4535 	ld	hl, (_uiPort)
   1F94 E5            [11] 4536 	push	hl
   1F95 C5            [11] 4537 	push	bc
   1F96 21rE1r25      [10] 4538 	ld	hl, #___str_91
   1F99 E5            [11] 4539 	push	hl
   1F9A CDr00r00      [17] 4540 	call	_printf
   1F9D 21 08 00      [10] 4541 	ld	hl, #8
   1FA0 39            [11] 4542 	add	hl, sp
   1FA1 F9            [ 6] 4543 	ld	sp, hl
   1FA2                    4544 00338$:
                           4545 ;src\CFG8266.c:888: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   1FA2 DD 4E F6      [19] 4546 	ld	c, -10 (ix)
   1FA5 DD 46 F7      [19] 4547 	ld	b, -9 (ix)
   1FA8 C5            [11] 4548 	push	bc
   1FA9 CDr00r00      [17] 4549 	call	_strlen
   1FAC F1            [10] 4550 	pop	af
   1FAD DD 75 FE      [19] 4551 	ld	-2 (ix), l
   1FB0 DD 74 FF      [19] 4552 	ld	-1 (ix), h
   1FB3 DD 7E FE      [19] 4553 	ld	a, -2 (ix)
   1FB6 C6 03         [ 7] 4554 	add	a, #0x03
   1FB8 DD 77 F8      [19] 4555 	ld	-8 (ix), a
   1FBB DD 7E FF      [19] 4556 	ld	a, -1 (ix)
   1FBE CE 00         [ 7] 4557 	adc	a, #0x00
   1FC0 DD 77 F9      [19] 4558 	ld	-7 (ix), a
                           4559 ;src\CFG8266.c:889: uiCMDLen += strlen(ucFile);
   1FC3 DD 7E FC      [19] 4560 	ld	a, -4 (ix)
   1FC6 DD 77 FE      [19] 4561 	ld	-2 (ix), a
   1FC9 DD 7E FD      [19] 4562 	ld	a, -3 (ix)
   1FCC DD 77 FF      [19] 4563 	ld	-1 (ix), a
   1FCF DD 6E FE      [19] 4564 	ld	l, -2 (ix)
   1FD2 DD 66 FF      [19] 4565 	ld	h, -1 (ix)
   1FD5 E5            [11] 4566 	push	hl
   1FD6 CDr00r00      [17] 4567 	call	_strlen
   1FD9 F1            [10] 4568 	pop	af
   1FDA DD 75 FE      [19] 4569 	ld	-2 (ix), l
   1FDD DD 74 FF      [19] 4570 	ld	-1 (ix), h
   1FE0 DD 7E FE      [19] 4571 	ld	a, -2 (ix)
   1FE3 DD 86 F8      [19] 4572 	add	a, -8 (ix)
   1FE6 DD 77 FA      [19] 4573 	ld	-6 (ix), a
   1FE9 DD 7E FF      [19] 4574 	ld	a, -1 (ix)
   1FEC DD 8E F9      [19] 4575 	adc	a, -7 (ix)
   1FEF DD 77 FB      [19] 4576 	ld	-5 (ix), a
                           4577 ;src\CFG8266.c:890: if (ucIsFw)
   1FF2 3Ar08r00      [13] 4578 	ld	a,(#_ucIsFw + 0)
   1FF5 B7            [ 4] 4579 	or	a, a
   1FF6 28 0A         [12] 4580 	jr	Z,00340$
                           4581 ;src\CFG8266.c:891: TxByte('U'); //Request Update Main Firmware remotely
   1FF8 3E 55         [ 7] 4582 	ld	a, #0x55
   1FFA F5            [11] 4583 	push	af
   1FFB 33            [ 6] 4584 	inc	sp
   1FFC CDr5Dr07      [17] 4585 	call	_TxByte
   1FFF 33            [ 6] 4586 	inc	sp
   2000 18 08         [12] 4587 	jr	00341$
   2002                    4588 00340$:
                           4589 ;src\CFG8266.c:893: TxByte('u'); //Request Update spiffs remotely
   2002 3E 75         [ 7] 4590 	ld	a, #0x75
   2004 F5            [11] 4591 	push	af
   2005 33            [ 6] 4592 	inc	sp
   2006 CDr5Dr07      [17] 4593 	call	_TxByte
   2009 33            [ 6] 4594 	inc	sp
   200A                    4595 00341$:
                           4596 ;src\CFG8266.c:894: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   200A DD 36 FE 00   [19] 4597 	ld	-2 (ix), #0x00
   200E DD 7E FB      [19] 4598 	ld	a, -5 (ix)
   2011 DD 77 FF      [19] 4599 	ld	-1 (ix), a
   2014 DD 77 FE      [19] 4600 	ld	-2 (ix), a
   2017 DD 36 FF 00   [19] 4601 	ld	-1 (ix), #0x00
   201B DD 7E FE      [19] 4602 	ld	a, -2 (ix)
   201E DD 77 FF      [19] 4603 	ld	-1 (ix), a
   2021 F5            [11] 4604 	push	af
   2022 33            [ 6] 4605 	inc	sp
   2023 CDr5Dr07      [17] 4606 	call	_TxByte
   2026 33            [ 6] 4607 	inc	sp
                           4608 ;src\CFG8266.c:895: TxByte((unsigned char)(uiCMDLen&0xff));
   2027 DD 7E FA      [19] 4609 	ld	a, -6 (ix)
   202A F5            [11] 4610 	push	af
   202B 33            [ 6] 4611 	inc	sp
   202C CDr5Dr07      [17] 4612 	call	_TxByte
   202F 33            [ 6] 4613 	inc	sp
                           4614 ;src\CFG8266.c:896: TxByte((unsigned char)(uiPort&0xff));
   2030 3Ar01r00      [13] 4615 	ld	a,(#_uiPort + 0)
   2033 F5            [11] 4616 	push	af
   2034 33            [ 6] 4617 	inc	sp
   2035 CDr5Dr07      [17] 4618 	call	_TxByte
   2038 33            [ 6] 4619 	inc	sp
                           4620 ;src\CFG8266.c:897: TxByte((unsigned char)((uiPort&0xff00)>>8));
   2039 DD 36 FE 00   [19] 4621 	ld	-2 (ix), #0x00
   203D 3Ar02r00      [13] 4622 	ld	a,(#_uiPort + 1)
   2040 DD 77 FF      [19] 4623 	ld	-1 (ix), a
   2043 DD 77 FE      [19] 4624 	ld	-2 (ix), a
   2046 DD 36 FF 00   [19] 4625 	ld	-1 (ix), #0x00
   204A DD 7E FE      [19] 4626 	ld	a, -2 (ix)
   204D DD 77 FF      [19] 4627 	ld	-1 (ix), a
   2050 F5            [11] 4628 	push	af
   2051 33            [ 6] 4629 	inc	sp
   2052 CDr5Dr07      [17] 4630 	call	_TxByte
   2055 33            [ 6] 4631 	inc	sp
                           4632 ;src\CFG8266.c:899: do
   2056 DD 4E FA      [19] 4633 	ld	c, -6 (ix)
   2059 DD 46 FB      [19] 4634 	ld	b, -5 (ix)
   205C AF            [ 4] 4635 	xor	a, a
   205D DD 77 FF      [19] 4636 	ld	-1 (ix), a
   2060                    4637 00343$:
                           4638 ;src\CFG8266.c:901: tx_data = ucServer[rx_data];
   2060 DD 7E F6      [19] 4639 	ld	a, -10 (ix)
   2063 DD 86 FF      [19] 4640 	add	a, -1 (ix)
   2066 5F            [ 4] 4641 	ld	e, a
   2067 DD 7E F7      [19] 4642 	ld	a, -9 (ix)
   206A CE 00         [ 7] 4643 	adc	a, #0x00
   206C 6B            [ 4] 4644 	ld	l, e
   206D 67            [ 4] 4645 	ld	h, a
   206E 56            [ 7] 4646 	ld	d, (hl)
                           4647 ;src\CFG8266.c:902: TxByte(tx_data);
   206F C5            [11] 4648 	push	bc
   2070 D5            [11] 4649 	push	de
   2071 D5            [11] 4650 	push	de
   2072 33            [ 6] 4651 	inc	sp
   2073 CDr5Dr07      [17] 4652 	call	_TxByte
   2076 33            [ 6] 4653 	inc	sp
   2077 D1            [10] 4654 	pop	de
   2078 C1            [10] 4655 	pop	bc
                           4656 ;src\CFG8266.c:903: --uiCMDLen;
   2079 0B            [ 6] 4657 	dec	bc
                           4658 ;src\CFG8266.c:904: ++rx_data;
   207A DD 34 FF      [23] 4659 	inc	-1 (ix)
                           4660 ;src\CFG8266.c:906: while((uiCMDLen)&&(tx_data!=0));
   207D 78            [ 4] 4661 	ld	a, b
   207E B1            [ 4] 4662 	or	a, c
   207F 28 04         [12] 4663 	jr	Z,00345$
   2081 7A            [ 4] 4664 	ld	a, d
   2082 B7            [ 4] 4665 	or	a, a
   2083 20 DB         [12] 4666 	jr	NZ,00343$
   2085                    4667 00345$:
                           4668 ;src\CFG8266.c:908: do
   2085 DD 71 FA      [19] 4669 	ld	-6 (ix), c
   2088 DD 70 FB      [19] 4670 	ld	-5 (ix), b
   208B AF            [ 4] 4671 	xor	a, a
   208C DD 77 FF      [19] 4672 	ld	-1 (ix), a
   208F                    4673 00348$:
                           4674 ;src\CFG8266.c:910: tx_data = ucFile[rx_data];
   208F DD 7E FC      [19] 4675 	ld	a, -4 (ix)
   2092 DD 86 FF      [19] 4676 	add	a, -1 (ix)
   2095 DD 77 F8      [19] 4677 	ld	-8 (ix), a
   2098 DD 7E FD      [19] 4678 	ld	a, -3 (ix)
   209B CE 00         [ 7] 4679 	adc	a, #0x00
   209D DD 77 F9      [19] 4680 	ld	-7 (ix), a
   20A0 DD 6E F8      [19] 4681 	ld	l, -8 (ix)
   20A3 DD 66 F9      [19] 4682 	ld	h, -7 (ix)
   20A6 7E            [ 7] 4683 	ld	a, (hl)
                           4684 ;src\CFG8266.c:911: if (tx_data==0)
   20A7 B7            [ 4] 4685 	or	a, a
   20A8 28 1E         [12] 4686 	jr	Z,00350$
                           4687 ;src\CFG8266.c:913: TxByte(tx_data);
   20AA F5            [11] 4688 	push	af
   20AB 33            [ 6] 4689 	inc	sp
   20AC CDr5Dr07      [17] 4690 	call	_TxByte
   20AF 33            [ 6] 4691 	inc	sp
                           4692 ;src\CFG8266.c:914: --uiCMDLen;
   20B0 DD 6E FA      [19] 4693 	ld	l, -6 (ix)
   20B3 DD 66 FB      [19] 4694 	ld	h, -5 (ix)
   20B6 2B            [ 6] 4695 	dec	hl
   20B7 DD 75 FA      [19] 4696 	ld	-6 (ix), l
   20BA DD 74 FB      [19] 4697 	ld	-5 (ix), h
                           4698 ;src\CFG8266.c:915: ++rx_data;
   20BD DD 34 FF      [23] 4699 	inc	-1 (ix)
                           4700 ;src\CFG8266.c:917: while(uiCMDLen);
   20C0 DD 7E FB      [19] 4701 	ld	a, -5 (ix)
   20C3 DD B6 FA      [19] 4702 	or	a, -6 (ix)
   20C6 20 C7         [12] 4703 	jr	NZ,00348$
   20C8                    4704 00350$:
                           4705 ;src\CFG8266.c:919: if (ucIsFw)
   20C8 3Ar08r00      [13] 4706 	ld	a,(#_ucIsFw + 0)
   20CB B7            [ 4] 4707 	or	a, a
   20CC 28 26         [12] 4708 	jr	Z,00352$
                           4709 ;src\CFG8266.c:920: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false,NULL,0);
   20CE 21 00 00      [10] 4710 	ld	hl, #0x0000
   20D1 E5            [11] 4711 	push	hl
   20D2 2E 00         [ 7] 4712 	ld	l, #0x00
   20D4 E5            [11] 4713 	push	hl
   20D5 AF            [ 4] 4714 	xor	a, a
   20D6 57            [ 4] 4715 	ld	d,a
   20D7 1E 01         [ 7] 4716 	ld	e,#0x01
   20D9 D5            [11] 4717 	push	de
   20DA 21 50 46      [10] 4718 	ld	hl, #0x4650
   20DD E5            [11] 4719 	push	hl
   20DE 21 02 00      [10] 4720 	ld	hl, #0x0002
   20E1 E5            [11] 4721 	push	hl
   20E2 21r25r01      [10] 4722 	ld	hl, #_responseOTAFW
   20E5 E5            [11] 4723 	push	hl
   20E6 CDrD9r08      [17] 4724 	call	_WaitForRXData
   20E9 FD 21 0C 00   [14] 4725 	ld	iy, #12
   20ED FD 39         [15] 4726 	add	iy, sp
   20EF FD F9         [10] 4727 	ld	sp, iy
   20F1 4D            [ 4] 4728 	ld	c, l
   20F2 18 24         [12] 4729 	jr	00353$
   20F4                    4730 00352$:
                           4731 ;src\CFG8266.c:922: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false,NULL,0);
   20F4 21 00 00      [10] 4732 	ld	hl, #0x0000
   20F7 E5            [11] 4733 	push	hl
   20F8 2E 00         [ 7] 4734 	ld	l, #0x00
   20FA E5            [11] 4735 	push	hl
   20FB AF            [ 4] 4736 	xor	a, a
   20FC 57            [ 4] 4737 	ld	d,a
   20FD 1E 01         [ 7] 4738 	ld	e,#0x01
   20FF D5            [11] 4739 	push	de
   2100 21 50 46      [10] 4740 	ld	hl, #0x4650
   2103 E5            [11] 4741 	push	hl
   2104 21 02 00      [10] 4742 	ld	hl, #0x0002
   2107 E5            [11] 4743 	push	hl
   2108 21r27r01      [10] 4744 	ld	hl, #_responseOTASPIFF
   210B E5            [11] 4745 	push	hl
   210C CDrD9r08      [17] 4746 	call	_WaitForRXData
   210F FD 21 0C 00   [14] 4747 	ld	iy, #12
   2113 FD 39         [15] 4748 	add	iy, sp
   2115 FD F9         [10] 4749 	ld	sp, iy
   2117 4D            [ 4] 4750 	ld	c, l
   2118                    4751 00353$:
                           4752 ;src\CFG8266.c:924: if (bResponse)
   2118 79            [ 4] 4753 	ld	a, c
   2119 B7            [ 4] 4754 	or	a, a
   211A 28 25         [12] 4755 	jr	Z,00358$
                           4756 ;src\CFG8266.c:926: if ((!ucIsFw))
   211C 3Ar08r00      [13] 4757 	ld	a,(#_ucIsFw + 0)
   211F B7            [ 4] 4758 	or	a, a
   2120 20 0A         [12] 4759 	jr	NZ,00355$
                           4760 ;src\CFG8266.c:927: printf("\rSuccess updating certificates!\r\n");
   2122 21r54r26      [10] 4761 	ld	hl, #___str_93
   2125 E5            [11] 4762 	push	hl
   2126 CDr00r00      [17] 4763 	call	_puts
   2129 F1            [10] 4764 	pop	af
   212A 18 08         [12] 4765 	jr	00356$
   212C                    4766 00355$:
                           4767 ;src\CFG8266.c:929: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   212C 21r75r26      [10] 4768 	ld	hl, #___str_95
   212F E5            [11] 4769 	push	hl
   2130 CDr00r00      [17] 4770 	call	_puts
   2133 F1            [10] 4771 	pop	af
   2134                    4772 00356$:
                           4773 ;src\CFG8266.c:930: FinishUpdate(true);
   2134 3E 01         [ 7] 4774 	ld	a, #0x01
   2136 F5            [11] 4775 	push	af
   2137 33            [ 6] 4776 	inc	sp
   2138 CDrC1r0B      [17] 4777 	call	_FinishUpdate
   213B 33            [ 6] 4778 	inc	sp
                           4779 ;src\CFG8266.c:931: return 0;
   213C 21 00 00      [10] 4780 	ld	hl, #0x0000
   213F 18 1F         [12] 4781 	jr	00388$
   2141                    4782 00358$:
                           4783 ;src\CFG8266.c:934: printf("\rFailed to update from remote server...\r\n");
   2141 21rB8r26      [10] 4784 	ld	hl, #___str_97
   2144 E5            [11] 4785 	push	hl
   2145 CDr00r00      [17] 4786 	call	_puts
   2148 F1            [10] 4787 	pop	af
   2149 18 12         [12] 4788 	jr	00375$
   214B                    4789 00371$:
                           4790 ;src\CFG8266.c:938: printf("ESP device not found...\r\n");
   214B 21rE1r26      [10] 4791 	ld	hl, #___str_99
   214E E5            [11] 4792 	push	hl
   214F CDr00r00      [17] 4793 	call	_puts
   2152 F1            [10] 4794 	pop	af
   2153 18 08         [12] 4795 	jr	00375$
   2155                    4796 00374$:
                           4797 ;src\CFG8266.c:941: printf(strUsage);
   2155 21r82r01      [10] 4798 	ld	hl, #_strUsage
   2158 E5            [11] 4799 	push	hl
   2159 CDr00r00      [17] 4800 	call	_printf
   215C F1            [10] 4801 	pop	af
   215D                    4802 00375$:
                           4803 ;src\CFG8266.c:943: return 0;
   215D 21 00 00      [10] 4804 	ld	hl, #0x0000
   2160                    4805 00388$:
                           4806 ;src\CFG8266.c:944: }
   2160 DD F9         [10] 4807 	ld	sp, ix
   2162 DD E1         [14] 4808 	pop	ix
   2164 C9            [10] 4809 	ret
   2165                    4810 ___str_31:
   2165 3E 20 53 4D 2D 58  4811 	.ascii "> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <"
        20 45 53 50 38 32
        36 36 20 57 69 2D
        46 69 20 4D 6F 64
        75 6C 65 20 43 6F
        6E 66 69 67 75 72
        61 74 69 6F 6E 20
        76 31 2E 33 30 20
        3C
   2196 0D                 4812 	.db 0x0d
   2197 0A                 4813 	.db 0x0a
   2198 28 63 29 20 32 30  4814 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   21C9 0D                 4815 	.db 0x0d
   21CA 0A                 4816 	.db 0x0a
   21CB 00                 4817 	.db 0x00
   21CC                    4818 ___str_32:
   21CC 42 61 75 64 20 52  4819 	.ascii "Baud Rate: %s"
        61 74 65 3A 20 25
        73
   21D9 0D                 4820 	.db 0x0d
   21DA 0A                 4821 	.db 0x0a
   21DB 00                 4822 	.db 0x00
   21DC                    4823 ___str_33:
   21DC 46 57 20 56 65 72  4824 	.ascii "FW Version: %c.%c"
        73 69 6F 6E 3A 20
        25 63 2E 25 63
   21ED 0D                 4825 	.db 0x0d
   21EE 0A                 4826 	.db 0x0a
   21EF 00                 4827 	.db 0x00
   21F0                    4828 ___str_34:
   21F0 0D                 4829 	.db 0x0d
   21F1 0A                 4830 	.db 0x0a
   21F2 53 65 74 74 69 6E  4831 	.ascii "Setting Wi-Fi idle timeout to %u..."
        67 20 57 69 2D 46
        69 20 69 64 6C 65
        20 74 69 6D 65 6F
        75 74 20 74 6F 20
        25 75 2E 2E 2E
   2215 0D                 4832 	.db 0x0d
   2216 0A                 4833 	.db 0x0a
   2217 00                 4834 	.db 0x00
   2218                    4835 ___str_36:
   2218 0D                 4836 	.db 0x0d
   2219 0A                 4837 	.db 0x0a
   221A 53 65 74 74 69 6E  4838 	.ascii "Setting Wi-Fi to always on!"
        67 20 57 69 2D 46
        69 20 74 6F 20 61
        6C 77 61 79 73 20
        6F 6E 21
   2235 0D                 4839 	.db 0x0d
   2236 00                 4840 	.db 0x00
   2237                    4841 ___str_38:
   2237 0D                 4842 	.db 0x0d
   2238 00                 4843 	.db 0x00
   2239                    4844 ___str_39:
   2239 25 73 25 73        4845 	.ascii "%s%s"
   223D 0D                 4846 	.db 0x0d
   223E 0A                 4847 	.db 0x0a
   223F 0A                 4848 	.db 0x0a
   2240 00                 4849 	.db 0x00
   2241                    4850 ___str_41:
   2241 43 68 6F 6F 73 65  4851 	.ascii "Choose AP:"
        20 41 50 3A
   224B 0D                 4852 	.db 0x0d
   224C 0A                 4853 	.db 0x0a
   224D 00                 4854 	.db 0x00
   224E                    4855 ___str_42:
   224E 25 75 20 2D 20 25  4856 	.ascii "%u - %s"
        73
   2255 00                 4857 	.db 0x00
   2256                    4858 ___str_44:
   2256 20 28 50 57 44 29  4859 	.ascii " (PWD)"
   225C 0D                 4860 	.db 0x0d
   225D 00                 4861 	.db 0x00
   225E                    4862 ___str_46:
   225E 20 28 4F 50 45 4E  4863 	.ascii " (OPEN)"
        29
   2265 0D                 4864 	.db 0x0d
   2266 00                 4865 	.db 0x00
   2267                    4866 ___str_47:
   2267 0D                 4867 	.db 0x0d
   2268 0A                 4868 	.db 0x0a
   2269 57 68 69 63 68 20  4869 	.ascii "Which one to connect? (ESC exit/SPACE BAR next page)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 2F 53 50 41 43
        45 20 42 41 52 20
        6E 65 78 74 20 70
        61 67 65 29
   229D 00                 4870 	.db 0x00
   229E                    4871 ___str_48:
   229E 0D                 4872 	.db 0x0d
   229F 0A                 4873 	.db 0x0a
   22A0 57 68 69 63 68 20  4874 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   22C0 00                 4875 	.db 0x00
   22C1                    4876 ___str_49:
   22C1 20 25 63           4877 	.ascii " %c"
   22C4 0D                 4878 	.db 0x0d
   22C5 0A                 4879 	.db 0x0a
   22C6 0A                 4880 	.db 0x0a
   22C7 00                 4881 	.db 0x00
   22C8                    4882 ___str_50:
   22C8 50 61 73 73 77 6F  4883 	.ascii "Password? "
        72 64 3F 20
   22D2 00                 4884 	.db 0x00
   22D3                    4885 ___str_52:
   22D3 43 6F 6E 6E 65 63  4886 	.ascii "Connecting to: %s "
        74 69 6E 67 20 74
        6F 3A 20 25 73 20
   22E5 0D                 4887 	.db 0x0d
   22E6 0A                 4888 	.db 0x0a
   22E7 00                 4889 	.db 0x00
   22E8                    4890 ___str_54:
   22E8 53 75 63 63 65 73  4891 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   230A 0D                 4892 	.db 0x0d
   230B 00                 4893 	.db 0x00
   230C                    4894 ___str_56:
   230C 45 72 72 6F 72 2C  4895 	.ascii "Error, wrong password!"
        20 77 72 6F 6E 67
        20 70 61 73 73 77
        6F 72 64 21
   2322 0D                 4896 	.db 0x0d
   2323 00                 4897 	.db 0x00
   2324                    4898 ___str_58:
   2324 45 72 72 6F 72 2C  4899 	.ascii "Error, if protected network, check password."
        20 69 66 20 70 72
        6F 74 65 63 74 65
        64 20 6E 65 74 77
        6F 72 6B 2C 20 63
        68 65 63 6B 20 70
        61 73 73 77 6F 72
        64 2E
   2350 0D                 4900 	.db 0x0d
   2351 00                 4901 	.db 0x00
   2352                    4902 ___str_62:
   2352 0D                 4903 	.db 0x0d
   2353 0A                 4904 	.db 0x0a
   2354 55 73 65 72 20 63  4905 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   236F 0D                 4906 	.db 0x0d
   2370 00                 4907 	.db 0x00
   2371                    4908 ___str_64:
   2371 0D                 4909 	.db 0x0d
   2372 0A                 4910 	.db 0x0a
   2373 53 63 61 6E 20 72  4911 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   238D 0D                 4912 	.db 0x0d
   238E 00                 4913 	.db 0x00
   238F                    4914 ___str_66:
   238F 0D                 4915 	.db 0x0d
   2390 53 63 61 6E 20 72  4916 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   23AA 0D                 4917 	.db 0x0d
   23AB 00                 4918 	.db 0x00
   23AC                    4919 ___str_68:
   23AC 0D                 4920 	.db 0x0d
   23AD 4E 61 67 6C 65 20  4921 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   23C6 0D                 4922 	.db 0x0d
   23C7 00                 4923 	.db 0x00
   23C8                    4924 ___str_70:
   23C8 0D                 4925 	.db 0x0d
   23C9 4E 61 67 6C 65 20  4926 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   23EB 0D                 4927 	.db 0x0d
   23EC 00                 4928 	.db 0x00
   23ED                    4929 ___str_72:
   23ED 0D                 4930 	.db 0x0d
   23EE 52 65 71 75 65 73  4931 	.ascii "Requested to turn off Wi-Fi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        2D 46 69 20 52 61
        64 69 6F 2E 2E 2E
   2412 0D                 4932 	.db 0x0d
   2413 00                 4933 	.db 0x00
   2414                    4934 ___str_74:
   2414 0D                 4935 	.db 0x0d
   2415 52 65 71 75 65 73  4936 	.ascii "Request to turnoff Wi-Fi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 2D 46 69
        20 52 61 64 69 6F
        20 65 72 72 6F 72
        21
   243A 0D                 4937 	.db 0x0d
   243B 00                 4938 	.db 0x00
   243C                    4939 ___str_76:
   243C 0D                 4940 	.db 0x0d
   243D 57 69 2D 46 69 20  4941 	.ascii "Wi-Fi radio on Time-out set successfully..."
        72 61 64 69 6F 20
        6F 6E 20 54 69 6D
        65 2D 6F 75 74 20
        73 65 74 20 73 75
        63 63 65 73 73 66
        75 6C 6C 79 2E 2E
        2E
   2468 0D                 4942 	.db 0x0d
   2469 00                 4943 	.db 0x00
   246A                    4944 ___str_78:
   246A 0D                 4945 	.db 0x0d
   246B 45 72 72 6F 72 20  4946 	.ascii "Error setting Wi-Fi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 2D 46
        69 20 72 61 64 69
        6F 20 6F 6E 20 54
        69 6D 65 2D 6F 75
        74 21
   2491 0D                 4947 	.db 0x0d
   2492 00                 4948 	.db 0x00
   2493                    4949 ___str_79:
   2493 46 69 6C 65 3A 20  4950 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   24A5 0D                 4951 	.db 0x0d
   24A6 0A                 4952 	.db 0x0a
   24A7 00                 4953 	.db 0x00
   24A8                    4954 ___str_81:
   24A8 45 72 72 6F 72 20  4955 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   24D2 0D                 4956 	.db 0x0d
   24D3 00                 4957 	.db 0x00
   24D4                    4958 ___str_82:
   24D4 25 73              4959 	.ascii "%s"
   24D6 00                 4960 	.db 0x00
   24D7                    4961 ___str_84:
   24D7 0D                 4962 	.db 0x0d
   24D8 45 72 72 6F 72 20  4963 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   24ED 0D                 4964 	.db 0x0d
   24EE 00                 4965 	.db 0x00
   24EF                    4966 ___str_86:
   24EF 0D                 4967 	.db 0x0d
   24F0 45 72 72 6F 72 20  4968 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   2519 0D                 4969 	.db 0x0d
   251A 00                 4970 	.db 0x00
   251B                    4971 ___str_87:
   251B 0D                 4972 	.db 0x0d
   251C 45 72 72 6F 72 20  4973 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   2538 0D                 4974 	.db 0x0d
   2539 0A                 4975 	.db 0x0a
   253A 00                 4976 	.db 0x00
   253B                    4977 ___str_88:
   253B 45 72 72 6F 72 2C  4978 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   2556 0D                 4979 	.db 0x0d
   2557 0A                 4980 	.db 0x0a
   2558 00                 4981 	.db 0x00
   2559                    4982 ___str_89:
   2559 45 72 72 6F 72 2C  4983 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   2575 0D                 4984 	.db 0x0d
   2576 0A                 4985 	.db 0x0a
   2577 00                 4986 	.db 0x00
   2578                    4987 ___str_90:
   2578 4F 6B 2C 20 75 70  4988 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   25A1 0D                 4989 	.db 0x0d
   25A2 0A                 4990 	.db 0x0a
   25A3 46 69 6C 65 20 70  4991 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   25B0 0A                 4992 	.db 0x0a
   25B1 50 6C 65 61 73 65  4993 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   25DE 0D                 4994 	.db 0x0d
   25DF 0A                 4995 	.db 0x0a
   25E0 00                 4996 	.db 0x00
   25E1                    4997 ___str_91:
   25E1 4F 6B 2C 20 75 70  4998 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   2614 0D                 4999 	.db 0x0d
   2615 0A                 5000 	.db 0x0a
   2616 46 69 6C 65 20 70  5001 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   2623 0A                 5002 	.db 0x0a
   2624 50 6C 65 61 73 65  5003 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   2651 0D                 5004 	.db 0x0d
   2652 0A                 5005 	.db 0x0a
   2653 00                 5006 	.db 0x00
   2654                    5007 ___str_93:
   2654 0D                 5008 	.db 0x0d
   2655 53 75 63 63 65 73  5009 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   2673 0D                 5010 	.db 0x0d
   2674 00                 5011 	.db 0x00
   2675                    5012 ___str_95:
   2675 0D                 5013 	.db 0x0d
   2676 53 75 63 63 65 73  5014 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   26B2 68 65 64 2E        5015 	.ascii "hed."
   26B6 0D                 5016 	.db 0x0d
   26B7 00                 5017 	.db 0x00
   26B8                    5018 ___str_97:
   26B8 0D                 5019 	.db 0x0d
   26B9 46 61 69 6C 65 64  5020 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   26DF 0D                 5021 	.db 0x0d
   26E0 00                 5022 	.db 0x00
   26E1                    5023 ___str_99:
   26E1 45 53 50 20 64 65  5024 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   26F8 0D                 5025 	.db 0x0d
   26F9 00                 5026 	.db 0x00
                           5027 	.area _CODE
   26FA                    5028 ___str_100:
   26FA 57 69 2D 46 69 20  5029 	.ascii "Wi-Fi is Idle, AP: "
        69 73 20 49 64 6C
        65 2C 20 41 50 3A
        20
   270D 00                 5030 	.db 0x00
   270E                    5031 ___str_101:
   270E 57 69 2D 46 69 20  5032 	.ascii "Wi-Fi Connecting to AP: "
        43 6F 6E 6E 65 63
        74 69 6E 67 20 74
        6F 20 41 50 3A 20
   2726 00                 5033 	.db 0x00
   2727                    5034 ___str_102:
   2727 57 69 2D 46 69 20  5035 	.ascii "Wi-Fi Wrong Password for AP: "
        57 72 6F 6E 67 20
        50 61 73 73 77 6F
        72 64 20 66 6F 72
        20 41 50 3A 20
   2744 00                 5036 	.db 0x00
   2745                    5037 ___str_103:
   2745 57 69 2D 46 69 20  5038 	.ascii "Wi-Fi Did not find AP: "
        44 69 64 20 6E 6F
        74 20 66 69 6E 64
        20 41 50 3A 20
   275C 00                 5039 	.db 0x00
   275D                    5040 ___str_104:
   275D 57 69 2D 46 69 20  5041 	.ascii "Wi-Fi Failed to connect to: "
        46 61 69 6C 65 64
        20 74 6F 20 63 6F
        6E 6E 65 63 74 20
        74 6F 3A 20
   2779 00                 5042 	.db 0x00
   277A                    5043 ___str_105:
   277A 57 69 2D 46 69 20  5044 	.ascii "Wi-Fi Connected to: "
        43 6F 6E 6E 65 63
        74 65 64 20 74 6F
        3A 20
   278E 00                 5045 	.db 0x00
   278F                    5046 ___str_106:
   278F 38 35 39 33 37 32  5047 	.ascii "859372 bps"
        20 62 70 73
   2799 00                 5048 	.db 0x00
   279A                    5049 ___str_107:
   279A 33 34 36 35 32 30  5050 	.ascii "346520 bps"
        20 62 70 73
   27A4 00                 5051 	.db 0x00
   27A5                    5052 ___str_108:
   27A5 32 33 31 30 31 34  5053 	.ascii "231014 bps"
        20 62 70 73
   27AF 00                 5054 	.db 0x00
   27B0                    5055 ___str_109:
   27B0 31 31 35 32 30 30  5056 	.ascii "115200 bps"
        20 62 70 73
   27BA 00                 5057 	.db 0x00
   27BB                    5058 ___str_110:
   27BB 35 37 36 30 30 20  5059 	.ascii "57600 bps"
        62 70 73
   27C4 00                 5060 	.db 0x00
   27C5                    5061 ___str_111:
   27C5 33 38 34 30 30 20  5062 	.ascii "38400 bps"
        62 70 73
   27CE 00                 5063 	.db 0x00
   27CF                    5064 ___str_112:
   27CF 33 31 32 35 30 20  5065 	.ascii "31250 bps"
        62 70 73
   27D8 00                 5066 	.db 0x00
   27D9                    5067 ___str_113:
   27D9 31 39 32 30 30 20  5068 	.ascii "19200 bps"
        62 70 73
   27E2 00                 5069 	.db 0x00
   27E3                    5070 ___str_114:
   27E3 39 36 30 30 20 62  5071 	.ascii "9600 bps"
        70 73
   27EB 00                 5072 	.db 0x00
   27EC                    5073 ___str_115:
   27EC 34 38 30 30 20 62  5074 	.ascii "4800 bps"
        70 73
   27F4 00                 5075 	.db 0x00
                           5076 	.area _INITIALIZER
   0000                    5077 __xinit__strAPSts:
   0000rFAr26              5078 	.dw ___str_100
   0002r0Er27              5079 	.dw ___str_101
   0004r27r27              5080 	.dw ___str_102
   0006r45r27              5081 	.dw ___str_103
   0008r5Dr27              5082 	.dw ___str_104
   000Ar7Ar27              5083 	.dw ___str_105
   000C                    5084 __xinit__speedStr:
   000Cr8Fr27              5085 	.dw ___str_106
   000Er9Ar27              5086 	.dw ___str_107
   0010rA5r27              5087 	.dw ___str_108
   0012rB0r27              5088 	.dw ___str_109
   0014rBBr27              5089 	.dw ___str_110
   0016rC5r27              5090 	.dw ___str_111
   0018rCFr27              5091 	.dw ___str_112
   001ArD9r27              5092 	.dw ___str_113
   001CrE3r27              5093 	.dw ___str_114
   001ErECr27              5094 	.dw ___str_115
                           5095 	.area _CABS (ABS)
