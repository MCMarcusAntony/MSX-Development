                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _PrintChar
                             23 	.globl _InputString
                             24 	.globl _Print
                             25 	.globl _strlen
                             26 	.globl _atol
                             27 	.globl _atoi
                             28 	.globl _puts
                             29 	.globl _printf
                             30 	.globl _uiTimeout
                             31 	.globl _ucSetTimeout
                             32 	.globl _ucRadioOff
                             33 	.globl _ucNagleOn
                             34 	.globl _ucNagleOff
                             35 	.globl _ucIsFw
                             36 	.globl _ucLocalUpdate
                             37 	.globl _lPort
                             38 	.globl _uiPort
                             39 	.globl _ucPort
                             40 	.globl _ucFile
                             41 	.globl _ucServer
                             42 	.globl _ucScan
                             43 	.globl _TickCount
                             44 	.globl _strUsage
                             45 	.globl _responseReady2
                             46 	.globl _radioOffResponse
                             47 	.globl _responseRadioOnTimeout
                             48 	.globl _responseOTASPIFF
                             49 	.globl _responseOTAFW
                             50 	.globl _responseWRBlock
                             51 	.globl _responseRSCERTUpdate
                             52 	.globl _responseRSFWUpdate
                             53 	.globl _apconfigurationResponse
                             54 	.globl _scanresResponse
                             55 	.globl _nagleoffResponse
                             56 	.globl _nagleonResponse
                             57 	.globl _scanResponse
                             58 	.globl _responseOK
                             59 	.globl _certificateDone
                             60 	.globl _endUpdate
                             61 	.globl _responseReady
                             62 ;--------------------------------------------------------
                             63 ; special function registers
                             64 ;--------------------------------------------------------
                     0006    65 _myPort6	=	0x0006
                     0007    66 _myPort7	=	0x0007
                             67 ;--------------------------------------------------------
                             68 ; ram data
                             69 ;--------------------------------------------------------
                             70 	.area _DATA
                     FC9E    71 _TickCount	=	0xfc9e
   0000                      72 _ucScan::
   0000                      73 	.ds 1
   0001                      74 _ucServer::
   0001                      75 	.ds 256
   0101                      76 _ucFile::
   0101                      77 	.ds 256
   0201                      78 _ucPort::
   0201                      79 	.ds 6
   0207                      80 _uiPort::
   0207                      81 	.ds 2
   0209                      82 _lPort::
   0209                      83 	.ds 4
   020D                      84 _ucLocalUpdate::
   020D                      85 	.ds 1
   020E                      86 _ucIsFw::
   020E                      87 	.ds 1
   020F                      88 _ucNagleOff::
   020F                      89 	.ds 1
   0210                      90 _ucNagleOn::
   0210                      91 	.ds 1
   0211                      92 _ucRadioOff::
   0211                      93 	.ds 1
   0212                      94 _ucSetTimeout::
   0212                      95 	.ds 1
   0213                      96 _uiTimeout::
   0213                      97 	.ds 2
                             98 ;--------------------------------------------------------
                             99 ; ram data
                            100 ;--------------------------------------------------------
                            101 	.area _INITIALIZED
                            102 ;--------------------------------------------------------
                            103 ; absolute external ram data
                            104 ;--------------------------------------------------------
                            105 	.area _DABS (ABS)
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _GSINIT
                            111 	.area _GSFINAL
                            112 	.area _GSINIT
                            113 ;--------------------------------------------------------
                            114 ; Home
                            115 ;--------------------------------------------------------
                            116 	.area _HOME
                            117 	.area _HOME
                            118 ;--------------------------------------------------------
                            119 ; code
                            120 ;--------------------------------------------------------
                            121 	.area _CODE
                            122 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            123 ;	---------------------------------
                            124 ; Function MyRead
                            125 ; ---------------------------------
   0000                     126 _MyRead::
   0000 CDr00r00      [17]  127 	call	___sdcc_enter_ix
   0003 21 F2 FF      [10]  128 	ld	hl, #-14
   0006 39            [11]  129 	add	hl, sp
   0007 F9            [ 6]  130 	ld	sp, hl
                            131 ;src\CFG8266.c:49: unsigned int iRet = 0;
   0008 01 00 00      [10]  132 	ld	bc, #0x0000
                            133 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   000B 21 00 00      [10]  134 	ld	hl, #0
   000E 39            [11]  135 	add	hl, sp
   000F EB            [ 4]  136 	ex	de, hl
   0010 21 04 00      [10]  137 	ld	hl, #0x0004
   0013 19            [11]  138 	add	hl, de
   0014 DD 7E 06      [19]  139 	ld	a, 6 (ix)
   0017 DD 77 FE      [19]  140 	ld	-2 (ix), a
   001A DD 7E 07      [19]  141 	ld	a, 7 (ix)
   001D DD 77 FF      [19]  142 	ld	-1 (ix), a
   0020 DD 7E FE      [19]  143 	ld	a, -2 (ix)
   0023 77            [ 7]  144 	ld	(hl), a
   0024 23            [ 6]  145 	inc	hl
   0025 DD 7E FF      [19]  146 	ld	a, -1 (ix)
   0028 77            [ 7]  147 	ld	(hl), a
                            148 ;src\CFG8266.c:54: regs.Words.HL = Size;
   0029 21 06 00      [10]  149 	ld	hl, #0x0006
   002C 19            [11]  150 	add	hl, de
   002D DD 7E 08      [19]  151 	ld	a, 8 (ix)
   0030 77            [ 7]  152 	ld	(hl), a
   0031 23            [ 6]  153 	inc	hl
   0032 DD 7E 09      [19]  154 	ld	a, 9 (ix)
   0035 77            [ 7]  155 	ld	(hl), a
                            156 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   0036 21 03 00      [10]  157 	ld	hl, #3
   0039 39            [11]  158 	add	hl, sp
   003A DD 7E 04      [19]  159 	ld	a, 4 (ix)
   003D 77            [ 7]  160 	ld	(hl), a
                            161 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   003E 21 00 00      [10]  162 	ld	hl, #0
   0041 39            [11]  163 	add	hl, sp
   0042 EB            [ 4]  164 	ex	de, hl
   0043 6B            [ 4]  165 	ld	l, e
   0044 62            [ 4]  166 	ld	h, d
   0045 C5            [11]  167 	push	bc
   0046 D5            [11]  168 	push	de
   0047 11 02 02      [10]  169 	ld	de, #0x0202
   004A D5            [11]  170 	push	de
   004B E5            [11]  171 	push	hl
   004C 3E 48         [ 7]  172 	ld	a, #0x48
   004E F5            [11]  173 	push	af
   004F 33            [ 6]  174 	inc	sp
   0050 CDr00r00      [17]  175 	call	_DosCall
   0053 F1            [10]  176 	pop	af
   0054 F1            [10]  177 	pop	af
   0055 33            [ 6]  178 	inc	sp
   0056 D1            [10]  179 	pop	de
   0057 C1            [10]  180 	pop	bc
                            181 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   0058 6B            [ 4]  182 	ld	l, e
   0059 62            [ 4]  183 	ld	h, d
   005A 23            [ 6]  184 	inc	hl
   005B 7E            [ 7]  185 	ld	a, (hl)
   005C B7            [ 4]  186 	or	a, a
   005D 20 08         [12]  187 	jr	NZ,00102$
                            188 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   005F EB            [ 4]  189 	ex	de,hl
   0060 11 06 00      [10]  190 	ld	de, #0x0006
   0063 19            [11]  191 	add	hl, de
   0064 4E            [ 7]  192 	ld	c, (hl)
   0065 23            [ 6]  193 	inc	hl
   0066 46            [ 7]  194 	ld	b, (hl)
   0067                     195 00102$:
                            196 ;src\CFG8266.c:63: return iRet;
   0067 69            [ 4]  197 	ld	l, c
   0068 60            [ 4]  198 	ld	h, b
                            199 ;src\CFG8266.c:64: }
   0069 DD F9         [10]  200 	ld	sp, ix
   006B DD E1         [14]  201 	pop	ix
   006D C9            [10]  202 	ret
   006E                     203 _Done_Version:
   006E 4D 61 64 65 20 77   204 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   008D 00                  205 	.db 0x00
   008E                     206 _responseReady:
   008E 52                  207 	.db #0x52	; 82	'R'
   008F 65                  208 	.db #0x65	; 101	'e'
   0090 61                  209 	.db #0x61	; 97	'a'
   0091 64                  210 	.db #0x64	; 100	'd'
   0092 79                  211 	.db #0x79	; 121	'y'
   0093 0D                  212 	.db #0x0d	; 13
   0094 0A                  213 	.db #0x0a	; 10
   0095                     214 _endUpdate:
   0095 45                  215 	.db #0x45	; 69	'E'
   0096 00                  216 	.db #0x00	; 0
   0097                     217 _certificateDone:
   0097 49                  218 	.db #0x49	; 73	'I'
   0098 00                  219 	.db #0x00	; 0
   0099                     220 _responseOK:
   0099 4F                  221 	.db #0x4f	; 79	'O'
   009A 4B                  222 	.db #0x4b	; 75	'K'
   009B                     223 _scanResponse:
   009B 53                  224 	.db #0x53	; 83	'S'
   009C 00                  225 	.db #0x00	; 0
   009D                     226 _nagleonResponse:
   009D 44                  227 	.db #0x44	; 68	'D'
   009E 00                  228 	.db #0x00	; 0
   009F                     229 _nagleoffResponse:
   009F 4E                  230 	.db #0x4e	; 78	'N'
   00A0 00                  231 	.db #0x00	; 0
   00A1                     232 _scanresResponse:
   00A1 73                  233 	.db #0x73	; 115	's'
   00A2 00                  234 	.db #0x00	; 0
   00A3                     235 _apconfigurationResponse:
   00A3 41                  236 	.db #0x41	; 65	'A'
   00A4 00                  237 	.db #0x00	; 0
   00A5                     238 _responseRSFWUpdate:
   00A5 5A                  239 	.db #0x5a	; 90	'Z'
   00A6 00                  240 	.db #0x00	; 0
   00A7                     241 _responseRSCERTUpdate:
   00A7 59                  242 	.db #0x59	; 89	'Y'
   00A8 00                  243 	.db #0x00	; 0
   00A9                     244 _responseWRBlock:
   00A9 7A                  245 	.db #0x7a	; 122	'z'
   00AA 00                  246 	.db #0x00	; 0
   00AB                     247 _responseOTAFW:
   00AB 55                  248 	.db #0x55	; 85	'U'
   00AC 00                  249 	.db #0x00	; 0
   00AD                     250 _responseOTASPIFF:
   00AD 75                  251 	.db #0x75	; 117	'u'
   00AE 00                  252 	.db #0x00	; 0
   00AF                     253 _responseRadioOnTimeout:
   00AF 54                  254 	.db #0x54	; 84	'T'
   00B0 00                  255 	.db #0x00	; 0
   00B1                     256 _radioOffResponse:
   00B1 4F                  257 	.db #0x4f	; 79	'O'
   00B2 00                  258 	.db #0x00	; 0
   00B3                     259 _responseReady2:
   00B3 52                  260 	.db #0x52	; 82	'R'
   00B4 65                  261 	.db #0x65	; 101	'e'
   00B5 61                  262 	.db #0x61	; 97	'a'
   00B6 64                  263 	.db #0x64	; 100	'd'
   00B7 79                  264 	.db #0x79	; 121	'y'
   00B8 0D                  265 	.db #0x0d	; 13
   00B9 0A                  266 	.db #0x0a	; 10
   00BA                     267 _strUsage:
   00BA 55 73 61 67 65 3A   268 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   00F6 0D                  269 	.db 0x0d
   00F7 0A                  270 	.db 0x0a
   00F8 0A                  271 	.db 0x0a
   00F9 20 20 20 20 20 20   272 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   0135 6D 20 74 6F 20 74   273 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   0144 0D                  274 	.db 0x0d
   0145 0A                  275 	.db 0x0a
   0146 0A                  276 	.db 0x0a
   0147 20 20 20 20 20 20   277 	.ascii "       CFG8266 /o to turn off radio now if no connections ar"
        20 43 46 47 38 32
        36 36 20 2F 6F 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        72 61 64 69 6F 20
        6E 6F 77 20 69 66
        20 6E 6F 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 73 20 61 72
   0183 65 20 6F 70 65 6E   278 	.ascii "e open"
   0189 0D                  279 	.db 0x0d
   018A 0A                  280 	.db 0x0a
   018B 0A                  281 	.db 0x0a
   018C 20 20 20 20 20 20   282 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   01C8 79                  283 	.ascii "y"
   01C9 0D                  284 	.db 0x0d
   01CA 0A                  285 	.db 0x0a
   01CB 0A                  286 	.db 0x0a
   01CC 20 20 20 20 20 20   287 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   0204 0D                  288 	.db 0x0d
   0205 0A                  289 	.db 0x0a
   0206 0A                  290 	.db 0x0a
   0207 20 20 20 20 20 20   291 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   0243 6D 77 61 72 65 20   292 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   0251 0D                  293 	.db 0x0d
   0252 0A                  294 	.db 0x0a
   0253 0A                  295 	.db 0x0a
   0254 20 20 20 20 20 20   296 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   0290 63 61 74 65 73 20   297 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   029E 0D                  298 	.db 0x0d
   029F 0A                  299 	.db 0x0a
   02A0 20 20 20 20 20 20   300 	.ascii "       CFG8266 /t TIM to change the inactivity time in secon"
        20 43 46 47 38 32
        36 36 20 2F 74 20
        54 49 4D 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
   02DC 64 73 20 74 6F 20   301 	.ascii "ds to disable radio               0-600 (0 means never disab"
        64 69 73 61 62 6C
        65 20 72 61 64 69
        6F 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 30 2D
        36 30 30 20 28 30
        20 6D 65 61 6E 73
        20 6E 65 76 65 72
        20 64 69 73 61 62
   0318 6C 65 29            302 	.ascii "le)"
   031B 0D                  303 	.db 0x0d
   031C 0A                  304 	.db 0x0a
   031D 45 78 2E 3A 20 20   305 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   0349 00                  306 	.db 0x00
                            307 ;src\CFG8266.c:67: unsigned int IsValidInput (char**argv, int argc)
                            308 ;	---------------------------------
                            309 ; Function IsValidInput
                            310 ; ---------------------------------
   034A                     311 _IsValidInput::
   034A CDr00r00      [17]  312 	call	___sdcc_enter_ix
   034D F5            [11]  313 	push	af
   034E F5            [11]  314 	push	af
   034F F5            [11]  315 	push	af
   0350 F5            [11]  316 	push	af
                            317 ;src\CFG8266.c:69: unsigned int ret = 1;
   0351 01 01 00      [10]  318 	ld	bc, #0x0001
                            319 ;src\CFG8266.c:70: unsigned char * Input = (unsigned char*)argv[0];
   0354 DD 7E 04      [19]  320 	ld	a, 4 (ix)
   0357 DD 77 F8      [19]  321 	ld	-8 (ix), a
   035A DD 7E 05      [19]  322 	ld	a, 5 (ix)
   035D DD 77 F9      [19]  323 	ld	-7 (ix), a
   0360 E1            [10]  324 	pop	hl
   0361 E5            [11]  325 	push	hl
   0362 7E            [ 7]  326 	ld	a, (hl)
   0363 DD 77 FD      [19]  327 	ld	-3 (ix), a
   0366 23            [ 6]  328 	inc	hl
   0367 7E            [ 7]  329 	ld	a, (hl)
   0368 DD 77 FE      [19]  330 	ld	-2 (ix), a
                            331 ;src\CFG8266.c:72: ucScan = 0;
   036B 21r00r00      [10]  332 	ld	hl,#_ucScan + 0
   036E 36 00         [10]  333 	ld	(hl), #0x00
                            334 ;src\CFG8266.c:74: if (argc)
   0370 DD 7E 07      [19]  335 	ld	a, 7 (ix)
   0373 DD B6 06      [19]  336 	or	a, 6 (ix)
   0376 CAr03r06      [10]  337 	jp	Z, 00162$
                            338 ;src\CFG8266.c:76: if ((argc==1)||(argc==2)||(argc==4))
   0379 DD 7E 06      [19]  339 	ld	a, 6 (ix)
   037C 3D            [ 4]  340 	dec	a
   037D DD B6 07      [19]  341 	or	a, 7 (ix)
   0380 3E 01         [ 7]  342 	ld	a, #0x01
   0382 28 01         [12]  343 	jr	Z,00287$
   0384 AF            [ 4]  344 	xor	a, a
   0385                     345 00287$:
   0385 DD 77 FF      [19]  346 	ld	-1 (ix), a
   0388 DD 7E 06      [19]  347 	ld	a, 6 (ix)
   038B D6 02         [ 7]  348 	sub	a, #0x02
   038D DD B6 07      [19]  349 	or	a, 7 (ix)
   0390 3E 01         [ 7]  350 	ld	a, #0x01
   0392 28 01         [12]  351 	jr	Z,00289$
   0394 AF            [ 4]  352 	xor	a, a
   0395                     353 00289$:
   0395 57            [ 4]  354 	ld	d, a
   0396 DD 7E FF      [19]  355 	ld	a, -1 (ix)
   0399 B7            [ 4]  356 	or	a,a
   039A 20 0E         [12]  357 	jr	NZ,00156$
   039C B2            [ 4]  358 	or	a,d
   039D 20 0B         [12]  359 	jr	NZ,00156$
   039F DD 7E 06      [19]  360 	ld	a, 6 (ix)
   03A2 D6 04         [ 7]  361 	sub	a, #0x04
   03A4 DD B6 07      [19]  362 	or	a, 7 (ix)
   03A7 C2rFEr05      [10]  363 	jp	NZ,00157$
   03AA                     364 00156$:
                            365 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03AA DD 6E FD      [19]  366 	ld	l, -3 (ix)
   03AD DD 66 FE      [19]  367 	ld	h, -2 (ix)
   03B0 5E            [ 7]  368 	ld	e, (hl)
   03B1 DD 6E FD      [19]  369 	ld	l, -3 (ix)
   03B4 DD 66 FE      [19]  370 	ld	h, -2 (ix)
   03B7 23            [ 6]  371 	inc	hl
                            372 ;src\CFG8266.c:91: Input = (unsigned char*)argv[1];
   03B8 DD 7E F8      [19]  373 	ld	a, -8 (ix)
   03BB C6 02         [ 7]  374 	add	a, #0x02
   03BD DD 77 FA      [19]  375 	ld	-6 (ix), a
   03C0 DD 7E F9      [19]  376 	ld	a, -7 (ix)
   03C3 CE 00         [ 7]  377 	adc	a, #0x00
   03C5 DD 77 FB      [19]  378 	ld	-5 (ix), a
                            379 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03C8 7B            [ 4]  380 	ld	a, e
   03C9 D6 2F         [ 7]  381 	sub	a, #0x2f
   03CB 3E 01         [ 7]  382 	ld	a, #0x01
   03CD 28 01         [12]  383 	jr	Z,00293$
   03CF AF            [ 4]  384 	xor	a, a
   03D0                     385 00293$:
   03D0 5F            [ 4]  386 	ld	e, a
                            387 ;src\CFG8266.c:78: if ((argc==1)||(argc==2))
   03D1 DD 7E FF      [19]  388 	ld	a, -1 (ix)
   03D4 B7            [ 4]  389 	or	a,a
   03D5 20 04         [12]  390 	jr	NZ,00152$
   03D7 B2            [ 4]  391 	or	a,d
   03D8 CArB9r04      [10]  392 	jp	Z, 00153$
   03DB                     393 00152$:
                            394 ;src\CFG8266.c:80: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   03DB 7B            [ 4]  395 	ld	a, e
   03DC B7            [ 4]  396 	or	a, a
   03DD 28 11         [12]  397 	jr	Z,00132$
   03DF 7E            [ 7]  398 	ld	a, (hl)
   03E0 FE 73         [ 7]  399 	cp	a, #0x73
   03E2 28 04         [12]  400 	jr	Z,00131$
   03E4 D6 53         [ 7]  401 	sub	a, #0x53
   03E6 20 08         [12]  402 	jr	NZ,00132$
   03E8                     403 00131$:
                            404 ;src\CFG8266.c:81: ucScan = 1;
   03E8 21r00r00      [10]  405 	ld	hl,#_ucScan + 0
   03EB 36 01         [10]  406 	ld	(hl), #0x01
   03ED C3r06r06      [10]  407 	jp	00163$
   03F0                     408 00132$:
                            409 ;src\CFG8266.c:82: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   03F0 7B            [ 4]  410 	ld	a, e
   03F1 B7            [ 4]  411 	or	a, a
   03F2 28 11         [12]  412 	jr	Z,00127$
   03F4 7E            [ 7]  413 	ld	a, (hl)
   03F5 FE 6E         [ 7]  414 	cp	a, #0x6e
   03F7 28 04         [12]  415 	jr	Z,00126$
   03F9 D6 4E         [ 7]  416 	sub	a, #0x4e
   03FB 20 08         [12]  417 	jr	NZ,00127$
   03FD                     418 00126$:
                            419 ;src\CFG8266.c:83: ucNagleOff = 1;
   03FD 21r0Fr02      [10]  420 	ld	hl,#_ucNagleOff + 0
   0400 36 01         [10]  421 	ld	(hl), #0x01
   0402 C3r06r06      [10]  422 	jp	00163$
   0405                     423 00127$:
                            424 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0405 7B            [ 4]  425 	ld	a, e
   0406 B7            [ 4]  426 	or	a, a
   0407 28 11         [12]  427 	jr	Z,00122$
   0409 7E            [ 7]  428 	ld	a, (hl)
   040A FE 6D         [ 7]  429 	cp	a, #0x6d
   040C 28 04         [12]  430 	jr	Z,00121$
   040E D6 4D         [ 7]  431 	sub	a, #0x4d
   0410 20 08         [12]  432 	jr	NZ,00122$
   0412                     433 00121$:
                            434 ;src\CFG8266.c:85: ucNagleOn = 1;
   0412 21r10r02      [10]  435 	ld	hl,#_ucNagleOn + 0
   0415 36 01         [10]  436 	ld	(hl), #0x01
   0417 C3r06r06      [10]  437 	jp	00163$
   041A                     438 00122$:
                            439 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   041A 7B            [ 4]  440 	ld	a, e
   041B B7            [ 4]  441 	or	a, a
   041C 28 11         [12]  442 	jr	Z,00117$
   041E 7E            [ 7]  443 	ld	a, (hl)
   041F FE 6F         [ 7]  444 	cp	a, #0x6f
   0421 28 04         [12]  445 	jr	Z,00116$
   0423 D6 4F         [ 7]  446 	sub	a, #0x4f
   0425 20 08         [12]  447 	jr	NZ,00117$
   0427                     448 00116$:
                            449 ;src\CFG8266.c:87: ucRadioOff = 1;
   0427 21r11r02      [10]  450 	ld	hl,#_ucRadioOff + 0
   042A 36 01         [10]  451 	ld	(hl), #0x01
   042C C3r06r06      [10]  452 	jp	00163$
   042F                     453 00117$:
                            454 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   042F 7B            [ 4]  455 	ld	a, e
   0430 B7            [ 4]  456 	or	a, a
   0431 28 3B         [12]  457 	jr	Z,00112$
   0433 7E            [ 7]  458 	ld	a, (hl)
   0434 FE 74         [ 7]  459 	cp	a, #0x74
   0436 28 04         [12]  460 	jr	Z,00111$
   0438 D6 54         [ 7]  461 	sub	a, #0x54
   043A 20 32         [12]  462 	jr	NZ,00112$
   043C                     463 00111$:
                            464 ;src\CFG8266.c:90: ucSetTimeout = 1;
   043C 21r12r02      [10]  465 	ld	hl,#_ucSetTimeout + 0
   043F 36 01         [10]  466 	ld	(hl), #0x01
                            467 ;src\CFG8266.c:91: Input = (unsigned char*)argv[1];
   0441 DD 6E FA      [19]  468 	ld	l, -6 (ix)
   0444 DD 66 FB      [19]  469 	ld	h, -5 (ix)
   0447 5E            [ 7]  470 	ld	e, (hl)
   0448 23            [ 6]  471 	inc	hl
   0449 56            [ 7]  472 	ld	d, (hl)
                            473 ;src\CFG8266.c:92: uiTimeout = atoi (Input);
   044A C5            [11]  474 	push	bc
   044B D5            [11]  475 	push	de
   044C CDr00r00      [17]  476 	call	_atoi
   044F F1            [10]  477 	pop	af
   0450 C1            [10]  478 	pop	bc
   0451 22r13r02      [16]  479 	ld	(_uiTimeout), hl
                            480 ;src\CFG8266.c:93: if (uiTimeout > 600)
   0454 3E 58         [ 7]  481 	ld	a, #0x58
   0456 FD 21r13r02   [14]  482 	ld	iy, #_uiTimeout
   045A FD BE 00      [19]  483 	cp	a, 0 (iy)
   045D 3E 02         [ 7]  484 	ld	a, #0x02
   045F FD 9E 01      [19]  485 	sbc	a, 1 (iy)
   0462 D2r06r06      [10]  486 	jp	NC, 00163$
                            487 ;src\CFG8266.c:94: uiTimeout = 600;
   0465 21 58 02      [10]  488 	ld	hl, #0x0258
   0468 22r13r02      [16]  489 	ld	(_uiTimeout), hl
   046B C3r06r06      [10]  490 	jp	00163$
   046E                     491 00112$:
                            492 ;src\CFG8266.c:98: strcpy (ucFile,Input);
   046E C5            [11]  493 	push	bc
   046F D5            [11]  494 	push	de
   0470 11r01r01      [10]  495 	ld	de, #_ucFile
   0473 DD 6E FD      [19]  496 	ld	l, -3 (ix)
   0476 DD 66 FE      [19]  497 	ld	h, -2 (ix)
   0479 AF            [ 4]  498 	xor	a, a
   047A                     499 00309$:
   047A BE            [ 7]  500 	cp	a, (hl)
   047B ED A0         [16]  501 	ldi
   047D 20 FB         [12]  502 	jr	NZ, 00309$
   047F D1            [10]  503 	pop	de
   0480 C1            [10]  504 	pop	bc
                            505 ;src\CFG8266.c:99: ucLocalUpdate = 1;
   0481 21r0Dr02      [10]  506 	ld	hl,#_ucLocalUpdate + 0
   0484 36 01         [10]  507 	ld	(hl), #0x01
                            508 ;src\CFG8266.c:100: if (argc==2)
   0486 7A            [ 4]  509 	ld	a, d
   0487 B7            [ 4]  510 	or	a, a
   0488 28 27         [12]  511 	jr	Z,00109$
                            512 ;src\CFG8266.c:102: Input = (unsigned char*)argv[1];
   048A DD 6E FA      [19]  513 	ld	l, -6 (ix)
   048D DD 66 FB      [19]  514 	ld	h, -5 (ix)
   0490 5E            [ 7]  515 	ld	e, (hl)
   0491 23            [ 6]  516 	inc	hl
   0492 56            [ 7]  517 	ld	d, (hl)
                            518 ;src\CFG8266.c:103: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   0493 1A            [ 7]  519 	ld	a, (de)
   0494 D6 2F         [ 7]  520 	sub	a, #0x2f
   0496 20 13         [12]  521 	jr	NZ,00104$
   0498 EB            [ 4]  522 	ex	de,hl
   0499 23            [ 6]  523 	inc	hl
   049A 7E            [ 7]  524 	ld	a, (hl)
   049B FE 63         [ 7]  525 	cp	a, #0x63
   049D 28 04         [12]  526 	jr	Z,00103$
   049F D6 43         [ 7]  527 	sub	a, #0x43
   04A1 20 08         [12]  528 	jr	NZ,00104$
   04A3                     529 00103$:
                            530 ;src\CFG8266.c:104: ucIsFw=0;
   04A3 21r0Er02      [10]  531 	ld	hl,#_ucIsFw + 0
   04A6 36 00         [10]  532 	ld	(hl), #0x00
   04A8 C3r06r06      [10]  533 	jp	00163$
   04AB                     534 00104$:
                            535 ;src\CFG8266.c:106: ret=0;
   04AB 01 00 00      [10]  536 	ld	bc, #0x0000
   04AE C3r06r06      [10]  537 	jp	00163$
   04B1                     538 00109$:
                            539 ;src\CFG8266.c:110: ucIsFw=1;
   04B1 21r0Er02      [10]  540 	ld	hl,#_ucIsFw + 0
   04B4 36 01         [10]  541 	ld	(hl), #0x01
   04B6 C3r06r06      [10]  542 	jp	00163$
   04B9                     543 00153$:
                            544 ;src\CFG8266.c:118: Input = (unsigned char*)argv[2];
   04B9 DD 7E F8      [19]  545 	ld	a, -8 (ix)
   04BC C6 04         [ 7]  546 	add	a, #0x04
   04BE DD 77 FC      [19]  547 	ld	-4 (ix), a
   04C1 DD 7E F9      [19]  548 	ld	a, -7 (ix)
   04C4 CE 00         [ 7]  549 	adc	a, #0x00
   04C6 DD 77 FD      [19]  550 	ld	-3 (ix), a
                            551 ;src\CFG8266.c:124: Input = (unsigned char*)argv[3];
   04C9 DD 7E F8      [19]  552 	ld	a, -8 (ix)
   04CC C6 06         [ 7]  553 	add	a, #0x06
   04CE DD 77 FE      [19]  554 	ld	-2 (ix), a
   04D1 DD 7E F9      [19]  555 	ld	a, -7 (ix)
   04D4 CE 00         [ 7]  556 	adc	a, #0x00
   04D6 DD 77 FF      [19]  557 	ld	-1 (ix), a
                            558 ;src\CFG8266.c:115: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   04D9 7B            [ 4]  559 	ld	a, e
   04DA B7            [ 4]  560 	or	a, a
   04DB CAr6Ar05      [10]  561 	jp	Z, 00148$
   04DE 7E            [ 7]  562 	ld	a, (hl)
   04DF FE 75         [ 7]  563 	cp	a, #0x75
   04E1 28 05         [12]  564 	jr	Z,00147$
   04E3 D6 55         [ 7]  565 	sub	a, #0x55
   04E5 C2r6Ar05      [10]  566 	jp	NZ,00148$
   04E8                     567 00147$:
                            568 ;src\CFG8266.c:117: ucIsFw = 1;
   04E8 21r0Er02      [10]  569 	ld	hl,#_ucIsFw + 0
   04EB 36 01         [10]  570 	ld	(hl), #0x01
                            571 ;src\CFG8266.c:118: Input = (unsigned char*)argv[2];
   04ED DD 6E FC      [19]  572 	ld	l, -4 (ix)
   04F0 DD 66 FD      [19]  573 	ld	h, -3 (ix)
   04F3 5E            [ 7]  574 	ld	e, (hl)
   04F4 23            [ 6]  575 	inc	hl
   04F5 56            [ 7]  576 	ld	d, (hl)
                            577 ;src\CFG8266.c:119: if (strlen (Input)<7)
   04F6 C5            [11]  578 	push	bc
   04F7 D5            [11]  579 	push	de
   04F8 CDr00r00      [17]  580 	call	_strlen
   04FB F1            [10]  581 	pop	af
   04FC C1            [10]  582 	pop	bc
   04FD 7D            [ 4]  583 	ld	a, l
   04FE D6 07         [ 7]  584 	sub	a, #0x07
   0500 7C            [ 4]  585 	ld	a, h
   0501 DE 00         [ 7]  586 	sbc	a, #0x00
   0503 30 5F         [12]  587 	jr	NC,00137$
                            588 ;src\CFG8266.c:121: strcpy(ucPort,Input);
   0505 21r01r02      [10]  589 	ld	hl, #_ucPort
   0508 C5            [11]  590 	push	bc
   0509 EB            [ 4]  591 	ex	de, hl
   050A AF            [ 4]  592 	xor	a, a
   050B                     593 00318$:
   050B BE            [ 7]  594 	cp	a, (hl)
   050C ED A0         [16]  595 	ldi
   050E 20 FB         [12]  596 	jr	NZ, 00318$
   0510 C1            [10]  597 	pop	bc
                            598 ;src\CFG8266.c:122: Input = (unsigned char*)argv[1];
   0511 DD 6E FA      [19]  599 	ld	l, -6 (ix)
   0514 DD 66 FB      [19]  600 	ld	h, -5 (ix)
   0517 5E            [ 7]  601 	ld	e, (hl)
   0518 23            [ 6]  602 	inc	hl
   0519 56            [ 7]  603 	ld	d, (hl)
                            604 ;src\CFG8266.c:123: strcpy(ucServer,Input);
   051A 21r01r00      [10]  605 	ld	hl, #_ucServer+0
   051D C5            [11]  606 	push	bc
   051E EB            [ 4]  607 	ex	de, hl
   051F AF            [ 4]  608 	xor	a, a
   0520                     609 00319$:
   0520 BE            [ 7]  610 	cp	a, (hl)
   0521 ED A0         [16]  611 	ldi
   0523 20 FB         [12]  612 	jr	NZ, 00319$
   0525 C1            [10]  613 	pop	bc
                            614 ;src\CFG8266.c:124: Input = (unsigned char*)argv[3];
   0526 DD 6E FE      [19]  615 	ld	l, -2 (ix)
   0529 DD 66 FF      [19]  616 	ld	h, -1 (ix)
   052C 5E            [ 7]  617 	ld	e, (hl)
   052D 23            [ 6]  618 	inc	hl
   052E 56            [ 7]  619 	ld	d, (hl)
                            620 ;src\CFG8266.c:125: strcpy(ucFile,Input);
   052F 21r01r01      [10]  621 	ld	hl, #_ucFile+0
   0532 C5            [11]  622 	push	bc
   0533 EB            [ 4]  623 	ex	de, hl
   0534 AF            [ 4]  624 	xor	a, a
   0535                     625 00320$:
   0535 BE            [ 7]  626 	cp	a, (hl)
   0536 ED A0         [16]  627 	ldi
   0538 20 FB         [12]  628 	jr	NZ, 00320$
   053A 21r01r02      [10]  629 	ld	hl, #_ucPort
   053D E5            [11]  630 	push	hl
   053E CDr00r00      [17]  631 	call	_atol
   0541 F1            [10]  632 	pop	af
   0542 DD 75 FC      [19]  633 	ld	-4 (ix), l
   0545 DD 74 FD      [19]  634 	ld	-3 (ix), h
   0548 DD 73 FE      [19]  635 	ld	-2 (ix), e
   054B DD 72 FF      [19]  636 	ld	-1 (ix), d
   054E 11r09r02      [10]  637 	ld	de, #_lPort
   0551 21 06 00      [10]  638 	ld	hl, #6
   0554 39            [11]  639 	add	hl, sp
   0555 01 04 00      [10]  640 	ld	bc, #4
   0558 ED B0         [21]  641 	ldir
   055A C1            [10]  642 	pop	bc
                            643 ;src\CFG8266.c:127: uiPort = (lPort&0xffff);
   055B 2Ar09r02      [16]  644 	ld	hl, (_lPort)
   055E 22r07r02      [16]  645 	ld	(_uiPort), hl
   0561 C3r06r06      [10]  646 	jp	00163$
   0564                     647 00137$:
                            648 ;src\CFG8266.c:130: ret = 0;
   0564 01 00 00      [10]  649 	ld	bc, #0x0000
   0567 C3r06r06      [10]  650 	jp	00163$
   056A                     651 00148$:
                            652 ;src\CFG8266.c:132: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   056A 7B            [ 4]  653 	ld	a, e
   056B B7            [ 4]  654 	or	a, a
   056C CArF9r05      [10]  655 	jp	Z, 00143$
   056F 7E            [ 7]  656 	ld	a, (hl)
   0570 FE 63         [ 7]  657 	cp	a, #0x63
   0572 28 05         [12]  658 	jr	Z,00142$
   0574 D6 43         [ 7]  659 	sub	a, #0x43
   0576 C2rF9r05      [10]  660 	jp	NZ,00143$
   0579                     661 00142$:
                            662 ;src\CFG8266.c:134: ucIsFw = 0;
   0579 21r0Er02      [10]  663 	ld	hl,#_ucIsFw + 0
   057C 36 00         [10]  664 	ld	(hl), #0x00
                            665 ;src\CFG8266.c:135: Input = (unsigned char*)argv[2];
   057E DD 6E FC      [19]  666 	ld	l, -4 (ix)
   0581 DD 66 FD      [19]  667 	ld	h, -3 (ix)
   0584 5E            [ 7]  668 	ld	e, (hl)
   0585 23            [ 6]  669 	inc	hl
   0586 56            [ 7]  670 	ld	d, (hl)
                            671 ;src\CFG8266.c:136: if (strlen (Input)<7)
   0587 C5            [11]  672 	push	bc
   0588 D5            [11]  673 	push	de
   0589 CDr00r00      [17]  674 	call	_strlen
   058C F1            [10]  675 	pop	af
   058D C1            [10]  676 	pop	bc
   058E 7D            [ 4]  677 	ld	a, l
   058F D6 07         [ 7]  678 	sub	a, #0x07
   0591 7C            [ 4]  679 	ld	a, h
   0592 DE 00         [ 7]  680 	sbc	a, #0x00
   0594 30 5E         [12]  681 	jr	NC,00140$
                            682 ;src\CFG8266.c:138: strcpy(ucPort,Input);
   0596 21r01r02      [10]  683 	ld	hl, #_ucPort
   0599 C5            [11]  684 	push	bc
   059A EB            [ 4]  685 	ex	de, hl
   059B AF            [ 4]  686 	xor	a, a
   059C                     687 00324$:
   059C BE            [ 7]  688 	cp	a, (hl)
   059D ED A0         [16]  689 	ldi
   059F 20 FB         [12]  690 	jr	NZ, 00324$
   05A1 C1            [10]  691 	pop	bc
                            692 ;src\CFG8266.c:139: Input = (unsigned char*)argv[1];
   05A2 DD 6E FA      [19]  693 	ld	l, -6 (ix)
   05A5 DD 66 FB      [19]  694 	ld	h, -5 (ix)
   05A8 5E            [ 7]  695 	ld	e, (hl)
   05A9 23            [ 6]  696 	inc	hl
   05AA 56            [ 7]  697 	ld	d, (hl)
                            698 ;src\CFG8266.c:140: strcpy(ucServer,Input);
   05AB 21r01r00      [10]  699 	ld	hl, #_ucServer+0
   05AE C5            [11]  700 	push	bc
   05AF EB            [ 4]  701 	ex	de, hl
   05B0 AF            [ 4]  702 	xor	a, a
   05B1                     703 00325$:
   05B1 BE            [ 7]  704 	cp	a, (hl)
   05B2 ED A0         [16]  705 	ldi
   05B4 20 FB         [12]  706 	jr	NZ, 00325$
   05B6 C1            [10]  707 	pop	bc
                            708 ;src\CFG8266.c:141: Input = (unsigned char*)argv[3];
   05B7 DD 6E FE      [19]  709 	ld	l, -2 (ix)
   05BA DD 66 FF      [19]  710 	ld	h, -1 (ix)
   05BD 5E            [ 7]  711 	ld	e, (hl)
   05BE 23            [ 6]  712 	inc	hl
   05BF 56            [ 7]  713 	ld	d, (hl)
                            714 ;src\CFG8266.c:142: strcpy(ucFile,Input);
   05C0 21r01r01      [10]  715 	ld	hl, #_ucFile+0
   05C3 C5            [11]  716 	push	bc
   05C4 EB            [ 4]  717 	ex	de, hl
   05C5 AF            [ 4]  718 	xor	a, a
   05C6                     719 00326$:
   05C6 BE            [ 7]  720 	cp	a, (hl)
   05C7 ED A0         [16]  721 	ldi
   05C9 20 FB         [12]  722 	jr	NZ, 00326$
   05CB 21r01r02      [10]  723 	ld	hl, #_ucPort
   05CE E5            [11]  724 	push	hl
   05CF CDr00r00      [17]  725 	call	_atol
   05D2 F1            [10]  726 	pop	af
   05D3 DD 75 FC      [19]  727 	ld	-4 (ix), l
   05D6 DD 74 FD      [19]  728 	ld	-3 (ix), h
   05D9 DD 73 FE      [19]  729 	ld	-2 (ix), e
   05DC DD 72 FF      [19]  730 	ld	-1 (ix), d
   05DF 11r09r02      [10]  731 	ld	de, #_lPort
   05E2 21 06 00      [10]  732 	ld	hl, #6
   05E5 39            [11]  733 	add	hl, sp
   05E6 01 04 00      [10]  734 	ld	bc, #4
   05E9 ED B0         [21]  735 	ldir
   05EB C1            [10]  736 	pop	bc
                            737 ;src\CFG8266.c:144: uiPort = (lPort&0xffff);
   05EC 2Ar09r02      [16]  738 	ld	hl, (_lPort)
   05EF 22r07r02      [16]  739 	ld	(_uiPort), hl
   05F2 18 12         [12]  740 	jr	00163$
   05F4                     741 00140$:
                            742 ;src\CFG8266.c:147: ret = 0;
   05F4 01 00 00      [10]  743 	ld	bc, #0x0000
   05F7 18 0D         [12]  744 	jr	00163$
   05F9                     745 00143$:
                            746 ;src\CFG8266.c:150: ret = 0;
   05F9 01 00 00      [10]  747 	ld	bc, #0x0000
   05FC 18 08         [12]  748 	jr	00163$
   05FE                     749 00157$:
                            750 ;src\CFG8266.c:154: ret = 0;
   05FE 01 00 00      [10]  751 	ld	bc, #0x0000
   0601 18 03         [12]  752 	jr	00163$
   0603                     753 00162$:
                            754 ;src\CFG8266.c:157: ret=0;
   0603 01 00 00      [10]  755 	ld	bc, #0x0000
   0606                     756 00163$:
                            757 ;src\CFG8266.c:159: return ret;
   0606 69            [ 4]  758 	ld	l, c
   0607 60            [ 4]  759 	ld	h, b
                            760 ;src\CFG8266.c:160: }
   0608 DD F9         [10]  761 	ld	sp, ix
   060A DD E1         [14]  762 	pop	ix
   060C C9            [10]  763 	ret
                            764 ;src\CFG8266.c:162: void TxByte(char chTxByte)
                            765 ;	---------------------------------
                            766 ; Function TxByte
                            767 ; ---------------------------------
   060D                     768 _TxByte::
                            769 ;src\CFG8266.c:165: do
   060D                     770 00103$:
                            771 ;src\CFG8266.c:167: UartStatus = myPort7&2 ;
   060D DB 07         [11]  772 	in	a, (_myPort7)
   060F CB 4F         [ 8]  773 	bit	1, a
   0611 20 FA         [12]  774 	jr	NZ,00103$
                            775 ;src\CFG8266.c:168: if (!UartStatus)
                            776 ;src\CFG8266.c:173: myPort7 = chTxByte;
   0613 21 02 00      [10]  777 	ld	hl, #2+0
   0616 39            [11]  778 	add	hl, sp
   0617 7E            [ 7]  779 	ld	a, (hl)
   0618 D3 07         [11]  780 	out	(_myPort7), a
                            781 ;src\CFG8266.c:177: while (1);
                            782 ;src\CFG8266.c:178: }
   061A C9            [10]  783 	ret
                            784 ;src\CFG8266.c:180: char *ultostr(unsigned long value, char *ptr, int base)
                            785 ;	---------------------------------
                            786 ; Function ultostr
                            787 ; ---------------------------------
   061B                     788 _ultostr::
   061B CDr00r00      [17]  789 	call	___sdcc_enter_ix
   061E 21 F1 FF      [10]  790 	ld	hl, #-15
   0621 39            [11]  791 	add	hl, sp
   0622 F9            [ 6]  792 	ld	sp, hl
                            793 ;src\CFG8266.c:183: unsigned long tmp = value;
   0623 DD 4E 04      [19]  794 	ld	c, 4 (ix)
   0626 DD 46 05      [19]  795 	ld	b, 5 (ix)
   0629 DD 5E 06      [19]  796 	ld	e, 6 (ix)
   062C DD 56 07      [19]  797 	ld	d, 7 (ix)
                            798 ;src\CFG8266.c:184: int count = 0;
   062F AF            [ 4]  799 	xor	a, a
   0630 DD 77 FE      [19]  800 	ld	-2 (ix), a
   0633 DD 77 FF      [19]  801 	ld	-1 (ix), a
                            802 ;src\CFG8266.c:186: if (NULL == ptr)
   0636 DD 7E 09      [19]  803 	ld	a, 9 (ix)
   0639 DD B6 08      [19]  804 	or	a, 8 (ix)
   063C 20 06         [12]  805 	jr	NZ,00102$
                            806 ;src\CFG8266.c:188: return NULL;
   063E 21 00 00      [10]  807 	ld	hl, #0x0000
   0641 C3rC3r07      [10]  808 	jp	00117$
   0644                     809 00102$:
                            810 ;src\CFG8266.c:191: if (tmp == 0)
   0644 7A            [ 4]  811 	ld	a, d
   0645 B3            [ 4]  812 	or	a, e
   0646 B0            [ 4]  813 	or	a, b
   0647 B1            [ 4]  814 	or	a, c
   0648 20 08         [12]  815 	jr	NZ,00122$
                            816 ;src\CFG8266.c:193: count++;
   064A DD 36 FE 01   [19]  817 	ld	-2 (ix), #0x01
   064E AF            [ 4]  818 	xor	a, a
   064F DD 77 FF      [19]  819 	ld	-1 (ix), a
                            820 ;src\CFG8266.c:196: while(tmp > 0)
   0652                     821 00122$:
   0652                     822 00105$:
                            823 ;src\CFG8266.c:198: tmp = tmp/base;
   0652 DD 7E 0A      [19]  824 	ld	a, 10 (ix)
   0655 DD 77 F1      [19]  825 	ld	-15 (ix), a
   0658 DD 7E 0B      [19]  826 	ld	a, 11 (ix)
   065B DD 77 F2      [19]  827 	ld	-14 (ix), a
   065E 17            [ 4]  828 	rla
   065F 9F            [ 4]  829 	sbc	a, a
   0660 DD 77 F3      [19]  830 	ld	-13 (ix), a
   0663 DD 77 F4      [19]  831 	ld	-12 (ix), a
                            832 ;src\CFG8266.c:196: while(tmp > 0)
   0666 7A            [ 4]  833 	ld	a, d
   0667 B3            [ 4]  834 	or	a, e
   0668 B0            [ 4]  835 	or	a, b
   0669 B1            [ 4]  836 	or	a, c
   066A 28 23         [12]  837 	jr	Z,00107$
                            838 ;src\CFG8266.c:198: tmp = tmp/base;
   066C DD 6E F3      [19]  839 	ld	l, -13 (ix)
   066F DD 66 F4      [19]  840 	ld	h, -12 (ix)
   0672 E5            [11]  841 	push	hl
   0673 DD 6E F1      [19]  842 	ld	l, -15 (ix)
   0676 DD 66 F2      [19]  843 	ld	h, -14 (ix)
   0679 E5            [11]  844 	push	hl
   067A D5            [11]  845 	push	de
   067B C5            [11]  846 	push	bc
   067C CDr00r00      [17]  847 	call	__divulong
   067F F1            [10]  848 	pop	af
   0680 F1            [10]  849 	pop	af
   0681 F1            [10]  850 	pop	af
   0682 F1            [10]  851 	pop	af
   0683 4D            [ 4]  852 	ld	c, l
   0684 44            [ 4]  853 	ld	b, h
                            854 ;src\CFG8266.c:199: count++;
   0685 DD 34 FE      [23]  855 	inc	-2 (ix)
   0688 20 C8         [12]  856 	jr	NZ,00105$
   068A DD 34 FF      [23]  857 	inc	-1 (ix)
   068D 18 C3         [12]  858 	jr	00105$
   068F                     859 00107$:
                            860 ;src\CFG8266.c:202: ptr += count;
   068F DD 7E 08      [19]  861 	ld	a, 8 (ix)
   0692 DD 86 FE      [19]  862 	add	a, -2 (ix)
   0695 DD 77 08      [19]  863 	ld	8 (ix), a
   0698 DD 7E 09      [19]  864 	ld	a, 9 (ix)
   069B DD 8E FF      [19]  865 	adc	a, -1 (ix)
   069E DD 77 09      [19]  866 	ld	9 (ix), a
                            867 ;src\CFG8266.c:204: *ptr = '\0';
   06A1 DD 4E 08      [19]  868 	ld	c, 8 (ix)
   06A4 DD 46 09      [19]  869 	ld	b, 9 (ix)
   06A7 AF            [ 4]  870 	xor	a, a
   06A8 02            [ 7]  871 	ld	(bc), a
                            872 ;src\CFG8266.c:206: do
   06A9                     873 00114$:
                            874 ;src\CFG8266.c:208: res = value - base * (t = value / base);
   06A9 DD 6E F3      [19]  875 	ld	l, -13 (ix)
   06AC DD 66 F4      [19]  876 	ld	h, -12 (ix)
   06AF E5            [11]  877 	push	hl
   06B0 DD 6E F1      [19]  878 	ld	l, -15 (ix)
   06B3 DD 66 F2      [19]  879 	ld	h, -14 (ix)
   06B6 E5            [11]  880 	push	hl
   06B7 DD 6E 06      [19]  881 	ld	l, 6 (ix)
   06BA DD 66 07      [19]  882 	ld	h, 7 (ix)
   06BD E5            [11]  883 	push	hl
   06BE DD 6E 04      [19]  884 	ld	l, 4 (ix)
   06C1 DD 66 05      [19]  885 	ld	h, 5 (ix)
   06C4 E5            [11]  886 	push	hl
   06C5 CDr00r00      [17]  887 	call	__divulong
   06C8 F1            [10]  888 	pop	af
   06C9 F1            [10]  889 	pop	af
   06CA F1            [10]  890 	pop	af
   06CB F1            [10]  891 	pop	af
   06CC DD 75 F5      [19]  892 	ld	-11 (ix), l
   06CF DD 74 F6      [19]  893 	ld	-10 (ix), h
   06D2 DD 73 F7      [19]  894 	ld	-9 (ix), e
   06D5 DD 72 F8      [19]  895 	ld	-8 (ix), d
   06D8 D5            [11]  896 	push	de
   06D9 E5            [11]  897 	push	hl
   06DA DD 6E F3      [19]  898 	ld	l, -13 (ix)
   06DD DD 66 F4      [19]  899 	ld	h, -12 (ix)
   06E0 E5            [11]  900 	push	hl
   06E1 DD 6E F1      [19]  901 	ld	l, -15 (ix)
   06E4 DD 66 F2      [19]  902 	ld	h, -14 (ix)
   06E7 E5            [11]  903 	push	hl
   06E8 CDr00r00      [17]  904 	call	__mullong
   06EB F1            [10]  905 	pop	af
   06EC F1            [10]  906 	pop	af
   06ED F1            [10]  907 	pop	af
   06EE F1            [10]  908 	pop	af
   06EF DD 75 FC      [19]  909 	ld	-4 (ix), l
   06F2 DD 74 FD      [19]  910 	ld	-3 (ix), h
   06F5 DD 73 FE      [19]  911 	ld	-2 (ix), e
   06F8 DD 72 FF      [19]  912 	ld	-1 (ix), d
   06FB DD 7E 04      [19]  913 	ld	a, 4 (ix)
   06FE DD 96 FC      [19]  914 	sub	a, -4 (ix)
   0701 4F            [ 4]  915 	ld	c, a
   0702 DD 7E 05      [19]  916 	ld	a, 5 (ix)
   0705 DD 9E FD      [19]  917 	sbc	a, -3 (ix)
   0708 47            [ 4]  918 	ld	b, a
   0709 DD 7E 06      [19]  919 	ld	a, 6 (ix)
   070C DD 9E FE      [19]  920 	sbc	a, -2 (ix)
   070F 5F            [ 4]  921 	ld	e, a
   0710 DD 7E 07      [19]  922 	ld	a, 7 (ix)
   0713 DD 9E FF      [19]  923 	sbc	a, -1 (ix)
   0716 57            [ 4]  924 	ld	d, a
   0717 DD 71 F9      [19]  925 	ld	-7 (ix), c
   071A DD 70 FA      [19]  926 	ld	-6 (ix), b
   071D DD 73 FB      [19]  927 	ld	-5 (ix), e
   0720 DD 72 FC      [19]  928 	ld	-4 (ix), d
                            929 ;src\CFG8266.c:209: if (res < 10)
   0723 DD 7E F9      [19]  930 	ld	a, -7 (ix)
   0726 D6 0A         [ 7]  931 	sub	a, #0x0a
   0728 DD 7E FA      [19]  932 	ld	a, -6 (ix)
   072B DE 00         [ 7]  933 	sbc	a, #0x00
   072D DD 7E FB      [19]  934 	ld	a, -5 (ix)
   0730 DE 00         [ 7]  935 	sbc	a, #0x00
   0732 DD 7E FC      [19]  936 	ld	a, -4 (ix)
   0735 DE 00         [ 7]  937 	sbc	a, #0x00
   0737 3E 00         [ 7]  938 	ld	a, #0x00
   0739 17            [ 4]  939 	rla
   073A DD 77 FD      [19]  940 	ld	-3 (ix), a
                            941 ;src\CFG8266.c:211: * -- ptr = '0' + res;
   073D DD 7E 08      [19]  942 	ld	a, 8 (ix)
   0740 C6 FF         [ 7]  943 	add	a, #0xff
   0742 DD 77 FE      [19]  944 	ld	-2 (ix), a
   0745 DD 7E 09      [19]  945 	ld	a, 9 (ix)
   0748 CE FF         [ 7]  946 	adc	a, #0xff
   074A DD 77 FF      [19]  947 	ld	-1 (ix), a
   074D DD 4E F9      [19]  948 	ld	c, -7 (ix)
                            949 ;src\CFG8266.c:209: if (res < 10)
   0750 DD 7E FD      [19]  950 	ld	a, -3 (ix)
   0753 B7            [ 4]  951 	or	a, a
   0754 28 18         [12]  952 	jr	Z,00112$
                            953 ;src\CFG8266.c:211: * -- ptr = '0' + res;
   0756 DD 7E FE      [19]  954 	ld	a, -2 (ix)
   0759 DD 77 08      [19]  955 	ld	8 (ix), a
   075C DD 7E FF      [19]  956 	ld	a, -1 (ix)
   075F DD 77 09      [19]  957 	ld	9 (ix), a
   0762 DD 5E 08      [19]  958 	ld	e, 8 (ix)
   0765 DD 56 09      [19]  959 	ld	d, 9 (ix)
   0768 79            [ 4]  960 	ld	a, c
   0769 C6 30         [ 7]  961 	add	a, #0x30
   076B 12            [ 7]  962 	ld	(de), a
   076C 18 32         [12]  963 	jr	00115$
   076E                     964 00112$:
                            965 ;src\CFG8266.c:213: else if ((res >= 10) && (res < 16))
   076E DD CB FD 46   [20]  966 	bit	0,-3 (ix)
   0772 20 2C         [12]  967 	jr	NZ,00115$
   0774 DD 7E F9      [19]  968 	ld	a, -7 (ix)
   0777 D6 10         [ 7]  969 	sub	a, #0x10
   0779 DD 7E FA      [19]  970 	ld	a, -6 (ix)
   077C DE 00         [ 7]  971 	sbc	a, #0x00
   077E DD 7E FB      [19]  972 	ld	a, -5 (ix)
   0781 DE 00         [ 7]  973 	sbc	a, #0x00
   0783 DD 7E FC      [19]  974 	ld	a, -4 (ix)
   0786 DE 00         [ 7]  975 	sbc	a, #0x00
   0788 30 16         [12]  976 	jr	NC,00115$
                            977 ;src\CFG8266.c:215: * --ptr = 'A' - 10 + res;
   078A DD 7E FE      [19]  978 	ld	a, -2 (ix)
   078D DD 77 08      [19]  979 	ld	8 (ix), a
   0790 DD 7E FF      [19]  980 	ld	a, -1 (ix)
   0793 DD 77 09      [19]  981 	ld	9 (ix), a
   0796 DD 5E 08      [19]  982 	ld	e, 8 (ix)
   0799 DD 56 09      [19]  983 	ld	d, 9 (ix)
   079C 79            [ 4]  984 	ld	a, c
   079D C6 37         [ 7]  985 	add	a, #0x37
   079F 12            [ 7]  986 	ld	(de), a
   07A0                     987 00115$:
                            988 ;src\CFG8266.c:217: } while ((value = t) != 0);
   07A0 21 13 00      [10]  989 	ld	hl, #19
   07A3 39            [11]  990 	add	hl, sp
   07A4 EB            [ 4]  991 	ex	de, hl
   07A5 21 04 00      [10]  992 	ld	hl, #4
   07A8 39            [11]  993 	add	hl, sp
   07A9 01 04 00      [10]  994 	ld	bc, #4
   07AC ED B0         [21]  995 	ldir
   07AE DD 7E F8      [19]  996 	ld	a, -8 (ix)
   07B1 DD B6 F7      [19]  997 	or	a, -9 (ix)
   07B4 DD B6 F6      [19]  998 	or	a, -10 (ix)
   07B7 DD B6 F5      [19]  999 	or	a, -11 (ix)
   07BA C2rA9r06      [10] 1000 	jp	NZ, 00114$
                           1001 ;src\CFG8266.c:219: return(ptr);
   07BD DD 6E 08      [19] 1002 	ld	l, 8 (ix)
   07C0 DD 66 09      [19] 1003 	ld	h, 9 (ix)
   07C3                    1004 00117$:
                           1005 ;src\CFG8266.c:220: }
   07C3 DD F9         [10] 1006 	ld	sp, ix
   07C5 DD E1         [14] 1007 	pop	ix
   07C7 C9            [10] 1008 	ret
                           1009 ;src\CFG8266.c:222: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData)
                           1010 ;	---------------------------------
                           1011 ; Function WaitForRXData
                           1012 ; ---------------------------------
   07C8                    1013 _WaitForRXData::
   07C8 CDr00r00      [17] 1014 	call	___sdcc_enter_ix
   07CB 21 F1 FF      [10] 1015 	ld	hl, #-15
   07CE 39            [11] 1016 	add	hl, sp
   07CF F9            [ 6] 1017 	ld	sp, hl
                           1018 ;src\CFG8266.c:224: bool bReturn = false;
   07D0 0E 00         [ 7] 1019 	ld	c, #0x00
                           1020 ;src\CFG8266.c:228: unsigned char advance[4] = {'-','\\','|','/'};
   07D2 21 00 00      [10] 1021 	ld	hl, #0
   07D5 39            [11] 1022 	add	hl, sp
   07D6 DD 75 F5      [19] 1023 	ld	-11 (ix), l
   07D9 DD 74 F6      [19] 1024 	ld	-10 (ix), h
   07DC 36 2D         [10] 1025 	ld	(hl), #0x2d
   07DE DD 6E F5      [19] 1026 	ld	l, -11 (ix)
   07E1 DD 66 F6      [19] 1027 	ld	h, -10 (ix)
   07E4 23            [ 6] 1028 	inc	hl
   07E5 36 5C         [10] 1029 	ld	(hl), #0x5c
   07E7 DD 6E F5      [19] 1030 	ld	l, -11 (ix)
   07EA DD 66 F6      [19] 1031 	ld	h, -10 (ix)
   07ED 23            [ 6] 1032 	inc	hl
   07EE 23            [ 6] 1033 	inc	hl
   07EF 36 7C         [10] 1034 	ld	(hl), #0x7c
   07F1 DD 6E F5      [19] 1035 	ld	l, -11 (ix)
   07F4 DD 66 F6      [19] 1036 	ld	h, -10 (ix)
   07F7 23            [ 6] 1037 	inc	hl
   07F8 23            [ 6] 1038 	inc	hl
   07F9 23            [ 6] 1039 	inc	hl
   07FA 36 2F         [10] 1040 	ld	(hl), #0x2f
                           1041 ;src\CFG8266.c:229: unsigned int i = 0;
   07FC AF            [ 4] 1042 	xor	a, a
   07FD DD 77 FC      [19] 1043 	ld	-4 (ix), a
   0800 DD 77 FD      [19] 1044 	ld	-3 (ix), a
                           1045 ;src\CFG8266.c:231: if (bShowReceivedData)
   0803 DD 7E 0B      [19] 1046 	ld	a, 11 (ix)
   0806 B7            [ 4] 1047 	or	a, a
   0807 28 75         [12] 1048 	jr	Z,00104$
                           1049 ;src\CFG8266.c:233: printf ("Waiting for: ");
   0809 C5            [11] 1050 	push	bc
   080A 21rDEr09      [10] 1051 	ld	hl, #___str_2
   080D E5            [11] 1052 	push	hl
   080E CDr00r00      [17] 1053 	call	_printf
   0811 F1            [10] 1054 	pop	af
   0812 C1            [10] 1055 	pop	bc
                           1056 ;src\CFG8266.c:234: for (i=0;i<uiDataSize;++i)
   0813 11 00 00      [10] 1057 	ld	de, #0x0000
   0816                    1058 00132$:
   0816 7B            [ 4] 1059 	ld	a, e
   0817 DD 96 06      [19] 1060 	sub	a, 6 (ix)
   081A 7A            [ 4] 1061 	ld	a, d
   081B DD 9E 07      [19] 1062 	sbc	a, 7 (ix)
   081E 30 1B         [12] 1063 	jr	NC,00101$
                           1064 ;src\CFG8266.c:235: printf("%c",uchData[i]);
   0820 DD 6E 04      [19] 1065 	ld	l, 4 (ix)
   0823 DD 66 05      [19] 1066 	ld	h, 5 (ix)
   0826 19            [11] 1067 	add	hl, de
   0827 6E            [ 7] 1068 	ld	l, (hl)
   0828 26 00         [ 7] 1069 	ld	h, #0x00
   082A C5            [11] 1070 	push	bc
   082B D5            [11] 1071 	push	de
   082C E5            [11] 1072 	push	hl
   082D 21rECr09      [10] 1073 	ld	hl, #___str_3
   0830 E5            [11] 1074 	push	hl
   0831 CDr00r00      [17] 1075 	call	_printf
   0834 F1            [10] 1076 	pop	af
   0835 F1            [10] 1077 	pop	af
   0836 D1            [10] 1078 	pop	de
   0837 C1            [10] 1079 	pop	bc
                           1080 ;src\CFG8266.c:234: for (i=0;i<uiDataSize;++i)
   0838 13            [ 6] 1081 	inc	de
   0839 18 DB         [12] 1082 	jr	00132$
   083B                    1083 00101$:
                           1084 ;src\CFG8266.c:236: printf (" / ");
   083B C5            [11] 1085 	push	bc
   083C 21rEFr09      [10] 1086 	ld	hl, #___str_4
   083F E5            [11] 1087 	push	hl
   0840 CDr00r00      [17] 1088 	call	_printf
   0843 F1            [10] 1089 	pop	af
   0844 C1            [10] 1090 	pop	bc
                           1091 ;src\CFG8266.c:237: for (i=0;i<uiDataSize;++i)
   0845 11 00 00      [10] 1092 	ld	de, #0x0000
   0848                    1093 00135$:
   0848 7B            [ 4] 1094 	ld	a, e
   0849 DD 96 06      [19] 1095 	sub	a, 6 (ix)
   084C 7A            [ 4] 1096 	ld	a, d
   084D DD 9E 07      [19] 1097 	sbc	a, 7 (ix)
   0850 30 1B         [12] 1098 	jr	NC,00102$
                           1099 ;src\CFG8266.c:238: printf("{%x}",uchData[i]);
   0852 DD 6E 04      [19] 1100 	ld	l, 4 (ix)
   0855 DD 66 05      [19] 1101 	ld	h, 5 (ix)
   0858 19            [11] 1102 	add	hl, de
   0859 6E            [ 7] 1103 	ld	l, (hl)
   085A 26 00         [ 7] 1104 	ld	h, #0x00
   085C C5            [11] 1105 	push	bc
   085D D5            [11] 1106 	push	de
   085E E5            [11] 1107 	push	hl
   085F 21rF3r09      [10] 1108 	ld	hl, #___str_5
   0862 E5            [11] 1109 	push	hl
   0863 CDr00r00      [17] 1110 	call	_printf
   0866 F1            [10] 1111 	pop	af
   0867 F1            [10] 1112 	pop	af
   0868 D1            [10] 1113 	pop	de
   0869 C1            [10] 1114 	pop	bc
                           1115 ;src\CFG8266.c:237: for (i=0;i<uiDataSize;++i)
   086A 13            [ 6] 1116 	inc	de
   086B 18 DB         [12] 1117 	jr	00135$
   086D                    1118 00102$:
                           1119 ;src\CFG8266.c:239: printf ("\r\n");
   086D C5            [11] 1120 	push	bc
   086E 21rF8r09      [10] 1121 	ld	hl, #___str_7
   0871 E5            [11] 1122 	push	hl
   0872 CDr00r00      [17] 1123 	call	_puts
   0875 F1            [10] 1124 	pop	af
   0876 C1            [10] 1125 	pop	bc
                           1126 ;src\CFG8266.c:240: i = 0;
   0877 AF            [ 4] 1127 	xor	a, a
   0878 DD 77 FC      [19] 1128 	ld	-4 (ix), a
   087B DD 77 FD      [19] 1129 	ld	-3 (ix), a
   087E                    1130 00104$:
                           1131 ;src\CFG8266.c:243: TickCount = 0;
   087E 21 00 00      [10] 1132 	ld	hl, #0x0000
   0881 22 9E FC      [16] 1133 	ld	(_TickCount), hl
                           1134 ;src\CFG8266.c:244: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   0884 FD 21 9E FC   [14] 1135 	ld	iy, #_TickCount
   0888 FD 7E 00      [19] 1136 	ld	a, 0 (iy)
   088B DD 86 08      [19] 1137 	add	a, 8 (ix)
   088E 47            [ 4] 1138 	ld	b, a
   088F FD 7E 01      [19] 1139 	ld	a, 1 (iy)
   0892 DD 8E 09      [19] 1140 	adc	a, 9 (ix)
   0895 5F            [ 4] 1141 	ld	e, a
   0896 DD 70 F7      [19] 1142 	ld	-9 (ix), b
   0899 DD 73 F8      [19] 1143 	ld	-8 (ix), e
                           1144 ;src\CFG8266.c:246: ResponseSt=0;
   089C AF            [ 4] 1145 	xor	a, a
   089D DD 77 FE      [19] 1146 	ld	-2 (ix), a
   08A0 DD 77 FF      [19] 1147 	ld	-1 (ix), a
                           1148 ;src\CFG8266.c:247: if (Timeout>900)
   08A3 3E 84         [ 7] 1149 	ld	a, #0x84
   08A5 DD BE 08      [19] 1150 	cp	a, 8 (ix)
   08A8 3E 03         [ 7] 1151 	ld	a, #0x03
   08AA DD 9E 09      [19] 1152 	sbc	a, 9 (ix)
   08AD 3E 00         [ 7] 1153 	ld	a, #0x00
   08AF 17            [ 4] 1154 	rla
   08B0 DD 77 F9      [19] 1155 	ld	-7 (ix), a
   08B3 B7            [ 4] 1156 	or	a, a
   08B4 28 0A         [12] 1157 	jr	Z,00155$
                           1158 ;src\CFG8266.c:248: PrintChar('W');
   08B6 C5            [11] 1159 	push	bc
   08B7 3E 57         [ 7] 1160 	ld	a, #0x57
   08B9 F5            [11] 1161 	push	af
   08BA 33            [ 6] 1162 	inc	sp
   08BB CDr00r00      [17] 1163 	call	_PrintChar
   08BE 33            [ 6] 1164 	inc	sp
   08BF C1            [10] 1165 	pop	bc
                           1166 ;src\CFG8266.c:249: do
   08C0                    1167 00155$:
   08C0 DD 7E 06      [19] 1168 	ld	a, 6 (ix)
   08C3 D6 02         [ 7] 1169 	sub	a, #0x02
   08C5 DD B6 07      [19] 1170 	or	a, 7 (ix)
   08C8 3E 01         [ 7] 1171 	ld	a, #0x01
   08CA 28 01         [12] 1172 	jr	Z,00227$
   08CC AF            [ 4] 1173 	xor	a, a
   08CD                    1174 00227$:
   08CD DD 77 FA      [19] 1175 	ld	-6 (ix), a
   08D0 DD 5E FC      [19] 1176 	ld	e, -4 (ix)
   08D3 DD 56 FD      [19] 1177 	ld	d, -3 (ix)
   08D6                    1178 00128$:
                           1179 ;src\CFG8266.c:251: if (Timeout>900)
   08D6 DD 7E F9      [19] 1180 	ld	a, -7 (ix)
   08D9 B7            [ 4] 1181 	or	a, a
   08DA 28 26         [12] 1182 	jr	Z,00108$
                           1183 ;src\CFG8266.c:254: PrintChar(8); //backspace
   08DC C5            [11] 1184 	push	bc
   08DD D5            [11] 1185 	push	de
   08DE 3E 08         [ 7] 1186 	ld	a, #0x08
   08E0 F5            [11] 1187 	push	af
   08E1 33            [ 6] 1188 	inc	sp
   08E2 CDr00r00      [17] 1189 	call	_PrintChar
   08E5 33            [ 6] 1190 	inc	sp
   08E6 D1            [10] 1191 	pop	de
   08E7 C1            [10] 1192 	pop	bc
                           1193 ;src\CFG8266.c:255: PrintChar(advance[i%4]); // next char
   08E8 7B            [ 4] 1194 	ld	a, e
   08E9 E6 03         [ 7] 1195 	and	a, #0x03
   08EB 06 00         [ 7] 1196 	ld	b, #0x00
   08ED DD 86 F5      [19] 1197 	add	a, -11 (ix)
   08F0 6F            [ 4] 1198 	ld	l, a
   08F1 78            [ 4] 1199 	ld	a, b
   08F2 DD 8E F6      [19] 1200 	adc	a, -10 (ix)
   08F5 67            [ 4] 1201 	ld	h, a
   08F6 7E            [ 7] 1202 	ld	a, (hl)
   08F7 C5            [11] 1203 	push	bc
   08F8 D5            [11] 1204 	push	de
   08F9 F5            [11] 1205 	push	af
   08FA 33            [ 6] 1206 	inc	sp
   08FB CDr00r00      [17] 1207 	call	_PrintChar
   08FE 33            [ 6] 1208 	inc	sp
   08FF D1            [10] 1209 	pop	de
   0900 C1            [10] 1210 	pop	bc
                           1211 ;src\CFG8266.c:256: ++i;
   0901 13            [ 6] 1212 	inc	de
   0902                    1213 00108$:
                           1214 ;src\CFG8266.c:258: if(UartRXData())
   0902 DB 07         [11] 1215 	in	a, (_myPort7)
   0904 0F            [ 4] 1216 	rrca
   0905 D2rC5r09      [10] 1217 	jp	NC,00125$
                           1218 ;src\CFG8266.c:260: rx_data = GetUARTData();
   0908 DB 06         [11] 1219 	in	a, (_myPort6)
   090A 47            [ 4] 1220 	ld	b, a
                           1221 ;src\CFG8266.c:262: if (rx_data == uchData[ResponseSt])
   090B DD 7E 04      [19] 1222 	ld	a, 4 (ix)
   090E DD 86 FE      [19] 1223 	add	a, -2 (ix)
   0911 6F            [ 4] 1224 	ld	l, a
   0912 DD 7E 05      [19] 1225 	ld	a, 5 (ix)
   0915 DD 8E FF      [19] 1226 	adc	a, -1 (ix)
   0918 67            [ 4] 1227 	ld	h, a
   0919 7E            [ 7] 1228 	ld	a, (hl)
   091A DD 77 FB      [19] 1229 	ld	-5 (ix), a
                           1230 ;src\CFG8266.c:265: printf ("{%x}",rx_data);
   091D DD 70 FC      [19] 1231 	ld	-4 (ix), b
   0920 AF            [ 4] 1232 	xor	a, a
   0921 DD 77 FD      [19] 1233 	ld	-3 (ix), a
                           1234 ;src\CFG8266.c:262: if (rx_data == uchData[ResponseSt])
   0924 DD 7E FB      [19] 1235 	ld	a, -5 (ix)
   0927 90            [ 4] 1236 	sub	a, b
   0928 20 37         [12] 1237 	jr	NZ,00122$
                           1238 ;src\CFG8266.c:264: if (bShowReceivedData)
   092A DD 7E 0B      [19] 1239 	ld	a, 11 (ix)
   092D B7            [ 4] 1240 	or	a, a
   092E 28 14         [12] 1241 	jr	Z,00110$
                           1242 ;src\CFG8266.c:265: printf ("{%x}",rx_data);
   0930 C5            [11] 1243 	push	bc
   0931 D5            [11] 1244 	push	de
   0932 DD 6E FC      [19] 1245 	ld	l, -4 (ix)
   0935 DD 66 FD      [19] 1246 	ld	h, -3 (ix)
   0938 E5            [11] 1247 	push	hl
   0939 21rF3r09      [10] 1248 	ld	hl, #___str_5
   093C E5            [11] 1249 	push	hl
   093D CDr00r00      [17] 1250 	call	_printf
   0940 F1            [10] 1251 	pop	af
   0941 F1            [10] 1252 	pop	af
   0942 D1            [10] 1253 	pop	de
   0943 C1            [10] 1254 	pop	bc
   0944                    1255 00110$:
                           1256 ;src\CFG8266.c:266: ++ResponseSt;
   0944 DD 34 FE      [23] 1257 	inc	-2 (ix)
   0947 20 03         [12] 1258 	jr	NZ,00231$
   0949 DD 34 FF      [23] 1259 	inc	-1 (ix)
   094C                    1260 00231$:
                           1261 ;src\CFG8266.c:267: if (ResponseSt == uiDataSize)
   094C DD 7E FE      [19] 1262 	ld	a, -2 (ix)
   094F DD 96 06      [19] 1263 	sub	a, 6 (ix)
   0952 20 71         [12] 1264 	jr	NZ,00125$
   0954 DD 7E FF      [19] 1265 	ld	a, -1 (ix)
   0957 DD 96 07      [19] 1266 	sub	a, 7 (ix)
   095A 20 69         [12] 1267 	jr	NZ,00125$
                           1268 ;src\CFG8266.c:269: bReturn = true;
   095C 0E 01         [ 7] 1269 	ld	c, #0x01
                           1270 ;src\CFG8266.c:270: break;
   095E C3rD8r09      [10] 1271 	jp	00130$
   0961                    1272 00122$:
                           1273 ;src\CFG8266.c:275: if ((ResponseSt)&&(bShowReceivedData))
   0961 DD 7E FF      [19] 1274 	ld	a, -1 (ix)
   0964 DD B6 FE      [19] 1275 	or	a, -2 (ix)
   0967 28 21         [12] 1276 	jr	Z,00114$
   0969 DD 7E 0B      [19] 1277 	ld	a, 11 (ix)
   096C B7            [ 4] 1278 	or	a, a
   096D 28 1B         [12] 1279 	jr	Z,00114$
                           1280 ;src\CFG8266.c:276: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   096F DD 6E FB      [19] 1281 	ld	l, -5 (ix)
   0972 26 00         [ 7] 1282 	ld	h, #0x00
   0974 C5            [11] 1283 	push	bc
   0975 D5            [11] 1284 	push	de
   0976 E5            [11] 1285 	push	hl
   0977 DD 6E FC      [19] 1286 	ld	l, -4 (ix)
   097A DD 66 FD      [19] 1287 	ld	h, -3 (ix)
   097D E5            [11] 1288 	push	hl
   097E 21rFAr09      [10] 1289 	ld	hl, #___str_8
   0981 E5            [11] 1290 	push	hl
   0982 CDr00r00      [17] 1291 	call	_printf
   0985 F1            [10] 1292 	pop	af
   0986 F1            [10] 1293 	pop	af
   0987 F1            [10] 1294 	pop	af
   0988 D1            [10] 1295 	pop	de
   0989 C1            [10] 1296 	pop	bc
   098A                    1297 00114$:
                           1298 ;src\CFG8266.c:277: if ((uiDataSize==2)&&(ResponseSt==1))
   098A DD 7E FA      [19] 1299 	ld	a, -6 (ix)
   098D B7            [ 4] 1300 	or	a, a
   098E 28 2E         [12] 1301 	jr	Z,00119$
   0990 DD 7E FE      [19] 1302 	ld	a, -2 (ix)
   0993 3D            [ 4] 1303 	dec	a
   0994 DD B6 FF      [19] 1304 	or	a, -1 (ix)
   0997 20 25         [12] 1305 	jr	NZ,00119$
                           1306 ;src\CFG8266.c:279: if (bVerbose)
   0999 DD 7E 0A      [19] 1307 	ld	a, 10 (ix)
   099C B7            [ 4] 1308 	or	a, a
   099D 28 1B         [12] 1309 	jr	Z,00117$
                           1310 ;src\CFG8266.c:280: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   099F DD 6E 04      [19] 1311 	ld	l, 4 (ix)
   09A2 DD 66 05      [19] 1312 	ld	h, 5 (ix)
   09A5 4E            [ 7] 1313 	ld	c, (hl)
   09A6 06 00         [ 7] 1314 	ld	b, #0x00
   09A8 C5            [11] 1315 	push	bc
   09A9 DD 6E FC      [19] 1316 	ld	l, -4 (ix)
   09AC DD 66 FD      [19] 1317 	ld	h, -3 (ix)
   09AF E5            [11] 1318 	push	hl
   09B0 21r07r0A      [10] 1319 	ld	hl, #___str_9
   09B3 E5            [11] 1320 	push	hl
   09B4 CDr00r00      [17] 1321 	call	_printf
   09B7 F1            [10] 1322 	pop	af
   09B8 F1            [10] 1323 	pop	af
   09B9 F1            [10] 1324 	pop	af
   09BA                    1325 00117$:
                           1326 ;src\CFG8266.c:281: return false;
   09BA 2E 00         [ 7] 1327 	ld	l, #0x00
   09BC 18 1B         [12] 1328 	jr	00137$
   09BE                    1329 00119$:
                           1330 ;src\CFG8266.c:283: ResponseSt = 0;
   09BE AF            [ 4] 1331 	xor	a, a
   09BF DD 77 FE      [19] 1332 	ld	-2 (ix), a
   09C2 DD 77 FF      [19] 1333 	ld	-1 (ix), a
   09C5                    1334 00125$:
                           1335 ;src\CFG8266.c:287: if (TickCount>Timeout2)
   09C5 DD 7E F7      [19] 1336 	ld	a, -9 (ix)
   09C8 FD 21 9E FC   [14] 1337 	ld	iy, #_TickCount
   09CC FD 96 00      [19] 1338 	sub	a, 0 (iy)
   09CF DD 7E F8      [19] 1339 	ld	a, -8 (ix)
   09D2 FD 9E 01      [19] 1340 	sbc	a, 1 (iy)
   09D5 D2rD6r08      [10] 1341 	jp	NC, 00128$
                           1342 ;src\CFG8266.c:290: while (1);
   09D8                    1343 00130$:
                           1344 ;src\CFG8266.c:292: return bReturn;
   09D8 69            [ 4] 1345 	ld	l, c
   09D9                    1346 00137$:
                           1347 ;src\CFG8266.c:293: }
   09D9 DD F9         [10] 1348 	ld	sp, ix
   09DB DD E1         [14] 1349 	pop	ix
   09DD C9            [10] 1350 	ret
   09DE                    1351 ___str_2:
   09DE 57 61 69 74 69 6E  1352 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   09EB 00                 1353 	.db 0x00
   09EC                    1354 ___str_3:
   09EC 25 63              1355 	.ascii "%c"
   09EE 00                 1356 	.db 0x00
   09EF                    1357 ___str_4:
   09EF 20 2F 20           1358 	.ascii " / "
   09F2 00                 1359 	.db 0x00
   09F3                    1360 ___str_5:
   09F3 7B 25 78 7D        1361 	.ascii "{%x}"
   09F7 00                 1362 	.db 0x00
   09F8                    1363 ___str_7:
   09F8 0D                 1364 	.db 0x0d
   09F9 00                 1365 	.db 0x00
   09FA                    1366 ___str_8:
   09FA 7B 25 78 7D 20 21  1367 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0A06 00                 1368 	.db 0x00
   0A07                    1369 ___str_9:
   0A07 45 72 72 6F 72 20  1370 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0A20 0D                 1371 	.db 0x0d
   0A21 0A                 1372 	.db 0x0a
   0A22 00                 1373 	.db 0x00
                           1374 ;src\CFG8266.c:295: void FinishUpdate (bool bSendReset)
                           1375 ;	---------------------------------
                           1376 ; Function FinishUpdate
                           1377 ; ---------------------------------
   0A23                    1378 _FinishUpdate::
   0A23 CDr00r00      [17] 1379 	call	___sdcc_enter_ix
   0A26 F5            [11] 1380 	push	af
   0A27 F5            [11] 1381 	push	af
                           1382 ;src\CFG8266.c:297: unsigned int iRetries = 3;
   0A28 21 03 00      [10] 1383 	ld	hl, #0x0003
   0A2B E3            [19] 1384 	ex	(sp), hl
                           1385 ;src\CFG8266.c:301: bool bReset = bSendReset;
   0A2C DD 7E 04      [19] 1386 	ld	a, 4 (ix)
   0A2F DD 77 FE      [19] 1387 	ld	-2 (ix), a
                           1388 ;src\CFG8266.c:303: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0A32 21r77r0B      [10] 1389 	ld	hl, #___str_11
   0A35 E5            [11] 1390 	push	hl
   0A36 CDr00r00      [17] 1391 	call	_puts
   0A39 F1            [10] 1392 	pop	af
                           1393 ;src\CFG8266.c:305: do
   0A3A DD 36 FF 02   [19] 1394 	ld	-1 (ix), #0x02
   0A3E                    1395 00135$:
                           1396 ;src\CFG8266.c:307: bRet = true;
   0A3E 2E 01         [ 7] 1397 	ld	l, #0x01
                           1398 ;src\CFG8266.c:308: --ucRetries;
   0A40 DD 35 FF      [23] 1399 	dec	-1 (ix)
                           1400 ;src\CFG8266.c:309: if (bReset)
   0A43 DD 7E FE      [19] 1401 	ld	a, -2 (ix)
   0A46 B7            [ 4] 1402 	or	a, a
   0A47 28 0C         [12] 1403 	jr	Z,00154$
                           1404 ;src\CFG8266.c:310: TxByte('R'); //Request Reset
   0A49 E5            [11] 1405 	push	hl
   0A4A 3E 52         [ 7] 1406 	ld	a, #0x52
   0A4C F5            [11] 1407 	push	af
   0A4D 33            [ 6] 1408 	inc	sp
   0A4E CDr0Dr06      [17] 1409 	call	_TxByte
   0A51 33            [ 6] 1410 	inc	sp
   0A52 E1            [10] 1411 	pop	hl
   0A53 18 3E         [12] 1412 	jr	00110$
                           1413 ;src\CFG8266.c:313: do
   0A55                    1414 00154$:
   0A55 D1            [10] 1415 	pop	de
   0A56 D5            [11] 1416 	push	de
                           1417 ;src\CFG8266.c:315: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A57                    1418 00152$:
   0A57 3E 3C         [ 7] 1419 	ld	a, #0x3c
   0A59                    1420 00140$:
                           1421 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0A59 76            [ 4] 1422 	halt
                           1423 ;src\CFG8266.c:315: for (uchHalt=60;uchHalt>0;--uchHalt)
   0A5A 3D            [ 4] 1424 	dec	a
   0A5B 20 FC         [12] 1425 	jr	NZ,00140$
                           1426 ;src\CFG8266.c:317: TxByte('E'); //End Update
   0A5D D5            [11] 1427 	push	de
   0A5E 3E 45         [ 7] 1428 	ld	a, #0x45
   0A60 F5            [11] 1429 	push	af
   0A61 33            [ 6] 1430 	inc	sp
   0A62 CDr0Dr06      [17] 1431 	call	_TxByte
   0A65 33            [ 6] 1432 	inc	sp
   0A66 AF            [ 4] 1433 	xor	a, a
   0A67 57            [ 4] 1434 	ld	d,a
   0A68 1E 01         [ 7] 1435 	ld	e,#0x01
   0A6A D5            [11] 1436 	push	de
   0A6B 21 08 07      [10] 1437 	ld	hl, #0x0708
   0A6E E5            [11] 1438 	push	hl
   0A6F 21 02 00      [10] 1439 	ld	hl, #0x0002
   0A72 E5            [11] 1440 	push	hl
   0A73 21r95r00      [10] 1441 	ld	hl, #_endUpdate
   0A76 E5            [11] 1442 	push	hl
   0A77 CDrC8r07      [17] 1443 	call	_WaitForRXData
   0A7A F1            [10] 1444 	pop	af
   0A7B F1            [10] 1445 	pop	af
   0A7C F1            [10] 1446 	pop	af
   0A7D F1            [10] 1447 	pop	af
   0A7E D1            [10] 1448 	pop	de
                           1449 ;src\CFG8266.c:319: iRetries--;
   0A7F 1B            [ 6] 1450 	dec	de
                           1451 ;src\CFG8266.c:321: while ((!bRet)&&(iRetries));
   0A80 7D            [ 4] 1452 	ld	a, l
   0A81 B7            [ 4] 1453 	or	a, a
   0A82 20 04         [12] 1454 	jr	NZ,00170$
   0A84 7A            [ 4] 1455 	ld	a, d
   0A85 B3            [ 4] 1456 	or	a, e
   0A86 20 CF         [12] 1457 	jr	NZ,00152$
   0A88                    1458 00170$:
   0A88 33            [ 6] 1459 	inc	sp
   0A89 33            [ 6] 1460 	inc	sp
   0A8A D5            [11] 1461 	push	de
                           1462 ;src\CFG8266.c:322: if (bRet)
   0A8B 7D            [ 4] 1463 	ld	a, l
   0A8C B7            [ 4] 1464 	or	a, a
   0A8D 28 04         [12] 1465 	jr	Z,00110$
                           1466 ;src\CFG8266.c:324: bReset=true;
   0A8F DD 36 FE 01   [19] 1467 	ld	-2 (ix), #0x01
   0A93                    1468 00110$:
                           1469 ;src\CFG8266.c:328: if (!bRet)
   0A93 7D            [ 4] 1470 	ld	a, l
   0A94 B7            [ 4] 1471 	or	a, a
   0A95 20 0B         [12] 1472 	jr	NZ,00133$
                           1473 ;src\CFG8266.c:329: printf("\rTimeout waiting to end update...\r\n");
   0A97 21rAAr0B      [10] 1474 	ld	hl, #___str_13
   0A9A E5            [11] 1475 	push	hl
   0A9B CDr00r00      [17] 1476 	call	_puts
   0A9E F1            [10] 1477 	pop	af
   0A9F C3r6Br0B      [10] 1478 	jp	00136$
   0AA2                    1479 00133$:
                           1480 ;src\CFG8266.c:332: if (ucRetries)
   0AA2 DD 7E FF      [19] 1481 	ld	a, -1 (ix)
   0AA5 B7            [ 4] 1482 	or	a, a
   0AA6 28 18         [12] 1483 	jr	Z,00115$
                           1484 ;src\CFG8266.c:334: if (ucIsFw)
   0AA8 3Ar0Er02      [13] 1485 	ld	a,(#_ucIsFw + 0)
   0AAB B7            [ 4] 1486 	or	a, a
   0AAC 28 0A         [12] 1487 	jr	Z,00112$
                           1488 ;src\CFG8266.c:335: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0AAE 21rCDr0B      [10] 1489 	ld	hl, #___str_15
   0AB1 E5            [11] 1490 	push	hl
   0AB2 CDr00r00      [17] 1491 	call	_puts
   0AB5 F1            [10] 1492 	pop	af
   0AB6 18 08         [12] 1493 	jr	00115$
   0AB8                    1494 00112$:
                           1495 ;src\CFG8266.c:337: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0AB8 21r00r0C      [10] 1496 	ld	hl, #___str_17
   0ABB E5            [11] 1497 	push	hl
   0ABC CDr00r00      [17] 1498 	call	_puts
   0ABF F1            [10] 1499 	pop	af
   0AC0                    1500 00115$:
                           1501 ;src\CFG8266.c:340: if (WaitForRXData(responseReady2,7,2700,false,false)) //Wait up to 45 seconds
   0AC0 AF            [ 4] 1502 	xor	a, a
   0AC1 F5            [11] 1503 	push	af
   0AC2 33            [ 6] 1504 	inc	sp
   0AC3 AF            [ 4] 1505 	xor	a, a
   0AC4 F5            [11] 1506 	push	af
   0AC5 33            [ 6] 1507 	inc	sp
   0AC6 21 8C 0A      [10] 1508 	ld	hl, #0x0a8c
   0AC9 E5            [11] 1509 	push	hl
   0ACA 21 07 00      [10] 1510 	ld	hl, #0x0007
   0ACD E5            [11] 1511 	push	hl
   0ACE 21rB3r00      [10] 1512 	ld	hl, #_responseReady2
   0AD1 E5            [11] 1513 	push	hl
   0AD2 CDrC8r07      [17] 1514 	call	_WaitForRXData
   0AD5 F1            [10] 1515 	pop	af
   0AD6 F1            [10] 1516 	pop	af
   0AD7 F1            [10] 1517 	pop	af
   0AD8 F1            [10] 1518 	pop	af
   0AD9 7D            [ 4] 1519 	ld	a, l
   0ADA B7            [ 4] 1520 	or	a, a
   0ADB CAr5Dr0B      [10] 1521 	jp	Z, 00130$
                           1522 ;src\CFG8266.c:342: if (!ucIsFw)
   0ADE 3Ar0Er02      [13] 1523 	ld	a,(#_ucIsFw + 0)
   0AE1 B7            [ 4] 1524 	or	a, a
   0AE2 20 6F         [12] 1525 	jr	NZ,00125$
                           1526 ;src\CFG8266.c:344: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0AE4 21r37r0C      [10] 1527 	ld	hl, #___str_19
   0AE7 E5            [11] 1528 	push	hl
   0AE8 CDr00r00      [17] 1529 	call	_puts
   0AEB F1            [10] 1530 	pop	af
                           1531 ;src\CFG8266.c:346: do
   0AEC DD 36 FE 0A   [19] 1532 	ld	-2 (ix), #0x0a
   0AF0 AF            [ 4] 1533 	xor	a, a
   0AF1 DD 77 FF      [19] 1534 	ld	-1 (ix), a
                           1535 ;src\CFG8266.c:348: for (uchHalt=60;uchHalt>0;--uchHalt)
   0AF4                    1536 00162$:
   0AF4 3E 3C         [ 7] 1537 	ld	a, #0x3c
   0AF6                    1538 00142$:
                           1539 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0AF6 76            [ 4] 1540 	halt
                           1541 ;src\CFG8266.c:348: for (uchHalt=60;uchHalt>0;--uchHalt)
   0AF7 3D            [ 4] 1542 	dec	a
   0AF8 20 FC         [12] 1543 	jr	NZ,00142$
                           1544 ;src\CFG8266.c:350: TxByte('I'); //End Update
   0AFA 3E 49         [ 7] 1545 	ld	a, #0x49
   0AFC F5            [11] 1546 	push	af
   0AFD 33            [ 6] 1547 	inc	sp
   0AFE CDr0Dr06      [17] 1548 	call	_TxByte
   0B01 33            [ 6] 1549 	inc	sp
                           1550 ;src\CFG8266.c:351: bRet = WaitForRXData(certificateDone,2,3600,false,false); //Wait up to 1 minute, certificate index creation takes time
   0B02 AF            [ 4] 1551 	xor	a, a
   0B03 F5            [11] 1552 	push	af
   0B04 33            [ 6] 1553 	inc	sp
   0B05 AF            [ 4] 1554 	xor	a, a
   0B06 F5            [11] 1555 	push	af
   0B07 33            [ 6] 1556 	inc	sp
   0B08 21 10 0E      [10] 1557 	ld	hl, #0x0e10
   0B0B E5            [11] 1558 	push	hl
   0B0C 21 02 00      [10] 1559 	ld	hl, #0x0002
   0B0F E5            [11] 1560 	push	hl
   0B10 21r97r00      [10] 1561 	ld	hl, #_certificateDone
   0B13 E5            [11] 1562 	push	hl
   0B14 CDrC8r07      [17] 1563 	call	_WaitForRXData
   0B17 F1            [10] 1564 	pop	af
   0B18 F1            [10] 1565 	pop	af
   0B19 F1            [10] 1566 	pop	af
   0B1A F1            [10] 1567 	pop	af
   0B1B DD 75 FD      [19] 1568 	ld	-3 (ix), l
                           1569 ;src\CFG8266.c:352: iRetries--;
   0B1E DD 6E FE      [19] 1570 	ld	l, -2 (ix)
   0B21 DD 66 FF      [19] 1571 	ld	h, -1 (ix)
   0B24 2B            [ 6] 1572 	dec	hl
   0B25 DD 75 FE      [19] 1573 	ld	-2 (ix), l
   0B28 DD 74 FF      [19] 1574 	ld	-1 (ix), h
                           1575 ;src\CFG8266.c:354: while ((!bRet)&&(iRetries));
   0B2B DD 7E FD      [19] 1576 	ld	a, -3 (ix)
   0B2E B7            [ 4] 1577 	or	a, a
   0B2F 20 08         [12] 1578 	jr	NZ,00120$
   0B31 DD 7E FF      [19] 1579 	ld	a, -1 (ix)
   0B34 DD B6 FE      [19] 1580 	or	a, -2 (ix)
   0B37 20 BB         [12] 1581 	jr	NZ,00162$
   0B39                    1582 00120$:
                           1583 ;src\CFG8266.c:355: if (bRet)
   0B39 DD 7E FD      [19] 1584 	ld	a, -3 (ix)
   0B3C B7            [ 4] 1585 	or	a, a
   0B3D 28 0A         [12] 1586 	jr	Z,00122$
                           1587 ;src\CFG8266.c:356: printf("\rDone!                                \r\n");
   0B3F 21r73r0C      [10] 1588 	ld	hl, #___str_21
   0B42 E5            [11] 1589 	push	hl
   0B43 CDr00r00      [17] 1590 	call	_puts
   0B46 F1            [10] 1591 	pop	af
   0B47 18 29         [12] 1592 	jr	00137$
   0B49                    1593 00122$:
                           1594 ;src\CFG8266.c:358: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0B49 21r9Br0C      [10] 1595 	ld	hl, #___str_23
   0B4C E5            [11] 1596 	push	hl
   0B4D CDr00r00      [17] 1597 	call	_puts
   0B50 F1            [10] 1598 	pop	af
   0B51 18 1F         [12] 1599 	jr	00137$
   0B53                    1600 00125$:
                           1601 ;src\CFG8266.c:361: printf("\rDone!                              \r\n");
   0B53 21rD5r0C      [10] 1602 	ld	hl, #___str_25
   0B56 E5            [11] 1603 	push	hl
   0B57 CDr00r00      [17] 1604 	call	_puts
   0B5A F1            [10] 1605 	pop	af
                           1606 ;src\CFG8266.c:362: break;
   0B5B 18 15         [12] 1607 	jr	00137$
   0B5D                    1608 00130$:
                           1609 ;src\CFG8266.c:365: if (!ucRetries)
   0B5D DD 7E FF      [19] 1610 	ld	a, -1 (ix)
   0B60 B7            [ 4] 1611 	or	a, a
   0B61 20 08         [12] 1612 	jr	NZ,00136$
                           1613 ;src\CFG8266.c:366: printf("\rTimeout error\r\n");
   0B63 21rFBr0C      [10] 1614 	ld	hl, #___str_27
   0B66 E5            [11] 1615 	push	hl
   0B67 CDr00r00      [17] 1616 	call	_puts
   0B6A F1            [10] 1617 	pop	af
   0B6B                    1618 00136$:
                           1619 ;src\CFG8266.c:369: while (ucRetries);
   0B6B DD 7E FF      [19] 1620 	ld	a, -1 (ix)
   0B6E B7            [ 4] 1621 	or	a, a
   0B6F C2r3Er0A      [10] 1622 	jp	NZ, 00135$
   0B72                    1623 00137$:
                           1624 ;src\CFG8266.c:371: return;
                           1625 ;src\CFG8266.c:372: }
   0B72 DD F9         [10] 1626 	ld	sp, ix
   0B74 DD E1         [14] 1627 	pop	ix
   0B76 C9            [10] 1628 	ret
   0B77                    1629 ___str_11:
   0B77 0D                 1630 	.db 0x0d
   0B78 46 69 6E 69 73 68  1631 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0BA8 0D                 1632 	.db 0x0d
   0BA9 00                 1633 	.db 0x00
   0BAA                    1634 ___str_13:
   0BAA 0D                 1635 	.db 0x0d
   0BAB 54 69 6D 65 6F 75  1636 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0BCB 0D                 1637 	.db 0x0d
   0BCC 00                 1638 	.db 0x00
   0BCD                    1639 ___str_15:
   0BCD 0D                 1640 	.db 0x0d
   0BCE 46 69 72 6D 77 61  1641 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0BFE 0D                 1642 	.db 0x0d
   0BFF 00                 1643 	.db 0x00
   0C00                    1644 ___str_17:
   0C00 0D                 1645 	.db 0x0d
   0C01 43 65 72 74 69 66  1646 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0C35 0D                 1647 	.db 0x0d
   0C36 00                 1648 	.db 0x00
   0C37                    1649 ___str_19:
   0C37 0D                 1650 	.db 0x0d
   0C38 45 53 50 20 52 65  1651 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0C71 0D                 1652 	.db 0x0d
   0C72 00                 1653 	.db 0x00
   0C73                    1654 ___str_21:
   0C73 0D                 1655 	.db 0x0d
   0C74 44 6F 6E 65 21 20  1656 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0C99 0D                 1657 	.db 0x0d
   0C9A 00                 1658 	.db 0x00
   0C9B                    1659 ___str_23:
   0C9B 0D                 1660 	.db 0x0d
   0C9C 44 6F 6E 65 2C 20  1661 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0CD3 0D                 1662 	.db 0x0d
   0CD4 00                 1663 	.db 0x00
   0CD5                    1664 ___str_25:
   0CD5 0D                 1665 	.db 0x0d
   0CD6 44 6F 6E 65 21 20  1666 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0CF9 0D                 1667 	.db 0x0d
   0CFA 00                 1668 	.db 0x00
   0CFB                    1669 ___str_27:
   0CFB 0D                 1670 	.db 0x0d
   0CFC 54 69 6D 65 6F 75  1671 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0D09 0D                 1672 	.db 0x0d
   0D0A 00                 1673 	.db 0x00
                           1674 ;src\CFG8266.c:374: int main(char** argv, int argc)
                           1675 ;	---------------------------------
                           1676 ; Function main
                           1677 ; ---------------------------------
   0D0B                    1678 _main::
   0D0B CDr00r00      [17] 1679 	call	___sdcc_enter_ix
   0D0E 21 1B FE      [10] 1680 	ld	hl, #-485
   0D11 39            [11] 1681 	add	hl, sp
   0D12 F9            [ 6] 1682 	ld	sp, hl
                           1683 ;src\CFG8266.c:386: unsigned char advance[4] = {'-','\\','|','/'};
   0D13 21 A5 01      [10] 1684 	ld	hl, #421
   0D16 39            [11] 1685 	add	hl, sp
   0D17 DD 75 EE      [19] 1686 	ld	-18 (ix), l
   0D1A DD 74 EF      [19] 1687 	ld	-17 (ix), h
   0D1D 36 2D         [10] 1688 	ld	(hl), #0x2d
   0D1F DD 6E EE      [19] 1689 	ld	l, -18 (ix)
   0D22 DD 66 EF      [19] 1690 	ld	h, -17 (ix)
   0D25 23            [ 6] 1691 	inc	hl
   0D26 36 5C         [10] 1692 	ld	(hl), #0x5c
   0D28 DD 6E EE      [19] 1693 	ld	l, -18 (ix)
   0D2B DD 66 EF      [19] 1694 	ld	h, -17 (ix)
   0D2E 23            [ 6] 1695 	inc	hl
   0D2F 23            [ 6] 1696 	inc	hl
   0D30 36 7C         [10] 1697 	ld	(hl), #0x7c
   0D32 DD 6E EE      [19] 1698 	ld	l, -18 (ix)
   0D35 DD 66 EF      [19] 1699 	ld	h, -17 (ix)
   0D38 23            [ 6] 1700 	inc	hl
   0D39 23            [ 6] 1701 	inc	hl
   0D3A 23            [ 6] 1702 	inc	hl
   0D3B 36 2F         [10] 1703 	ld	(hl), #0x2f
                           1704 ;src\CFG8266.c:394: unsigned char ucFirstBlock = 1;
   0D3D DD 36 F0 01   [19] 1705 	ld	-16 (ix), #0x01
                           1706 ;src\CFG8266.c:401: ucLocalUpdate = 0;
   0D41 21r0Dr02      [10] 1707 	ld	hl,#_ucLocalUpdate + 0
   0D44 36 00         [10] 1708 	ld	(hl), #0x00
                           1709 ;src\CFG8266.c:402: ucNagleOff = 0;
   0D46 21r0Fr02      [10] 1710 	ld	hl,#_ucNagleOff + 0
   0D49 36 00         [10] 1711 	ld	(hl), #0x00
                           1712 ;src\CFG8266.c:403: ucNagleOn = 0;
   0D4B 21r10r02      [10] 1713 	ld	hl,#_ucNagleOn + 0
   0D4E 36 00         [10] 1714 	ld	(hl), #0x00
                           1715 ;src\CFG8266.c:404: ucRadioOff = 0;
   0D50 21r11r02      [10] 1716 	ld	hl,#_ucRadioOff + 0
   0D53 36 00         [10] 1717 	ld	(hl), #0x00
                           1718 ;src\CFG8266.c:405: ucSetTimeout = 0;
   0D55 21r12r02      [10] 1719 	ld	hl,#_ucSetTimeout + 0
   0D58 36 00         [10] 1720 	ld	(hl), #0x00
                           1721 ;src\CFG8266.c:407: printf("> SM-X ESP8266 WIFI Module Configuration v1.10 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0D5A 21rECr19      [10] 1722 	ld	hl, #___str_29
   0D5D E5            [11] 1723 	push	hl
   0D5E CDr00r00      [17] 1724 	call	_puts
   0D61 F1            [10] 1725 	pop	af
                           1726 ;src\CFG8266.c:409: if (IsValidInput(argv, argc))
   0D62 DD 6E 06      [19] 1727 	ld	l, 6 (ix)
   0D65 DD 66 07      [19] 1728 	ld	h, 7 (ix)
   0D68 E5            [11] 1729 	push	hl
   0D69 DD 6E 04      [19] 1730 	ld	l, 4 (ix)
   0D6C DD 66 05      [19] 1731 	ld	h, 5 (ix)
   0D6F E5            [11] 1732 	push	hl
   0D70 CDr4Ar03      [17] 1733 	call	_IsValidInput
   0D73 F1            [10] 1734 	pop	af
   0D74 F1            [10] 1735 	pop	af
   0D75 DD 75 FE      [19] 1736 	ld	-2 (ix), l
   0D78 DD 74 FF      [19] 1737 	ld	-1 (ix), h
   0D7B 7C            [ 4] 1738 	ld	a, h
   0D7C DD B6 FE      [19] 1739 	or	a, -2 (ix)
   0D7F CArDCr19      [10] 1740 	jp	Z, 00293$
                           1741 ;src\CFG8266.c:411: do
   0D82 AF            [ 4] 1742 	xor	a, a
   0D83 DD 77 FF      [19] 1743 	ld	-1 (ix), a
   0D86                    1744 00103$:
                           1745 ;src\CFG8266.c:414: myPort6 = speed;
   0D86 DD 7E FF      [19] 1746 	ld	a, -1 (ix)
   0D89 D3 06         [11] 1747 	out	(_myPort6), a
                           1748 ;src\CFG8266.c:415: ClearUartData();
   0D8B 3E 14         [ 7] 1749 	ld	a, #0x14
   0D8D D3 06         [11] 1750 	out	(_myPort6), a
                           1751 ;src\CFG8266.c:416: TxByte('?');
   0D8F 3E 3F         [ 7] 1752 	ld	a, #0x3f
   0D91 F5            [11] 1753 	push	af
   0D92 33            [ 6] 1754 	inc	sp
   0D93 CDr0Dr06      [17] 1755 	call	_TxByte
   0D96 33            [ 6] 1756 	inc	sp
                           1757 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0D97 76            [ 4] 1758 	halt
                           1759 ;src\CFG8266.c:419: bResponse = WaitForRXData(responseOK,2,60,false,false);
   0D98 AF            [ 4] 1760 	xor	a, a
   0D99 F5            [11] 1761 	push	af
   0D9A 33            [ 6] 1762 	inc	sp
   0D9B AF            [ 4] 1763 	xor	a, a
   0D9C F5            [11] 1764 	push	af
   0D9D 33            [ 6] 1765 	inc	sp
   0D9E 21 3C 00      [10] 1766 	ld	hl, #0x003c
   0DA1 E5            [11] 1767 	push	hl
   0DA2 2E 02         [ 7] 1768 	ld	l, #0x02
   0DA4 E5            [11] 1769 	push	hl
   0DA5 21r99r00      [10] 1770 	ld	hl, #_responseOK
   0DA8 E5            [11] 1771 	push	hl
   0DA9 CDrC8r07      [17] 1772 	call	_WaitForRXData
   0DAC F1            [10] 1773 	pop	af
   0DAD F1            [10] 1774 	pop	af
   0DAE F1            [10] 1775 	pop	af
   0DAF F1            [10] 1776 	pop	af
                           1777 ;src\CFG8266.c:421: if (bResponse)
   0DB0 DD 75 FD      [19] 1778 	ld	-3 (ix), l
   0DB3 7D            [ 4] 1779 	ld	a, l
   0DB4 B7            [ 4] 1780 	or	a, a
   0DB5 20 0A         [12] 1781 	jr	NZ,00105$
                           1782 ;src\CFG8266.c:423: ++speed;
   0DB7 DD 34 FF      [23] 1783 	inc	-1 (ix)
                           1784 ;src\CFG8266.c:425: while (speed<10);
   0DBA DD 7E FF      [19] 1785 	ld	a, -1 (ix)
   0DBD D6 0A         [ 7] 1786 	sub	a, #0x0a
   0DBF 38 C5         [12] 1787 	jr	C,00103$
   0DC1                    1788 00105$:
                           1789 ;src\CFG8266.c:427: if (speed<10)
   0DC1 DD 7E FF      [19] 1790 	ld	a, -1 (ix)
   0DC4 D6 0A         [ 7] 1791 	sub	a, #0x0a
   0DC6 D2rD2r19      [10] 1792 	jp	NC, 00290$
                           1793 ;src\CFG8266.c:429: printf ("Using Baud Rate #%u\r\n",speed);
   0DC9 DD 7E FF      [19] 1794 	ld	a, -1 (ix)
   0DCC DD 77 FE      [19] 1795 	ld	-2 (ix), a
   0DCF AF            [ 4] 1796 	xor	a, a
   0DD0 DD 77 FF      [19] 1797 	ld	-1 (ix), a
   0DD3 DD 6E FE      [19] 1798 	ld	l, -2 (ix)
   0DD6 DD 66 FF      [19] 1799 	ld	h, -1 (ix)
   0DD9 E5            [11] 1800 	push	hl
   0DDA 21r52r1A      [10] 1801 	ld	hl, #___str_30
   0DDD E5            [11] 1802 	push	hl
   0DDE CDr00r00      [17] 1803 	call	_printf
   0DE1 F1            [10] 1804 	pop	af
   0DE2 F1            [10] 1805 	pop	af
                           1806 ;src\CFG8266.c:430: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   0DE3 3Ar00r00      [13] 1807 	ld	a,(#_ucScan + 0)
   0DE6 B7            [ 4] 1808 	or	a, a
   0DE7 20 19         [12] 1809 	jr	NZ,00282$
   0DE9 3Ar0Fr02      [13] 1810 	ld	a,(#_ucNagleOff + 0)
   0DEC B7            [ 4] 1811 	or	a, a
   0DED 20 13         [12] 1812 	jr	NZ,00282$
   0DEF 3Ar10r02      [13] 1813 	ld	a,(#_ucNagleOn + 0)
   0DF2 B7            [ 4] 1814 	or	a, a
   0DF3 20 0D         [12] 1815 	jr	NZ,00282$
   0DF5 3Ar11r02      [13] 1816 	ld	a,(#_ucRadioOff + 0)
   0DF8 B7            [ 4] 1817 	or	a, a
   0DF9 20 07         [12] 1818 	jr	NZ,00282$
   0DFB 3Ar12r02      [13] 1819 	ld	a,(#_ucSetTimeout + 0)
   0DFE B7            [ 4] 1820 	or	a, a
   0DFF CArD0r12      [10] 1821 	jp	Z, 00283$
   0E02                    1822 00282$:
                           1823 ;src\CFG8266.c:433: if (ucScan)
   0E02 3Ar00r00      [13] 1824 	ld	a,(#_ucScan + 0)
   0E05 B7            [ 4] 1825 	or	a, a
   0E06 28 0B         [12] 1826 	jr	Z,00121$
                           1827 ;src\CFG8266.c:434: TxByte('S'); //Request SCAN
   0E08 3E 53         [ 7] 1828 	ld	a, #0x53
   0E0A F5            [11] 1829 	push	af
   0E0B 33            [ 6] 1830 	inc	sp
   0E0C CDr0Dr06      [17] 1831 	call	_TxByte
   0E0F 33            [ 6] 1832 	inc	sp
   0E10 C3rA2r0E      [10] 1833 	jp	00122$
   0E13                    1834 00121$:
                           1835 ;src\CFG8266.c:435: else if (ucNagleOff)
   0E13 3Ar0Fr02      [13] 1836 	ld	a,(#_ucNagleOff + 0)
   0E16 B7            [ 4] 1837 	or	a, a
   0E17 28 0B         [12] 1838 	jr	Z,00118$
                           1839 ;src\CFG8266.c:436: TxByte('N'); //Request nagle off for future connections
   0E19 3E 4E         [ 7] 1840 	ld	a, #0x4e
   0E1B F5            [11] 1841 	push	af
   0E1C 33            [ 6] 1842 	inc	sp
   0E1D CDr0Dr06      [17] 1843 	call	_TxByte
   0E20 33            [ 6] 1844 	inc	sp
   0E21 C3rA2r0E      [10] 1845 	jp	00122$
   0E24                    1846 00118$:
                           1847 ;src\CFG8266.c:437: else if (ucNagleOn)
   0E24 3Ar10r02      [13] 1848 	ld	a,(#_ucNagleOn + 0)
   0E27 B7            [ 4] 1849 	or	a, a
   0E28 28 0A         [12] 1850 	jr	Z,00115$
                           1851 ;src\CFG8266.c:438: TxByte('D'); //Request nagle on for future connections
   0E2A 3E 44         [ 7] 1852 	ld	a, #0x44
   0E2C F5            [11] 1853 	push	af
   0E2D 33            [ 6] 1854 	inc	sp
   0E2E CDr0Dr06      [17] 1855 	call	_TxByte
   0E31 33            [ 6] 1856 	inc	sp
   0E32 18 6E         [12] 1857 	jr	00122$
   0E34                    1858 00115$:
                           1859 ;src\CFG8266.c:439: else if (ucRadioOff)
   0E34 3Ar11r02      [13] 1860 	ld	a,(#_ucRadioOff + 0)
   0E37 B7            [ 4] 1861 	or	a, a
   0E38 28 0A         [12] 1862 	jr	Z,00112$
                           1863 ;src\CFG8266.c:440: TxByte('O'); //Request to turn off wifi radio immediately
   0E3A 3E 4F         [ 7] 1864 	ld	a, #0x4f
   0E3C F5            [11] 1865 	push	af
   0E3D 33            [ 6] 1866 	inc	sp
   0E3E CDr0Dr06      [17] 1867 	call	_TxByte
   0E41 33            [ 6] 1868 	inc	sp
   0E42 18 5E         [12] 1869 	jr	00122$
   0E44                    1870 00112$:
                           1871 ;src\CFG8266.c:441: else if (ucSetTimeout)
   0E44 3Ar12r02      [13] 1872 	ld	a,(#_ucSetTimeout + 0)
   0E47 B7            [ 4] 1873 	or	a, a
   0E48 28 58         [12] 1874 	jr	Z,00122$
                           1875 ;src\CFG8266.c:443: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   0E4A FD 21r13r02   [14] 1876 	ld	iy, #_uiTimeout
   0E4E FD 4E 01      [19] 1877 	ld	c, 1 (iy)
   0E51 DD 71 FE      [19] 1878 	ld	-2 (ix), c
                           1879 ;src\CFG8266.c:444: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   0E54 FD 7E 00      [19] 1880 	ld	a, 0 (iy)
   0E57 DD 77 FF      [19] 1881 	ld	-1 (ix), a
                           1882 ;src\CFG8266.c:445: if (uiTimeout)
   0E5A FD 7E 01      [19] 1883 	ld	a, 1 (iy)
   0E5D FD B6 00      [19] 1884 	or	a, 0 (iy)
   0E60 28 0F         [12] 1885 	jr	Z,00107$
                           1886 ;src\CFG8266.c:446: printf("\r\nSetting WiFi idle timeout to %u...\r\n",uiTimeout);
   0E62 2Ar13r02      [16] 1887 	ld	hl, (_uiTimeout)
   0E65 E5            [11] 1888 	push	hl
   0E66 21r68r1A      [10] 1889 	ld	hl, #___str_31
   0E69 E5            [11] 1890 	push	hl
   0E6A CDr00r00      [17] 1891 	call	_printf
   0E6D F1            [10] 1892 	pop	af
   0E6E F1            [10] 1893 	pop	af
   0E6F 18 08         [12] 1894 	jr	00108$
   0E71                    1895 00107$:
                           1896 ;src\CFG8266.c:448: printf("\r\nSetting WiFi to always on!\r\n");
   0E71 21r8Fr1A      [10] 1897 	ld	hl, #___str_33
   0E74 E5            [11] 1898 	push	hl
   0E75 CDr00r00      [17] 1899 	call	_puts
   0E78 F1            [10] 1900 	pop	af
   0E79                    1901 00108$:
                           1902 ;src\CFG8266.c:449: TxByte('T'); //Request to set time-out
   0E79 3E 54         [ 7] 1903 	ld	a, #0x54
   0E7B F5            [11] 1904 	push	af
   0E7C 33            [ 6] 1905 	inc	sp
   0E7D CDr0Dr06      [17] 1906 	call	_TxByte
   0E80 33            [ 6] 1907 	inc	sp
                           1908 ;src\CFG8266.c:450: TxByte(0);
   0E81 AF            [ 4] 1909 	xor	a, a
   0E82 F5            [11] 1910 	push	af
   0E83 33            [ 6] 1911 	inc	sp
   0E84 CDr0Dr06      [17] 1912 	call	_TxByte
   0E87 33            [ 6] 1913 	inc	sp
                           1914 ;src\CFG8266.c:451: TxByte(2);
   0E88 3E 02         [ 7] 1915 	ld	a, #0x02
   0E8A F5            [11] 1916 	push	af
   0E8B 33            [ 6] 1917 	inc	sp
   0E8C CDr0Dr06      [17] 1918 	call	_TxByte
   0E8F 33            [ 6] 1919 	inc	sp
                           1920 ;src\CFG8266.c:452: TxByte(ucTimeOutMSB);
   0E90 DD 7E FE      [19] 1921 	ld	a, -2 (ix)
   0E93 F5            [11] 1922 	push	af
   0E94 33            [ 6] 1923 	inc	sp
   0E95 CDr0Dr06      [17] 1924 	call	_TxByte
   0E98 33            [ 6] 1925 	inc	sp
                           1926 ;src\CFG8266.c:453: TxByte(ucTimeOutLSB);
   0E99 DD 7E FF      [19] 1927 	ld	a, -1 (ix)
   0E9C F5            [11] 1928 	push	af
   0E9D 33            [ 6] 1929 	inc	sp
   0E9E CDr0Dr06      [17] 1930 	call	_TxByte
   0EA1 33            [ 6] 1931 	inc	sp
   0EA2                    1932 00122$:
                           1933 ;src\CFG8266.c:456: if (ucScan)
   0EA2 3Ar00r00      [13] 1934 	ld	a,(#_ucScan + 0)
   0EA5 B7            [ 4] 1935 	or	a, a
   0EA6 28 1D         [12] 1936 	jr	Z,00135$
                           1937 ;src\CFG8266.c:457: bResponse = WaitForRXData(scanResponse,2,60,true,false);
   0EA8 AF            [ 4] 1938 	xor	a, a
   0EA9 57            [ 4] 1939 	ld	d,a
   0EAA 1E 01         [ 7] 1940 	ld	e,#0x01
   0EAC D5            [11] 1941 	push	de
   0EAD 21 3C 00      [10] 1942 	ld	hl, #0x003c
   0EB0 E5            [11] 1943 	push	hl
   0EB1 2E 02         [ 7] 1944 	ld	l, #0x02
   0EB3 E5            [11] 1945 	push	hl
   0EB4 21r9Br00      [10] 1946 	ld	hl, #_scanResponse
   0EB7 E5            [11] 1947 	push	hl
   0EB8 CDrC8r07      [17] 1948 	call	_WaitForRXData
   0EBB F1            [10] 1949 	pop	af
   0EBC F1            [10] 1950 	pop	af
   0EBD F1            [10] 1951 	pop	af
   0EBE F1            [10] 1952 	pop	af
   0EBF DD 75 FD      [19] 1953 	ld	-3 (ix), l
   0EC2 C3r4Br0F      [10] 1954 	jp	00136$
   0EC5                    1955 00135$:
                           1956 ;src\CFG8266.c:458: else if (ucNagleOff)
   0EC5 3Ar0Fr02      [13] 1957 	ld	a,(#_ucNagleOff + 0)
   0EC8 B7            [ 4] 1958 	or	a, a
   0EC9 28 1C         [12] 1959 	jr	Z,00132$
                           1960 ;src\CFG8266.c:459: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false);
   0ECB AF            [ 4] 1961 	xor	a, a
   0ECC 57            [ 4] 1962 	ld	d,a
   0ECD 1E 01         [ 7] 1963 	ld	e,#0x01
   0ECF D5            [11] 1964 	push	de
   0ED0 21 3C 00      [10] 1965 	ld	hl, #0x003c
   0ED3 E5            [11] 1966 	push	hl
   0ED4 2E 02         [ 7] 1967 	ld	l, #0x02
   0ED6 E5            [11] 1968 	push	hl
   0ED7 21r9Fr00      [10] 1969 	ld	hl, #_nagleoffResponse
   0EDA E5            [11] 1970 	push	hl
   0EDB CDrC8r07      [17] 1971 	call	_WaitForRXData
   0EDE F1            [10] 1972 	pop	af
   0EDF F1            [10] 1973 	pop	af
   0EE0 F1            [10] 1974 	pop	af
   0EE1 F1            [10] 1975 	pop	af
   0EE2 DD 75 FD      [19] 1976 	ld	-3 (ix), l
   0EE5 18 64         [12] 1977 	jr	00136$
   0EE7                    1978 00132$:
                           1979 ;src\CFG8266.c:460: else if (ucNagleOn)
   0EE7 3Ar10r02      [13] 1980 	ld	a,(#_ucNagleOn + 0)
   0EEA B7            [ 4] 1981 	or	a, a
   0EEB 28 1C         [12] 1982 	jr	Z,00129$
                           1983 ;src\CFG8266.c:461: bResponse = WaitForRXData(nagleonResponse,2,60,true,false);
   0EED AF            [ 4] 1984 	xor	a, a
   0EEE 57            [ 4] 1985 	ld	d,a
   0EEF 1E 01         [ 7] 1986 	ld	e,#0x01
   0EF1 D5            [11] 1987 	push	de
   0EF2 21 3C 00      [10] 1988 	ld	hl, #0x003c
   0EF5 E5            [11] 1989 	push	hl
   0EF6 2E 02         [ 7] 1990 	ld	l, #0x02
   0EF8 E5            [11] 1991 	push	hl
   0EF9 21r9Dr00      [10] 1992 	ld	hl, #_nagleonResponse
   0EFC E5            [11] 1993 	push	hl
   0EFD CDrC8r07      [17] 1994 	call	_WaitForRXData
   0F00 F1            [10] 1995 	pop	af
   0F01 F1            [10] 1996 	pop	af
   0F02 F1            [10] 1997 	pop	af
   0F03 F1            [10] 1998 	pop	af
   0F04 DD 75 FD      [19] 1999 	ld	-3 (ix), l
   0F07 18 42         [12] 2000 	jr	00136$
   0F09                    2001 00129$:
                           2002 ;src\CFG8266.c:462: else if (ucRadioOff)
   0F09 3Ar11r02      [13] 2003 	ld	a,(#_ucRadioOff + 0)
   0F0C B7            [ 4] 2004 	or	a, a
   0F0D 28 1C         [12] 2005 	jr	Z,00126$
                           2006 ;src\CFG8266.c:463: bResponse = WaitForRXData(radioOffResponse,2,60,true,false);
   0F0F AF            [ 4] 2007 	xor	a, a
   0F10 57            [ 4] 2008 	ld	d,a
   0F11 1E 01         [ 7] 2009 	ld	e,#0x01
   0F13 D5            [11] 2010 	push	de
   0F14 21 3C 00      [10] 2011 	ld	hl, #0x003c
   0F17 E5            [11] 2012 	push	hl
   0F18 2E 02         [ 7] 2013 	ld	l, #0x02
   0F1A E5            [11] 2014 	push	hl
   0F1B 21rB1r00      [10] 2015 	ld	hl, #_radioOffResponse
   0F1E E5            [11] 2016 	push	hl
   0F1F CDrC8r07      [17] 2017 	call	_WaitForRXData
   0F22 F1            [10] 2018 	pop	af
   0F23 F1            [10] 2019 	pop	af
   0F24 F1            [10] 2020 	pop	af
   0F25 F1            [10] 2021 	pop	af
   0F26 DD 75 FD      [19] 2022 	ld	-3 (ix), l
   0F29 18 20         [12] 2023 	jr	00136$
   0F2B                    2024 00126$:
                           2025 ;src\CFG8266.c:464: else if (ucSetTimeout)
   0F2B 3Ar12r02      [13] 2026 	ld	a,(#_ucSetTimeout + 0)
   0F2E B7            [ 4] 2027 	or	a, a
   0F2F 28 1A         [12] 2028 	jr	Z,00136$
                           2029 ;src\CFG8266.c:465: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false);
   0F31 AF            [ 4] 2030 	xor	a, a
   0F32 57            [ 4] 2031 	ld	d,a
   0F33 1E 01         [ 7] 2032 	ld	e,#0x01
   0F35 D5            [11] 2033 	push	de
   0F36 21 3C 00      [10] 2034 	ld	hl, #0x003c
   0F39 E5            [11] 2035 	push	hl
   0F3A 2E 02         [ 7] 2036 	ld	l, #0x02
   0F3C E5            [11] 2037 	push	hl
   0F3D 21rAFr00      [10] 2038 	ld	hl, #_responseRadioOnTimeout
   0F40 E5            [11] 2039 	push	hl
   0F41 CDrC8r07      [17] 2040 	call	_WaitForRXData
   0F44 F1            [10] 2041 	pop	af
   0F45 F1            [10] 2042 	pop	af
   0F46 F1            [10] 2043 	pop	af
   0F47 F1            [10] 2044 	pop	af
   0F48 DD 75 FD      [19] 2045 	ld	-3 (ix), l
   0F4B                    2046 00136$:
                           2047 ;src\CFG8266.c:468: if ((bResponse)&&(ucScan))
   0F4B DD 7E FD      [19] 2048 	ld	a, -3 (ix)
   0F4E B7            [ 4] 2049 	or	a, a
   0F4F CAr3Cr12      [10] 2050 	jp	Z, 00215$
   0F52 FD 21r00r00   [14] 2051 	ld	iy, #_ucScan
   0F56 FD 7E 00      [19] 2052 	ld	a, 0 (iy)
   0F59 B7            [ 4] 2053 	or	a, a
   0F5A CAr3Cr12      [10] 2054 	jp	Z, 00215$
                           2055 ;src\CFG8266.c:471: do
   0F5D 0E 0A         [ 7] 2056 	ld	c, #0x0a
   0F5F                    2057 00139$:
                           2058 ;src\CFG8266.c:473: --ucRetries;
   0F5F 0D            [ 4] 2059 	dec	c
                           2060 ;src\CFG8266.c:474: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0F60 06 3C         [ 7] 2061 	ld	b, #0x3c
   0F62                    2062 00297$:
                           2063 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0F62 76            [ 4] 2064 	halt
                           2065 ;src\CFG8266.c:474: for (ucHalt = 60;ucHalt>0;--ucHalt)
   0F63 78            [ 4] 2066 	ld	a, b
   0F64 3D            [ 4] 2067 	dec	a
   0F65 47            [ 4] 2068 	ld	b, a
   0F66 B7            [ 4] 2069 	or	a, a
   0F67 20 F9         [12] 2070 	jr	NZ,00297$
                           2071 ;src\CFG8266.c:476: TxByte('s'); //Request SCAN result
   0F69 C5            [11] 2072 	push	bc
   0F6A 3E 73         [ 7] 2073 	ld	a, #0x73
   0F6C F5            [11] 2074 	push	af
   0F6D 33            [ 6] 2075 	inc	sp
   0F6E CDr0Dr06      [17] 2076 	call	_TxByte
   0F71 33            [ 6] 2077 	inc	sp
   0F72 AF            [ 4] 2078 	xor	a, a
   0F73 F5            [11] 2079 	push	af
   0F74 33            [ 6] 2080 	inc	sp
   0F75 AF            [ 4] 2081 	xor	a, a
   0F76 F5            [11] 2082 	push	af
   0F77 33            [ 6] 2083 	inc	sp
   0F78 21 3C 00      [10] 2084 	ld	hl, #0x003c
   0F7B E5            [11] 2085 	push	hl
   0F7C 2E 02         [ 7] 2086 	ld	l, #0x02
   0F7E E5            [11] 2087 	push	hl
   0F7F 21rA1r00      [10] 2088 	ld	hl, #_scanresResponse
   0F82 E5            [11] 2089 	push	hl
   0F83 CDrC8r07      [17] 2090 	call	_WaitForRXData
   0F86 F1            [10] 2091 	pop	af
   0F87 F1            [10] 2092 	pop	af
   0F88 F1            [10] 2093 	pop	af
   0F89 F1            [10] 2094 	pop	af
   0F8A C1            [10] 2095 	pop	bc
                           2096 ;src\CFG8266.c:479: while ((ucRetries)&&(!bResponse));
   0F8B 79            [ 4] 2097 	ld	a, c
   0F8C B7            [ 4] 2098 	or	a, a
   0F8D 28 04         [12] 2099 	jr	Z,00141$
   0F8F 7D            [ 4] 2100 	ld	a, l
   0F90 B7            [ 4] 2101 	or	a, a
   0F91 28 CC         [12] 2102 	jr	Z,00139$
   0F93                    2103 00141$:
                           2104 ;src\CFG8266.c:481: if (bResponse)
   0F93 7D            [ 4] 2105 	ld	a, l
   0F94 B7            [ 4] 2106 	or	a, a
   0F95 CAr31r12      [10] 2107 	jp	Z, 00189$
                           2108 ;src\CFG8266.c:484: while(!UartRXData());
   0F98                    2109 00142$:
   0F98 DB 07         [11] 2110 	in	a, (_myPort7)
   0F9A D6 01         [ 7] 2111 	sub	a,#0x01
   0F9C 3E 00         [ 7] 2112 	ld	a, #0x00
   0F9E 17            [ 4] 2113 	rla
   0F9F CB 47         [ 8] 2114 	bit	0, a
   0FA1 20 F5         [12] 2115 	jr	NZ,00142$
                           2116 ;src\CFG8266.c:485: ucAPs = GetUARTData();
   0FA3 DB 06         [11] 2117 	in	a, (_myPort6)
   0FA5 DD 77 F8      [19] 2118 	ld	-8 (ix), a
                           2119 ;src\CFG8266.c:486: if (ucAPs>10)
   0FA8 3E 0A         [ 7] 2120 	ld	a, #0x0a
   0FAA DD 96 F8      [19] 2121 	sub	a, -8 (ix)
   0FAD 30 04         [12] 2122 	jr	NC,00146$
                           2123 ;src\CFG8266.c:487: ucAPs=10;
   0FAF DD 36 F8 0A   [19] 2124 	ld	-8 (ix), #0x0a
   0FB3                    2125 00146$:
                           2126 ;src\CFG8266.c:489: printf ("\r\n");
   0FB3 21rADr1A      [10] 2127 	ld	hl, #___str_35
   0FB6 E5            [11] 2128 	push	hl
   0FB7 CDr00r00      [17] 2129 	call	_puts
   0FBA F1            [10] 2130 	pop	af
                           2131 ;src\CFG8266.c:490: do
   0FBB 21 51 00      [10] 2132 	ld	hl, #81
   0FBE 39            [11] 2133 	add	hl, sp
   0FBF DD 75 F9      [19] 2134 	ld	-7 (ix), l
   0FC2 DD 74 FA      [19] 2135 	ld	-6 (ix), h
   0FC5 AF            [ 4] 2136 	xor	a, a
   0FC6 DD 77 FF      [19] 2137 	ld	-1 (ix), a
                           2138 ;src\CFG8266.c:495: while(!UartRXData());
   0FC9                    2139 00337$:
   0FC9 DD 4E FF      [19] 2140 	ld	c, -1 (ix)
   0FCC 06 00         [ 7] 2141 	ld	b, #0x00
   0FCE 69            [ 4] 2142 	ld	l, c
   0FCF 60            [ 4] 2143 	ld	h, b
   0FD0 29            [11] 2144 	add	hl, hl
   0FD1 29            [11] 2145 	add	hl, hl
   0FD2 29            [11] 2146 	add	hl, hl
   0FD3 29            [11] 2147 	add	hl, hl
   0FD4 09            [11] 2148 	add	hl, bc
   0FD5 29            [11] 2149 	add	hl, hl
   0FD6 EB            [ 4] 2150 	ex	de, hl
   0FD7 7B            [ 4] 2151 	ld	a, e
   0FD8 DD 86 F9      [19] 2152 	add	a, -7 (ix)
   0FDB 4F            [ 4] 2153 	ld	c, a
   0FDC 7A            [ 4] 2154 	ld	a, d
   0FDD DD 8E FA      [19] 2155 	adc	a, -6 (ix)
   0FE0 47            [ 4] 2156 	ld	b, a
   0FE1 1E 00         [ 7] 2157 	ld	e, #0x00
   0FE3                    2158 00147$:
   0FE3 DB 07         [11] 2159 	in	a, (_myPort7)
   0FE5 D6 01         [ 7] 2160 	sub	a,#0x01
   0FE7 3E 00         [ 7] 2161 	ld	a, #0x00
   0FE9 17            [ 4] 2162 	rla
   0FEA CB 47         [ 8] 2163 	bit	0, a
   0FEC 20 F5         [12] 2164 	jr	NZ,00147$
                           2165 ;src\CFG8266.c:496: rx_data=GetUARTData();
   0FEE DB 06         [11] 2166 	in	a, (_myPort6)
   0FF0 DD 77 FE      [19] 2167 	ld	-2 (ix), a
                           2168 ;src\CFG8266.c:497: stAP[tx_data].APName[ucIndex++]=rx_data;
   0FF3 7B            [ 4] 2169 	ld	a, e
   0FF4 1C            [ 4] 2170 	inc	e
   0FF5 6F            [ 4] 2171 	ld	l, a
   0FF6 26 00         [ 7] 2172 	ld	h, #0x00
   0FF8 09            [11] 2173 	add	hl, bc
   0FF9 DD 7E FE      [19] 2174 	ld	a, -2 (ix)
   0FFC 77            [ 7] 2175 	ld	(hl), a
                           2176 ;src\CFG8266.c:499: while(rx_data!=0);
   0FFD DD 7E FE      [19] 2177 	ld	a, -2 (ix)
   1000 B7            [ 4] 2178 	or	a, a
   1001 20 E0         [12] 2179 	jr	NZ,00147$
                           2180 ;src\CFG8266.c:500: while(!UartRXData());
   1003                    2181 00153$:
   1003 DB 07         [11] 2182 	in	a, (_myPort7)
   1005 D6 01         [ 7] 2183 	sub	a,#0x01
   1007 3E 00         [ 7] 2184 	ld	a, #0x00
   1009 17            [ 4] 2185 	rla
   100A CB 47         [ 8] 2186 	bit	0, a
   100C 20 F5         [12] 2187 	jr	NZ,00153$
                           2188 ;src\CFG8266.c:501: rx_data=GetUARTData();
   100E DB 06         [11] 2189 	in	a, (_myPort6)
   1010 4F            [ 4] 2190 	ld	c, a
                           2191 ;src\CFG8266.c:502: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   1011 DD 5E FF      [19] 2192 	ld	e, -1 (ix)
   1014 16 00         [ 7] 2193 	ld	d, #0x00
   1016 6B            [ 4] 2194 	ld	l, e
   1017 62            [ 4] 2195 	ld	h, d
   1018 29            [11] 2196 	add	hl, hl
   1019 29            [11] 2197 	add	hl, hl
   101A 29            [11] 2198 	add	hl, hl
   101B 29            [11] 2199 	add	hl, hl
   101C 19            [11] 2200 	add	hl, de
   101D 29            [11] 2201 	add	hl, hl
   101E EB            [ 4] 2202 	ex	de, hl
   101F DD 7E F9      [19] 2203 	ld	a, -7 (ix)
   1022 83            [ 4] 2204 	add	a, e
   1023 5F            [ 4] 2205 	ld	e, a
   1024 DD 7E FA      [19] 2206 	ld	a, -6 (ix)
   1027 8A            [ 4] 2207 	adc	a, d
   1028 57            [ 4] 2208 	ld	d, a
   1029 21 21 00      [10] 2209 	ld	hl, #0x0021
   102C 19            [11] 2210 	add	hl, de
   102D DD 75 FB      [19] 2211 	ld	-5 (ix), l
   1030 DD 74 FC      [19] 2212 	ld	-4 (ix), h
   1033 79            [ 4] 2213 	ld	a, c
   1034 D6 45         [ 7] 2214 	sub	a, #0x45
   1036 20 0A         [12] 2215 	jr	NZ,00308$
   1038 DD 36 FD 01   [19] 2216 	ld	-3 (ix), #0x01
   103C AF            [ 4] 2217 	xor	a, a
   103D DD 77 FE      [19] 2218 	ld	-2 (ix), a
   1040 18 07         [12] 2219 	jr	00309$
   1042                    2220 00308$:
   1042 AF            [ 4] 2221 	xor	a, a
   1043 DD 77 FD      [19] 2222 	ld	-3 (ix), a
   1046 DD 77 FE      [19] 2223 	ld	-2 (ix), a
   1049                    2224 00309$:
   1049 DD 7E FD      [19] 2225 	ld	a, -3 (ix)
   104C DD 6E FB      [19] 2226 	ld	l, -5 (ix)
   104F DD 66 FC      [19] 2227 	ld	h, -4 (ix)
   1052 77            [ 7] 2228 	ld	(hl), a
                           2229 ;src\CFG8266.c:503: ++tx_data;
   1053 DD 34 FF      [23] 2230 	inc	-1 (ix)
                           2231 ;src\CFG8266.c:505: while (tx_data!=ucAPs);
   1056 DD 7E FF      [19] 2232 	ld	a, -1 (ix)
   1059 DD 96 F8      [19] 2233 	sub	a, -8 (ix)
   105C C2rC9r0F      [10] 2234 	jp	NZ,00337$
                           2235 ;src\CFG8266.c:506: ClearUartData();
   105F 3E 14         [ 7] 2236 	ld	a, #0x14
   1061 D3 06         [11] 2237 	out	(_myPort6), a
                           2238 ;src\CFG8266.c:507: printf("Choose AP:\r\n\n");
   1063 21rAFr1A      [10] 2239 	ld	hl, #___str_37
   1066 E5            [11] 2240 	push	hl
   1067 CDr00r00      [17] 2241 	call	_puts
   106A F1            [10] 2242 	pop	af
                           2243 ;src\CFG8266.c:508: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   106B AF            [ 4] 2244 	xor	a, a
   106C DD 77 FF      [19] 2245 	ld	-1 (ix), a
   106F                    2246 00300$:
   106F DD 7E FF      [19] 2247 	ld	a, -1 (ix)
   1072 DD 96 F8      [19] 2248 	sub	a, -8 (ix)
   1075 30 49         [12] 2249 	jr	NC,00162$
                           2250 ;src\CFG8266.c:510: printf("%u - %s",ucIndex,stAP[ucIndex].APName);
   1077 DD 4E FF      [19] 2251 	ld	c, -1 (ix)
   107A 06 00         [ 7] 2252 	ld	b, #0x00
   107C 69            [ 4] 2253 	ld	l, c
   107D 60            [ 4] 2254 	ld	h, b
   107E 29            [11] 2255 	add	hl, hl
   107F 29            [11] 2256 	add	hl, hl
   1080 29            [11] 2257 	add	hl, hl
   1081 29            [11] 2258 	add	hl, hl
   1082 09            [11] 2259 	add	hl, bc
   1083 29            [11] 2260 	add	hl, hl
   1084 EB            [ 4] 2261 	ex	de, hl
   1085 DD 6E F9      [19] 2262 	ld	l, -7 (ix)
   1088 DD 66 FA      [19] 2263 	ld	h, -6 (ix)
   108B 19            [11] 2264 	add	hl, de
   108C 5D            [ 4] 2265 	ld	e, l
   108D 54            [ 4] 2266 	ld	d, h
   108E DD 4E FF      [19] 2267 	ld	c, -1 (ix)
   1091 06 00         [ 7] 2268 	ld	b, #0x00
   1093 E5            [11] 2269 	push	hl
   1094 D5            [11] 2270 	push	de
   1095 C5            [11] 2271 	push	bc
   1096 01rBCr1A      [10] 2272 	ld	bc, #___str_38
   1099 C5            [11] 2273 	push	bc
   109A CDr00r00      [17] 2274 	call	_printf
   109D F1            [10] 2275 	pop	af
   109E F1            [10] 2276 	pop	af
   109F F1            [10] 2277 	pop	af
   10A0 E1            [10] 2278 	pop	hl
                           2279 ;src\CFG8266.c:511: if (stAP[ucIndex].isEncrypted)
   10A1 11 21 00      [10] 2280 	ld	de, #0x0021
   10A4 19            [11] 2281 	add	hl, de
   10A5 7E            [ 7] 2282 	ld	a, (hl)
   10A6 B7            [ 4] 2283 	or	a, a
   10A7 28 0A         [12] 2284 	jr	Z,00160$
                           2285 ;src\CFG8266.c:512: printf(" (PWD)\r\n");
   10A9 21rC4r1A      [10] 2286 	ld	hl, #___str_40
   10AC E5            [11] 2287 	push	hl
   10AD CDr00r00      [17] 2288 	call	_puts
   10B0 F1            [10] 2289 	pop	af
   10B1 18 08         [12] 2290 	jr	00301$
   10B3                    2291 00160$:
                           2292 ;src\CFG8266.c:514: printf(" (OPEN)\r\n");
   10B3 21rCCr1A      [10] 2293 	ld	hl, #___str_42
   10B6 E5            [11] 2294 	push	hl
   10B7 CDr00r00      [17] 2295 	call	_puts
   10BA F1            [10] 2296 	pop	af
   10BB                    2297 00301$:
                           2298 ;src\CFG8266.c:508: for (ucIndex=0;ucIndex<ucAPs;ucIndex++)
   10BB DD 34 FF      [23] 2299 	inc	-1 (ix)
   10BE 18 AF         [12] 2300 	jr	00300$
   10C0                    2301 00162$:
                           2302 ;src\CFG8266.c:516: printf("\r\nWhich one to connect? (ESC exit)");
   10C0 21rD5r1A      [10] 2303 	ld	hl, #___str_43
   10C3 E5            [11] 2304 	push	hl
   10C4 CDr00r00      [17] 2305 	call	_printf
   10C7 F1            [10] 2306 	pop	af
                           2307 ;src\CFG8266.c:518: do
   10C8                    2308 00166$:
                           2309 ;src\CFG8266.c:520: tx_data = Inkey ();
   10C8 CDr00r00      [17] 2310 	call	_Inkey
                           2311 ;src\CFG8266.c:521: if (tx_data==0x1b)
   10CB 7D            [ 4] 2312 	ld	a, l
   10CC D6 1B         [ 7] 2313 	sub	a, #0x1b
   10CE 3E 01         [ 7] 2314 	ld	a, #0x01
   10D0 28 01         [12] 2315 	jr	Z,00734$
   10D2 AF            [ 4] 2316 	xor	a, a
   10D3                    2317 00734$:
   10D3 4F            [ 4] 2318 	ld	c, a
   10D4 B7            [ 4] 2319 	or	a, a
   10D5 20 0A         [12] 2320 	jr	NZ,00168$
                           2321 ;src\CFG8266.c:524: while ((tx_data<'0')||(tx_data>'9'));
   10D7 7D            [ 4] 2322 	ld	a, l
   10D8 D6 30         [ 7] 2323 	sub	a, #0x30
   10DA 38 EC         [12] 2324 	jr	C,00166$
   10DC 3E 39         [ 7] 2325 	ld	a, #0x39
   10DE 95            [ 4] 2326 	sub	a, l
   10DF 38 E7         [12] 2327 	jr	C,00166$
   10E1                    2328 00168$:
                           2329 ;src\CFG8266.c:525: if (tx_data!=0x1b)
   10E1 CB 41         [ 8] 2330 	bit	0, c
   10E3 C2r26r12      [10] 2331 	jp	NZ, 00186$
                           2332 ;src\CFG8266.c:527: printf(" %c\r\n",tx_data);
   10E6 5D            [ 4] 2333 	ld	e, l
   10E7 16 00         [ 7] 2334 	ld	d, #0x00
   10E9 01rF8r1A      [10] 2335 	ld	bc, #___str_44+0
   10EC E5            [11] 2336 	push	hl
   10ED D5            [11] 2337 	push	de
   10EE C5            [11] 2338 	push	bc
   10EF CDr00r00      [17] 2339 	call	_printf
   10F2 F1            [10] 2340 	pop	af
   10F3 F1            [10] 2341 	pop	af
   10F4 E1            [10] 2342 	pop	hl
                           2343 ;src\CFG8266.c:528: ucIndex = tx_data-'0';
   10F5 7D            [ 4] 2344 	ld	a, l
   10F6 C6 D0         [ 7] 2345 	add	a, #0xd0
                           2346 ;src\CFG8266.c:529: if (stAP[ucIndex].isEncrypted)
   10F8 4F            [ 4] 2347 	ld	c, a
   10F9 06 00         [ 7] 2348 	ld	b, #0x00
   10FB 69            [ 4] 2349 	ld	l, c
   10FC 60            [ 4] 2350 	ld	h, b
   10FD 29            [11] 2351 	add	hl, hl
   10FE 29            [11] 2352 	add	hl, hl
   10FF 29            [11] 2353 	add	hl, hl
   1100 29            [11] 2354 	add	hl, hl
   1101 09            [11] 2355 	add	hl, bc
   1102 29            [11] 2356 	add	hl, hl
   1103 DD 75 FB      [19] 2357 	ld	-5 (ix), l
   1106 DD 74 FC      [19] 2358 	ld	-4 (ix), h
   1109 DD 7E F9      [19] 2359 	ld	a, -7 (ix)
   110C DD 86 FB      [19] 2360 	add	a, -5 (ix)
   110F 4F            [ 4] 2361 	ld	c, a
   1110 DD 7E FA      [19] 2362 	ld	a, -6 (ix)
   1113 DD 8E FC      [19] 2363 	adc	a, -4 (ix)
   1116 47            [ 4] 2364 	ld	b, a
   1117 21 21 00      [10] 2365 	ld	hl, #0x0021
   111A 09            [11] 2366 	add	hl, bc
   111B EB            [ 4] 2367 	ex	de, hl
   111C 1A            [ 7] 2368 	ld	a, (de)
   111D B7            [ 4] 2369 	or	a, a
   111E 28 31         [12] 2370 	jr	Z,00170$
                           2371 ;src\CFG8266.c:532: printf("Password? ");
   1120 C5            [11] 2372 	push	bc
   1121 D5            [11] 2373 	push	de
   1122 21rFEr1A      [10] 2374 	ld	hl, #___str_45
   1125 E5            [11] 2375 	push	hl
   1126 CDr00r00      [17] 2376 	call	_printf
   1129 F1            [10] 2377 	pop	af
   112A D1            [10] 2378 	pop	de
   112B C1            [10] 2379 	pop	bc
                           2380 ;src\CFG8266.c:533: InputString(ucPWD,64);
   112C 21 10 00      [10] 2381 	ld	hl, #16
   112F 39            [11] 2382 	add	hl, sp
   1130 DD 75 FE      [19] 2383 	ld	-2 (ix), l
   1133 DD 74 FF      [19] 2384 	ld	-1 (ix), h
   1136 C5            [11] 2385 	push	bc
   1137 D5            [11] 2386 	push	de
   1138 21 40 00      [10] 2387 	ld	hl, #0x0040
   113B E5            [11] 2388 	push	hl
   113C DD 6E FE      [19] 2389 	ld	l, -2 (ix)
   113F DD 66 FF      [19] 2390 	ld	h, -1 (ix)
   1142 E5            [11] 2391 	push	hl
   1143 CDr00r00      [17] 2392 	call	_InputString
   1146 F1            [10] 2393 	pop	af
   1147 21rADr1A      [10] 2394 	ld	hl, #___str_35
   114A E3            [19] 2395 	ex	(sp),hl
   114B CDr00r00      [17] 2396 	call	_puts
   114E F1            [10] 2397 	pop	af
   114F D1            [10] 2398 	pop	de
   1150 C1            [10] 2399 	pop	bc
   1151                    2400 00170$:
                           2401 ;src\CFG8266.c:536: uiCMDLen = strlen(stAP[ucIndex].APName) + 1;
   1151 C5            [11] 2402 	push	bc
   1152 CDr00r00      [17] 2403 	call	_strlen
   1155 F1            [10] 2404 	pop	af
   1156 23            [ 6] 2405 	inc	hl
   1157 4D            [ 4] 2406 	ld	c,l
   1158 44            [ 4] 2407 	ld	b,h
                           2408 ;src\CFG8266.c:537: if (stAP[ucIndex].isEncrypted)
   1159 1A            [ 7] 2409 	ld	a, (de)
   115A B7            [ 4] 2410 	or	a, a
   115B 28 0E         [12] 2411 	jr	Z,00172$
                           2412 ;src\CFG8266.c:538: uiCMDLen += strlen(ucPWD);
   115D 21 10 00      [10] 2413 	ld	hl, #16
   1160 39            [11] 2414 	add	hl, sp
   1161 C5            [11] 2415 	push	bc
   1162 E5            [11] 2416 	push	hl
   1163 CDr00r00      [17] 2417 	call	_strlen
   1166 F1            [10] 2418 	pop	af
   1167 C1            [10] 2419 	pop	bc
   1168 09            [11] 2420 	add	hl, bc
   1169 4D            [ 4] 2421 	ld	c, l
   116A 44            [ 4] 2422 	ld	b, h
   116B                    2423 00172$:
                           2424 ;src\CFG8266.c:539: TxByte('A'); //Request connect AP
   116B C5            [11] 2425 	push	bc
   116C 3E 41         [ 7] 2426 	ld	a, #0x41
   116E F5            [11] 2427 	push	af
   116F 33            [ 6] 2428 	inc	sp
   1170 CDr0Dr06      [17] 2429 	call	_TxByte
   1173 33            [ 6] 2430 	inc	sp
   1174 C1            [10] 2431 	pop	bc
                           2432 ;src\CFG8266.c:540: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   1175 50            [ 4] 2433 	ld	d, b
   1176 1E 00         [ 7] 2434 	ld	e, #0x00
   1178 C5            [11] 2435 	push	bc
   1179 D5            [11] 2436 	push	de
   117A 33            [ 6] 2437 	inc	sp
   117B CDr0Dr06      [17] 2438 	call	_TxByte
   117E 33            [ 6] 2439 	inc	sp
   117F C1            [10] 2440 	pop	bc
                           2441 ;src\CFG8266.c:541: TxByte((unsigned char)(uiCMDLen&0xff));
   1180 79            [ 4] 2442 	ld	a, c
   1181 C5            [11] 2443 	push	bc
   1182 F5            [11] 2444 	push	af
   1183 33            [ 6] 2445 	inc	sp
   1184 CDr0Dr06      [17] 2446 	call	_TxByte
   1187 33            [ 6] 2447 	inc	sp
   1188 C1            [10] 2448 	pop	bc
                           2449 ;src\CFG8266.c:543: do
   1189 DD 7E F9      [19] 2450 	ld	a, -7 (ix)
   118C DD 86 FB      [19] 2451 	add	a, -5 (ix)
   118F DD 77 FD      [19] 2452 	ld	-3 (ix), a
   1192 DD 7E FA      [19] 2453 	ld	a, -6 (ix)
   1195 DD 8E FC      [19] 2454 	adc	a, -4 (ix)
   1198 DD 77 FE      [19] 2455 	ld	-2 (ix), a
   119B AF            [ 4] 2456 	xor	a, a
   119C DD 77 FF      [19] 2457 	ld	-1 (ix), a
   119F                    2458 00174$:
                           2459 ;src\CFG8266.c:545: tx_data = stAP[ucIndex].APName[rx_data];
   119F DD 7E FD      [19] 2460 	ld	a, -3 (ix)
   11A2 DD 86 FF      [19] 2461 	add	a, -1 (ix)
   11A5 5F            [ 4] 2462 	ld	e, a
   11A6 DD 7E FE      [19] 2463 	ld	a, -2 (ix)
   11A9 CE 00         [ 7] 2464 	adc	a, #0x00
   11AB 6B            [ 4] 2465 	ld	l, e
   11AC 67            [ 4] 2466 	ld	h, a
   11AD 56            [ 7] 2467 	ld	d, (hl)
                           2468 ;src\CFG8266.c:546: TxByte(tx_data);
   11AE C5            [11] 2469 	push	bc
   11AF D5            [11] 2470 	push	de
   11B0 D5            [11] 2471 	push	de
   11B1 33            [ 6] 2472 	inc	sp
   11B2 CDr0Dr06      [17] 2473 	call	_TxByte
   11B5 33            [ 6] 2474 	inc	sp
   11B6 D1            [10] 2475 	pop	de
   11B7 C1            [10] 2476 	pop	bc
                           2477 ;src\CFG8266.c:547: --uiCMDLen;
   11B8 0B            [ 6] 2478 	dec	bc
                           2479 ;src\CFG8266.c:548: ++rx_data;
   11B9 DD 34 FF      [23] 2480 	inc	-1 (ix)
                           2481 ;src\CFG8266.c:550: while((uiCMDLen)&&(tx_data!=0));
   11BC 78            [ 4] 2482 	ld	a, b
   11BD B1            [ 4] 2483 	or	a, c
   11BE 28 04         [12] 2484 	jr	Z,00176$
   11C0 7A            [ 4] 2485 	ld	a, d
   11C1 B7            [ 4] 2486 	or	a, a
   11C2 20 DB         [12] 2487 	jr	NZ,00174$
   11C4                    2488 00176$:
                           2489 ;src\CFG8266.c:551: if(uiCMDLen)
   11C4 78            [ 4] 2490 	ld	a, b
   11C5 B1            [ 4] 2491 	or	a, c
   11C6 28 2C         [12] 2492 	jr	Z,00181$
                           2493 ;src\CFG8266.c:554: do
   11C8 21 10 00      [10] 2494 	ld	hl, #16
   11CB 39            [11] 2495 	add	hl, sp
   11CC DD 75 FD      [19] 2496 	ld	-3 (ix), l
   11CF DD 74 FE      [19] 2497 	ld	-2 (ix), h
   11D2 AF            [ 4] 2498 	xor	a, a
   11D3 DD 77 FF      [19] 2499 	ld	-1 (ix), a
   11D6                    2500 00177$:
                           2501 ;src\CFG8266.c:556: tx_data = ucPWD[rx_data];
   11D6 DD 7E FD      [19] 2502 	ld	a, -3 (ix)
   11D9 DD 86 FF      [19] 2503 	add	a, -1 (ix)
   11DC 5F            [ 4] 2504 	ld	e, a
   11DD DD 7E FE      [19] 2505 	ld	a, -2 (ix)
   11E0 CE 00         [ 7] 2506 	adc	a, #0x00
   11E2 57            [ 4] 2507 	ld	d, a
   11E3 1A            [ 7] 2508 	ld	a, (de)
                           2509 ;src\CFG8266.c:557: TxByte(tx_data);
   11E4 C5            [11] 2510 	push	bc
   11E5 F5            [11] 2511 	push	af
   11E6 33            [ 6] 2512 	inc	sp
   11E7 CDr0Dr06      [17] 2513 	call	_TxByte
   11EA 33            [ 6] 2514 	inc	sp
   11EB C1            [10] 2515 	pop	bc
                           2516 ;src\CFG8266.c:558: --uiCMDLen;
   11EC 0B            [ 6] 2517 	dec	bc
                           2518 ;src\CFG8266.c:559: ++rx_data;
   11ED DD 34 FF      [23] 2519 	inc	-1 (ix)
                           2520 ;src\CFG8266.c:561: while(uiCMDLen);
   11F0 78            [ 4] 2521 	ld	a, b
   11F1 B1            [ 4] 2522 	or	a, c
   11F2 20 E2         [12] 2523 	jr	NZ,00177$
   11F4                    2524 00181$:
                           2525 ;src\CFG8266.c:565: bResponse = WaitForRXData(apconfigurationResponse,2,300,true,false); //Wait up to 5s
   11F4 AF            [ 4] 2526 	xor	a, a
   11F5 57            [ 4] 2527 	ld	d,a
   11F6 1E 01         [ 7] 2528 	ld	e,#0x01
   11F8 D5            [11] 2529 	push	de
   11F9 21 2C 01      [10] 2530 	ld	hl, #0x012c
   11FC E5            [11] 2531 	push	hl
   11FD 21 02 00      [10] 2532 	ld	hl, #0x0002
   1200 E5            [11] 2533 	push	hl
   1201 21rA3r00      [10] 2534 	ld	hl, #_apconfigurationResponse
   1204 E5            [11] 2535 	push	hl
   1205 CDrC8r07      [17] 2536 	call	_WaitForRXData
   1208 F1            [10] 2537 	pop	af
   1209 F1            [10] 2538 	pop	af
   120A F1            [10] 2539 	pop	af
   120B F1            [10] 2540 	pop	af
   120C 7D            [ 4] 2541 	ld	a, l
                           2542 ;src\CFG8266.c:566: if (bResponse)
   120D B7            [ 4] 2543 	or	a, a
   120E 28 0B         [12] 2544 	jr	Z,00183$
                           2545 ;src\CFG8266.c:567: printf("Success, AP configured to be used.\r\n");
   1210 21r09r1B      [10] 2546 	ld	hl, #___str_48
   1213 E5            [11] 2547 	push	hl
   1214 CDr00r00      [17] 2548 	call	_puts
   1217 F1            [10] 2549 	pop	af
   1218 C3rE4r19      [10] 2550 	jp	00294$
   121B                    2551 00183$:
                           2552 ;src\CFG8266.c:569: printf("Error, AP not configured!\r\n");
   121B 21r2Dr1B      [10] 2553 	ld	hl, #___str_50
   121E E5            [11] 2554 	push	hl
   121F CDr00r00      [17] 2555 	call	_puts
   1222 F1            [10] 2556 	pop	af
   1223 C3rE4r19      [10] 2557 	jp	00294$
   1226                    2558 00186$:
                           2559 ;src\CFG8266.c:572: printf("User canceled by ESC key...\r\n");
   1226 21r48r1B      [10] 2560 	ld	hl, #___str_52
   1229 E5            [11] 2561 	push	hl
   122A CDr00r00      [17] 2562 	call	_puts
   122D F1            [10] 2563 	pop	af
   122E C3rE4r19      [10] 2564 	jp	00294$
   1231                    2565 00189$:
                           2566 ;src\CFG8266.c:575: printf("Scan results: no answer...\r\n");
   1231 21r65r1B      [10] 2567 	ld	hl, #___str_54
   1234 E5            [11] 2568 	push	hl
   1235 CDr00r00      [17] 2569 	call	_puts
   1238 F1            [10] 2570 	pop	af
   1239 C3rE4r19      [10] 2571 	jp	00294$
   123C                    2572 00215$:
                           2573 ;src\CFG8266.c:579: if (ucScan)
   123C 3Ar00r00      [13] 2574 	ld	a,(#_ucScan + 0)
   123F B7            [ 4] 2575 	or	a, a
   1240 28 0B         [12] 2576 	jr	Z,00212$
                           2577 ;src\CFG8266.c:580: printf ("\rScan request: no answer...\n");
   1242 21r81r1B      [10] 2578 	ld	hl, #___str_56
   1245 E5            [11] 2579 	push	hl
   1246 CDr00r00      [17] 2580 	call	_puts
   1249 F1            [10] 2581 	pop	af
   124A C3rE4r19      [10] 2582 	jp	00294$
   124D                    2583 00212$:
                           2584 ;src\CFG8266.c:581: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   124D 3Ar0Fr02      [13] 2585 	ld	a,(#_ucNagleOff + 0)
   1250 B7            [ 4] 2586 	or	a, a
   1251 20 06         [12] 2587 	jr	NZ,00210$
   1253 3Ar10r02      [13] 2588 	ld	a,(#_ucNagleOn + 0)
   1256 B7            [ 4] 2589 	or	a, a
   1257 28 14         [12] 2590 	jr	Z,00207$
   1259                    2591 00210$:
   1259 DD 7E FD      [19] 2592 	ld	a, -3 (ix)
   125C B7            [ 4] 2593 	or	a, a
   125D 28 0E         [12] 2594 	jr	Z,00207$
                           2595 ;src\CFG8266.c:583: printf("\rNagle set as requested...\n");
   125F 21r9Dr1B      [10] 2596 	ld	hl, #___str_58
   1262 E5            [11] 2597 	push	hl
   1263 CDr00r00      [17] 2598 	call	_puts
   1266 F1            [10] 2599 	pop	af
                           2600 ;src\CFG8266.c:584: return 0;
   1267 21 00 00      [10] 2601 	ld	hl, #0x0000
   126A C3rE7r19      [10] 2602 	jp	00304$
   126D                    2603 00207$:
                           2604 ;src\CFG8266.c:586: else if ((ucNagleOff)||(ucNagleOn))
   126D 3Ar0Fr02      [13] 2605 	ld	a,(#_ucNagleOff + 0)
   1270 B7            [ 4] 2606 	or	a, a
   1271 20 06         [12] 2607 	jr	NZ,00202$
   1273 3Ar10r02      [13] 2608 	ld	a,(#_ucNagleOn + 0)
   1276 B7            [ 4] 2609 	or	a, a
   1277 28 0E         [12] 2610 	jr	Z,00203$
   1279                    2611 00202$:
                           2612 ;src\CFG8266.c:588: printf("\rNagle not set as requested, error!\n");
   1279 21rB8r1B      [10] 2613 	ld	hl, #___str_60
   127C E5            [11] 2614 	push	hl
   127D CDr00r00      [17] 2615 	call	_puts
   1280 F1            [10] 2616 	pop	af
                           2617 ;src\CFG8266.c:589: return 0;
   1281 21 00 00      [10] 2618 	ld	hl, #0x0000
   1284 C3rE7r19      [10] 2619 	jp	00304$
   1287                    2620 00203$:
                           2621 ;src\CFG8266.c:591: else if (ucRadioOff)
   1287 3Ar11r02      [13] 2622 	ld	a,(#_ucRadioOff + 0)
   128A B7            [ 4] 2623 	or	a, a
   128B 28 1E         [12] 2624 	jr	Z,00200$
                           2625 ;src\CFG8266.c:593: if (bResponse)
   128D DD 7E FD      [19] 2626 	ld	a, -3 (ix)
   1290 B7            [ 4] 2627 	or	a, a
   1291 28 0A         [12] 2628 	jr	Z,00192$
                           2629 ;src\CFG8266.c:594: printf("\rRequested to turn off WiFi Radio...\n");
   1293 21rDCr1B      [10] 2630 	ld	hl, #___str_62
   1296 E5            [11] 2631 	push	hl
   1297 CDr00r00      [17] 2632 	call	_puts
   129A F1            [10] 2633 	pop	af
   129B 18 08         [12] 2634 	jr	00193$
   129D                    2635 00192$:
                           2636 ;src\CFG8266.c:596: printf("\rRequest to turnoff WiFi Radio error!\n");
   129D 21r01r1C      [10] 2637 	ld	hl, #___str_64
   12A0 E5            [11] 2638 	push	hl
   12A1 CDr00r00      [17] 2639 	call	_puts
   12A4 F1            [10] 2640 	pop	af
   12A5                    2641 00193$:
                           2642 ;src\CFG8266.c:597: return 0;
   12A5 21 00 00      [10] 2643 	ld	hl, #0x0000
   12A8 C3rE7r19      [10] 2644 	jp	00304$
   12AB                    2645 00200$:
                           2646 ;src\CFG8266.c:599: else if (ucSetTimeout)
   12AB 3Ar12r02      [13] 2647 	ld	a,(#_ucSetTimeout + 0)
   12AE B7            [ 4] 2648 	or	a, a
   12AF CArE4r19      [10] 2649 	jp	Z, 00294$
                           2650 ;src\CFG8266.c:601: if (bResponse)
   12B2 DD 7E FD      [19] 2651 	ld	a, -3 (ix)
   12B5 B7            [ 4] 2652 	or	a, a
   12B6 28 0A         [12] 2653 	jr	Z,00195$
                           2654 ;src\CFG8266.c:602: printf("\rWiFi radio on Time-out set successfully...\n");
   12B8 21r27r1C      [10] 2655 	ld	hl, #___str_66
   12BB E5            [11] 2656 	push	hl
   12BC CDr00r00      [17] 2657 	call	_puts
   12BF F1            [10] 2658 	pop	af
   12C0 18 08         [12] 2659 	jr	00196$
   12C2                    2660 00195$:
                           2661 ;src\CFG8266.c:604: printf("\rError setting WiFi radio on Time-out!\n");
   12C2 21r53r1C      [10] 2662 	ld	hl, #___str_68
   12C5 E5            [11] 2663 	push	hl
   12C6 CDr00r00      [17] 2664 	call	_puts
   12C9 F1            [10] 2665 	pop	af
   12CA                    2666 00196$:
                           2667 ;src\CFG8266.c:605: return 0;
   12CA 21 00 00      [10] 2668 	ld	hl, #0x0000
   12CD C3rE7r19      [10] 2669 	jp	00304$
   12D0                    2670 00283$:
                           2671 ;src\CFG8266.c:609: else if (ucLocalUpdate)
   12D0 3Ar0Dr02      [13] 2672 	ld	a,(#_ucLocalUpdate + 0)
   12D3 B7            [ 4] 2673 	or	a, a
   12D4 CAr92r18      [10] 2674 	jp	Z, 00280$
                           2675 ;src\CFG8266.c:612: iFile = Open (ucFile,O_RDONLY);
   12D7 21 00 00      [10] 2676 	ld	hl, #0x0000
   12DA E5            [11] 2677 	push	hl
   12DB 21r01r01      [10] 2678 	ld	hl, #_ucFile
   12DE E5            [11] 2679 	push	hl
   12DF CDr00r00      [17] 2680 	call	_Open
   12E2 F1            [10] 2681 	pop	af
   12E3 F1            [10] 2682 	pop	af
   12E4 DD 75 FE      [19] 2683 	ld	-2 (ix), l
   12E7 DD 74 FF      [19] 2684 	ld	-1 (ix), h
                           2685 ;src\CFG8266.c:614: if (iFile!=-1)
   12EA DD 7E FE      [19] 2686 	ld	a, -2 (ix)
   12ED DD A6 FF      [19] 2687 	and	a, -1 (ix)
   12F0 3C            [ 4] 2688 	inc	a
   12F1 CAr7Fr18      [10] 2689 	jp	Z,00253$
                           2690 ;src\CFG8266.c:621: regs.Words.HL = 0; //set pointer as 0
   12F4 21 A9 01      [10] 2691 	ld	hl, #425
   12F7 39            [11] 2692 	add	hl, sp
   12F8 EB            [ 4] 2693 	ex	de, hl
   12F9 21 06 00      [10] 2694 	ld	hl, #0x0006
   12FC 19            [11] 2695 	add	hl, de
   12FD AF            [ 4] 2696 	xor	a, a
   12FE 77            [ 7] 2697 	ld	(hl), a
   12FF 23            [ 6] 2698 	inc	hl
   1300 77            [ 7] 2699 	ld	(hl), a
                           2700 ;src\CFG8266.c:622: regs.Words.DE = 0; //so it will return the position
   1301 13            [ 6] 2701 	inc	de
   1302 13            [ 6] 2702 	inc	de
   1303 13            [ 6] 2703 	inc	de
   1304 13            [ 6] 2704 	inc	de
   1305 AF            [ 4] 2705 	xor	a, a
   1306 12            [ 7] 2706 	ld	(de), a
   1307 13            [ 6] 2707 	inc	de
   1308 12            [ 7] 2708 	ld	(de), a
                           2709 ;src\CFG8266.c:623: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   1309 21 A9 01      [10] 2710 	ld	hl, #425
   130C 39            [11] 2711 	add	hl, sp
   130D EB            [ 4] 2712 	ex	de, hl
   130E 6B            [ 4] 2713 	ld	l, e
   130F 62            [ 4] 2714 	ld	h, d
   1310 23            [ 6] 2715 	inc	hl
   1311 36 02         [10] 2716 	ld	(hl), #0x02
                           2717 ;src\CFG8266.c:624: regs.Bytes.B = (unsigned char)(iFile&0xff);
   1313 13            [ 6] 2718 	inc	de
   1314 13            [ 6] 2719 	inc	de
   1315 13            [ 6] 2720 	inc	de
   1316 7A            [ 4] 2721 	ld	a, d
   1317 DD 4E FE      [19] 2722 	ld	c, -2 (ix)
   131A 6B            [ 4] 2723 	ld	l, e
   131B 67            [ 4] 2724 	ld	h, a
   131C 71            [ 7] 2725 	ld	(hl), c
                           2726 ;src\CFG8266.c:625: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   131D 21 A9 01      [10] 2727 	ld	hl, #425
   1320 39            [11] 2728 	add	hl, sp
   1321 DD 75 FC      [19] 2729 	ld	-4 (ix), l
   1324 DD 74 FD      [19] 2730 	ld	-3 (ix), h
   1327 4D            [ 4] 2731 	ld	c, l
   1328 44            [ 4] 2732 	ld	b, h
   1329 11 03 03      [10] 2733 	ld	de, #0x0303
   132C D5            [11] 2734 	push	de
   132D C5            [11] 2735 	push	bc
   132E 3E 4A         [ 7] 2736 	ld	a, #0x4a
   1330 F5            [11] 2737 	push	af
   1331 33            [ 6] 2738 	inc	sp
   1332 CDr00r00      [17] 2739 	call	_DosCall
   1335 F1            [10] 2740 	pop	af
   1336 F1            [10] 2741 	pop	af
   1337 33            [ 6] 2742 	inc	sp
                           2743 ;src\CFG8266.c:626: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   1338 DD 6E FC      [19] 2744 	ld	l, -4 (ix)
   133B DD 66 FD      [19] 2745 	ld	h, -3 (ix)
   133E 23            [ 6] 2746 	inc	hl
   133F 7E            [ 7] 2747 	ld	a, (hl)
   1340 DD 77 FB      [19] 2748 	ld	-5 (ix), a
   1343 B7            [ 4] 2749 	or	a, a
   1344 C2r10r14      [10] 2750 	jp	NZ, 00219$
                           2751 ;src\CFG8266.c:627: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   1347 DD 7E FC      [19] 2752 	ld	a, -4 (ix)
   134A DD 77 FA      [19] 2753 	ld	-6 (ix), a
   134D DD 7E FD      [19] 2754 	ld	a, -3 (ix)
   1350 DD 77 FB      [19] 2755 	ld	-5 (ix), a
   1353 DD 6E FA      [19] 2756 	ld	l, -6 (ix)
   1356 DD 66 FB      [19] 2757 	ld	h, -5 (ix)
   1359 11 06 00      [10] 2758 	ld	de, #0x0006
   135C 19            [11] 2759 	add	hl, de
   135D 7E            [ 7] 2760 	ld	a, (hl)
   135E DD 77 FA      [19] 2761 	ld	-6 (ix), a
   1361 23            [ 6] 2762 	inc	hl
   1362 7E            [ 7] 2763 	ld	a, (hl)
   1363 DD 77 FB      [19] 2764 	ld	-5 (ix), a
   1366 DD 7E FA      [19] 2765 	ld	a, -6 (ix)
   1369 DD 77 F8      [19] 2766 	ld	-8 (ix), a
   136C DD 7E FB      [19] 2767 	ld	a, -5 (ix)
   136F DD 77 F9      [19] 2768 	ld	-7 (ix), a
   1372 17            [ 4] 2769 	rla
   1373 9F            [ 4] 2770 	sbc	a, a
   1374 DD 77 FA      [19] 2771 	ld	-6 (ix), a
   1377 DD 77 FB      [19] 2772 	ld	-5 (ix), a
   137A DD 7E F8      [19] 2773 	ld	a, -8 (ix)
   137D DD 77 F1      [19] 2774 	ld	-15 (ix), a
   1380 DD 7E F9      [19] 2775 	ld	a, -7 (ix)
   1383 DD 77 F2      [19] 2776 	ld	-14 (ix), a
   1386 DD 36 F3 00   [19] 2777 	ld	-13 (ix), #0x00
   138A DD 36 F4 00   [19] 2778 	ld	-12 (ix), #0x00
   138E DD 6E FC      [19] 2779 	ld	l, -4 (ix)
   1391 DD 66 FD      [19] 2780 	ld	h, -3 (ix)
   1394 11 04 00      [10] 2781 	ld	de, #0x0004
   1397 19            [11] 2782 	add	hl, de
   1398 7E            [ 7] 2783 	ld	a, (hl)
   1399 DD 77 FC      [19] 2784 	ld	-4 (ix), a
   139C 23            [ 6] 2785 	inc	hl
   139D 7E            [ 7] 2786 	ld	a, (hl)
   139E DD 77 FD      [19] 2787 	ld	-3 (ix), a
   13A1 DD 7E FC      [19] 2788 	ld	a, -4 (ix)
   13A4 DD 77 FA      [19] 2789 	ld	-6 (ix), a
   13A7 DD 7E FD      [19] 2790 	ld	a, -3 (ix)
   13AA DD 77 FB      [19] 2791 	ld	-5 (ix), a
   13AD 17            [ 4] 2792 	rla
   13AE 9F            [ 4] 2793 	sbc	a, a
   13AF DD 77 FC      [19] 2794 	ld	-4 (ix), a
   13B2 DD 77 FD      [19] 2795 	ld	-3 (ix), a
   13B5 DD 7E FA      [19] 2796 	ld	a, -6 (ix)
   13B8 DD 77 F8      [19] 2797 	ld	-8 (ix), a
   13BB DD 7E FB      [19] 2798 	ld	a, -5 (ix)
   13BE DD 77 F9      [19] 2799 	ld	-7 (ix), a
   13C1 AF            [ 4] 2800 	xor	a, a
   13C2 DD 77 F6      [19] 2801 	ld	-10 (ix), a
   13C5 DD 77 F7      [19] 2802 	ld	-9 (ix), a
   13C8 DD 36 FA 00   [19] 2803 	ld	-6 (ix), #0x00
   13CC DD 36 FB 00   [19] 2804 	ld	-5 (ix), #0x00
   13D0 DD 7E F8      [19] 2805 	ld	a, -8 (ix)
   13D3 DD 77 FC      [19] 2806 	ld	-4 (ix), a
   13D6 DD 7E F9      [19] 2807 	ld	a, -7 (ix)
   13D9 DD 77 FD      [19] 2808 	ld	-3 (ix), a
   13DC DD 7E F1      [19] 2809 	ld	a, -15 (ix)
   13DF DD B6 FA      [19] 2810 	or	a, -6 (ix)
   13E2 DD 77 F5      [19] 2811 	ld	-11 (ix), a
   13E5 DD 7E F2      [19] 2812 	ld	a, -14 (ix)
   13E8 DD B6 FB      [19] 2813 	or	a, -5 (ix)
   13EB DD 77 F6      [19] 2814 	ld	-10 (ix), a
   13EE DD 7E F3      [19] 2815 	ld	a, -13 (ix)
   13F1 DD B6 FC      [19] 2816 	or	a, -4 (ix)
   13F4 DD 77 F7      [19] 2817 	ld	-9 (ix), a
   13F7 DD 7E F4      [19] 2818 	ld	a, -12 (ix)
   13FA DD B6 FD      [19] 2819 	or	a, -3 (ix)
   13FD DD 77 F8      [19] 2820 	ld	-8 (ix), a
   1400 21 DF 01      [10] 2821 	ld	hl, #479
   1403 39            [11] 2822 	add	hl, sp
   1404 EB            [ 4] 2823 	ex	de, hl
   1405 21 DA 01      [10] 2824 	ld	hl, #474
   1408 39            [11] 2825 	add	hl, sp
   1409 01 04 00      [10] 2826 	ld	bc, #4
   140C ED B0         [21] 2827 	ldir
   140E 18 0D         [12] 2828 	jr	00220$
   1410                    2829 00219$:
                           2830 ;src\CFG8266.c:629: SentFileSize = 0;
   1410 AF            [ 4] 2831 	xor	a, a
   1411 DD 77 FA      [19] 2832 	ld	-6 (ix), a
   1414 DD 77 FB      [19] 2833 	ld	-5 (ix), a
   1417 DD 77 FC      [19] 2834 	ld	-4 (ix), a
   141A DD 77 FD      [19] 2835 	ld	-3 (ix), a
   141D                    2836 00220$:
                           2837 ;src\CFG8266.c:631: ultostr(SentFileSize,chFileSize,10);
   141D 21 B5 01      [10] 2838 	ld	hl, #437
   1420 39            [11] 2839 	add	hl, sp
   1421 4D            [ 4] 2840 	ld	c, l
   1422 44            [ 4] 2841 	ld	b, h
   1423 E5            [11] 2842 	push	hl
   1424 11 0A 00      [10] 2843 	ld	de, #0x000a
   1427 D5            [11] 2844 	push	de
   1428 C5            [11] 2845 	push	bc
   1429 DD 6E FC      [19] 2846 	ld	l, -4 (ix)
   142C DD 66 FD      [19] 2847 	ld	h, -3 (ix)
   142F E5            [11] 2848 	push	hl
   1430 DD 6E FA      [19] 2849 	ld	l, -6 (ix)
   1433 DD 66 FB      [19] 2850 	ld	h, -5 (ix)
   1436 E5            [11] 2851 	push	hl
   1437 CDr1Br06      [17] 2852 	call	_ultostr
   143A F1            [10] 2853 	pop	af
   143B F1            [10] 2854 	pop	af
   143C F1            [10] 2855 	pop	af
   143D F1            [10] 2856 	pop	af
   143E DD 4E FE      [19] 2857 	ld	c, -2 (ix)
   1441 DD 46 FF      [19] 2858 	ld	b, -1 (ix)
   1444 C5            [11] 2859 	push	bc
   1445 CDr00r00      [17] 2860 	call	_Close
   1448 F1            [10] 2861 	pop	af
   1449 E1            [10] 2862 	pop	hl
                           2863 ;src\CFG8266.c:633: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   144A 11r01r01      [10] 2864 	ld	de, #_ucFile
   144D 01r7Ar1C      [10] 2865 	ld	bc, #___str_69+0
   1450 E5            [11] 2866 	push	hl
   1451 D5            [11] 2867 	push	de
   1452 C5            [11] 2868 	push	bc
   1453 CDr00r00      [17] 2869 	call	_printf
   1456 F1            [10] 2870 	pop	af
   1457 F1            [10] 2871 	pop	af
   1458 F1            [10] 2872 	pop	af
                           2873 ;src\CFG8266.c:634: if (SentFileSize)
   1459 DD 7E FD      [19] 2874 	ld	a, -3 (ix)
   145C DD B6 FC      [19] 2875 	or	a, -4 (ix)
   145F DD B6 FB      [19] 2876 	or	a, -5 (ix)
   1462 DD B6 FA      [19] 2877 	or	a, -6 (ix)
   1465 CAr6Cr18      [10] 2878 	jp	Z, 00250$
                           2879 ;src\CFG8266.c:636: iFile = Open (ucFile,O_RDONLY);
   1468 21 00 00      [10] 2880 	ld	hl, #0x0000
   146B E5            [11] 2881 	push	hl
   146C 21r01r01      [10] 2882 	ld	hl, #_ucFile
   146F E5            [11] 2883 	push	hl
   1470 CDr00r00      [17] 2884 	call	_Open
   1473 F1            [10] 2885 	pop	af
   1474 F1            [10] 2886 	pop	af
   1475 DD 75 F1      [19] 2887 	ld	-15 (ix), l
   1478 DD 74 F2      [19] 2888 	ld	-14 (ix), h
                           2889 ;src\CFG8266.c:637: if (iFile!=-1)
   147B DD 7E F1      [19] 2890 	ld	a, -15 (ix)
   147E DD A6 F2      [19] 2891 	and	a, -14 (ix)
   1481 3C            [ 4] 2892 	inc	a
   1482 CAr59r18      [10] 2893 	jp	Z,00247$
                           2894 ;src\CFG8266.c:639: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1485 21 00 01      [10] 2895 	ld	hl, #0x0100
   1488 E5            [11] 2896 	push	hl
   1489 21r01r00      [10] 2897 	ld	hl, #_ucServer
   148C E5            [11] 2898 	push	hl
   148D DD 6E F1      [19] 2899 	ld	l, -15 (ix)
   1490 DD 66 F2      [19] 2900 	ld	h, -14 (ix)
   1493 E5            [11] 2901 	push	hl
   1494 CDr00r00      [17] 2902 	call	_MyRead
   1497 F1            [10] 2903 	pop	af
   1498 F1            [10] 2904 	pop	af
   1499 F1            [10] 2905 	pop	af
   149A DD 75 F3      [19] 2906 	ld	-13 (ix), l
   149D DD 74 F4      [19] 2907 	ld	-12 (ix), h
                           2908 ;src\CFG8266.c:640: if (FileRead == 256)
   14A0 DD 7E F3      [19] 2909 	ld	a, -13 (ix)
   14A3 B7            [ 4] 2910 	or	a, a
   14A4 C2r43r18      [10] 2911 	jp	NZ,00244$
   14A7 DD 7E F4      [19] 2912 	ld	a, -12 (ix)
   14AA 3D            [ 4] 2913 	dec	a
   14AB C2r43r18      [10] 2914 	jp	NZ,00244$
                           2915 ;src\CFG8266.c:643: if (ucIsFw)
   14AE 3Ar0Er02      [13] 2916 	ld	a,(#_ucIsFw + 0)
   14B1 B7            [ 4] 2917 	or	a, a
   14B2 28 0A         [12] 2918 	jr	Z,00222$
                           2919 ;src\CFG8266.c:644: TxByte('Z'); //Request start of RS232 update
   14B4 3E 5A         [ 7] 2920 	ld	a, #0x5a
   14B6 F5            [11] 2921 	push	af
   14B7 33            [ 6] 2922 	inc	sp
   14B8 CDr0Dr06      [17] 2923 	call	_TxByte
   14BB 33            [ 6] 2924 	inc	sp
   14BC 18 08         [12] 2925 	jr	00223$
   14BE                    2926 00222$:
                           2927 ;src\CFG8266.c:646: TxByte('Y'); //Request start of RS232 cert update
   14BE 3E 59         [ 7] 2928 	ld	a, #0x59
   14C0 F5            [11] 2929 	push	af
   14C1 33            [ 6] 2930 	inc	sp
   14C2 CDr0Dr06      [17] 2931 	call	_TxByte
   14C5 33            [ 6] 2932 	inc	sp
   14C6                    2933 00223$:
                           2934 ;src\CFG8266.c:647: TxByte(0);
   14C6 AF            [ 4] 2935 	xor	a, a
   14C7 F5            [11] 2936 	push	af
   14C8 33            [ 6] 2937 	inc	sp
   14C9 CDr0Dr06      [17] 2938 	call	_TxByte
   14CC 33            [ 6] 2939 	inc	sp
                           2940 ;src\CFG8266.c:648: TxByte(12);
   14CD 3E 0C         [ 7] 2941 	ld	a, #0x0c
   14CF F5            [11] 2942 	push	af
   14D0 33            [ 6] 2943 	inc	sp
   14D1 CDr0Dr06      [17] 2944 	call	_TxByte
   14D4 33            [ 6] 2945 	inc	sp
                           2946 ;src\CFG8266.c:649: TxByte((unsigned char)(SentFileSize&0xff));
   14D5 DD 7E FA      [19] 2947 	ld	a, -6 (ix)
   14D8 F5            [11] 2948 	push	af
   14D9 33            [ 6] 2949 	inc	sp
   14DA CDr0Dr06      [17] 2950 	call	_TxByte
   14DD 33            [ 6] 2951 	inc	sp
                           2952 ;src\CFG8266.c:650: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   14DE DD 46 FB      [19] 2953 	ld	b, -5 (ix)
   14E1 0E 00         [ 7] 2954 	ld	c, #0x00
   14E3 C5            [11] 2955 	push	bc
   14E4 33            [ 6] 2956 	inc	sp
   14E5 CDr0Dr06      [17] 2957 	call	_TxByte
   14E8 33            [ 6] 2958 	inc	sp
                           2959 ;src\CFG8266.c:651: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   14E9 DD 7E FC      [19] 2960 	ld	a, -4 (ix)
   14EC F5            [11] 2961 	push	af
   14ED 33            [ 6] 2962 	inc	sp
   14EE CDr0Dr06      [17] 2963 	call	_TxByte
   14F1 33            [ 6] 2964 	inc	sp
                           2965 ;src\CFG8266.c:652: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   14F2 DD 7E FD      [19] 2966 	ld	a, -3 (ix)
   14F5 F5            [11] 2967 	push	af
   14F6 33            [ 6] 2968 	inc	sp
   14F7 CDr0Dr06      [17] 2969 	call	_TxByte
   14FA 33            [ 6] 2970 	inc	sp
                           2971 ;src\CFG8266.c:653: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   14FB DD 7E FA      [19] 2972 	ld	a, -6 (ix)
   14FE FD 21 00 00   [14] 2973 	ld	iy, #0
   1502 FD 39         [15] 2974 	add	iy, sp
   1504 FD 77 00      [19] 2975 	ld	0 (iy), a
   1507 DD 7E FB      [19] 2976 	ld	a, -5 (ix)
   150A FD 77 01      [19] 2977 	ld	1 (iy), a
   150D DD 7E FC      [19] 2978 	ld	a, -4 (ix)
   1510 FD 77 02      [19] 2979 	ld	2 (iy), a
   1513 DD 7E FD      [19] 2980 	ld	a, -3 (ix)
   1516 FD 77 03      [19] 2981 	ld	3 (iy), a
   1519 AF            [ 4] 2982 	xor	a, a
   151A FD 77 04      [19] 2983 	ld	4 (iy), a
   151D FD 77 05      [19] 2984 	ld	5 (iy), a
   1520 FD 77 06      [19] 2985 	ld	6 (iy), a
   1523 FD 77 07      [19] 2986 	ld	7 (iy), a
   1526 FD 21 08 00   [14] 2987 	ld	iy, #8
   152A FD 39         [15] 2988 	add	iy, sp
   152C FD 36 00 00   [19] 2989 	ld	0 (iy), #0x00
   1530 FD 36 01 00   [19] 2990 	ld	1 (iy), #0x00
   1534 FD 36 02 00   [19] 2991 	ld	2 (iy), #0x00
   1538 FD 36 03 00   [19] 2992 	ld	3 (iy), #0x00
   153C 21 04 00      [10] 2993 	ld	hl, #0+4
   153F 39            [11] 2994 	add	hl, sp
   1540 7E            [ 7] 2995 	ld	a, (hl)
   1541 FD 21 08 00   [14] 2996 	ld	iy, #8
   1545 FD 39         [15] 2997 	add	iy, sp
   1547 FD 77 04      [19] 2998 	ld	4 (iy), a
   154A FD 36 05 00   [19] 2999 	ld	5 (iy), #0x00
   154E FD 36 06 00   [19] 3000 	ld	6 (iy), #0x00
   1552 FD 36 07 00   [19] 3001 	ld	7 (iy), #0x00
   1556 06 20         [ 7] 3002 	ld	b, #0x20
   1558                    3003 00745$:
   1558 FD CB 07 2E   [23] 3004 	sra	7 (iy)
   155C FD CB 06 1E   [23] 3005 	rr	6 (iy)
   1560 FD CB 05 1E   [23] 3006 	rr	5 (iy)
   1564 FD CB 04 1E   [23] 3007 	rr	4 (iy)
   1568 FD CB 03 1E   [23] 3008 	rr	3 (iy)
   156C FD CB 02 1E   [23] 3009 	rr	2 (iy)
   1570 FD CB 01 1E   [23] 3010 	rr	1 (iy)
   1574 FD CB 00 1E   [23] 3011 	rr	0 (iy)
   1578 10 DE         [13] 3012 	djnz	00745$
   157A FD 7E 00      [19] 3013 	ld	a, 0 (iy)
   157D F5            [11] 3014 	push	af
   157E 33            [ 6] 3015 	inc	sp
   157F CDr0Dr06      [17] 3016 	call	_TxByte
   1582 33            [ 6] 3017 	inc	sp
                           3018 ;src\CFG8266.c:654: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1583 FD 21 08 00   [14] 3019 	ld	iy, #8
   1587 FD 39         [15] 3020 	add	iy, sp
   1589 FD 36 00 00   [19] 3021 	ld	0 (iy), #0x00
   158D FD 36 01 00   [19] 3022 	ld	1 (iy), #0x00
   1591 FD 36 02 00   [19] 3023 	ld	2 (iy), #0x00
   1595 FD 36 03 00   [19] 3024 	ld	3 (iy), #0x00
   1599 FD 36 04 00   [19] 3025 	ld	4 (iy), #0x00
   159D 21 05 00      [10] 3026 	ld	hl, #0+5
   15A0 39            [11] 3027 	add	hl, sp
   15A1 7E            [ 7] 3028 	ld	a, (hl)
   15A2 FD 21 08 00   [14] 3029 	ld	iy, #8
   15A6 FD 39         [15] 3030 	add	iy, sp
   15A8 FD 77 05      [19] 3031 	ld	5 (iy), a
   15AB FD 36 06 00   [19] 3032 	ld	6 (iy), #0x00
   15AF FD 36 07 00   [19] 3033 	ld	7 (iy), #0x00
   15B3 06 28         [ 7] 3034 	ld	b, #0x28
   15B5                    3035 00747$:
   15B5 FD CB 07 2E   [23] 3036 	sra	7 (iy)
   15B9 FD CB 06 1E   [23] 3037 	rr	6 (iy)
   15BD FD CB 05 1E   [23] 3038 	rr	5 (iy)
   15C1 FD CB 04 1E   [23] 3039 	rr	4 (iy)
   15C5 FD CB 03 1E   [23] 3040 	rr	3 (iy)
   15C9 FD CB 02 1E   [23] 3041 	rr	2 (iy)
   15CD FD CB 01 1E   [23] 3042 	rr	1 (iy)
   15D1 FD CB 00 1E   [23] 3043 	rr	0 (iy)
   15D5 10 DE         [13] 3044 	djnz	00747$
   15D7 FD 7E 00      [19] 3045 	ld	a, 0 (iy)
   15DA F5            [11] 3046 	push	af
   15DB 33            [ 6] 3047 	inc	sp
   15DC CDr0Dr06      [17] 3048 	call	_TxByte
   15DF 33            [ 6] 3049 	inc	sp
                           3050 ;src\CFG8266.c:655: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   15E0 FD 21 08 00   [14] 3051 	ld	iy, #8
   15E4 FD 39         [15] 3052 	add	iy, sp
   15E6 FD 36 00 00   [19] 3053 	ld	0 (iy), #0x00
   15EA FD 36 01 00   [19] 3054 	ld	1 (iy), #0x00
   15EE FD 36 02 00   [19] 3055 	ld	2 (iy), #0x00
   15F2 FD 36 03 00   [19] 3056 	ld	3 (iy), #0x00
   15F6 FD 36 04 00   [19] 3057 	ld	4 (iy), #0x00
   15FA FD 36 05 00   [19] 3058 	ld	5 (iy), #0x00
   15FE 21 06 00      [10] 3059 	ld	hl, #0+6
   1601 39            [11] 3060 	add	hl, sp
   1602 7E            [ 7] 3061 	ld	a, (hl)
   1603 FD 21 08 00   [14] 3062 	ld	iy, #8
   1607 FD 39         [15] 3063 	add	iy, sp
   1609 FD 77 06      [19] 3064 	ld	6 (iy), a
   160C FD 36 07 00   [19] 3065 	ld	7 (iy), #0x00
   1610 06 30         [ 7] 3066 	ld	b, #0x30
   1612                    3067 00749$:
   1612 FD CB 07 2E   [23] 3068 	sra	7 (iy)
   1616 FD CB 06 1E   [23] 3069 	rr	6 (iy)
   161A FD CB 05 1E   [23] 3070 	rr	5 (iy)
   161E FD CB 04 1E   [23] 3071 	rr	4 (iy)
   1622 FD CB 03 1E   [23] 3072 	rr	3 (iy)
   1626 FD CB 02 1E   [23] 3073 	rr	2 (iy)
   162A FD CB 01 1E   [23] 3074 	rr	1 (iy)
   162E FD CB 00 1E   [23] 3075 	rr	0 (iy)
   1632 10 DE         [13] 3076 	djnz	00749$
   1634 FD 7E 00      [19] 3077 	ld	a, 0 (iy)
   1637 F5            [11] 3078 	push	af
   1638 33            [ 6] 3079 	inc	sp
   1639 CDr0Dr06      [17] 3080 	call	_TxByte
   163C 33            [ 6] 3081 	inc	sp
                           3082 ;src\CFG8266.c:656: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   163D DD 7E FA      [19] 3083 	ld	a, -6 (ix)
   1640 FD 21 08 00   [14] 3084 	ld	iy, #8
   1644 FD 39         [15] 3085 	add	iy, sp
   1646 FD 77 00      [19] 3086 	ld	0 (iy), a
   1649 DD 7E FB      [19] 3087 	ld	a, -5 (ix)
   164C FD 77 01      [19] 3088 	ld	1 (iy), a
   164F DD 7E FC      [19] 3089 	ld	a, -4 (ix)
   1652 FD 77 02      [19] 3090 	ld	2 (iy), a
   1655 DD 7E FD      [19] 3091 	ld	a, -3 (ix)
   1658 FD 77 03      [19] 3092 	ld	3 (iy), a
   165B AF            [ 4] 3093 	xor	a, a
   165C FD 77 04      [19] 3094 	ld	4 (iy), a
   165F FD 77 05      [19] 3095 	ld	5 (iy), a
   1662 FD 77 06      [19] 3096 	ld	6 (iy), a
   1665 FD 77 07      [19] 3097 	ld	7 (iy), a
   1668 FD 36 00 00   [19] 3098 	ld	0 (iy), #0x00
   166C FD 36 01 00   [19] 3099 	ld	1 (iy), #0x00
   1670 FD 36 02 00   [19] 3100 	ld	2 (iy), #0x00
   1674 FD 36 03 00   [19] 3101 	ld	3 (iy), #0x00
   1678 FD 36 04 00   [19] 3102 	ld	4 (iy), #0x00
   167C FD 36 05 00   [19] 3103 	ld	5 (iy), #0x00
   1680 FD 36 06 00   [19] 3104 	ld	6 (iy), #0x00
   1684 FD 7E 07      [19] 3105 	ld	a, 7 (iy)
   1687 FD 77 07      [19] 3106 	ld	7 (iy), a
   168A 06 38         [ 7] 3107 	ld	b, #0x38
   168C                    3108 00751$:
   168C FD CB 07 3E   [23] 3109 	srl	7 (iy)
   1690 FD CB 06 1E   [23] 3110 	rr	6 (iy)
   1694 FD CB 05 1E   [23] 3111 	rr	5 (iy)
   1698 FD CB 04 1E   [23] 3112 	rr	4 (iy)
   169C FD CB 03 1E   [23] 3113 	rr	3 (iy)
   16A0 FD CB 02 1E   [23] 3114 	rr	2 (iy)
   16A4 FD CB 01 1E   [23] 3115 	rr	1 (iy)
   16A8 FD CB 00 1E   [23] 3116 	rr	0 (iy)
   16AC 10 DE         [13] 3117 	djnz	00751$
   16AE FD 7E 00      [19] 3118 	ld	a, 0 (iy)
   16B1 F5            [11] 3119 	push	af
   16B2 33            [ 6] 3120 	inc	sp
   16B3 CDr0Dr06      [17] 3121 	call	_TxByte
   16B6 33            [ 6] 3122 	inc	sp
                           3123 ;src\CFG8266.c:657: TxByte(ucServer[0]);
   16B7 3Ar01r00      [13] 3124 	ld	a, (#_ucServer + 0)
   16BA F5            [11] 3125 	push	af
   16BB 33            [ 6] 3126 	inc	sp
   16BC CDr0Dr06      [17] 3127 	call	_TxByte
   16BF 33            [ 6] 3128 	inc	sp
                           3129 ;src\CFG8266.c:658: TxByte(ucServer[1]);
   16C0 3Ar02r00      [13] 3130 	ld	a, (#_ucServer + 1)
   16C3 F5            [11] 3131 	push	af
   16C4 33            [ 6] 3132 	inc	sp
   16C5 CDr0Dr06      [17] 3133 	call	_TxByte
   16C8 33            [ 6] 3134 	inc	sp
                           3135 ;src\CFG8266.c:659: TxByte(ucServer[2]);
   16C9 3Ar03r00      [13] 3136 	ld	a, (#_ucServer + 2)
   16CC F5            [11] 3137 	push	af
   16CD 33            [ 6] 3138 	inc	sp
   16CE CDr0Dr06      [17] 3139 	call	_TxByte
   16D1 33            [ 6] 3140 	inc	sp
                           3141 ;src\CFG8266.c:660: TxByte(ucServer[3]);
   16D2 3Ar04r00      [13] 3142 	ld	a, (#_ucServer + 3)
   16D5 F5            [11] 3143 	push	af
   16D6 33            [ 6] 3144 	inc	sp
   16D7 CDr0Dr06      [17] 3145 	call	_TxByte
   16DA 33            [ 6] 3146 	inc	sp
                           3147 ;src\CFG8266.c:662: if (ucIsFw)
   16DB 3Ar0Er02      [13] 3148 	ld	a,(#_ucIsFw + 0)
   16DE B7            [ 4] 3149 	or	a, a
   16DF 28 1C         [12] 3150 	jr	Z,00225$
                           3151 ;src\CFG8266.c:663: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false);
   16E1 AF            [ 4] 3152 	xor	a, a
   16E2 57            [ 4] 3153 	ld	d,a
   16E3 1E 01         [ 7] 3154 	ld	e,#0x01
   16E5 D5            [11] 3155 	push	de
   16E6 21 3C 00      [10] 3156 	ld	hl, #0x003c
   16E9 E5            [11] 3157 	push	hl
   16EA 2E 02         [ 7] 3158 	ld	l, #0x02
   16EC E5            [11] 3159 	push	hl
   16ED 21rA5r00      [10] 3160 	ld	hl, #_responseRSFWUpdate
   16F0 E5            [11] 3161 	push	hl
   16F1 CDrC8r07      [17] 3162 	call	_WaitForRXData
   16F4 F1            [10] 3163 	pop	af
   16F5 F1            [10] 3164 	pop	af
   16F6 F1            [10] 3165 	pop	af
   16F7 F1            [10] 3166 	pop	af
   16F8 DD 75 F5      [19] 3167 	ld	-11 (ix), l
   16FB 18 1A         [12] 3168 	jr	00226$
   16FD                    3169 00225$:
                           3170 ;src\CFG8266.c:665: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false);
   16FD AF            [ 4] 3171 	xor	a, a
   16FE 57            [ 4] 3172 	ld	d,a
   16FF 1E 01         [ 7] 3173 	ld	e,#0x01
   1701 D5            [11] 3174 	push	de
   1702 21 3C 00      [10] 3175 	ld	hl, #0x003c
   1705 E5            [11] 3176 	push	hl
   1706 2E 02         [ 7] 3177 	ld	l, #0x02
   1708 E5            [11] 3178 	push	hl
   1709 21rA7r00      [10] 3179 	ld	hl, #_responseRSCERTUpdate
   170C E5            [11] 3180 	push	hl
   170D CDrC8r07      [17] 3181 	call	_WaitForRXData
   1710 F1            [10] 3182 	pop	af
   1711 F1            [10] 3183 	pop	af
   1712 F1            [10] 3184 	pop	af
   1713 F1            [10] 3185 	pop	af
   1714 DD 75 F5      [19] 3186 	ld	-11 (ix), l
   1717                    3187 00226$:
                           3188 ;src\CFG8266.c:667: if (!bResponse)
   1717 DD 7E F5      [19] 3189 	ld	a, -11 (ix)
   171A B7            [ 4] 3190 	or	a, a
   171B 20 0B         [12] 3191 	jr	NZ,00241$
                           3192 ;src\CFG8266.c:668: printf("Error requesting to start firmware update.\r\n");
   171D 21r8Fr1C      [10] 3193 	ld	hl, #___str_71
   1720 E5            [11] 3194 	push	hl
   1721 CDr00r00      [17] 3195 	call	_puts
   1724 F1            [10] 3196 	pop	af
   1725 C3r4Br18      [10] 3197 	jp	00245$
   1728                    3198 00241$:
                           3199 ;src\CFG8266.c:671: PrintChar('U');
   1728 3E 55         [ 7] 3200 	ld	a, #0x55
   172A F5            [11] 3201 	push	af
   172B 33            [ 6] 3202 	inc	sp
   172C CDr00r00      [17] 3203 	call	_PrintChar
   172F 33            [ 6] 3204 	inc	sp
                           3205 ;src\CFG8266.c:672: do
   1730 AF            [ 4] 3206 	xor	a, a
   1731 DD 77 FE      [19] 3207 	ld	-2 (ix), a
   1734 DD 77 FF      [19] 3208 	ld	-1 (ix), a
   1737                    3209 00235$:
                           3210 ;src\CFG8266.c:675: PrintChar(8); //backspace
   1737 3E 08         [ 7] 3211 	ld	a, #0x08
   1739 F5            [11] 3212 	push	af
   173A 33            [ 6] 3213 	inc	sp
   173B CDr00r00      [17] 3214 	call	_PrintChar
   173E 33            [ 6] 3215 	inc	sp
                           3216 ;src\CFG8266.c:676: PrintChar(advance[i%4]); // next char
   173F DD 7E FE      [19] 3217 	ld	a, -2 (ix)
   1742 E6 03         [ 7] 3218 	and	a, #0x03
   1744 DD 77 F6      [19] 3219 	ld	-10 (ix), a
   1747 DD 36 F7 00   [19] 3220 	ld	-9 (ix), #0x00
   174B DD 7E F6      [19] 3221 	ld	a, -10 (ix)
   174E DD 86 EE      [19] 3222 	add	a, -18 (ix)
   1751 DD 77 F8      [19] 3223 	ld	-8 (ix), a
   1754 DD 7E F7      [19] 3224 	ld	a, -9 (ix)
   1757 DD 8E EF      [19] 3225 	adc	a, -17 (ix)
   175A DD 77 F9      [19] 3226 	ld	-7 (ix), a
   175D DD 6E F8      [19] 3227 	ld	l, -8 (ix)
   1760 DD 66 F9      [19] 3228 	ld	h, -7 (ix)
   1763 7E            [ 7] 3229 	ld	a, (hl)
   1764 F5            [11] 3230 	push	af
   1765 33            [ 6] 3231 	inc	sp
   1766 CDr00r00      [17] 3232 	call	_PrintChar
   1769 33            [ 6] 3233 	inc	sp
                           3234 ;src\CFG8266.c:677: ++i;
   176A DD 34 FE      [23] 3235 	inc	-2 (ix)
   176D 20 03         [12] 3236 	jr	NZ,00753$
   176F DD 34 FF      [23] 3237 	inc	-1 (ix)
   1772                    3238 00753$:
                           3239 ;src\CFG8266.c:678: if (!ucFirstBlock)
   1772 DD 7E F0      [19] 3240 	ld	a, -16 (ix)
   1775 B7            [ 4] 3241 	or	a, a
   1776 20 2C         [12] 3242 	jr	NZ,00230$
                           3243 ;src\CFG8266.c:680: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1778 21 00 01      [10] 3244 	ld	hl, #0x0100
   177B E5            [11] 3245 	push	hl
   177C 21r01r00      [10] 3246 	ld	hl, #_ucServer
   177F E5            [11] 3247 	push	hl
   1780 DD 6E F1      [19] 3248 	ld	l, -15 (ix)
   1783 DD 66 F2      [19] 3249 	ld	h, -14 (ix)
   1786 E5            [11] 3250 	push	hl
   1787 CDr00r00      [17] 3251 	call	_MyRead
   178A F1            [10] 3252 	pop	af
   178B F1            [10] 3253 	pop	af
   178C F1            [10] 3254 	pop	af
   178D DD 75 F3      [19] 3255 	ld	-13 (ix), l
                           3256 ;src\CFG8266.c:681: if (FileRead ==0)
   1790 DD 74 F4      [19] 3257 	ld	-12 (ix), h
   1793 7C            [ 4] 3258 	ld	a, h
   1794 DD B6 F3      [19] 3259 	or	a, -13 (ix)
   1797 20 0F         [12] 3260 	jr	NZ,00231$
                           3261 ;src\CFG8266.c:683: printf("\rError reading file...\r\n");
   1799 21rBBr1C      [10] 3262 	ld	hl, #___str_73
   179C E5            [11] 3263 	push	hl
   179D CDr00r00      [17] 3264 	call	_puts
   17A0 F1            [10] 3265 	pop	af
                           3266 ;src\CFG8266.c:684: break;
   17A1 C3r34r18      [10] 3267 	jp	00237$
   17A4                    3268 00230$:
                           3269 ;src\CFG8266.c:688: ucFirstBlock = 0;
   17A4 AF            [ 4] 3270 	xor	a, a
   17A5 DD 77 F0      [19] 3271 	ld	-16 (ix), a
   17A8                    3272 00231$:
                           3273 ;src\CFG8266.c:690: TxByte('z'); //Write block
   17A8 3E 7A         [ 7] 3274 	ld	a, #0x7a
   17AA F5            [11] 3275 	push	af
   17AB 33            [ 6] 3276 	inc	sp
   17AC CDr0Dr06      [17] 3277 	call	_TxByte
   17AF 33            [ 6] 3278 	inc	sp
                           3279 ;src\CFG8266.c:691: TxByte((unsigned char)((FileRead&0xff00)>>8));
   17B0 DD 46 F4      [19] 3280 	ld	b, -12 (ix)
   17B3 0E 00         [ 7] 3281 	ld	c, #0x00
   17B5 C5            [11] 3282 	push	bc
   17B6 33            [ 6] 3283 	inc	sp
   17B7 CDr0Dr06      [17] 3284 	call	_TxByte
   17BA 33            [ 6] 3285 	inc	sp
                           3286 ;src\CFG8266.c:692: TxByte((unsigned char)(FileRead&0xff));
   17BB DD 7E F3      [19] 3287 	ld	a, -13 (ix)
   17BE F5            [11] 3288 	push	af
   17BF 33            [ 6] 3289 	inc	sp
   17C0 CDr0Dr06      [17] 3290 	call	_TxByte
   17C3 33            [ 6] 3291 	inc	sp
                           3292 ;src\CFG8266.c:693: for (ii=0;ii<256;ii++)
   17C4 01 00 00      [10] 3293 	ld	bc, #0x0000
   17C7                    3294 00302$:
                           3295 ;src\CFG8266.c:694: TxByte(ucServer[ii]);
   17C7 21r01r00      [10] 3296 	ld	hl, #_ucServer
   17CA 09            [11] 3297 	add	hl, bc
   17CB 7E            [ 7] 3298 	ld	a, (hl)
   17CC C5            [11] 3299 	push	bc
   17CD F5            [11] 3300 	push	af
   17CE 33            [ 6] 3301 	inc	sp
   17CF CDr0Dr06      [17] 3302 	call	_TxByte
   17D2 33            [ 6] 3303 	inc	sp
   17D3 C1            [10] 3304 	pop	bc
                           3305 ;src\CFG8266.c:693: for (ii=0;ii<256;ii++)
   17D4 03            [ 6] 3306 	inc	bc
   17D5 78            [ 4] 3307 	ld	a, b
   17D6 D6 01         [ 7] 3308 	sub	a, #0x01
   17D8 38 ED         [12] 3309 	jr	C,00302$
                           3310 ;src\CFG8266.c:696: bResponse = WaitForRXData(responseWRBlock,2,600,true,false);
   17DA AF            [ 4] 3311 	xor	a, a
   17DB 57            [ 4] 3312 	ld	d,a
   17DC 1E 01         [ 7] 3313 	ld	e,#0x01
   17DE D5            [11] 3314 	push	de
   17DF 21 58 02      [10] 3315 	ld	hl, #0x0258
   17E2 E5            [11] 3316 	push	hl
   17E3 21 02 00      [10] 3317 	ld	hl, #0x0002
   17E6 E5            [11] 3318 	push	hl
   17E7 21rA9r00      [10] 3319 	ld	hl, #_responseWRBlock
   17EA E5            [11] 3320 	push	hl
   17EB CDrC8r07      [17] 3321 	call	_WaitForRXData
   17EE F1            [10] 3322 	pop	af
   17EF F1            [10] 3323 	pop	af
   17F0 F1            [10] 3324 	pop	af
   17F1 F1            [10] 3325 	pop	af
                           3326 ;src\CFG8266.c:698: if (!bResponse)
   17F2 DD 75 F5      [19] 3327 	ld	-11 (ix), l
   17F5 7D            [ 4] 3328 	ld	a, l
   17F6 B7            [ 4] 3329 	or	a, a
   17F7 20 0A         [12] 3330 	jr	NZ,00234$
                           3331 ;src\CFG8266.c:700: printf("\rError requesting to write firmware block.\r\n");
   17F9 21rD3r1C      [10] 3332 	ld	hl, #___str_75
   17FC E5            [11] 3333 	push	hl
   17FD CDr00r00      [17] 3334 	call	_puts
   1800 F1            [10] 3335 	pop	af
                           3336 ;src\CFG8266.c:701: break;
   1801 18 31         [12] 3337 	jr	00237$
   1803                    3338 00234$:
                           3339 ;src\CFG8266.c:703: SentFileSize = SentFileSize - FileRead;
   1803 DD 4E F3      [19] 3340 	ld	c, -13 (ix)
   1806 DD 46 F4      [19] 3341 	ld	b, -12 (ix)
   1809 11 00 00      [10] 3342 	ld	de, #0x0000
   180C DD 7E FA      [19] 3343 	ld	a, -6 (ix)
   180F 91            [ 4] 3344 	sub	a, c
   1810 DD 77 FA      [19] 3345 	ld	-6 (ix), a
   1813 DD 7E FB      [19] 3346 	ld	a, -5 (ix)
   1816 98            [ 4] 3347 	sbc	a, b
   1817 DD 77 FB      [19] 3348 	ld	-5 (ix), a
   181A DD 7E FC      [19] 3349 	ld	a, -4 (ix)
   181D 9B            [ 4] 3350 	sbc	a, e
   181E DD 77 FC      [19] 3351 	ld	-4 (ix), a
   1821 DD 7E FD      [19] 3352 	ld	a, -3 (ix)
   1824 9A            [ 4] 3353 	sbc	a, d
                           3354 ;src\CFG8266.c:705: while(SentFileSize);
   1825 DD 77 FD      [19] 3355 	ld	-3 (ix), a
   1828 DD B6 FC      [19] 3356 	or	a, -4 (ix)
   182B DD B6 FB      [19] 3357 	or	a, -5 (ix)
   182E DD B6 FA      [19] 3358 	or	a, -6 (ix)
   1831 C2r37r17      [10] 3359 	jp	NZ, 00235$
   1834                    3360 00237$:
                           3361 ;src\CFG8266.c:708: if (bResponse)
   1834 DD 7E F5      [19] 3362 	ld	a, -11 (ix)
   1837 B7            [ 4] 3363 	or	a, a
   1838 28 11         [12] 3364 	jr	Z,00245$
                           3365 ;src\CFG8266.c:709: FinishUpdate(false);
   183A AF            [ 4] 3366 	xor	a, a
   183B F5            [11] 3367 	push	af
   183C 33            [ 6] 3368 	inc	sp
   183D CDr23r0A      [17] 3369 	call	_FinishUpdate
   1840 33            [ 6] 3370 	inc	sp
   1841 18 08         [12] 3371 	jr	00245$
   1843                    3372 00244$:
                           3373 ;src\CFG8266.c:713: Print("\rError reading firmware file!\n");
   1843 21rFFr1C      [10] 3374 	ld	hl, #___str_76
   1846 E5            [11] 3375 	push	hl
   1847 CDr00r00      [17] 3376 	call	_Print
   184A F1            [10] 3377 	pop	af
   184B                    3378 00245$:
                           3379 ;src\CFG8266.c:714: Close(iFile);
   184B DD 6E F1      [19] 3380 	ld	l, -15 (ix)
   184E DD 66 F2      [19] 3381 	ld	h, -14 (ix)
   1851 E5            [11] 3382 	push	hl
   1852 CDr00r00      [17] 3383 	call	_Close
   1855 F1            [10] 3384 	pop	af
   1856 C3rE4r19      [10] 3385 	jp	00294$
   1859                    3386 00247$:
                           3387 ;src\CFG8266.c:718: printf("Error, couldn't open %s ...\r\n",ucFile);
   1859 21r01r01      [10] 3388 	ld	hl, #_ucFile
   185C E5            [11] 3389 	push	hl
   185D 21r1Er1D      [10] 3390 	ld	hl, #___str_77
   1860 E5            [11] 3391 	push	hl
   1861 CDr00r00      [17] 3392 	call	_printf
   1864 F1            [10] 3393 	pop	af
   1865 F1            [10] 3394 	pop	af
                           3395 ;src\CFG8266.c:719: return 0;
   1866 21 00 00      [10] 3396 	ld	hl, #0x0000
   1869 C3rE7r19      [10] 3397 	jp	00304$
   186C                    3398 00250$:
                           3399 ;src\CFG8266.c:724: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   186C 21r01r01      [10] 3400 	ld	hl, #_ucFile
   186F E5            [11] 3401 	push	hl
   1870 21r3Cr1D      [10] 3402 	ld	hl, #___str_78
   1873 E5            [11] 3403 	push	hl
   1874 CDr00r00      [17] 3404 	call	_printf
   1877 F1            [10] 3405 	pop	af
   1878 F1            [10] 3406 	pop	af
                           3407 ;src\CFG8266.c:725: return 0;
   1879 21 00 00      [10] 3408 	ld	hl, #0x0000
   187C C3rE7r19      [10] 3409 	jp	00304$
   187F                    3410 00253$:
                           3411 ;src\CFG8266.c:730: printf("Error, couldn't open %s ...\r\n",ucFile);
   187F 21r01r01      [10] 3412 	ld	hl, #_ucFile
   1882 E5            [11] 3413 	push	hl
   1883 21r1Er1D      [10] 3414 	ld	hl, #___str_77
   1886 E5            [11] 3415 	push	hl
   1887 CDr00r00      [17] 3416 	call	_printf
   188A F1            [10] 3417 	pop	af
   188B F1            [10] 3418 	pop	af
                           3419 ;src\CFG8266.c:731: return 0;
   188C 21 00 00      [10] 3420 	ld	hl, #0x0000
   188F C3rE7r19      [10] 3421 	jp	00304$
   1892                    3422 00280$:
                           3423 ;src\CFG8266.c:736: if (ucIsFw)
   1892 3Ar0Er02      [13] 3424 	ld	a,(#_ucIsFw + 0)
   1895 B7            [ 4] 3425 	or	a, a
   1896 28 19         [12] 3426 	jr	Z,00256$
                           3427 ;src\CFG8266.c:737: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1898 21r01r01      [10] 3428 	ld	hl, #_ucFile
   189B E5            [11] 3429 	push	hl
   189C 2Ar07r02      [16] 3430 	ld	hl, (_uiPort)
   189F E5            [11] 3431 	push	hl
   18A0 21r01r00      [10] 3432 	ld	hl, #_ucServer
   18A3 E5            [11] 3433 	push	hl
   18A4 21r5Br1D      [10] 3434 	ld	hl, #___str_79
   18A7 E5            [11] 3435 	push	hl
   18A8 CDr00r00      [17] 3436 	call	_printf
   18AB F1            [10] 3437 	pop	af
   18AC F1            [10] 3438 	pop	af
   18AD F1            [10] 3439 	pop	af
   18AE F1            [10] 3440 	pop	af
   18AF 18 17         [12] 3441 	jr	00257$
   18B1                    3442 00256$:
                           3443 ;src\CFG8266.c:739: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   18B1 21r01r01      [10] 3444 	ld	hl, #_ucFile
   18B4 E5            [11] 3445 	push	hl
   18B5 2Ar07r02      [16] 3446 	ld	hl, (_uiPort)
   18B8 E5            [11] 3447 	push	hl
   18B9 21r01r00      [10] 3448 	ld	hl, #_ucServer
   18BC E5            [11] 3449 	push	hl
   18BD 21rC4r1D      [10] 3450 	ld	hl, #___str_80
   18C0 E5            [11] 3451 	push	hl
   18C1 CDr00r00      [17] 3452 	call	_printf
   18C4 F1            [10] 3453 	pop	af
   18C5 F1            [10] 3454 	pop	af
   18C6 F1            [10] 3455 	pop	af
   18C7 F1            [10] 3456 	pop	af
   18C8                    3457 00257$:
                           3458 ;src\CFG8266.c:740: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   18C8 21r01r00      [10] 3459 	ld	hl, #_ucServer
   18CB E5            [11] 3460 	push	hl
   18CC CDr00r00      [17] 3461 	call	_strlen
   18CF F1            [10] 3462 	pop	af
   18D0 EB            [ 4] 3463 	ex	de,hl
   18D1 13            [ 6] 3464 	inc	de
   18D2 13            [ 6] 3465 	inc	de
   18D3 13            [ 6] 3466 	inc	de
                           3467 ;src\CFG8266.c:741: uiCMDLen += strlen(ucFile);
   18D4 21r01r01      [10] 3468 	ld	hl, #_ucFile
   18D7 E5            [11] 3469 	push	hl
   18D8 CDr00r00      [17] 3470 	call	_strlen
   18DB F1            [10] 3471 	pop	af
   18DC 19            [11] 3472 	add	hl, de
   18DD DD 75 FE      [19] 3473 	ld	-2 (ix), l
   18E0 DD 74 FF      [19] 3474 	ld	-1 (ix), h
                           3475 ;src\CFG8266.c:742: if (ucIsFw)
   18E3 3Ar0Er02      [13] 3476 	ld	a,(#_ucIsFw + 0)
   18E6 B7            [ 4] 3477 	or	a, a
   18E7 28 0A         [12] 3478 	jr	Z,00259$
                           3479 ;src\CFG8266.c:743: TxByte('U'); //Request Update Main Firmware remotely
   18E9 3E 55         [ 7] 3480 	ld	a, #0x55
   18EB F5            [11] 3481 	push	af
   18EC 33            [ 6] 3482 	inc	sp
   18ED CDr0Dr06      [17] 3483 	call	_TxByte
   18F0 33            [ 6] 3484 	inc	sp
   18F1 18 08         [12] 3485 	jr	00260$
   18F3                    3486 00259$:
                           3487 ;src\CFG8266.c:745: TxByte('u'); //Request Update spiffs remotely
   18F3 3E 75         [ 7] 3488 	ld	a, #0x75
   18F5 F5            [11] 3489 	push	af
   18F6 33            [ 6] 3490 	inc	sp
   18F7 CDr0Dr06      [17] 3491 	call	_TxByte
   18FA 33            [ 6] 3492 	inc	sp
   18FB                    3493 00260$:
                           3494 ;src\CFG8266.c:746: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   18FB DD 7E FF      [19] 3495 	ld	a, -1 (ix)
   18FE F5            [11] 3496 	push	af
   18FF 33            [ 6] 3497 	inc	sp
   1900 CDr0Dr06      [17] 3498 	call	_TxByte
   1903 33            [ 6] 3499 	inc	sp
                           3500 ;src\CFG8266.c:747: TxByte((unsigned char)(uiCMDLen&0xff));
   1904 DD 7E FE      [19] 3501 	ld	a, -2 (ix)
   1907 F5            [11] 3502 	push	af
   1908 33            [ 6] 3503 	inc	sp
   1909 CDr0Dr06      [17] 3504 	call	_TxByte
   190C 33            [ 6] 3505 	inc	sp
                           3506 ;src\CFG8266.c:748: TxByte((unsigned char)(uiPort&0xff));
   190D 3Ar07r02      [13] 3507 	ld	a,(#_uiPort + 0)
   1910 F5            [11] 3508 	push	af
   1911 33            [ 6] 3509 	inc	sp
   1912 CDr0Dr06      [17] 3510 	call	_TxByte
   1915 33            [ 6] 3511 	inc	sp
                           3512 ;src\CFG8266.c:749: TxByte((unsigned char)((uiPort&0xff00)>>8));
   1916 3Ar08r02      [13] 3513 	ld	a,(#_uiPort + 1)
   1919 F5            [11] 3514 	push	af
   191A 33            [ 6] 3515 	inc	sp
   191B CDr0Dr06      [17] 3516 	call	_TxByte
   191E 33            [ 6] 3517 	inc	sp
                           3518 ;src\CFG8266.c:751: do
   191F DD 4E FE      [19] 3519 	ld	c, -2 (ix)
   1922 DD 46 FF      [19] 3520 	ld	b, -1 (ix)
   1925 1E 00         [ 7] 3521 	ld	e, #0x00
   1927                    3522 00262$:
                           3523 ;src\CFG8266.c:753: tx_data = ucServer[rx_data];
   1927 21r01r00      [10] 3524 	ld	hl, #_ucServer
   192A 16 00         [ 7] 3525 	ld	d, #0x00
   192C 19            [11] 3526 	add	hl, de
   192D 56            [ 7] 3527 	ld	d, (hl)
                           3528 ;src\CFG8266.c:754: TxByte(tx_data);
   192E C5            [11] 3529 	push	bc
   192F D5            [11] 3530 	push	de
   1930 D5            [11] 3531 	push	de
   1931 33            [ 6] 3532 	inc	sp
   1932 CDr0Dr06      [17] 3533 	call	_TxByte
   1935 33            [ 6] 3534 	inc	sp
   1936 D1            [10] 3535 	pop	de
   1937 C1            [10] 3536 	pop	bc
                           3537 ;src\CFG8266.c:755: --uiCMDLen;
   1938 0B            [ 6] 3538 	dec	bc
                           3539 ;src\CFG8266.c:756: ++rx_data;
   1939 1C            [ 4] 3540 	inc	e
                           3541 ;src\CFG8266.c:758: while((uiCMDLen)&&(tx_data!=0));
   193A 78            [ 4] 3542 	ld	a, b
   193B B1            [ 4] 3543 	or	a, c
   193C 28 04         [12] 3544 	jr	Z,00264$
   193E 7A            [ 4] 3545 	ld	a, d
   193F B7            [ 4] 3546 	or	a, a
   1940 20 E5         [12] 3547 	jr	NZ,00262$
   1942                    3548 00264$:
                           3549 ;src\CFG8266.c:760: do
   1942 AF            [ 4] 3550 	xor	a, a
   1943 DD 77 FF      [19] 3551 	ld	-1 (ix), a
   1946                    3552 00267$:
                           3553 ;src\CFG8266.c:762: tx_data = ucFile[rx_data];
   1946 3Er01         [ 7] 3554 	ld	a, #<(_ucFile)
   1948 DD 86 FF      [19] 3555 	add	a, -1 (ix)
   194B 5F            [ 4] 3556 	ld	e, a
   194C 3Es01         [ 7] 3557 	ld	a, #>(_ucFile)
   194E CE 00         [ 7] 3558 	adc	a, #0x00
   1950 57            [ 4] 3559 	ld	d, a
   1951 1A            [ 7] 3560 	ld	a, (de)
                           3561 ;src\CFG8266.c:763: if (tx_data==0)
   1952 B7            [ 4] 3562 	or	a, a
   1953 28 10         [12] 3563 	jr	Z,00269$
                           3564 ;src\CFG8266.c:765: TxByte(tx_data);
   1955 C5            [11] 3565 	push	bc
   1956 F5            [11] 3566 	push	af
   1957 33            [ 6] 3567 	inc	sp
   1958 CDr0Dr06      [17] 3568 	call	_TxByte
   195B 33            [ 6] 3569 	inc	sp
   195C C1            [10] 3570 	pop	bc
                           3571 ;src\CFG8266.c:766: --uiCMDLen;
   195D 0B            [ 6] 3572 	dec	bc
                           3573 ;src\CFG8266.c:767: ++rx_data;
   195E DD 34 FF      [23] 3574 	inc	-1 (ix)
                           3575 ;src\CFG8266.c:769: while(uiCMDLen);
   1961 78            [ 4] 3576 	ld	a, b
   1962 B1            [ 4] 3577 	or	a, c
   1963 20 E1         [12] 3578 	jr	NZ,00267$
   1965                    3579 00269$:
                           3580 ;src\CFG8266.c:771: if (ucIsFw)
   1965 3Ar0Er02      [13] 3581 	ld	a,(#_ucIsFw + 0)
   1968 B7            [ 4] 3582 	or	a, a
   1969 28 1B         [12] 3583 	jr	Z,00271$
                           3584 ;src\CFG8266.c:772: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false);
   196B AF            [ 4] 3585 	xor	a, a
   196C 57            [ 4] 3586 	ld	d,a
   196D 1E 01         [ 7] 3587 	ld	e,#0x01
   196F D5            [11] 3588 	push	de
   1970 21 50 46      [10] 3589 	ld	hl, #0x4650
   1973 E5            [11] 3590 	push	hl
   1974 21 02 00      [10] 3591 	ld	hl, #0x0002
   1977 E5            [11] 3592 	push	hl
   1978 21rABr00      [10] 3593 	ld	hl, #_responseOTAFW
   197B E5            [11] 3594 	push	hl
   197C CDrC8r07      [17] 3595 	call	_WaitForRXData
   197F F1            [10] 3596 	pop	af
   1980 F1            [10] 3597 	pop	af
   1981 F1            [10] 3598 	pop	af
   1982 F1            [10] 3599 	pop	af
   1983 4D            [ 4] 3600 	ld	c, l
   1984 18 19         [12] 3601 	jr	00272$
   1986                    3602 00271$:
                           3603 ;src\CFG8266.c:774: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false);
   1986 AF            [ 4] 3604 	xor	a, a
   1987 57            [ 4] 3605 	ld	d,a
   1988 1E 01         [ 7] 3606 	ld	e,#0x01
   198A D5            [11] 3607 	push	de
   198B 21 50 46      [10] 3608 	ld	hl, #0x4650
   198E E5            [11] 3609 	push	hl
   198F 21 02 00      [10] 3610 	ld	hl, #0x0002
   1992 E5            [11] 3611 	push	hl
   1993 21rADr00      [10] 3612 	ld	hl, #_responseOTASPIFF
   1996 E5            [11] 3613 	push	hl
   1997 CDrC8r07      [17] 3614 	call	_WaitForRXData
   199A F1            [10] 3615 	pop	af
   199B F1            [10] 3616 	pop	af
   199C F1            [10] 3617 	pop	af
   199D F1            [10] 3618 	pop	af
   199E 4D            [ 4] 3619 	ld	c, l
   199F                    3620 00272$:
                           3621 ;src\CFG8266.c:776: if (bResponse)
   199F 79            [ 4] 3622 	ld	a, c
   19A0 B7            [ 4] 3623 	or	a, a
   19A1 28 25         [12] 3624 	jr	Z,00277$
                           3625 ;src\CFG8266.c:778: if ((!ucIsFw))
   19A3 3Ar0Er02      [13] 3626 	ld	a,(#_ucIsFw + 0)
   19A6 B7            [ 4] 3627 	or	a, a
   19A7 20 0A         [12] 3628 	jr	NZ,00274$
                           3629 ;src\CFG8266.c:779: printf("\rSuccess updating certificates!\r\n");
   19A9 21r37r1E      [10] 3630 	ld	hl, #___str_82
   19AC E5            [11] 3631 	push	hl
   19AD CDr00r00      [17] 3632 	call	_puts
   19B0 F1            [10] 3633 	pop	af
   19B1 18 08         [12] 3634 	jr	00275$
   19B3                    3635 00274$:
                           3636 ;src\CFG8266.c:781: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   19B3 21r58r1E      [10] 3637 	ld	hl, #___str_84
   19B6 E5            [11] 3638 	push	hl
   19B7 CDr00r00      [17] 3639 	call	_puts
   19BA F1            [10] 3640 	pop	af
   19BB                    3641 00275$:
                           3642 ;src\CFG8266.c:782: FinishUpdate(true);
   19BB 3E 01         [ 7] 3643 	ld	a, #0x01
   19BD F5            [11] 3644 	push	af
   19BE 33            [ 6] 3645 	inc	sp
   19BF CDr23r0A      [17] 3646 	call	_FinishUpdate
   19C2 33            [ 6] 3647 	inc	sp
                           3648 ;src\CFG8266.c:783: return 0;
   19C3 21 00 00      [10] 3649 	ld	hl, #0x0000
   19C6 18 1F         [12] 3650 	jr	00304$
   19C8                    3651 00277$:
                           3652 ;src\CFG8266.c:786: printf("\rFailed to update from remote server...\r\n");
   19C8 21r9Br1E      [10] 3653 	ld	hl, #___str_86
   19CB E5            [11] 3654 	push	hl
   19CC CDr00r00      [17] 3655 	call	_puts
   19CF F1            [10] 3656 	pop	af
   19D0 18 12         [12] 3657 	jr	00294$
   19D2                    3658 00290$:
                           3659 ;src\CFG8266.c:790: printf("ESP device not found...\r\n");
   19D2 21rC4r1E      [10] 3660 	ld	hl, #___str_88
   19D5 E5            [11] 3661 	push	hl
   19D6 CDr00r00      [17] 3662 	call	_puts
   19D9 F1            [10] 3663 	pop	af
   19DA 18 08         [12] 3664 	jr	00294$
   19DC                    3665 00293$:
                           3666 ;src\CFG8266.c:793: printf(strUsage);
   19DC 21rBAr00      [10] 3667 	ld	hl, #_strUsage
   19DF E5            [11] 3668 	push	hl
   19E0 CDr00r00      [17] 3669 	call	_printf
   19E3 F1            [10] 3670 	pop	af
   19E4                    3671 00294$:
                           3672 ;src\CFG8266.c:795: return 0;
   19E4 21 00 00      [10] 3673 	ld	hl, #0x0000
   19E7                    3674 00304$:
                           3675 ;src\CFG8266.c:796: }
   19E7 DD F9         [10] 3676 	ld	sp, ix
   19E9 DD E1         [14] 3677 	pop	ix
   19EB C9            [10] 3678 	ret
   19EC                    3679 ___str_29:
   19EC 3E 20 53 4D 2D 58  3680 	.ascii "> SM-X ESP8266 WIFI Module Configuration v1.10 <"
        20 45 53 50 38 32
        36 36 20 57 49 46
        49 20 4D 6F 64 75
        6C 65 20 43 6F 6E
        66 69 67 75 72 61
        74 69 6F 6E 20 76
        31 2E 31 30 20 3C
   1A1C 0D                 3681 	.db 0x0d
   1A1D 0A                 3682 	.db 0x0a
   1A1E 28 63 29 20 32 30  3683 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   1A4F 0D                 3684 	.db 0x0d
   1A50 0A                 3685 	.db 0x0a
   1A51 00                 3686 	.db 0x00
   1A52                    3687 ___str_30:
   1A52 55 73 69 6E 67 20  3688 	.ascii "Using Baud Rate #%u"
        42 61 75 64 20 52
        61 74 65 20 23 25
        75
   1A65 0D                 3689 	.db 0x0d
   1A66 0A                 3690 	.db 0x0a
   1A67 00                 3691 	.db 0x00
   1A68                    3692 ___str_31:
   1A68 0D                 3693 	.db 0x0d
   1A69 0A                 3694 	.db 0x0a
   1A6A 53 65 74 74 69 6E  3695 	.ascii "Setting WiFi idle timeout to %u..."
        67 20 57 69 46 69
        20 69 64 6C 65 20
        74 69 6D 65 6F 75
        74 20 74 6F 20 25
        75 2E 2E 2E
   1A8C 0D                 3696 	.db 0x0d
   1A8D 0A                 3697 	.db 0x0a
   1A8E 00                 3698 	.db 0x00
   1A8F                    3699 ___str_33:
   1A8F 0D                 3700 	.db 0x0d
   1A90 0A                 3701 	.db 0x0a
   1A91 53 65 74 74 69 6E  3702 	.ascii "Setting WiFi to always on!"
        67 20 57 69 46 69
        20 74 6F 20 61 6C
        77 61 79 73 20 6F
        6E 21
   1AAB 0D                 3703 	.db 0x0d
   1AAC 00                 3704 	.db 0x00
   1AAD                    3705 ___str_35:
   1AAD 0D                 3706 	.db 0x0d
   1AAE 00                 3707 	.db 0x00
   1AAF                    3708 ___str_37:
   1AAF 43 68 6F 6F 73 65  3709 	.ascii "Choose AP:"
        20 41 50 3A
   1AB9 0D                 3710 	.db 0x0d
   1ABA 0A                 3711 	.db 0x0a
   1ABB 00                 3712 	.db 0x00
   1ABC                    3713 ___str_38:
   1ABC 25 75 20 2D 20 25  3714 	.ascii "%u - %s"
        73
   1AC3 00                 3715 	.db 0x00
   1AC4                    3716 ___str_40:
   1AC4 20 28 50 57 44 29  3717 	.ascii " (PWD)"
   1ACA 0D                 3718 	.db 0x0d
   1ACB 00                 3719 	.db 0x00
   1ACC                    3720 ___str_42:
   1ACC 20 28 4F 50 45 4E  3721 	.ascii " (OPEN)"
        29
   1AD3 0D                 3722 	.db 0x0d
   1AD4 00                 3723 	.db 0x00
   1AD5                    3724 ___str_43:
   1AD5 0D                 3725 	.db 0x0d
   1AD6 0A                 3726 	.db 0x0a
   1AD7 57 68 69 63 68 20  3727 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   1AF7 00                 3728 	.db 0x00
   1AF8                    3729 ___str_44:
   1AF8 20 25 63           3730 	.ascii " %c"
   1AFB 0D                 3731 	.db 0x0d
   1AFC 0A                 3732 	.db 0x0a
   1AFD 00                 3733 	.db 0x00
   1AFE                    3734 ___str_45:
   1AFE 50 61 73 73 77 6F  3735 	.ascii "Password? "
        72 64 3F 20
   1B08 00                 3736 	.db 0x00
   1B09                    3737 ___str_48:
   1B09 53 75 63 63 65 73  3738 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   1B2B 0D                 3739 	.db 0x0d
   1B2C 00                 3740 	.db 0x00
   1B2D                    3741 ___str_50:
   1B2D 45 72 72 6F 72 2C  3742 	.ascii "Error, AP not configured!"
        20 41 50 20 6E 6F
        74 20 63 6F 6E 66
        69 67 75 72 65 64
        21
   1B46 0D                 3743 	.db 0x0d
   1B47 00                 3744 	.db 0x00
   1B48                    3745 ___str_52:
   1B48 55 73 65 72 20 63  3746 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   1B63 0D                 3747 	.db 0x0d
   1B64 00                 3748 	.db 0x00
   1B65                    3749 ___str_54:
   1B65 53 63 61 6E 20 72  3750 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   1B7F 0D                 3751 	.db 0x0d
   1B80 00                 3752 	.db 0x00
   1B81                    3753 ___str_56:
   1B81 0D                 3754 	.db 0x0d
   1B82 53 63 61 6E 20 72  3755 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   1B9C 00                 3756 	.db 0x00
   1B9D                    3757 ___str_58:
   1B9D 0D                 3758 	.db 0x0d
   1B9E 4E 61 67 6C 65 20  3759 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   1BB7 00                 3760 	.db 0x00
   1BB8                    3761 ___str_60:
   1BB8 0D                 3762 	.db 0x0d
   1BB9 4E 61 67 6C 65 20  3763 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   1BDB 00                 3764 	.db 0x00
   1BDC                    3765 ___str_62:
   1BDC 0D                 3766 	.db 0x0d
   1BDD 52 65 71 75 65 73  3767 	.ascii "Requested to turn off WiFi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        46 69 20 52 61 64
        69 6F 2E 2E 2E
   1C00 00                 3768 	.db 0x00
   1C01                    3769 ___str_64:
   1C01 0D                 3770 	.db 0x0d
   1C02 52 65 71 75 65 73  3771 	.ascii "Request to turnoff WiFi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 46 69 20
        52 61 64 69 6F 20
        65 72 72 6F 72 21
   1C26 00                 3772 	.db 0x00
   1C27                    3773 ___str_66:
   1C27 0D                 3774 	.db 0x0d
   1C28 57 69 46 69 20 72  3775 	.ascii "WiFi radio on Time-out set successfully..."
        61 64 69 6F 20 6F
        6E 20 54 69 6D 65
        2D 6F 75 74 20 73
        65 74 20 73 75 63
        63 65 73 73 66 75
        6C 6C 79 2E 2E 2E
   1C52 00                 3776 	.db 0x00
   1C53                    3777 ___str_68:
   1C53 0D                 3778 	.db 0x0d
   1C54 45 72 72 6F 72 20  3779 	.ascii "Error setting WiFi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 46 69
        20 72 61 64 69 6F
        20 6F 6E 20 54 69
        6D 65 2D 6F 75 74
        21
   1C79 00                 3780 	.db 0x00
   1C7A                    3781 ___str_69:
   1C7A 46 69 6C 65 3A 20  3782 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   1C8C 0D                 3783 	.db 0x0d
   1C8D 0A                 3784 	.db 0x0a
   1C8E 00                 3785 	.db 0x00
   1C8F                    3786 ___str_71:
   1C8F 45 72 72 6F 72 20  3787 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   1CB9 0D                 3788 	.db 0x0d
   1CBA 00                 3789 	.db 0x00
   1CBB                    3790 ___str_73:
   1CBB 0D                 3791 	.db 0x0d
   1CBC 45 72 72 6F 72 20  3792 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   1CD1 0D                 3793 	.db 0x0d
   1CD2 00                 3794 	.db 0x00
   1CD3                    3795 ___str_75:
   1CD3 0D                 3796 	.db 0x0d
   1CD4 45 72 72 6F 72 20  3797 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   1CFD 0D                 3798 	.db 0x0d
   1CFE 00                 3799 	.db 0x00
   1CFF                    3800 ___str_76:
   1CFF 0D                 3801 	.db 0x0d
   1D00 45 72 72 6F 72 20  3802 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   1D1C 0A                 3803 	.db 0x0a
   1D1D 00                 3804 	.db 0x00
   1D1E                    3805 ___str_77:
   1D1E 45 72 72 6F 72 2C  3806 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   1D39 0D                 3807 	.db 0x0d
   1D3A 0A                 3808 	.db 0x0a
   1D3B 00                 3809 	.db 0x00
   1D3C                    3810 ___str_78:
   1D3C 45 72 72 6F 72 2C  3811 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   1D58 0D                 3812 	.db 0x0d
   1D59 0A                 3813 	.db 0x0a
   1D5A 00                 3814 	.db 0x00
   1D5B                    3815 ___str_79:
   1D5B 4F 6B 2C 20 75 70  3816 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   1D84 0D                 3817 	.db 0x0d
   1D85 0A                 3818 	.db 0x0a
   1D86 46 69 6C 65 20 70  3819 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1D93 0A                 3820 	.db 0x0a
   1D94 50 6C 65 61 73 65  3821 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1DC1 0D                 3822 	.db 0x0d
   1DC2 0A                 3823 	.db 0x0a
   1DC3 00                 3824 	.db 0x00
   1DC4                    3825 ___str_80:
   1DC4 4F 6B 2C 20 75 70  3826 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   1DF7 0D                 3827 	.db 0x0d
   1DF8 0A                 3828 	.db 0x0a
   1DF9 46 69 6C 65 20 70  3829 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   1E06 0A                 3830 	.db 0x0a
   1E07 50 6C 65 61 73 65  3831 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   1E34 0D                 3832 	.db 0x0d
   1E35 0A                 3833 	.db 0x0a
   1E36 00                 3834 	.db 0x00
   1E37                    3835 ___str_82:
   1E37 0D                 3836 	.db 0x0d
   1E38 53 75 63 63 65 73  3837 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   1E56 0D                 3838 	.db 0x0d
   1E57 00                 3839 	.db 0x00
   1E58                    3840 ___str_84:
   1E58 0D                 3841 	.db 0x0d
   1E59 53 75 63 63 65 73  3842 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   1E95 68 65 64 2E        3843 	.ascii "hed."
   1E99 0D                 3844 	.db 0x0d
   1E9A 00                 3845 	.db 0x00
   1E9B                    3846 ___str_86:
   1E9B 0D                 3847 	.db 0x0d
   1E9C 46 61 69 6C 65 64  3848 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   1EC2 0D                 3849 	.db 0x0d
   1EC3 00                 3850 	.db 0x00
   1EC4                    3851 ___str_88:
   1EC4 45 53 50 20 64 65  3852 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   1EDB 0D                 3853 	.db 0x0d
   1EDC 00                 3854 	.db 0x00
                           3855 	.area _CODE
                           3856 	.area _INITIALIZER
                           3857 	.area _CABS (ABS)
