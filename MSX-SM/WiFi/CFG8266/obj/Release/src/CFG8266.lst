                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 4.0.0 #11570 (MINGW64)
                              4 ;--------------------------------------------------------
                              5 	.module CFG8266
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _FinishUpdate
                             13 	.globl _WaitForRXData
                             14 	.globl _ultostr
                             15 	.globl _TxByte
                             16 	.globl _IsValidInput
                             17 	.globl _MyRead
                             18 	.globl _DosCall
                             19 	.globl _Close
                             20 	.globl _Open
                             21 	.globl _Inkey
                             22 	.globl _Cls
                             23 	.globl _Beep
                             24 	.globl _PrintChar
                             25 	.globl _InputString
                             26 	.globl _Print
                             27 	.globl _strlen
                             28 	.globl _atol
                             29 	.globl _atoi
                             30 	.globl _puts
                             31 	.globl _printf
                             32 	.globl _strAPSts
                             33 	.globl _uiTimeout
                             34 	.globl _ucSetTimeout
                             35 	.globl _ucRadioOff
                             36 	.globl _ucNagleOn
                             37 	.globl _ucNagleOff
                             38 	.globl _ucIsFw
                             39 	.globl _ucLocalUpdate
                             40 	.globl _lPort
                             41 	.globl _uiPort
                             42 	.globl _ucPort
                             43 	.globl _ucFile
                             44 	.globl _ucServer
                             45 	.globl _ucScan
                             46 	.globl _TickCount
                             47 	.globl _strUsage
                             48 	.globl _responseReady2
                             49 	.globl _radioOffResponse
                             50 	.globl _responseRadioOnTimeout
                             51 	.globl _responseOTASPIFF
                             52 	.globl _responseOTAFW
                             53 	.globl _responseWRBlock
                             54 	.globl _responseRSCERTUpdate
                             55 	.globl _responseRSFWUpdate
                             56 	.globl _apstsResponse
                             57 	.globl _apconfigurationResponse
                             58 	.globl _scanresResponse
                             59 	.globl _nagleoffResponse
                             60 	.globl _nagleonResponse
                             61 	.globl _scanresNoNetwork
                             62 	.globl _scanResponse
                             63 	.globl _responseOK
                             64 	.globl _certificateDone
                             65 	.globl _versionResponse
                             66 	.globl _endUpdate
                             67 	.globl _responseReady
                             68 	.globl _chFiller
                             69 ;--------------------------------------------------------
                             70 ; special function registers
                             71 ;--------------------------------------------------------
                     0006    72 _myPort6	=	0x0006
                     0007    73 _myPort7	=	0x0007
                             74 ;--------------------------------------------------------
                             75 ; ram data
                             76 ;--------------------------------------------------------
                             77 	.area _DATA
                     FC9E    78 _TickCount	=	0xfc9e
   0000                      79 _ucScan::
   0000                      80 	.ds 1
   0001                      81 _ucServer::
   0001                      82 	.ds 300
   012D                      83 _ucFile::
   012D                      84 	.ds 300
   0259                      85 _ucPort::
   0259                      86 	.ds 6
   025F                      87 _uiPort::
   025F                      88 	.ds 2
   0261                      89 _lPort::
   0261                      90 	.ds 4
   0265                      91 _ucLocalUpdate::
   0265                      92 	.ds 1
   0266                      93 _ucIsFw::
   0266                      94 	.ds 1
   0267                      95 _ucNagleOff::
   0267                      96 	.ds 1
   0268                      97 _ucNagleOn::
   0268                      98 	.ds 1
   0269                      99 _ucRadioOff::
   0269                     100 	.ds 1
   026A                     101 _ucSetTimeout::
   026A                     102 	.ds 1
   026B                     103 _uiTimeout::
   026B                     104 	.ds 2
                            105 ;--------------------------------------------------------
                            106 ; ram data
                            107 ;--------------------------------------------------------
                            108 	.area _INITIALIZED
   0000                     109 _strAPSts::
   0000                     110 	.ds 12
                            111 ;--------------------------------------------------------
                            112 ; absolute external ram data
                            113 ;--------------------------------------------------------
                            114 	.area _DABS (ABS)
                            115 ;--------------------------------------------------------
                            116 ; global & static initialisations
                            117 ;--------------------------------------------------------
                            118 	.area _HOME
                            119 	.area _GSINIT
                            120 	.area _GSFINAL
                            121 	.area _GSINIT
                            122 ;--------------------------------------------------------
                            123 ; Home
                            124 ;--------------------------------------------------------
                            125 	.area _HOME
                            126 	.area _HOME
                            127 ;--------------------------------------------------------
                            128 ; code
                            129 ;--------------------------------------------------------
                            130 	.area _CODE
                            131 ;src\CFG8266.c:47: unsigned int MyRead (int Handle, unsigned char* Buffer, unsigned int Size)
                            132 ;	---------------------------------
                            133 ; Function MyRead
                            134 ; ---------------------------------
   0000                     135 _MyRead::
   0000 CDr00r00      [17]  136 	call	___sdcc_enter_ix
   0003 21 F4 FF      [10]  137 	ld	hl, #-12
   0006 39            [11]  138 	add	hl, sp
   0007 F9            [ 6]  139 	ld	sp, hl
                            140 ;src\CFG8266.c:53: regs.Words.DE = (unsigned int) Buffer;
   0008 21 00 00      [10]  141 	ld	hl, #0
   000B 39            [11]  142 	add	hl, sp
   000C EB            [ 4]  143 	ex	de, hl
   000D 21 04 00      [10]  144 	ld	hl, #0x0004
   0010 19            [11]  145 	add	hl, de
   0011 DD 4E 06      [19]  146 	ld	c, 6 (ix)
   0014 DD 7E 07      [19]  147 	ld	a, 7 (ix)
   0017 71            [ 7]  148 	ld	(hl), c
   0018 23            [ 6]  149 	inc	hl
   0019 77            [ 7]  150 	ld	(hl), a
                            151 ;src\CFG8266.c:54: regs.Words.HL = Size;
   001A 21 06 00      [10]  152 	ld	hl, #0x0006
   001D 19            [11]  153 	add	hl, de
   001E DD 7E 08      [19]  154 	ld	a, 8 (ix)
   0021 77            [ 7]  155 	ld	(hl), a
   0022 23            [ 6]  156 	inc	hl
   0023 DD 7E 09      [19]  157 	ld	a, 9 (ix)
   0026 77            [ 7]  158 	ld	(hl), a
                            159 ;src\CFG8266.c:55: regs.Bytes.B = (unsigned char)(Handle&0xff);
   0027 21 03 00      [10]  160 	ld	hl, #3
   002A 39            [11]  161 	add	hl, sp
   002B DD 7E 04      [19]  162 	ld	a, 4 (ix)
   002E 77            [ 7]  163 	ld	(hl), a
                            164 ;src\CFG8266.c:56: DosCall(0x48, &regs, REGS_MAIN, REGS_MAIN);
   002F 21 00 00      [10]  165 	ld	hl, #0
   0032 39            [11]  166 	add	hl, sp
   0033 4D            [ 4]  167 	ld	c, l
   0034 44            [ 4]  168 	ld	b, h
   0035 59            [ 4]  169 	ld	e, c
   0036 50            [ 4]  170 	ld	d, b
   0037 C5            [11]  171 	push	bc
   0038 01 02 02      [10]  172 	ld	bc, #0x0202
   003B C5            [11]  173 	push	bc
   003C D5            [11]  174 	push	de
   003D 3E 48         [ 7]  175 	ld	a, #0x48
   003F F5            [11]  176 	push	af
   0040 33            [ 6]  177 	inc	sp
   0041 CDr00r00      [17]  178 	call	_DosCall
   0044 F1            [10]  179 	pop	af
   0045 F1            [10]  180 	pop	af
   0046 33            [ 6]  181 	inc	sp
   0047 C1            [10]  182 	pop	bc
                            183 ;src\CFG8266.c:57: if (regs.Bytes.A == 0)
   0048 69            [ 4]  184 	ld	l, c
   0049 60            [ 4]  185 	ld	h, b
   004A 23            [ 6]  186 	inc	hl
   004B 7E            [ 7]  187 	ld	a, (hl)
   004C B7            [ 4]  188 	or	a, a
   004D 20 0B         [12]  189 	jr	NZ,00102$
                            190 ;src\CFG8266.c:60: iRet = regs.Words.HL;
   004F 69            [ 4]  191 	ld	l, c
   0050 60            [ 4]  192 	ld	h, b
   0051 11 06 00      [10]  193 	ld	de, #0x0006
   0054 19            [11]  194 	add	hl, de
   0055 4E            [ 7]  195 	ld	c, (hl)
   0056 23            [ 6]  196 	inc	hl
   0057 46            [ 7]  197 	ld	b, (hl)
   0058 18 03         [12]  198 	jr	00103$
   005A                     199 00102$:
                            200 ;src\CFG8266.c:63: iRet = 0;
   005A 01 00 00      [10]  201 	ld	bc, #0x0000
   005D                     202 00103$:
                            203 ;src\CFG8266.c:65: return iRet;
   005D 69            [ 4]  204 	ld	l, c
   005E 60            [ 4]  205 	ld	h, b
                            206 ;src\CFG8266.c:66: }
   005F DD F9         [10]  207 	ld	sp, ix
   0061 DD E1         [14]  208 	pop	ix
   0063 C9            [10]  209 	ret
   0064                     210 _Done_Version:
   0064 4D 61 64 65 20 77   211 	.ascii "Made with FUSION-C 1.2 (ebsoft)"
        69 74 68 20 46 55
        53 49 4F 4E 2D 43
        20 31 2E 32 20 28
        65 62 73 6F 66 74
        29
   0083 00                  212 	.db 0x00
   0084                     213 _chFiller:
   0084 43                  214 	.db #0x43	; 67	'C'
   0085 46                  215 	.db #0x46	; 70	'F'
   0086 47                  216 	.db #0x47	; 71	'G'
   0087 38                  217 	.db #0x38	; 56	'8'
   0088 32                  218 	.db #0x32	; 50	'2'
   0089 36                  219 	.db #0x36	; 54	'6'
   008A 36                  220 	.db #0x36	; 54	'6'
   008B 20                  221 	.db #0x20	; 32
   008C 59                  222 	.db #0x59	; 89	'Y'
   008D 6F                  223 	.db #0x6f	; 111	'o'
   008E 75                  224 	.db #0x75	; 117	'u'
   008F 20                  225 	.db #0x20	; 32
   0090 68                  226 	.db #0x68	; 104	'h'
   0091 61                  227 	.db #0x61	; 97	'a'
   0092 76                  228 	.db #0x76	; 118	'v'
   0093 65                  229 	.db #0x65	; 101	'e'
   0094 20                  230 	.db #0x20	; 32
   0095 61                  231 	.db #0x61	; 97	'a'
   0096 20                  232 	.db #0x20	; 32
   0097 67                  233 	.db #0x67	; 103	'g'
   0098 6F                  234 	.db #0x6f	; 111	'o'
   0099 6F                  235 	.db #0x6f	; 111	'o'
   009A 64                  236 	.db #0x64	; 100	'd'
   009B 20                  237 	.db #0x20	; 32
   009C 74                  238 	.db #0x74	; 116	't'
   009D 69                  239 	.db #0x69	; 105	'i'
   009E 6D                  240 	.db #0x6d	; 109	'm'
   009F 65                  241 	.db #0x65	; 101	'e'
   00A0 20                  242 	.db #0x20	; 32
   00A1 72                  243 	.db #0x72	; 114	'r'
   00A2 65                  244 	.db #0x65	; 101	'e'
   00A3 61                  245 	.db #0x61	; 97	'a'
   00A4 64                  246 	.db #0x64	; 100	'd'
   00A5 69                  247 	.db #0x69	; 105	'i'
   00A6 6E                  248 	.db #0x6e	; 110	'n'
   00A7 67                  249 	.db #0x67	; 103	'g'
   00A8 20                  250 	.db #0x20	; 32
   00A9 74                  251 	.db #0x74	; 116	't'
   00AA 68                  252 	.db #0x68	; 104	'h'
   00AB 69                  253 	.db #0x69	; 105	'i'
   00AC 73                  254 	.db #0x73	; 115	's'
   00AD 20                  255 	.db #0x20	; 32
   00AE 74                  256 	.db #0x74	; 116	't'
   00AF 61                  257 	.db #0x61	; 97	'a'
   00B0 6C                  258 	.db #0x6c	; 108	'l'
   00B1 65                  259 	.db #0x65	; 101	'e'
   00B2 20                  260 	.db #0x20	; 32
   00B3 6F                  261 	.db #0x6f	; 111	'o'
   00B4 66                  262 	.db #0x66	; 102	'f'
   00B5 20                  263 	.db #0x20	; 32
   00B6 61                  264 	.db #0x61	; 97	'a'
   00B7 6E                  265 	.db #0x6e	; 110	'n'
   00B8 20                  266 	.db #0x20	; 32
   00B9 77                  267 	.db #0x77	; 119	'w'
   00BA 65                  268 	.db #0x65	; 101	'e'
   00BB 69                  269 	.db #0x69	; 105	'i'
   00BC 72                  270 	.db #0x72	; 114	'r'
   00BD 64                  271 	.db #0x64	; 100	'd'
   00BE 20                  272 	.db #0x20	; 32
   00BF 62                  273 	.db #0x62	; 98	'b'
   00C0 65                  274 	.db #0x65	; 101	'e'
   00C1 68                  275 	.db #0x68	; 104	'h'
   00C2 61                  276 	.db #0x61	; 97	'a'
   00C3 76                  277 	.db #0x76	; 118	'v'
   00C4 69                  278 	.db #0x69	; 105	'i'
   00C5 6F                  279 	.db #0x6f	; 111	'o'
   00C6 72                  280 	.db #0x72	; 114	'r'
   00C7 2C                  281 	.db #0x2c	; 44
   00C8 20                  282 	.db #0x20	; 32
   00C9 73                  283 	.db #0x73	; 115	's'
   00CA 69                  284 	.db #0x69	; 105	'i'
   00CB 74                  285 	.db #0x74	; 116	't'
   00CC 20                  286 	.db #0x20	; 32
   00CD 61                  287 	.db #0x61	; 97	'a'
   00CE 6E                  288 	.db #0x6e	; 110	'n'
   00CF 64                  289 	.db #0x64	; 100	'd'
   00D0 20                  290 	.db #0x20	; 32
   00D1 68                  291 	.db #0x68	; 104	'h'
   00D2 61                  292 	.db #0x61	; 97	'a'
   00D3 76                  293 	.db #0x76	; 118	'v'
   00D4 65                  294 	.db #0x65	; 101	'e'
   00D5 20                  295 	.db #0x20	; 32
   00D6 66                  296 	.db #0x66	; 102	'f'
   00D7 75                  297 	.db #0x75	; 117	'u'
   00D8 6E                  298 	.db #0x6e	; 110	'n'
   00D9 20                  299 	.db #0x20	; 32
   00DA 61                  300 	.db #0x61	; 97	'a'
   00DB 73                  301 	.db #0x73	; 115	's'
   00DC 20                  302 	.db #0x20	; 32
   00DD 74                  303 	.db #0x74	; 116	't'
   00DE 68                  304 	.db #0x68	; 104	'h'
   00DF 69                  305 	.db #0x69	; 105	'i'
   00E0 73                  306 	.db #0x73	; 115	's'
   00E1 20                  307 	.db #0x20	; 32
   00E2 69                  308 	.db #0x69	; 105	'i'
   00E3 73                  309 	.db #0x73	; 115	's'
   00E4 20                  310 	.db #0x20	; 32
   00E5 6F                  311 	.db #0x6f	; 111	'o'
   00E6 76                  312 	.db #0x76	; 118	'v'
   00E7 65                  313 	.db #0x65	; 101	'e'
   00E8 72                  314 	.db #0x72	; 114	'r'
   00E9 77                  315 	.db #0x77	; 119	'w'
   00EA 72                  316 	.db #0x72	; 114	'r'
   00EB 69                  317 	.db #0x69	; 105	'i'
   00EC 74                  318 	.db #0x74	; 116	't'
   00ED 74                  319 	.db #0x74	; 116	't'
   00EE 65                  320 	.db #0x65	; 101	'e'
   00EF 6E                  321 	.db #0x6e	; 110	'n'
   00F0 21                  322 	.db #0x21	; 33
   00F1 0D                  323 	.db #0x0d	; 13
   00F2 0A                  324 	.db #0x0a	; 10
   00F3 00                  325 	.db #0x00	; 0
   00F4 00                  326 	.db #0x00	; 0
   00F5 00                  327 	.db #0x00	; 0
   00F6 00                  328 	.db #0x00	; 0
   00F7 00                  329 	.db #0x00	; 0
   00F8 00                  330 	.db #0x00	; 0
   00F9 00                  331 	.db #0x00	; 0
   00FA 00                  332 	.db #0x00	; 0
   00FB 00                  333 	.db #0x00	; 0
   00FC 00                  334 	.db #0x00	; 0
   00FD 00                  335 	.db #0x00	; 0
   00FE 00                  336 	.db #0x00	; 0
   00FF 00                  337 	.db #0x00	; 0
   0100 00                  338 	.db #0x00	; 0
   0101 00                  339 	.db #0x00	; 0
   0102 00                  340 	.db #0x00	; 0
   0103 00                  341 	.db #0x00	; 0
   0104                     342 _responseReady:
   0104 52                  343 	.db #0x52	; 82	'R'
   0105 65                  344 	.db #0x65	; 101	'e'
   0106 61                  345 	.db #0x61	; 97	'a'
   0107 64                  346 	.db #0x64	; 100	'd'
   0108 79                  347 	.db #0x79	; 121	'y'
   0109 0D                  348 	.db #0x0d	; 13
   010A 0A                  349 	.db #0x0a	; 10
   010B                     350 _endUpdate:
   010B 45                  351 	.db #0x45	; 69	'E'
   010C 00                  352 	.db #0x00	; 0
   010D                     353 _versionResponse:
   010D 56                  354 	.db #0x56	; 86	'V'
   010E                     355 _certificateDone:
   010E 49                  356 	.db #0x49	; 73	'I'
   010F 00                  357 	.db #0x00	; 0
   0110                     358 _responseOK:
   0110 4F                  359 	.db #0x4f	; 79	'O'
   0111 4B                  360 	.db #0x4b	; 75	'K'
   0112                     361 _scanResponse:
   0112 53                  362 	.db #0x53	; 83	'S'
   0113 00                  363 	.db #0x00	; 0
   0114                     364 _scanresNoNetwork:
   0114 53                  365 	.db #0x53	; 83	'S'
   0115 02                  366 	.db #0x02	; 2
   0116                     367 _nagleonResponse:
   0116 44                  368 	.db #0x44	; 68	'D'
   0117 00                  369 	.db #0x00	; 0
   0118                     370 _nagleoffResponse:
   0118 4E                  371 	.db #0x4e	; 78	'N'
   0119 00                  372 	.db #0x00	; 0
   011A                     373 _scanresResponse:
   011A 73                  374 	.db #0x73	; 115	's'
   011B 00                  375 	.db #0x00	; 0
   011C                     376 _apconfigurationResponse:
   011C 41                  377 	.db #0x41	; 65	'A'
   011D 00                  378 	.db #0x00	; 0
   011E                     379 _apstsResponse:
   011E 67                  380 	.db #0x67	; 103	'g'
   011F 00                  381 	.db #0x00	; 0
   0120 00                  382 	.db #0x00	; 0
   0121                     383 _responseRSFWUpdate:
   0121 5A                  384 	.db #0x5a	; 90	'Z'
   0122 00                  385 	.db #0x00	; 0
   0123                     386 _responseRSCERTUpdate:
   0123 59                  387 	.db #0x59	; 89	'Y'
   0124 00                  388 	.db #0x00	; 0
   0125                     389 _responseWRBlock:
   0125 7A                  390 	.db #0x7a	; 122	'z'
   0126 00                  391 	.db #0x00	; 0
   0127                     392 _responseOTAFW:
   0127 55                  393 	.db #0x55	; 85	'U'
   0128 00                  394 	.db #0x00	; 0
   0129                     395 _responseOTASPIFF:
   0129 75                  396 	.db #0x75	; 117	'u'
   012A 00                  397 	.db #0x00	; 0
   012B                     398 _responseRadioOnTimeout:
   012B 54                  399 	.db #0x54	; 84	'T'
   012C 00                  400 	.db #0x00	; 0
   012D                     401 _radioOffResponse:
   012D 4F                  402 	.db #0x4f	; 79	'O'
   012E 00                  403 	.db #0x00	; 0
   012F                     404 _responseReady2:
   012F 52                  405 	.db #0x52	; 82	'R'
   0130 65                  406 	.db #0x65	; 101	'e'
   0131 61                  407 	.db #0x61	; 97	'a'
   0132 64                  408 	.db #0x64	; 100	'd'
   0133 79                  409 	.db #0x79	; 121	'y'
   0134 0D                  410 	.db #0x0d	; 13
   0135 0A                  411 	.db #0x0a	; 10
   0136                     412 _strUsage:
   0136 55 73 61 67 65 3A   413 	.ascii "Usage: CFG8266 /s to scan networks and choose one to connect"
        20 43 46 47 38 32
        36 36 20 2F 73 20
        74 6F 20 73 63 61
        6E 20 6E 65 74 77
        6F 72 6B 73 20 61
        6E 64 20 63 68 6F
        6F 73 65 20 6F 6E
        65 20 74 6F 20 63
        6F 6E 6E 65 63 74
   0172 0D                  414 	.db 0x0d
   0173 0A                  415 	.db 0x0a
   0174 0A                  416 	.db 0x0a
   0175 20 20 20 20 20 20   417 	.ascii "       CFG8266 /n to turn off Nagle Algorithm (default) or /"
        20 43 46 47 38 32
        36 36 20 2F 6E 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        4E 61 67 6C 65 20
        41 6C 67 6F 72 69
        74 68 6D 20 28 64
        65 66 61 75 6C 74
        29 20 6F 72 20 2F
   01B1 6D 20 74 6F 20 74   418 	.ascii "m to turn it on"
        75 72 6E 20 69 74
        20 6F 6E
   01C0 0D                  419 	.db 0x0d
   01C1 0A                  420 	.db 0x0a
   01C2 0A                  421 	.db 0x0a
   01C3 20 20 20 20 20 20   422 	.ascii "       CFG8266 /o to turn off radio now if no connections ar"
        20 43 46 47 38 32
        36 36 20 2F 6F 20
        74 6F 20 74 75 72
        6E 20 6F 66 66 20
        72 61 64 69 6F 20
        6E 6F 77 20 69 66
        20 6E 6F 20 63 6F
        6E 6E 65 63 74 69
        6F 6E 73 20 61 72
   01FF 65 20 6F 70 65 6E   423 	.ascii "e open"
   0205 0D                  424 	.db 0x0d
   0206 0A                  425 	.db 0x0a
   0207 0A                  426 	.db 0x0a
   0208 20 20 20 20 20 20   427 	.ascii "       CFG8266 CERTFILE /c to update ESP8266 firmware locall"
        20 43 46 47 38 32
        36 36 20 43 45 52
        54 46 49 4C 45 20
        2F 63 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
        6D 77 61 72 65 20
        6C 6F 63 61 6C 6C
   0244 79                  428 	.ascii "y"
   0245 0D                  429 	.db 0x0d
   0246 0A                  430 	.db 0x0a
   0247 0A                  431 	.db 0x0a
   0248 20 20 20 20 20 20   432 	.ascii "       CFG8266 FWFILE to update ESP8266 firmware locally"
        20 43 46 47 38 32
        36 36 20 46 57 46
        49 4C 45 20 74 6F
        20 75 70 64 61 74
        65 20 45 53 50 38
        32 36 36 20 66 69
        72 6D 77 61 72 65
        20 6C 6F 63 61 6C
        6C 79
   0280 0D                  433 	.db 0x0d
   0281 0A                  434 	.db 0x0a
   0282 0A                  435 	.db 0x0a
   0283 20 20 20 20 20 20   436 	.ascii "       CFG8266 /u SERVER PORT FILEPATH to update ESP8266 fir"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 45 53 50 38 32
        36 36 20 66 69 72
   02BF 6D 77 61 72 65 20   437 	.ascii "mware remotely"
        72 65 6D 6F 74 65
        6C 79
   02CD 0D                  438 	.db 0x0d
   02CE 0A                  439 	.db 0x0a
   02CF 0A                  440 	.db 0x0a
   02D0 20 20 20 20 20 20   441 	.ascii "       CFG8266 /c SERVER PORT FILEPATH to update TLS certifi"
        20 43 46 47 38 32
        36 36 20 2F 63 20
        53 45 52 56 45 52
        20 50 4F 52 54 20
        46 49 4C 45 50 41
        54 48 20 74 6F 20
        75 70 64 61 74 65
        20 54 4C 53 20 63
        65 72 74 69 66 69
   030C 63 61 74 65 73 20   442 	.ascii "cates remotely"
        72 65 6D 6F 74 65
        6C 79
   031A 0D                  443 	.db 0x0d
   031B 0A                  444 	.db 0x0a
   031C 20 20 20 20 20 20   445 	.ascii "       CFG8266 /t TIM to change the inactivity time in secon"
        20 43 46 47 38 32
        36 36 20 2F 74 20
        54 49 4D 20 74 6F
        20 63 68 61 6E 67
        65 20 74 68 65 20
        69 6E 61 63 74 69
        76 69 74 79 20 74
        69 6D 65 20 69 6E
        20 73 65 63 6F 6E
   0358 64 73 20 74 6F 20   446 	.ascii "ds to disable radio               0-600 (0 means never disab"
        64 69 73 61 62 6C
        65 20 72 61 64 69
        6F 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 30 2D
        36 30 30 20 28 30
        20 6D 65 61 6E 73
        20 6E 65 76 65 72
        20 64 69 73 61 62
   0394 6C 65 29            447 	.ascii "le)"
   0397 0D                  448 	.db 0x0d
   0398 0A                  449 	.db 0x0a
   0399 45 78 2E 3A 20 20   450 	.ascii "Ex.:   CFG8266 /u 192.168.31.1 80 /fw/fw.bin"
        20 43 46 47 38 32
        36 36 20 2F 75 20
        31 39 32 2E 31 36
        38 2E 33 31 2E 31
        20 38 30 20 2F 66
        77 2F 66 77 2E 62
        69 6E
   03C5 00                  451 	.db 0x00
                            452 ;src\CFG8266.c:69: unsigned int IsValidInput (char**argv, int argc)
                            453 ;	---------------------------------
                            454 ; Function IsValidInput
                            455 ; ---------------------------------
   03C6                     456 _IsValidInput::
   03C6 CDr00r00      [17]  457 	call	___sdcc_enter_ix
   03C9 F5            [11]  458 	push	af
   03CA F5            [11]  459 	push	af
   03CB F5            [11]  460 	push	af
   03CC F5            [11]  461 	push	af
                            462 ;src\CFG8266.c:71: unsigned int ret = 1;
   03CD 01 01 00      [10]  463 	ld	bc, #0x0001
                            464 ;src\CFG8266.c:72: unsigned char * Input = (unsigned char*)argv[0];
   03D0 DD 7E 04      [19]  465 	ld	a, 4 (ix)
   03D3 DD 77 F8      [19]  466 	ld	-8 (ix), a
   03D6 DD 7E 05      [19]  467 	ld	a, 5 (ix)
   03D9 DD 77 F9      [19]  468 	ld	-7 (ix), a
   03DC E1            [10]  469 	pop	hl
   03DD E5            [11]  470 	push	hl
   03DE 7E            [ 7]  471 	ld	a, (hl)
   03DF DD 77 FD      [19]  472 	ld	-3 (ix), a
   03E2 23            [ 6]  473 	inc	hl
   03E3 7E            [ 7]  474 	ld	a, (hl)
   03E4 DD 77 FE      [19]  475 	ld	-2 (ix), a
                            476 ;src\CFG8266.c:74: ucScan = 0;
   03E7 21r00r00      [10]  477 	ld	hl,#_ucScan + 0
   03EA 36 00         [10]  478 	ld	(hl), #0x00
                            479 ;src\CFG8266.c:76: if (argc)
   03EC DD 7E 07      [19]  480 	ld	a, 7 (ix)
   03EF DD B6 06      [19]  481 	or	a, 6 (ix)
   03F2 CAr7Fr06      [10]  482 	jp	Z, 00162$
                            483 ;src\CFG8266.c:78: if ((argc==1)||(argc==2)||(argc==4))
   03F5 DD 7E 06      [19]  484 	ld	a, 6 (ix)
   03F8 3D            [ 4]  485 	dec	a
   03F9 DD B6 07      [19]  486 	or	a, 7 (ix)
   03FC 3E 01         [ 7]  487 	ld	a, #0x01
   03FE 28 01         [12]  488 	jr	Z,00287$
   0400 AF            [ 4]  489 	xor	a, a
   0401                     490 00287$:
   0401 DD 77 FF      [19]  491 	ld	-1 (ix), a
   0404 DD 7E 06      [19]  492 	ld	a, 6 (ix)
   0407 D6 02         [ 7]  493 	sub	a, #0x02
   0409 DD B6 07      [19]  494 	or	a, 7 (ix)
   040C 3E 01         [ 7]  495 	ld	a, #0x01
   040E 28 01         [12]  496 	jr	Z,00289$
   0410 AF            [ 4]  497 	xor	a, a
   0411                     498 00289$:
   0411 57            [ 4]  499 	ld	d, a
   0412 DD 7E FF      [19]  500 	ld	a, -1 (ix)
   0415 B7            [ 4]  501 	or	a,a
   0416 20 0E         [12]  502 	jr	NZ,00156$
   0418 B2            [ 4]  503 	or	a,d
   0419 20 0B         [12]  504 	jr	NZ,00156$
   041B DD 7E 06      [19]  505 	ld	a, 6 (ix)
   041E D6 04         [ 7]  506 	sub	a, #0x04
   0420 DD B6 07      [19]  507 	or	a, 7 (ix)
   0423 C2r7Ar06      [10]  508 	jp	NZ,00157$
   0426                     509 00156$:
                            510 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0426 DD 6E FD      [19]  511 	ld	l, -3 (ix)
   0429 DD 66 FE      [19]  512 	ld	h, -2 (ix)
   042C 5E            [ 7]  513 	ld	e, (hl)
   042D DD 6E FD      [19]  514 	ld	l, -3 (ix)
   0430 DD 66 FE      [19]  515 	ld	h, -2 (ix)
   0433 23            [ 6]  516 	inc	hl
                            517 ;src\CFG8266.c:93: Input = (unsigned char*)argv[1];
   0434 DD 7E F8      [19]  518 	ld	a, -8 (ix)
   0437 C6 02         [ 7]  519 	add	a, #0x02
   0439 DD 77 FA      [19]  520 	ld	-6 (ix), a
   043C DD 7E F9      [19]  521 	ld	a, -7 (ix)
   043F CE 00         [ 7]  522 	adc	a, #0x00
   0441 DD 77 FB      [19]  523 	ld	-5 (ix), a
                            524 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0444 7B            [ 4]  525 	ld	a, e
   0445 D6 2F         [ 7]  526 	sub	a, #0x2f
   0447 3E 01         [ 7]  527 	ld	a, #0x01
   0449 28 01         [12]  528 	jr	Z,00293$
   044B AF            [ 4]  529 	xor	a, a
   044C                     530 00293$:
   044C 5F            [ 4]  531 	ld	e, a
                            532 ;src\CFG8266.c:80: if ((argc==1)||(argc==2))
   044D DD 7E FF      [19]  533 	ld	a, -1 (ix)
   0450 B7            [ 4]  534 	or	a,a
   0451 20 04         [12]  535 	jr	NZ,00152$
   0453 B2            [ 4]  536 	or	a,d
   0454 CAr35r05      [10]  537 	jp	Z, 00153$
   0457                     538 00152$:
                            539 ;src\CFG8266.c:82: if ((Input[0]=='/')&&((Input[1]=='s')||(Input[1]=='S')))
   0457 7B            [ 4]  540 	ld	a, e
   0458 B7            [ 4]  541 	or	a, a
   0459 28 11         [12]  542 	jr	Z,00132$
   045B 7E            [ 7]  543 	ld	a, (hl)
   045C FE 73         [ 7]  544 	cp	a, #0x73
   045E 28 04         [12]  545 	jr	Z,00131$
   0460 D6 53         [ 7]  546 	sub	a, #0x53
   0462 20 08         [12]  547 	jr	NZ,00132$
   0464                     548 00131$:
                            549 ;src\CFG8266.c:83: ucScan = 1;
   0464 21r00r00      [10]  550 	ld	hl,#_ucScan + 0
   0467 36 01         [10]  551 	ld	(hl), #0x01
   0469 C3r82r06      [10]  552 	jp	00163$
   046C                     553 00132$:
                            554 ;src\CFG8266.c:84: else if ((Input[0]=='/')&&((Input[1]=='n')||(Input[1]=='N')))
   046C 7B            [ 4]  555 	ld	a, e
   046D B7            [ 4]  556 	or	a, a
   046E 28 11         [12]  557 	jr	Z,00127$
   0470 7E            [ 7]  558 	ld	a, (hl)
   0471 FE 6E         [ 7]  559 	cp	a, #0x6e
   0473 28 04         [12]  560 	jr	Z,00126$
   0475 D6 4E         [ 7]  561 	sub	a, #0x4e
   0477 20 08         [12]  562 	jr	NZ,00127$
   0479                     563 00126$:
                            564 ;src\CFG8266.c:85: ucNagleOff = 1;
   0479 21r67r02      [10]  565 	ld	hl,#_ucNagleOff + 0
   047C 36 01         [10]  566 	ld	(hl), #0x01
   047E C3r82r06      [10]  567 	jp	00163$
   0481                     568 00127$:
                            569 ;src\CFG8266.c:86: else if ((Input[0]=='/')&&((Input[1]=='m')||(Input[1]=='M')))
   0481 7B            [ 4]  570 	ld	a, e
   0482 B7            [ 4]  571 	or	a, a
   0483 28 11         [12]  572 	jr	Z,00122$
   0485 7E            [ 7]  573 	ld	a, (hl)
   0486 FE 6D         [ 7]  574 	cp	a, #0x6d
   0488 28 04         [12]  575 	jr	Z,00121$
   048A D6 4D         [ 7]  576 	sub	a, #0x4d
   048C 20 08         [12]  577 	jr	NZ,00122$
   048E                     578 00121$:
                            579 ;src\CFG8266.c:87: ucNagleOn = 1;
   048E 21r68r02      [10]  580 	ld	hl,#_ucNagleOn + 0
   0491 36 01         [10]  581 	ld	(hl), #0x01
   0493 C3r82r06      [10]  582 	jp	00163$
   0496                     583 00122$:
                            584 ;src\CFG8266.c:88: else if ((Input[0]=='/')&&((Input[1]=='o')||(Input[1]=='O')))
   0496 7B            [ 4]  585 	ld	a, e
   0497 B7            [ 4]  586 	or	a, a
   0498 28 11         [12]  587 	jr	Z,00117$
   049A 7E            [ 7]  588 	ld	a, (hl)
   049B FE 6F         [ 7]  589 	cp	a, #0x6f
   049D 28 04         [12]  590 	jr	Z,00116$
   049F D6 4F         [ 7]  591 	sub	a, #0x4f
   04A1 20 08         [12]  592 	jr	NZ,00117$
   04A3                     593 00116$:
                            594 ;src\CFG8266.c:89: ucRadioOff = 1;
   04A3 21r69r02      [10]  595 	ld	hl,#_ucRadioOff + 0
   04A6 36 01         [10]  596 	ld	(hl), #0x01
   04A8 C3r82r06      [10]  597 	jp	00163$
   04AB                     598 00117$:
                            599 ;src\CFG8266.c:90: else if ((Input[0]=='/')&&((Input[1]=='t')||(Input[1]=='T')))
   04AB 7B            [ 4]  600 	ld	a, e
   04AC B7            [ 4]  601 	or	a, a
   04AD 28 3B         [12]  602 	jr	Z,00112$
   04AF 7E            [ 7]  603 	ld	a, (hl)
   04B0 FE 74         [ 7]  604 	cp	a, #0x74
   04B2 28 04         [12]  605 	jr	Z,00111$
   04B4 D6 54         [ 7]  606 	sub	a, #0x54
   04B6 20 32         [12]  607 	jr	NZ,00112$
   04B8                     608 00111$:
                            609 ;src\CFG8266.c:92: ucSetTimeout = 1;
   04B8 21r6Ar02      [10]  610 	ld	hl,#_ucSetTimeout + 0
   04BB 36 01         [10]  611 	ld	(hl), #0x01
                            612 ;src\CFG8266.c:93: Input = (unsigned char*)argv[1];
   04BD DD 6E FA      [19]  613 	ld	l, -6 (ix)
   04C0 DD 66 FB      [19]  614 	ld	h, -5 (ix)
   04C3 5E            [ 7]  615 	ld	e, (hl)
   04C4 23            [ 6]  616 	inc	hl
   04C5 56            [ 7]  617 	ld	d, (hl)
                            618 ;src\CFG8266.c:94: uiTimeout = atoi (Input);
   04C6 C5            [11]  619 	push	bc
   04C7 D5            [11]  620 	push	de
   04C8 CDr00r00      [17]  621 	call	_atoi
   04CB F1            [10]  622 	pop	af
   04CC C1            [10]  623 	pop	bc
   04CD 22r6Br02      [16]  624 	ld	(_uiTimeout), hl
                            625 ;src\CFG8266.c:95: if (uiTimeout > 600)
   04D0 3E 58         [ 7]  626 	ld	a, #0x58
   04D2 FD 21r6Br02   [14]  627 	ld	iy, #_uiTimeout
   04D6 FD BE 00      [19]  628 	cp	a, 0 (iy)
   04D9 3E 02         [ 7]  629 	ld	a, #0x02
   04DB FD 9E 01      [19]  630 	sbc	a, 1 (iy)
   04DE D2r82r06      [10]  631 	jp	NC, 00163$
                            632 ;src\CFG8266.c:96: uiTimeout = 600;
   04E1 21 58 02      [10]  633 	ld	hl, #0x0258
   04E4 22r6Br02      [16]  634 	ld	(_uiTimeout), hl
   04E7 C3r82r06      [10]  635 	jp	00163$
   04EA                     636 00112$:
                            637 ;src\CFG8266.c:100: strcpy (ucFile,Input);
   04EA C5            [11]  638 	push	bc
   04EB D5            [11]  639 	push	de
   04EC 11r2Dr01      [10]  640 	ld	de, #_ucFile
   04EF DD 6E FD      [19]  641 	ld	l, -3 (ix)
   04F2 DD 66 FE      [19]  642 	ld	h, -2 (ix)
   04F5 AF            [ 4]  643 	xor	a, a
   04F6                     644 00309$:
   04F6 BE            [ 7]  645 	cp	a, (hl)
   04F7 ED A0         [16]  646 	ldi
   04F9 20 FB         [12]  647 	jr	NZ, 00309$
   04FB D1            [10]  648 	pop	de
   04FC C1            [10]  649 	pop	bc
                            650 ;src\CFG8266.c:101: ucLocalUpdate = 1;
   04FD 21r65r02      [10]  651 	ld	hl,#_ucLocalUpdate + 0
   0500 36 01         [10]  652 	ld	(hl), #0x01
                            653 ;src\CFG8266.c:102: if (argc==2)
   0502 7A            [ 4]  654 	ld	a, d
   0503 B7            [ 4]  655 	or	a, a
   0504 28 27         [12]  656 	jr	Z,00109$
                            657 ;src\CFG8266.c:104: Input = (unsigned char*)argv[1];
   0506 DD 6E FA      [19]  658 	ld	l, -6 (ix)
   0509 DD 66 FB      [19]  659 	ld	h, -5 (ix)
   050C 5E            [ 7]  660 	ld	e, (hl)
   050D 23            [ 6]  661 	inc	hl
   050E 56            [ 7]  662 	ld	d, (hl)
                            663 ;src\CFG8266.c:105: if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   050F 1A            [ 7]  664 	ld	a, (de)
   0510 D6 2F         [ 7]  665 	sub	a, #0x2f
   0512 20 13         [12]  666 	jr	NZ,00104$
   0514 EB            [ 4]  667 	ex	de,hl
   0515 23            [ 6]  668 	inc	hl
   0516 7E            [ 7]  669 	ld	a, (hl)
   0517 FE 63         [ 7]  670 	cp	a, #0x63
   0519 28 04         [12]  671 	jr	Z,00103$
   051B D6 43         [ 7]  672 	sub	a, #0x43
   051D 20 08         [12]  673 	jr	NZ,00104$
   051F                     674 00103$:
                            675 ;src\CFG8266.c:106: ucIsFw=0;
   051F 21r66r02      [10]  676 	ld	hl,#_ucIsFw + 0
   0522 36 00         [10]  677 	ld	(hl), #0x00
   0524 C3r82r06      [10]  678 	jp	00163$
   0527                     679 00104$:
                            680 ;src\CFG8266.c:108: ret=0;
   0527 01 00 00      [10]  681 	ld	bc, #0x0000
   052A C3r82r06      [10]  682 	jp	00163$
   052D                     683 00109$:
                            684 ;src\CFG8266.c:112: ucIsFw=1;
   052D 21r66r02      [10]  685 	ld	hl,#_ucIsFw + 0
   0530 36 01         [10]  686 	ld	(hl), #0x01
   0532 C3r82r06      [10]  687 	jp	00163$
   0535                     688 00153$:
                            689 ;src\CFG8266.c:120: Input = (unsigned char*)argv[2];
   0535 DD 7E F8      [19]  690 	ld	a, -8 (ix)
   0538 C6 04         [ 7]  691 	add	a, #0x04
   053A DD 77 FC      [19]  692 	ld	-4 (ix), a
   053D DD 7E F9      [19]  693 	ld	a, -7 (ix)
   0540 CE 00         [ 7]  694 	adc	a, #0x00
   0542 DD 77 FD      [19]  695 	ld	-3 (ix), a
                            696 ;src\CFG8266.c:126: Input = (unsigned char*)argv[3];
   0545 DD 7E F8      [19]  697 	ld	a, -8 (ix)
   0548 C6 06         [ 7]  698 	add	a, #0x06
   054A DD 77 FE      [19]  699 	ld	-2 (ix), a
   054D DD 7E F9      [19]  700 	ld	a, -7 (ix)
   0550 CE 00         [ 7]  701 	adc	a, #0x00
   0552 DD 77 FF      [19]  702 	ld	-1 (ix), a
                            703 ;src\CFG8266.c:117: if ((Input[0]=='/')&&((Input[1]=='u')||(Input[1]=='U')))
   0555 7B            [ 4]  704 	ld	a, e
   0556 B7            [ 4]  705 	or	a, a
   0557 CArE6r05      [10]  706 	jp	Z, 00148$
   055A 7E            [ 7]  707 	ld	a, (hl)
   055B FE 75         [ 7]  708 	cp	a, #0x75
   055D 28 05         [12]  709 	jr	Z,00147$
   055F D6 55         [ 7]  710 	sub	a, #0x55
   0561 C2rE6r05      [10]  711 	jp	NZ,00148$
   0564                     712 00147$:
                            713 ;src\CFG8266.c:119: ucIsFw = 1;
   0564 21r66r02      [10]  714 	ld	hl,#_ucIsFw + 0
   0567 36 01         [10]  715 	ld	(hl), #0x01
                            716 ;src\CFG8266.c:120: Input = (unsigned char*)argv[2];
   0569 DD 6E FC      [19]  717 	ld	l, -4 (ix)
   056C DD 66 FD      [19]  718 	ld	h, -3 (ix)
   056F 5E            [ 7]  719 	ld	e, (hl)
   0570 23            [ 6]  720 	inc	hl
   0571 56            [ 7]  721 	ld	d, (hl)
                            722 ;src\CFG8266.c:121: if (strlen (Input)<7)
   0572 C5            [11]  723 	push	bc
   0573 D5            [11]  724 	push	de
   0574 CDr00r00      [17]  725 	call	_strlen
   0577 F1            [10]  726 	pop	af
   0578 C1            [10]  727 	pop	bc
   0579 7D            [ 4]  728 	ld	a, l
   057A D6 07         [ 7]  729 	sub	a, #0x07
   057C 7C            [ 4]  730 	ld	a, h
   057D DE 00         [ 7]  731 	sbc	a, #0x00
   057F 30 5F         [12]  732 	jr	NC,00137$
                            733 ;src\CFG8266.c:123: strcpy(ucPort,Input);
   0581 21r59r02      [10]  734 	ld	hl, #_ucPort
   0584 C5            [11]  735 	push	bc
   0585 EB            [ 4]  736 	ex	de, hl
   0586 AF            [ 4]  737 	xor	a, a
   0587                     738 00318$:
   0587 BE            [ 7]  739 	cp	a, (hl)
   0588 ED A0         [16]  740 	ldi
   058A 20 FB         [12]  741 	jr	NZ, 00318$
   058C C1            [10]  742 	pop	bc
                            743 ;src\CFG8266.c:124: Input = (unsigned char*)argv[1];
   058D DD 6E FA      [19]  744 	ld	l, -6 (ix)
   0590 DD 66 FB      [19]  745 	ld	h, -5 (ix)
   0593 5E            [ 7]  746 	ld	e, (hl)
   0594 23            [ 6]  747 	inc	hl
   0595 56            [ 7]  748 	ld	d, (hl)
                            749 ;src\CFG8266.c:125: strcpy(ucServer,Input);
   0596 21r01r00      [10]  750 	ld	hl, #_ucServer+0
   0599 C5            [11]  751 	push	bc
   059A EB            [ 4]  752 	ex	de, hl
   059B AF            [ 4]  753 	xor	a, a
   059C                     754 00319$:
   059C BE            [ 7]  755 	cp	a, (hl)
   059D ED A0         [16]  756 	ldi
   059F 20 FB         [12]  757 	jr	NZ, 00319$
   05A1 C1            [10]  758 	pop	bc
                            759 ;src\CFG8266.c:126: Input = (unsigned char*)argv[3];
   05A2 DD 6E FE      [19]  760 	ld	l, -2 (ix)
   05A5 DD 66 FF      [19]  761 	ld	h, -1 (ix)
   05A8 5E            [ 7]  762 	ld	e, (hl)
   05A9 23            [ 6]  763 	inc	hl
   05AA 56            [ 7]  764 	ld	d, (hl)
                            765 ;src\CFG8266.c:127: strcpy(ucFile,Input);
   05AB 21r2Dr01      [10]  766 	ld	hl, #_ucFile+0
   05AE C5            [11]  767 	push	bc
   05AF EB            [ 4]  768 	ex	de, hl
   05B0 AF            [ 4]  769 	xor	a, a
   05B1                     770 00320$:
   05B1 BE            [ 7]  771 	cp	a, (hl)
   05B2 ED A0         [16]  772 	ldi
   05B4 20 FB         [12]  773 	jr	NZ, 00320$
   05B6 21r59r02      [10]  774 	ld	hl, #_ucPort
   05B9 E5            [11]  775 	push	hl
   05BA CDr00r00      [17]  776 	call	_atol
   05BD F1            [10]  777 	pop	af
   05BE DD 75 FC      [19]  778 	ld	-4 (ix), l
   05C1 DD 74 FD      [19]  779 	ld	-3 (ix), h
   05C4 DD 73 FE      [19]  780 	ld	-2 (ix), e
   05C7 DD 72 FF      [19]  781 	ld	-1 (ix), d
   05CA 11r61r02      [10]  782 	ld	de, #_lPort
   05CD 21 06 00      [10]  783 	ld	hl, #6
   05D0 39            [11]  784 	add	hl, sp
   05D1 01 04 00      [10]  785 	ld	bc, #4
   05D4 ED B0         [21]  786 	ldir
   05D6 C1            [10]  787 	pop	bc
                            788 ;src\CFG8266.c:129: uiPort = (lPort&0xffff);
   05D7 2Ar61r02      [16]  789 	ld	hl, (_lPort)
   05DA 22r5Fr02      [16]  790 	ld	(_uiPort), hl
   05DD C3r82r06      [10]  791 	jp	00163$
   05E0                     792 00137$:
                            793 ;src\CFG8266.c:132: ret = 0;
   05E0 01 00 00      [10]  794 	ld	bc, #0x0000
   05E3 C3r82r06      [10]  795 	jp	00163$
   05E6                     796 00148$:
                            797 ;src\CFG8266.c:134: else if ((Input[0]=='/')&&((Input[1]=='c')||(Input[1]=='C')))
   05E6 7B            [ 4]  798 	ld	a, e
   05E7 B7            [ 4]  799 	or	a, a
   05E8 CAr75r06      [10]  800 	jp	Z, 00143$
   05EB 7E            [ 7]  801 	ld	a, (hl)
   05EC FE 63         [ 7]  802 	cp	a, #0x63
   05EE 28 05         [12]  803 	jr	Z,00142$
   05F0 D6 43         [ 7]  804 	sub	a, #0x43
   05F2 C2r75r06      [10]  805 	jp	NZ,00143$
   05F5                     806 00142$:
                            807 ;src\CFG8266.c:136: ucIsFw = 0;
   05F5 21r66r02      [10]  808 	ld	hl,#_ucIsFw + 0
   05F8 36 00         [10]  809 	ld	(hl), #0x00
                            810 ;src\CFG8266.c:137: Input = (unsigned char*)argv[2];
   05FA DD 6E FC      [19]  811 	ld	l, -4 (ix)
   05FD DD 66 FD      [19]  812 	ld	h, -3 (ix)
   0600 5E            [ 7]  813 	ld	e, (hl)
   0601 23            [ 6]  814 	inc	hl
   0602 56            [ 7]  815 	ld	d, (hl)
                            816 ;src\CFG8266.c:138: if (strlen (Input)<7)
   0603 C5            [11]  817 	push	bc
   0604 D5            [11]  818 	push	de
   0605 CDr00r00      [17]  819 	call	_strlen
   0608 F1            [10]  820 	pop	af
   0609 C1            [10]  821 	pop	bc
   060A 7D            [ 4]  822 	ld	a, l
   060B D6 07         [ 7]  823 	sub	a, #0x07
   060D 7C            [ 4]  824 	ld	a, h
   060E DE 00         [ 7]  825 	sbc	a, #0x00
   0610 30 5E         [12]  826 	jr	NC,00140$
                            827 ;src\CFG8266.c:140: strcpy(ucPort,Input);
   0612 21r59r02      [10]  828 	ld	hl, #_ucPort
   0615 C5            [11]  829 	push	bc
   0616 EB            [ 4]  830 	ex	de, hl
   0617 AF            [ 4]  831 	xor	a, a
   0618                     832 00324$:
   0618 BE            [ 7]  833 	cp	a, (hl)
   0619 ED A0         [16]  834 	ldi
   061B 20 FB         [12]  835 	jr	NZ, 00324$
   061D C1            [10]  836 	pop	bc
                            837 ;src\CFG8266.c:141: Input = (unsigned char*)argv[1];
   061E DD 6E FA      [19]  838 	ld	l, -6 (ix)
   0621 DD 66 FB      [19]  839 	ld	h, -5 (ix)
   0624 5E            [ 7]  840 	ld	e, (hl)
   0625 23            [ 6]  841 	inc	hl
   0626 56            [ 7]  842 	ld	d, (hl)
                            843 ;src\CFG8266.c:142: strcpy(ucServer,Input);
   0627 21r01r00      [10]  844 	ld	hl, #_ucServer+0
   062A C5            [11]  845 	push	bc
   062B EB            [ 4]  846 	ex	de, hl
   062C AF            [ 4]  847 	xor	a, a
   062D                     848 00325$:
   062D BE            [ 7]  849 	cp	a, (hl)
   062E ED A0         [16]  850 	ldi
   0630 20 FB         [12]  851 	jr	NZ, 00325$
   0632 C1            [10]  852 	pop	bc
                            853 ;src\CFG8266.c:143: Input = (unsigned char*)argv[3];
   0633 DD 6E FE      [19]  854 	ld	l, -2 (ix)
   0636 DD 66 FF      [19]  855 	ld	h, -1 (ix)
   0639 5E            [ 7]  856 	ld	e, (hl)
   063A 23            [ 6]  857 	inc	hl
   063B 56            [ 7]  858 	ld	d, (hl)
                            859 ;src\CFG8266.c:144: strcpy(ucFile,Input);
   063C 21r2Dr01      [10]  860 	ld	hl, #_ucFile+0
   063F C5            [11]  861 	push	bc
   0640 EB            [ 4]  862 	ex	de, hl
   0641 AF            [ 4]  863 	xor	a, a
   0642                     864 00326$:
   0642 BE            [ 7]  865 	cp	a, (hl)
   0643 ED A0         [16]  866 	ldi
   0645 20 FB         [12]  867 	jr	NZ, 00326$
   0647 21r59r02      [10]  868 	ld	hl, #_ucPort
   064A E5            [11]  869 	push	hl
   064B CDr00r00      [17]  870 	call	_atol
   064E F1            [10]  871 	pop	af
   064F DD 75 FC      [19]  872 	ld	-4 (ix), l
   0652 DD 74 FD      [19]  873 	ld	-3 (ix), h
   0655 DD 73 FE      [19]  874 	ld	-2 (ix), e
   0658 DD 72 FF      [19]  875 	ld	-1 (ix), d
   065B 11r61r02      [10]  876 	ld	de, #_lPort
   065E 21 06 00      [10]  877 	ld	hl, #6
   0661 39            [11]  878 	add	hl, sp
   0662 01 04 00      [10]  879 	ld	bc, #4
   0665 ED B0         [21]  880 	ldir
   0667 C1            [10]  881 	pop	bc
                            882 ;src\CFG8266.c:146: uiPort = (lPort&0xffff);
   0668 2Ar61r02      [16]  883 	ld	hl, (_lPort)
   066B 22r5Fr02      [16]  884 	ld	(_uiPort), hl
   066E 18 12         [12]  885 	jr	00163$
   0670                     886 00140$:
                            887 ;src\CFG8266.c:149: ret = 0;
   0670 01 00 00      [10]  888 	ld	bc, #0x0000
   0673 18 0D         [12]  889 	jr	00163$
   0675                     890 00143$:
                            891 ;src\CFG8266.c:152: ret = 0;
   0675 01 00 00      [10]  892 	ld	bc, #0x0000
   0678 18 08         [12]  893 	jr	00163$
   067A                     894 00157$:
                            895 ;src\CFG8266.c:156: ret = 0;
   067A 01 00 00      [10]  896 	ld	bc, #0x0000
   067D 18 03         [12]  897 	jr	00163$
   067F                     898 00162$:
                            899 ;src\CFG8266.c:159: ret=0;
   067F 01 00 00      [10]  900 	ld	bc, #0x0000
   0682                     901 00163$:
                            902 ;src\CFG8266.c:161: return ret;
   0682 69            [ 4]  903 	ld	l, c
   0683 60            [ 4]  904 	ld	h, b
                            905 ;src\CFG8266.c:162: }
   0684 DD F9         [10]  906 	ld	sp, ix
   0686 DD E1         [14]  907 	pop	ix
   0688 C9            [10]  908 	ret
                            909 ;src\CFG8266.c:164: void TxByte(char chTxByte)
                            910 ;	---------------------------------
                            911 ; Function TxByte
                            912 ; ---------------------------------
   0689                     913 _TxByte::
                            914 ;src\CFG8266.c:166: while (myPort7&2);
   0689                     915 00101$:
   0689 DB 07         [11]  916 	in	a, (_myPort7)
   068B CB 4F         [ 8]  917 	bit	1, a
   068D 20 FA         [12]  918 	jr	NZ,00101$
                            919 ;src\CFG8266.c:170: myPort7 = chTxByte;
   068F 21 02 00      [10]  920 	ld	hl, #2+0
   0692 39            [11]  921 	add	hl, sp
   0693 7E            [ 7]  922 	ld	a, (hl)
   0694 D3 07         [11]  923 	out	(_myPort7), a
                            924 ;src\CFG8266.c:171: }
   0696 C9            [10]  925 	ret
                            926 ;src\CFG8266.c:173: char *ultostr(unsigned long value, char *ptr, int base)
                            927 ;	---------------------------------
                            928 ; Function ultostr
                            929 ; ---------------------------------
   0697                     930 _ultostr::
   0697 CDr00r00      [17]  931 	call	___sdcc_enter_ix
   069A 21 F2 FF      [10]  932 	ld	hl, #-14
   069D 39            [11]  933 	add	hl, sp
   069E F9            [ 6]  934 	ld	sp, hl
                            935 ;src\CFG8266.c:176: unsigned long tmp = value;
   069F DD 4E 04      [19]  936 	ld	c, 4 (ix)
   06A2 DD 46 05      [19]  937 	ld	b, 5 (ix)
   06A5 DD 5E 06      [19]  938 	ld	e, 6 (ix)
   06A8 DD 56 07      [19]  939 	ld	d, 7 (ix)
                            940 ;src\CFG8266.c:179: if (NULL == ptr) //if null pointer
   06AB DD 7E 09      [19]  941 	ld	a, 9 (ix)
   06AE DD B6 08      [19]  942 	or	a, 8 (ix)
   06B1 20 06         [12]  943 	jr	NZ,00102$
                            944 ;src\CFG8266.c:180: return NULL; //nothing to do
   06B3 21 00 00      [10]  945 	ld	hl, #0x0000
   06B6 C3r14r08      [10]  946 	jp	00118$
   06B9                     947 00102$:
                            948 ;src\CFG8266.c:188: tmp = tmp/base;
   06B9 DD 7E 0A      [19]  949 	ld	a, 10 (ix)
   06BC DD 77 F6      [19]  950 	ld	-10 (ix), a
   06BF DD 7E 0B      [19]  951 	ld	a, 11 (ix)
   06C2 DD 77 F7      [19]  952 	ld	-9 (ix), a
   06C5 17            [ 4]  953 	rla
   06C6 9F            [ 4]  954 	sbc	a, a
   06C7 DD 77 F8      [19]  955 	ld	-8 (ix), a
   06CA DD 77 F9      [19]  956 	ld	-7 (ix), a
                            957 ;src\CFG8266.c:182: if (tmp == 0) //if value is zero
   06CD 7A            [ 4]  958 	ld	a, d
   06CE B3            [ 4]  959 	or	a, e
   06CF B0            [ 4]  960 	or	a, b
   06D0 B1            [ 4]  961 	or	a, c
   06D1 20 04         [12]  962 	jr	NZ,00123$
                            963 ;src\CFG8266.c:183: ++count; //one digit
   06D3 0E 01         [ 7]  964 	ld	c, #0x01
   06D5 18 2B         [12]  965 	jr	00108$
                            966 ;src\CFG8266.c:186: while(tmp > 0)
   06D7                     967 00123$:
   06D7 AF            [ 4]  968 	xor	a, a
   06D8 DD 77 FF      [19]  969 	ld	-1 (ix), a
   06DB                     970 00103$:
   06DB 7A            [ 4]  971 	ld	a, d
   06DC B3            [ 4]  972 	or	a, e
   06DD B0            [ 4]  973 	or	a, b
   06DE B1            [ 4]  974 	or	a, c
   06DF 28 1E         [12]  975 	jr	Z,00129$
                            976 ;src\CFG8266.c:188: tmp = tmp/base;
   06E1 DD 6E F8      [19]  977 	ld	l, -8 (ix)
   06E4 DD 66 F9      [19]  978 	ld	h, -7 (ix)
   06E7 E5            [11]  979 	push	hl
   06E8 DD 6E F6      [19]  980 	ld	l, -10 (ix)
   06EB DD 66 F7      [19]  981 	ld	h, -9 (ix)
   06EE E5            [11]  982 	push	hl
   06EF D5            [11]  983 	push	de
   06F0 C5            [11]  984 	push	bc
   06F1 CDr00r00      [17]  985 	call	__divulong
   06F4 F1            [10]  986 	pop	af
   06F5 F1            [10]  987 	pop	af
   06F6 F1            [10]  988 	pop	af
   06F7 F1            [10]  989 	pop	af
   06F8 4D            [ 4]  990 	ld	c, l
   06F9 44            [ 4]  991 	ld	b, h
                            992 ;src\CFG8266.c:189: ++count;
   06FA DD 34 FF      [23]  993 	inc	-1 (ix)
   06FD 18 DC         [12]  994 	jr	00103$
   06FF                     995 00129$:
   06FF DD 4E FF      [19]  996 	ld	c, -1 (ix)
   0702                     997 00108$:
                            998 ;src\CFG8266.c:193: ptr += count; // so, after the LSB
   0702 DD 7E 08      [19]  999 	ld	a, 8 (ix)
   0705 81            [ 4] 1000 	add	a, c
   0706 DD 77 08      [19] 1001 	ld	8 (ix), a
   0709 30 03         [12] 1002 	jr	NC,00166$
   070B DD 34 09      [23] 1003 	inc	9 (ix)
   070E                    1004 00166$:
                           1005 ;src\CFG8266.c:194: *ptr = '\0'; // null terminator
   070E DD 4E 08      [19] 1006 	ld	c, 8 (ix)
   0711 DD 46 09      [19] 1007 	ld	b, 9 (ix)
   0714 AF            [ 4] 1008 	xor	a, a
   0715 02            [ 7] 1009 	ld	(bc), a
                           1010 ;src\CFG8266.c:196: do
   0716                    1011 00115$:
                           1012 ;src\CFG8266.c:198: t = value / base; // useful now (find remainder) as well later (next value of value)
   0716 DD 6E F8      [19] 1013 	ld	l, -8 (ix)
   0719 DD 66 F9      [19] 1014 	ld	h, -7 (ix)
   071C E5            [11] 1015 	push	hl
   071D DD 6E F6      [19] 1016 	ld	l, -10 (ix)
   0720 DD 66 F7      [19] 1017 	ld	h, -9 (ix)
   0723 E5            [11] 1018 	push	hl
   0724 DD 6E 06      [19] 1019 	ld	l, 6 (ix)
   0727 DD 66 07      [19] 1020 	ld	h, 7 (ix)
   072A E5            [11] 1021 	push	hl
   072B DD 6E 04      [19] 1022 	ld	l, 4 (ix)
   072E DD 66 05      [19] 1023 	ld	h, 5 (ix)
   0731 E5            [11] 1024 	push	hl
   0732 CDr00r00      [17] 1025 	call	__divulong
   0735 F1            [10] 1026 	pop	af
   0736 F1            [10] 1027 	pop	af
   0737 F1            [10] 1028 	pop	af
   0738 F1            [10] 1029 	pop	af
   0739 4D            [ 4] 1030 	ld	c, l
   073A 44            [ 4] 1031 	ld	b, h
                           1032 ;src\CFG8266.c:199: res = value - base * t; // get what remains of dividing base
   073B C5            [11] 1033 	push	bc
   073C D5            [11] 1034 	push	de
   073D D5            [11] 1035 	push	de
   073E C5            [11] 1036 	push	bc
   073F DD 6E F8      [19] 1037 	ld	l, -8 (ix)
   0742 DD 66 F9      [19] 1038 	ld	h, -7 (ix)
   0745 E5            [11] 1039 	push	hl
   0746 DD 6E F6      [19] 1040 	ld	l, -10 (ix)
   0749 DD 66 F7      [19] 1041 	ld	h, -9 (ix)
   074C E5            [11] 1042 	push	hl
   074D CDr00r00      [17] 1043 	call	__mullong
   0750 F1            [10] 1044 	pop	af
   0751 F1            [10] 1045 	pop	af
   0752 F1            [10] 1046 	pop	af
   0753 F1            [10] 1047 	pop	af
   0754 DD 75 FC      [19] 1048 	ld	-4 (ix), l
   0757 DD 74 FD      [19] 1049 	ld	-3 (ix), h
   075A DD 73 FE      [19] 1050 	ld	-2 (ix), e
   075D DD 72 FF      [19] 1051 	ld	-1 (ix), d
   0760 D1            [10] 1052 	pop	de
   0761 C1            [10] 1053 	pop	bc
   0762 DD 7E 04      [19] 1054 	ld	a, 4 (ix)
   0765 DD 96 FC      [19] 1055 	sub	a, -4 (ix)
   0768 DD 77 F2      [19] 1056 	ld	-14 (ix), a
   076B DD 7E 05      [19] 1057 	ld	a, 5 (ix)
   076E DD 9E FD      [19] 1058 	sbc	a, -3 (ix)
   0771 DD 77 F3      [19] 1059 	ld	-13 (ix), a
   0774 DD 7E 06      [19] 1060 	ld	a, 6 (ix)
   0777 DD 9E FE      [19] 1061 	sbc	a, -2 (ix)
   077A DD 77 F4      [19] 1062 	ld	-12 (ix), a
   077D DD 7E 07      [19] 1063 	ld	a, 7 (ix)
   0780 DD 9E FF      [19] 1064 	sbc	a, -1 (ix)
   0783 DD 77 F5      [19] 1065 	ld	-11 (ix), a
   0786 D5            [11] 1066 	push	de
   0787 C5            [11] 1067 	push	bc
   0788 21 0C 00      [10] 1068 	ld	hl, #12
   078B 39            [11] 1069 	add	hl, sp
   078C EB            [ 4] 1070 	ex	de, hl
   078D 21 04 00      [10] 1071 	ld	hl, #4
   0790 39            [11] 1072 	add	hl, sp
   0791 01 04 00      [10] 1073 	ld	bc, #4
   0794 ED B0         [21] 1074 	ldir
   0796 C1            [10] 1075 	pop	bc
   0797 D1            [10] 1076 	pop	de
                           1077 ;src\CFG8266.c:201: if (res < 10)
   0798 DD 7E FA      [19] 1078 	ld	a, -6 (ix)
   079B D6 0A         [ 7] 1079 	sub	a, #0x0a
   079D DD 7E FB      [19] 1080 	ld	a, -5 (ix)
   07A0 DE 00         [ 7] 1081 	sbc	a, #0x00
   07A2 DD 7E FC      [19] 1082 	ld	a, -4 (ix)
   07A5 DE 00         [ 7] 1083 	sbc	a, #0x00
   07A7 DD 7E FD      [19] 1084 	ld	a, -3 (ix)
   07AA DE 00         [ 7] 1085 	sbc	a, #0x00
   07AC 3E 00         [ 7] 1086 	ld	a, #0x00
   07AE 17            [ 4] 1087 	rla
   07AF DD 77 FE      [19] 1088 	ld	-2 (ix), a
                           1089 ;src\CFG8266.c:202: * -- ptr = '0' + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   07B2 DD 6E 08      [19] 1090 	ld	l, 8 (ix)
   07B5 DD 66 09      [19] 1091 	ld	h, 9 (ix)
   07B8 2B            [ 6] 1092 	dec	hl
   07B9 DD 7E FA      [19] 1093 	ld	a, -6 (ix)
   07BC DD 77 FF      [19] 1094 	ld	-1 (ix), a
                           1095 ;src\CFG8266.c:201: if (res < 10)
   07BF DD 7E FE      [19] 1096 	ld	a, -2 (ix)
   07C2 B7            [ 4] 1097 	or	a, a
   07C3 28 0E         [12] 1098 	jr	Z,00113$
                           1099 ;src\CFG8266.c:202: * -- ptr = '0' + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   07C5 DD 75 08      [19] 1100 	ld	8 (ix), l
   07C8 DD 74 09      [19] 1101 	ld	9 (ix), h
   07CB DD 7E FF      [19] 1102 	ld	a, -1 (ix)
   07CE C6 30         [ 7] 1103 	add	a, #0x30
   07D0 77            [ 7] 1104 	ld	(hl), a
   07D1 18 28         [12] 1105 	jr	00116$
   07D3                    1106 00113$:
                           1107 ;src\CFG8266.c:203: else if ((res >= 10) && (res < 16)) // Otherwise is a HEX value and a digit above 9
   07D3 DD CB FE 46   [20] 1108 	bit	0,-2 (ix)
   07D7 20 22         [12] 1109 	jr	NZ,00116$
   07D9 DD 7E FA      [19] 1110 	ld	a, -6 (ix)
   07DC D6 10         [ 7] 1111 	sub	a, #0x10
   07DE DD 7E FB      [19] 1112 	ld	a, -5 (ix)
   07E1 DE 00         [ 7] 1113 	sbc	a, #0x00
   07E3 DD 7E FC      [19] 1114 	ld	a, -4 (ix)
   07E6 DE 00         [ 7] 1115 	sbc	a, #0x00
   07E8 DD 7E FD      [19] 1116 	ld	a, -3 (ix)
   07EB DE 00         [ 7] 1117 	sbc	a, #0x00
   07ED 30 0C         [12] 1118 	jr	NC,00116$
                           1119 ;src\CFG8266.c:204: * --ptr = 'A' - 10 + res; // convert the remainder to ASCII and put in the current position of pointer, move pointer after operation
   07EF DD 75 08      [19] 1120 	ld	8 (ix), l
   07F2 DD 74 09      [19] 1121 	ld	9 (ix), h
   07F5 DD 7E FF      [19] 1122 	ld	a, -1 (ix)
   07F8 C6 37         [ 7] 1123 	add	a, #0x37
   07FA 77            [ 7] 1124 	ld	(hl), a
   07FB                    1125 00116$:
                           1126 ;src\CFG8266.c:205: } while ((value = t) != 0); //value is now t, and if t is other than zero, still work to do
   07FB DD 71 04      [19] 1127 	ld	4 (ix), c
   07FE DD 70 05      [19] 1128 	ld	5 (ix), b
   0801 DD 73 06      [19] 1129 	ld	6 (ix), e
   0804 DD 72 07      [19] 1130 	ld	7 (ix), d
   0807 7A            [ 4] 1131 	ld	a, d
   0808 B3            [ 4] 1132 	or	a, e
   0809 B0            [ 4] 1133 	or	a, b
   080A B1            [ 4] 1134 	or	a, c
   080B C2r16r07      [10] 1135 	jp	NZ, 00115$
                           1136 ;src\CFG8266.c:207: return(ptr); // and return own pointer as successful conversion has been made
   080E DD 6E 08      [19] 1137 	ld	l, 8 (ix)
   0811 DD 66 09      [19] 1138 	ld	h, 9 (ix)
   0814                    1139 00118$:
                           1140 ;src\CFG8266.c:208: }
   0814 DD F9         [10] 1141 	ld	sp, ix
   0816 DD E1         [14] 1142 	pop	ix
   0818 C9            [10] 1143 	ret
                           1144 ;src\CFG8266.c:210: bool WaitForRXData(unsigned char *uchData, unsigned int uiDataSize, unsigned int Timeout, bool bVerbose, bool bShowReceivedData, unsigned char *uchData2, unsigned int uiDataSize2)
                           1145 ;	---------------------------------
                           1146 ; Function WaitForRXData
                           1147 ; ---------------------------------
   0819                    1148 _WaitForRXData::
   0819 CDr00r00      [17] 1149 	call	___sdcc_enter_ix
   081C 21 EE FF      [10] 1150 	ld	hl, #-18
   081F 39            [11] 1151 	add	hl, sp
   0820 F9            [ 6] 1152 	ld	sp, hl
                           1153 ;src\CFG8266.c:212: bool bReturn = false;
   0821 0E 00         [ 7] 1154 	ld	c, #0x00
                           1155 ;src\CFG8266.c:217: unsigned char advance[3] = {'-','+','*'};
   0823 21 00 00      [10] 1156 	ld	hl, #0
   0826 39            [11] 1157 	add	hl, sp
   0827 DD 75 F1      [19] 1158 	ld	-15 (ix), l
   082A DD 74 F2      [19] 1159 	ld	-14 (ix), h
   082D 36 2D         [10] 1160 	ld	(hl), #0x2d
   082F DD 6E F1      [19] 1161 	ld	l, -15 (ix)
   0832 DD 66 F2      [19] 1162 	ld	h, -14 (ix)
   0835 23            [ 6] 1163 	inc	hl
   0836 36 2B         [10] 1164 	ld	(hl), #0x2b
   0838 DD 6E F1      [19] 1165 	ld	l, -15 (ix)
   083B DD 66 F2      [19] 1166 	ld	h, -14 (ix)
   083E 23            [ 6] 1167 	inc	hl
   083F 23            [ 6] 1168 	inc	hl
   0840 36 2A         [10] 1169 	ld	(hl), #0x2a
                           1170 ;src\CFG8266.c:218: unsigned int i = 0;
   0842 AF            [ 4] 1171 	xor	a, a
   0843 DD 77 FE      [19] 1172 	ld	-2 (ix), a
   0846 DD 77 FF      [19] 1173 	ld	-1 (ix), a
                           1174 ;src\CFG8266.c:220: if (bShowReceivedData)
   0849 DD 7E 0B      [19] 1175 	ld	a, 11 (ix)
   084C B7            [ 4] 1176 	or	a, a
   084D 28 75         [12] 1177 	jr	Z,00104$
                           1178 ;src\CFG8266.c:222: printf ("Waiting for: ");
   084F C5            [11] 1179 	push	bc
   0850 21r8Ar0A      [10] 1180 	ld	hl, #___str_2
   0853 E5            [11] 1181 	push	hl
   0854 CDr00r00      [17] 1182 	call	_printf
   0857 F1            [10] 1183 	pop	af
   0858 C1            [10] 1184 	pop	bc
                           1185 ;src\CFG8266.c:223: for (i=0;i<uiDataSize;++i)
   0859 11 00 00      [10] 1186 	ld	de, #0x0000
   085C                    1187 00139$:
   085C 7B            [ 4] 1188 	ld	a, e
   085D DD 96 06      [19] 1189 	sub	a, 6 (ix)
   0860 7A            [ 4] 1190 	ld	a, d
   0861 DD 9E 07      [19] 1191 	sbc	a, 7 (ix)
   0864 30 1B         [12] 1192 	jr	NC,00101$
                           1193 ;src\CFG8266.c:224: printf("%c",uchData[i]);
   0866 DD 6E 04      [19] 1194 	ld	l, 4 (ix)
   0869 DD 66 05      [19] 1195 	ld	h, 5 (ix)
   086C 19            [11] 1196 	add	hl, de
   086D 6E            [ 7] 1197 	ld	l, (hl)
   086E 26 00         [ 7] 1198 	ld	h, #0x00
   0870 C5            [11] 1199 	push	bc
   0871 D5            [11] 1200 	push	de
   0872 E5            [11] 1201 	push	hl
   0873 21r98r0A      [10] 1202 	ld	hl, #___str_3
   0876 E5            [11] 1203 	push	hl
   0877 CDr00r00      [17] 1204 	call	_printf
   087A F1            [10] 1205 	pop	af
   087B F1            [10] 1206 	pop	af
   087C D1            [10] 1207 	pop	de
   087D C1            [10] 1208 	pop	bc
                           1209 ;src\CFG8266.c:223: for (i=0;i<uiDataSize;++i)
   087E 13            [ 6] 1210 	inc	de
   087F 18 DB         [12] 1211 	jr	00139$
   0881                    1212 00101$:
                           1213 ;src\CFG8266.c:225: printf (" / ");
   0881 C5            [11] 1214 	push	bc
   0882 21r9Br0A      [10] 1215 	ld	hl, #___str_4
   0885 E5            [11] 1216 	push	hl
   0886 CDr00r00      [17] 1217 	call	_printf
   0889 F1            [10] 1218 	pop	af
   088A C1            [10] 1219 	pop	bc
                           1220 ;src\CFG8266.c:226: for (i=0;i<uiDataSize;++i)
   088B 11 00 00      [10] 1221 	ld	de, #0x0000
   088E                    1222 00142$:
   088E 7B            [ 4] 1223 	ld	a, e
   088F DD 96 06      [19] 1224 	sub	a, 6 (ix)
   0892 7A            [ 4] 1225 	ld	a, d
   0893 DD 9E 07      [19] 1226 	sbc	a, 7 (ix)
   0896 30 1B         [12] 1227 	jr	NC,00102$
                           1228 ;src\CFG8266.c:227: printf("{%x}",uchData[i]);
   0898 DD 6E 04      [19] 1229 	ld	l, 4 (ix)
   089B DD 66 05      [19] 1230 	ld	h, 5 (ix)
   089E 19            [11] 1231 	add	hl, de
   089F 6E            [ 7] 1232 	ld	l, (hl)
   08A0 26 00         [ 7] 1233 	ld	h, #0x00
   08A2 C5            [11] 1234 	push	bc
   08A3 D5            [11] 1235 	push	de
   08A4 E5            [11] 1236 	push	hl
   08A5 21r9Fr0A      [10] 1237 	ld	hl, #___str_5
   08A8 E5            [11] 1238 	push	hl
   08A9 CDr00r00      [17] 1239 	call	_printf
   08AC F1            [10] 1240 	pop	af
   08AD F1            [10] 1241 	pop	af
   08AE D1            [10] 1242 	pop	de
   08AF C1            [10] 1243 	pop	bc
                           1244 ;src\CFG8266.c:226: for (i=0;i<uiDataSize;++i)
   08B0 13            [ 6] 1245 	inc	de
   08B1 18 DB         [12] 1246 	jr	00142$
   08B3                    1247 00102$:
                           1248 ;src\CFG8266.c:228: printf ("\r\n");
   08B3 C5            [11] 1249 	push	bc
   08B4 21rA4r0A      [10] 1250 	ld	hl, #___str_7
   08B7 E5            [11] 1251 	push	hl
   08B8 CDr00r00      [17] 1252 	call	_puts
   08BB F1            [10] 1253 	pop	af
   08BC C1            [10] 1254 	pop	bc
                           1255 ;src\CFG8266.c:229: i = 0;
   08BD AF            [ 4] 1256 	xor	a, a
   08BE DD 77 FE      [19] 1257 	ld	-2 (ix), a
   08C1 DD 77 FF      [19] 1258 	ld	-1 (ix), a
   08C4                    1259 00104$:
                           1260 ;src\CFG8266.c:232: Timeout1 = TickCount + 10; //Drives the animation every 10 ticks or so
   08C4 FD 21 9E FC   [14] 1261 	ld	iy, #_TickCount
   08C8 FD 7E 00      [19] 1262 	ld	a, 0 (iy)
   08CB C6 0A         [ 7] 1263 	add	a, #0x0a
   08CD DD 77 F3      [19] 1264 	ld	-13 (ix), a
   08D0 FD 7E 01      [19] 1265 	ld	a, 1 (iy)
   08D3 CE 00         [ 7] 1266 	adc	a, #0x00
   08D5 DD 77 F4      [19] 1267 	ld	-12 (ix), a
                           1268 ;src\CFG8266.c:233: Timeout2 = TickCount + Timeout; //Wait up to 5 minutes
   08D8 FD 7E 00      [19] 1269 	ld	a, 0 (iy)
   08DB DD 86 08      [19] 1270 	add	a, 8 (ix)
   08DE 47            [ 4] 1271 	ld	b, a
   08DF FD 7E 01      [19] 1272 	ld	a, 1 (iy)
   08E2 DD 8E 09      [19] 1273 	adc	a, 9 (ix)
   08E5 5F            [ 4] 1274 	ld	e, a
   08E6 DD 70 F5      [19] 1275 	ld	-11 (ix), b
   08E9 DD 73 F6      [19] 1276 	ld	-10 (ix), e
                           1277 ;src\CFG8266.c:235: ResponseSt = 0;
   08EC AF            [ 4] 1278 	xor	a, a
   08ED DD 77 FA      [19] 1279 	ld	-6 (ix), a
   08F0 DD 77 FB      [19] 1280 	ld	-5 (ix), a
                           1281 ;src\CFG8266.c:236: ResponseSt2 = 0;
   08F3 AF            [ 4] 1282 	xor	a, a
   08F4 DD 77 FC      [19] 1283 	ld	-4 (ix), a
   08F7 DD 77 FD      [19] 1284 	ld	-3 (ix), a
                           1285 ;src\CFG8266.c:238: do
   08FA DD 7E 06      [19] 1286 	ld	a, 6 (ix)
   08FD D6 02         [ 7] 1287 	sub	a, #0x02
   08FF DD B6 07      [19] 1288 	or	a, 7 (ix)
   0902 3E 01         [ 7] 1289 	ld	a, #0x01
   0904 28 01         [12] 1290 	jr	Z,00254$
   0906 AF            [ 4] 1291 	xor	a, a
   0907                    1292 00254$:
   0907 DD 77 F7      [19] 1293 	ld	-9 (ix), a
   090A 3E 84         [ 7] 1294 	ld	a, #0x84
   090C DD BE 08      [19] 1295 	cp	a, 8 (ix)
   090F 3E 03         [ 7] 1296 	ld	a, #0x03
   0911 DD 9E 09      [19] 1297 	sbc	a, 9 (ix)
   0914 3E 00         [ 7] 1298 	ld	a, #0x00
   0916 17            [ 4] 1299 	rla
   0917 47            [ 4] 1300 	ld	b, a
   0918                    1301 00135$:
                           1302 ;src\CFG8266.c:240: if (Timeout>900)
   0918 78            [ 4] 1303 	ld	a, b
   0919 B7            [ 4] 1304 	or	a, a
   091A 28 54         [12] 1305 	jr	Z,00108$
                           1306 ;src\CFG8266.c:242: if (TickCount>Timeout1)
   091C DD 7E F3      [19] 1307 	ld	a, -13 (ix)
   091F FD 21 9E FC   [14] 1308 	ld	iy, #_TickCount
   0923 FD 96 00      [19] 1309 	sub	a, 0 (iy)
   0926 DD 7E F4      [19] 1310 	ld	a, -12 (ix)
   0929 FD 9E 01      [19] 1311 	sbc	a, 1 (iy)
   092C 30 42         [12] 1312 	jr	NC,00108$
                           1313 ;src\CFG8266.c:244: Timeout1 = TickCount + 10;
   092E FD 7E 00      [19] 1314 	ld	a, 0 (iy)
   0931 C6 0A         [ 7] 1315 	add	a, #0x0a
   0933 DD 77 F3      [19] 1316 	ld	-13 (ix), a
   0936 FD 7E 01      [19] 1317 	ld	a, 1 (iy)
   0939 CE 00         [ 7] 1318 	adc	a, #0x00
   093B DD 77 F4      [19] 1319 	ld	-12 (ix), a
                           1320 ;src\CFG8266.c:245: PrintChar(advance[i%3]); // next char
   093E C5            [11] 1321 	push	bc
   093F 21 03 00      [10] 1322 	ld	hl, #0x0003
   0942 E5            [11] 1323 	push	hl
   0943 DD 6E FE      [19] 1324 	ld	l, -2 (ix)
   0946 DD 66 FF      [19] 1325 	ld	h, -1 (ix)
   0949 E5            [11] 1326 	push	hl
   094A CDr00r00      [17] 1327 	call	__moduint
   094D F1            [10] 1328 	pop	af
   094E F1            [10] 1329 	pop	af
   094F C1            [10] 1330 	pop	bc
   0950 DD 5E F1      [19] 1331 	ld	e, -15 (ix)
   0953 DD 56 F2      [19] 1332 	ld	d, -14 (ix)
   0956 19            [11] 1333 	add	hl, de
   0957 7E            [ 7] 1334 	ld	a, (hl)
   0958 C5            [11] 1335 	push	bc
   0959 F5            [11] 1336 	push	af
   095A 33            [ 6] 1337 	inc	sp
   095B CDr00r00      [17] 1338 	call	_PrintChar
   095E 33            [ 6] 1339 	inc	sp
   095F 3E 1D         [ 7] 1340 	ld	a, #0x1d
   0961 F5            [11] 1341 	push	af
   0962 33            [ 6] 1342 	inc	sp
   0963 CDr00r00      [17] 1343 	call	_PrintChar
   0966 33            [ 6] 1344 	inc	sp
   0967 C1            [10] 1345 	pop	bc
                           1346 ;src\CFG8266.c:247: ++i;
   0968 DD 34 FE      [23] 1347 	inc	-2 (ix)
   096B 20 03         [12] 1348 	jr	NZ,00255$
   096D DD 34 FF      [23] 1349 	inc	-1 (ix)
   0970                    1350 00255$:
   0970                    1351 00108$:
                           1352 ;src\CFG8266.c:250: if(UartRXData())
   0970 DB 07         [11] 1353 	in	a, (_myPort7)
   0972 0F            [ 4] 1354 	rrca
   0973 D2r71r0A      [10] 1355 	jp	NC,00132$
                           1356 ;src\CFG8266.c:252: rx_data = GetUARTData();
   0976 DB 06         [11] 1357 	in	a, (_myPort6)
   0978 5F            [ 4] 1358 	ld	e, a
                           1359 ;src\CFG8266.c:254: if (rx_data == uchData[ResponseSt])
   0979 DD 7E 04      [19] 1360 	ld	a, 4 (ix)
   097C DD 86 FA      [19] 1361 	add	a, -6 (ix)
   097F 6F            [ 4] 1362 	ld	l, a
   0980 DD 7E 05      [19] 1363 	ld	a, 5 (ix)
   0983 DD 8E FB      [19] 1364 	adc	a, -5 (ix)
   0986 67            [ 4] 1365 	ld	h, a
   0987 56            [ 7] 1366 	ld	d, (hl)
                           1367 ;src\CFG8266.c:257: printf ("{%x}",rx_data);
   0988 DD 73 F8      [19] 1368 	ld	-8 (ix), e
   098B AF            [ 4] 1369 	xor	a, a
   098C DD 77 F9      [19] 1370 	ld	-7 (ix), a
                           1371 ;src\CFG8266.c:254: if (rx_data == uchData[ResponseSt])
   098F 7A            [ 4] 1372 	ld	a, d
   0990 93            [ 4] 1373 	sub	a, e
   0991 20 37         [12] 1374 	jr	NZ,00123$
                           1375 ;src\CFG8266.c:256: if (bShowReceivedData)
   0993 DD 7E 0B      [19] 1376 	ld	a, 11 (ix)
   0996 B7            [ 4] 1377 	or	a, a
   0997 28 14         [12] 1378 	jr	Z,00110$
                           1379 ;src\CFG8266.c:257: printf ("{%x}",rx_data);
   0999 C5            [11] 1380 	push	bc
   099A D5            [11] 1381 	push	de
   099B DD 6E F8      [19] 1382 	ld	l, -8 (ix)
   099E DD 66 F9      [19] 1383 	ld	h, -7 (ix)
   09A1 E5            [11] 1384 	push	hl
   09A2 21r9Fr0A      [10] 1385 	ld	hl, #___str_5
   09A5 E5            [11] 1386 	push	hl
   09A6 CDr00r00      [17] 1387 	call	_printf
   09A9 F1            [10] 1388 	pop	af
   09AA F1            [10] 1389 	pop	af
   09AB D1            [10] 1390 	pop	de
   09AC C1            [10] 1391 	pop	bc
   09AD                    1392 00110$:
                           1393 ;src\CFG8266.c:258: ++ResponseSt;
   09AD DD 34 FA      [23] 1394 	inc	-6 (ix)
   09B0 20 03         [12] 1395 	jr	NZ,00259$
   09B2 DD 34 FB      [23] 1396 	inc	-5 (ix)
   09B5                    1397 00259$:
                           1398 ;src\CFG8266.c:259: if (ResponseSt == uiDataSize)
   09B5 DD 7E FA      [19] 1399 	ld	a, -6 (ix)
   09B8 DD 96 06      [19] 1400 	sub	a, 6 (ix)
   09BB 20 77         [12] 1401 	jr	NZ,00124$
   09BD DD 7E FB      [19] 1402 	ld	a, -5 (ix)
   09C0 DD 96 07      [19] 1403 	sub	a, 7 (ix)
   09C3 20 6F         [12] 1404 	jr	NZ,00124$
                           1405 ;src\CFG8266.c:261: bReturn = 1;
   09C5 0E 01         [ 7] 1406 	ld	c, #0x01
                           1407 ;src\CFG8266.c:262: break;
   09C7 C3r84r0A      [10] 1408 	jp	00137$
   09CA                    1409 00123$:
                           1410 ;src\CFG8266.c:267: if ((ResponseSt)&&(bShowReceivedData))
   09CA DD 7E FB      [19] 1411 	ld	a, -5 (ix)
   09CD DD B6 FA      [19] 1412 	or	a, -6 (ix)
   09D0 28 1F         [12] 1413 	jr	Z,00114$
   09D2 DD 7E 0B      [19] 1414 	ld	a, 11 (ix)
   09D5 B7            [ 4] 1415 	or	a, a
   09D6 28 19         [12] 1416 	jr	Z,00114$
                           1417 ;src\CFG8266.c:268: printf ("{%x} != [%x]",rx_data,uchData[ResponseSt]);
   09D8 6A            [ 4] 1418 	ld	l, d
   09D9 26 00         [ 7] 1419 	ld	h, #0x00
   09DB C5            [11] 1420 	push	bc
   09DC D5            [11] 1421 	push	de
   09DD E5            [11] 1422 	push	hl
   09DE DD 6E F8      [19] 1423 	ld	l, -8 (ix)
   09E1 DD 66 F9      [19] 1424 	ld	h, -7 (ix)
   09E4 E5            [11] 1425 	push	hl
   09E5 21rA6r0A      [10] 1426 	ld	hl, #___str_8
   09E8 E5            [11] 1427 	push	hl
   09E9 CDr00r00      [17] 1428 	call	_printf
   09EC F1            [10] 1429 	pop	af
   09ED F1            [10] 1430 	pop	af
   09EE F1            [10] 1431 	pop	af
   09EF D1            [10] 1432 	pop	de
   09F0 C1            [10] 1433 	pop	bc
   09F1                    1434 00114$:
                           1435 ;src\CFG8266.c:269: if ((uiDataSize==2)&&(ResponseSt==1))
   09F1 DD 7E F7      [19] 1436 	ld	a, -9 (ix)
   09F4 B7            [ 4] 1437 	or	a, a
   09F5 28 36         [12] 1438 	jr	Z,00120$
   09F7 DD 7E FA      [19] 1439 	ld	a, -6 (ix)
   09FA 3D            [ 4] 1440 	dec	a
   09FB DD B6 FB      [19] 1441 	or	a, -5 (ix)
   09FE 20 2D         [12] 1442 	jr	NZ,00120$
                           1443 ;src\CFG8266.c:271: if ((bVerbose)&&(!uchData2))
   0A00 DD 7E 0A      [19] 1444 	ld	a, 10 (ix)
   0A03 B7            [ 4] 1445 	or	a, a
   0A04 28 23         [12] 1446 	jr	Z,00117$
   0A06 DD 7E 0D      [19] 1447 	ld	a, 13 (ix)
   0A09 DD B6 0C      [19] 1448 	or	a, 12 (ix)
   0A0C 20 1B         [12] 1449 	jr	NZ,00117$
                           1450 ;src\CFG8266.c:272: printf ("Error %u on command %c...\r\n",rx_data,uchData[0]);
   0A0E DD 6E 04      [19] 1451 	ld	l, 4 (ix)
   0A11 DD 66 05      [19] 1452 	ld	h, 5 (ix)
   0A14 4E            [ 7] 1453 	ld	c, (hl)
   0A15 06 00         [ 7] 1454 	ld	b, #0x00
   0A17 C5            [11] 1455 	push	bc
   0A18 DD 6E F8      [19] 1456 	ld	l, -8 (ix)
   0A1B DD 66 F9      [19] 1457 	ld	h, -7 (ix)
   0A1E E5            [11] 1458 	push	hl
   0A1F 21rB3r0A      [10] 1459 	ld	hl, #___str_9
   0A22 E5            [11] 1460 	push	hl
   0A23 CDr00r00      [17] 1461 	call	_printf
   0A26 F1            [10] 1462 	pop	af
   0A27 F1            [10] 1463 	pop	af
   0A28 F1            [10] 1464 	pop	af
   0A29                    1465 00117$:
                           1466 ;src\CFG8266.c:273: return false;
   0A29 2E 00         [ 7] 1467 	ld	l, #0x00
   0A2B 18 58         [12] 1468 	jr	00144$
   0A2D                    1469 00120$:
                           1470 ;src\CFG8266.c:275: ResponseSt = 0;
   0A2D AF            [ 4] 1471 	xor	a, a
   0A2E DD 77 FA      [19] 1472 	ld	-6 (ix), a
   0A31 DD 77 FB      [19] 1473 	ld	-5 (ix), a
   0A34                    1474 00124$:
                           1475 ;src\CFG8266.c:278: if ((uchData2)&&(rx_data == uchData2[ResponseSt2]))
   0A34 DD 7E 0D      [19] 1476 	ld	a, 13 (ix)
   0A37 DD B6 0C      [19] 1477 	or	a, 12 (ix)
   0A3A 28 2E         [12] 1478 	jr	Z,00128$
   0A3C DD 7E 0C      [19] 1479 	ld	a, 12 (ix)
   0A3F DD 86 FC      [19] 1480 	add	a, -4 (ix)
   0A42 6F            [ 4] 1481 	ld	l, a
   0A43 DD 7E 0D      [19] 1482 	ld	a, 13 (ix)
   0A46 DD 8E FD      [19] 1483 	adc	a, -3 (ix)
   0A49 67            [ 4] 1484 	ld	h, a
   0A4A 7E            [ 7] 1485 	ld	a, (hl)
   0A4B 93            [ 4] 1486 	sub	a, e
   0A4C 20 1C         [12] 1487 	jr	NZ,00128$
                           1488 ;src\CFG8266.c:280: ++ResponseSt2;
   0A4E DD 34 FC      [23] 1489 	inc	-4 (ix)
   0A51 20 03         [12] 1490 	jr	NZ,00266$
   0A53 DD 34 FD      [23] 1491 	inc	-3 (ix)
   0A56                    1492 00266$:
                           1493 ;src\CFG8266.c:281: if (ResponseSt2 == uiDataSize2)
   0A56 DD 7E FC      [19] 1494 	ld	a, -4 (ix)
   0A59 DD 96 0E      [19] 1495 	sub	a, 14 (ix)
   0A5C 20 13         [12] 1496 	jr	NZ,00132$
   0A5E DD 7E FD      [19] 1497 	ld	a, -3 (ix)
   0A61 DD 96 0F      [19] 1498 	sub	a, 15 (ix)
   0A64 20 0B         [12] 1499 	jr	NZ,00132$
                           1500 ;src\CFG8266.c:283: bReturn = 2;
   0A66 0E 02         [ 7] 1501 	ld	c, #0x02
                           1502 ;src\CFG8266.c:284: break;
   0A68 18 1A         [12] 1503 	jr	00137$
   0A6A                    1504 00128$:
                           1505 ;src\CFG8266.c:288: ResponseSt2 = 0;
   0A6A AF            [ 4] 1506 	xor	a, a
   0A6B DD 77 FC      [19] 1507 	ld	-4 (ix), a
   0A6E DD 77 FD      [19] 1508 	ld	-3 (ix), a
   0A71                    1509 00132$:
                           1510 ;src\CFG8266.c:291: if (TickCount>Timeout2)
   0A71 DD 7E F5      [19] 1511 	ld	a, -11 (ix)
   0A74 FD 21 9E FC   [14] 1512 	ld	iy, #_TickCount
   0A78 FD 96 00      [19] 1513 	sub	a, 0 (iy)
   0A7B DD 7E F6      [19] 1514 	ld	a, -10 (ix)
   0A7E FD 9E 01      [19] 1515 	sbc	a, 1 (iy)
   0A81 D2r18r09      [10] 1516 	jp	NC, 00135$
                           1517 ;src\CFG8266.c:294: while (1);
   0A84                    1518 00137$:
                           1519 ;src\CFG8266.c:296: return bReturn;
   0A84 69            [ 4] 1520 	ld	l, c
   0A85                    1521 00144$:
                           1522 ;src\CFG8266.c:297: }
   0A85 DD F9         [10] 1523 	ld	sp, ix
   0A87 DD E1         [14] 1524 	pop	ix
   0A89 C9            [10] 1525 	ret
   0A8A                    1526 ___str_2:
   0A8A 57 61 69 74 69 6E  1527 	.ascii "Waiting for: "
        67 20 66 6F 72 3A
        20
   0A97 00                 1528 	.db 0x00
   0A98                    1529 ___str_3:
   0A98 25 63              1530 	.ascii "%c"
   0A9A 00                 1531 	.db 0x00
   0A9B                    1532 ___str_4:
   0A9B 20 2F 20           1533 	.ascii " / "
   0A9E 00                 1534 	.db 0x00
   0A9F                    1535 ___str_5:
   0A9F 7B 25 78 7D        1536 	.ascii "{%x}"
   0AA3 00                 1537 	.db 0x00
   0AA4                    1538 ___str_7:
   0AA4 0D                 1539 	.db 0x0d
   0AA5 00                 1540 	.db 0x00
   0AA6                    1541 ___str_8:
   0AA6 7B 25 78 7D 20 21  1542 	.ascii "{%x} != [%x]"
        3D 20 5B 25 78 5D
   0AB2 00                 1543 	.db 0x00
   0AB3                    1544 ___str_9:
   0AB3 45 72 72 6F 72 20  1545 	.ascii "Error %u on command %c..."
        25 75 20 6F 6E 20
        63 6F 6D 6D 61 6E
        64 20 25 63 2E 2E
        2E
   0ACC 0D                 1546 	.db 0x0d
   0ACD 0A                 1547 	.db 0x0a
   0ACE 00                 1548 	.db 0x00
                           1549 ;src\CFG8266.c:299: void FinishUpdate (bool bSendReset)
                           1550 ;	---------------------------------
                           1551 ; Function FinishUpdate
                           1552 ; ---------------------------------
   0ACF                    1553 _FinishUpdate::
   0ACF CDr00r00      [17] 1554 	call	___sdcc_enter_ix
   0AD2 F5            [11] 1555 	push	af
   0AD3 F5            [11] 1556 	push	af
                           1557 ;src\CFG8266.c:301: unsigned int iRetries = 3;
   0AD4 21 03 00      [10] 1558 	ld	hl, #0x0003
   0AD7 E3            [19] 1559 	ex	(sp), hl
                           1560 ;src\CFG8266.c:305: bool bReset = bSendReset;
   0AD8 DD 7E 04      [19] 1561 	ld	a, 4 (ix)
   0ADB DD 77 FE      [19] 1562 	ld	-2 (ix), a
                           1563 ;src\CFG8266.c:307: printf("\rFinishing flash, this will take some time, WAIT!\r\n");
   0ADE 21r45r0C      [10] 1564 	ld	hl, #___str_11
   0AE1 E5            [11] 1565 	push	hl
   0AE2 CDr00r00      [17] 1566 	call	_puts
   0AE5 F1            [10] 1567 	pop	af
                           1568 ;src\CFG8266.c:309: do
   0AE6 DD 36 FF 02   [19] 1569 	ld	-1 (ix), #0x02
   0AEA                    1570 00135$:
                           1571 ;src\CFG8266.c:311: bRet = true;
   0AEA 2E 01         [ 7] 1572 	ld	l, #0x01
                           1573 ;src\CFG8266.c:312: --ucRetries;
   0AEC DD 35 FF      [23] 1574 	dec	-1 (ix)
                           1575 ;src\CFG8266.c:313: if (bReset)
   0AEF DD 7E FE      [19] 1576 	ld	a, -2 (ix)
   0AF2 B7            [ 4] 1577 	or	a, a
   0AF3 28 0C         [12] 1578 	jr	Z,00154$
                           1579 ;src\CFG8266.c:314: TxByte('R'); //Request Reset
   0AF5 E5            [11] 1580 	push	hl
   0AF6 3E 52         [ 7] 1581 	ld	a, #0x52
   0AF8 F5            [11] 1582 	push	af
   0AF9 33            [ 6] 1583 	inc	sp
   0AFA CDr89r06      [17] 1584 	call	_TxByte
   0AFD 33            [ 6] 1585 	inc	sp
   0AFE E1            [10] 1586 	pop	hl
   0AFF 18 49         [12] 1587 	jr	00110$
                           1588 ;src\CFG8266.c:317: do
   0B01                    1589 00154$:
   0B01 D1            [10] 1590 	pop	de
   0B02 D5            [11] 1591 	push	de
                           1592 ;src\CFG8266.c:319: for (uchHalt=60;uchHalt>0;--uchHalt)
   0B03                    1593 00152$:
   0B03 3E 3C         [ 7] 1594 	ld	a, #0x3c
   0B05                    1595 00140$:
                           1596 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0B05 76            [ 4] 1597 	halt
                           1598 ;src\CFG8266.c:319: for (uchHalt=60;uchHalt>0;--uchHalt)
   0B06 3D            [ 4] 1599 	dec	a
   0B07 20 FC         [12] 1600 	jr	NZ,00140$
                           1601 ;src\CFG8266.c:321: TxByte('E'); //End Update
   0B09 D5            [11] 1602 	push	de
   0B0A 3E 45         [ 7] 1603 	ld	a, #0x45
   0B0C F5            [11] 1604 	push	af
   0B0D 33            [ 6] 1605 	inc	sp
   0B0E CDr89r06      [17] 1606 	call	_TxByte
   0B11 33            [ 6] 1607 	inc	sp
   0B12 21 00 00      [10] 1608 	ld	hl, #0x0000
   0B15 E5            [11] 1609 	push	hl
   0B16 2E 00         [ 7] 1610 	ld	l, #0x00
   0B18 E5            [11] 1611 	push	hl
   0B19 AF            [ 4] 1612 	xor	a, a
   0B1A 57            [ 4] 1613 	ld	d,a
   0B1B 1E 01         [ 7] 1614 	ld	e,#0x01
   0B1D D5            [11] 1615 	push	de
   0B1E 21 08 07      [10] 1616 	ld	hl, #0x0708
   0B21 E5            [11] 1617 	push	hl
   0B22 21 02 00      [10] 1618 	ld	hl, #0x0002
   0B25 E5            [11] 1619 	push	hl
   0B26 21r0Br01      [10] 1620 	ld	hl, #_endUpdate
   0B29 E5            [11] 1621 	push	hl
   0B2A CDr19r08      [17] 1622 	call	_WaitForRXData
   0B2D FD 21 0C 00   [14] 1623 	ld	iy, #12
   0B31 FD 39         [15] 1624 	add	iy, sp
   0B33 FD F9         [10] 1625 	ld	sp, iy
   0B35 D1            [10] 1626 	pop	de
                           1627 ;src\CFG8266.c:323: iRetries--;
   0B36 1B            [ 6] 1628 	dec	de
                           1629 ;src\CFG8266.c:325: while ((!bRet)&&(iRetries));
   0B37 7D            [ 4] 1630 	ld	a, l
   0B38 B7            [ 4] 1631 	or	a, a
   0B39 20 04         [12] 1632 	jr	NZ,00170$
   0B3B 7A            [ 4] 1633 	ld	a, d
   0B3C B3            [ 4] 1634 	or	a, e
   0B3D 20 C4         [12] 1635 	jr	NZ,00152$
   0B3F                    1636 00170$:
   0B3F 33            [ 6] 1637 	inc	sp
   0B40 33            [ 6] 1638 	inc	sp
   0B41 D5            [11] 1639 	push	de
                           1640 ;src\CFG8266.c:327: if (bRet)
   0B42 7D            [ 4] 1641 	ld	a, l
   0B43 B7            [ 4] 1642 	or	a, a
   0B44 28 04         [12] 1643 	jr	Z,00110$
                           1644 ;src\CFG8266.c:328: bReset=true;
   0B46 DD 36 FE 01   [19] 1645 	ld	-2 (ix), #0x01
   0B4A                    1646 00110$:
                           1647 ;src\CFG8266.c:331: if (!bRet)
   0B4A 7D            [ 4] 1648 	ld	a, l
   0B4B B7            [ 4] 1649 	or	a, a
   0B4C 20 0B         [12] 1650 	jr	NZ,00133$
                           1651 ;src\CFG8266.c:332: printf("\rTimeout waiting to end update...\r\n");
   0B4E 21r78r0C      [10] 1652 	ld	hl, #___str_13
   0B51 E5            [11] 1653 	push	hl
   0B52 CDr00r00      [17] 1654 	call	_puts
   0B55 F1            [10] 1655 	pop	af
   0B56 C3r39r0C      [10] 1656 	jp	00136$
   0B59                    1657 00133$:
                           1658 ;src\CFG8266.c:335: if (ucRetries)
   0B59 DD 7E FF      [19] 1659 	ld	a, -1 (ix)
   0B5C B7            [ 4] 1660 	or	a, a
   0B5D 28 18         [12] 1661 	jr	Z,00115$
                           1662 ;src\CFG8266.c:337: if (ucIsFw)
   0B5F 3Ar66r02      [13] 1663 	ld	a,(#_ucIsFw + 0)
   0B62 B7            [ 4] 1664 	or	a, a
   0B63 28 0A         [12] 1665 	jr	Z,00112$
                           1666 ;src\CFG8266.c:338: printf("\rFirmware Update done, ESP is restarting, WAIT...\r\n");
   0B65 21r9Br0C      [10] 1667 	ld	hl, #___str_15
   0B68 E5            [11] 1668 	push	hl
   0B69 CDr00r00      [17] 1669 	call	_puts
   0B6C F1            [10] 1670 	pop	af
   0B6D 18 08         [12] 1671 	jr	00115$
   0B6F                    1672 00112$:
                           1673 ;src\CFG8266.c:340: printf("\rCertificates Update done, ESP is restarting, WAIT...\r\n");
   0B6F 21rCEr0C      [10] 1674 	ld	hl, #___str_17
   0B72 E5            [11] 1675 	push	hl
   0B73 CDr00r00      [17] 1676 	call	_puts
   0B76 F1            [10] 1677 	pop	af
   0B77                    1678 00115$:
                           1679 ;src\CFG8266.c:343: if (WaitForRXData(responseReady2,7,2700,false,false,NULL,0)) //Wait up to 45 seconds
   0B77 21 00 00      [10] 1680 	ld	hl, #0x0000
   0B7A E5            [11] 1681 	push	hl
   0B7B 2E 00         [ 7] 1682 	ld	l, #0x00
   0B7D E5            [11] 1683 	push	hl
   0B7E AF            [ 4] 1684 	xor	a, a
   0B7F F5            [11] 1685 	push	af
   0B80 33            [ 6] 1686 	inc	sp
   0B81 AF            [ 4] 1687 	xor	a, a
   0B82 F5            [11] 1688 	push	af
   0B83 33            [ 6] 1689 	inc	sp
   0B84 21 8C 0A      [10] 1690 	ld	hl, #0x0a8c
   0B87 E5            [11] 1691 	push	hl
   0B88 21 07 00      [10] 1692 	ld	hl, #0x0007
   0B8B E5            [11] 1693 	push	hl
   0B8C 21r2Fr01      [10] 1694 	ld	hl, #_responseReady2
   0B8F E5            [11] 1695 	push	hl
   0B90 CDr19r08      [17] 1696 	call	_WaitForRXData
   0B93 FD 21 0C 00   [14] 1697 	ld	iy, #12
   0B97 FD 39         [15] 1698 	add	iy, sp
   0B99 FD F9         [10] 1699 	ld	sp, iy
   0B9B 7D            [ 4] 1700 	ld	a, l
   0B9C B7            [ 4] 1701 	or	a, a
   0B9D CAr2Br0C      [10] 1702 	jp	Z, 00130$
                           1703 ;src\CFG8266.c:345: if (!ucIsFw)
   0BA0 3Ar66r02      [13] 1704 	ld	a,(#_ucIsFw + 0)
   0BA3 B7            [ 4] 1705 	or	a, a
   0BA4 C2r21r0C      [10] 1706 	jp	NZ, 00125$
                           1707 ;src\CFG8266.c:347: printf("\rESP Reset Ok, now let's request creation of index file...\r\n");
   0BA7 21r05r0D      [10] 1708 	ld	hl, #___str_19
   0BAA E5            [11] 1709 	push	hl
   0BAB CDr00r00      [17] 1710 	call	_puts
   0BAE F1            [10] 1711 	pop	af
                           1712 ;src\CFG8266.c:349: do
   0BAF DD 36 FE 0A   [19] 1713 	ld	-2 (ix), #0x0a
   0BB3 AF            [ 4] 1714 	xor	a, a
   0BB4 DD 77 FF      [19] 1715 	ld	-1 (ix), a
                           1716 ;src\CFG8266.c:351: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BB7                    1717 00162$:
   0BB7 3E 3C         [ 7] 1718 	ld	a, #0x3c
   0BB9                    1719 00142$:
                           1720 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0BB9 76            [ 4] 1721 	halt
                           1722 ;src\CFG8266.c:351: for (uchHalt=60;uchHalt>0;--uchHalt)
   0BBA 3D            [ 4] 1723 	dec	a
   0BBB 20 FC         [12] 1724 	jr	NZ,00142$
                           1725 ;src\CFG8266.c:353: TxByte('I'); //End Update
   0BBD 3E 49         [ 7] 1726 	ld	a, #0x49
   0BBF F5            [11] 1727 	push	af
   0BC0 33            [ 6] 1728 	inc	sp
   0BC1 CDr89r06      [17] 1729 	call	_TxByte
   0BC4 33            [ 6] 1730 	inc	sp
                           1731 ;src\CFG8266.c:354: bRet = WaitForRXData(certificateDone,2,3600,false,false,NULL,0); //Wait up to 1 minute, certificate index creation takes time
   0BC5 21 00 00      [10] 1732 	ld	hl, #0x0000
   0BC8 E5            [11] 1733 	push	hl
   0BC9 2E 00         [ 7] 1734 	ld	l, #0x00
   0BCB E5            [11] 1735 	push	hl
   0BCC AF            [ 4] 1736 	xor	a, a
   0BCD F5            [11] 1737 	push	af
   0BCE 33            [ 6] 1738 	inc	sp
   0BCF AF            [ 4] 1739 	xor	a, a
   0BD0 F5            [11] 1740 	push	af
   0BD1 33            [ 6] 1741 	inc	sp
   0BD2 21 10 0E      [10] 1742 	ld	hl, #0x0e10
   0BD5 E5            [11] 1743 	push	hl
   0BD6 21 02 00      [10] 1744 	ld	hl, #0x0002
   0BD9 E5            [11] 1745 	push	hl
   0BDA 21r0Er01      [10] 1746 	ld	hl, #_certificateDone
   0BDD E5            [11] 1747 	push	hl
   0BDE CDr19r08      [17] 1748 	call	_WaitForRXData
   0BE1 FD 21 0C 00   [14] 1749 	ld	iy, #12
   0BE5 FD 39         [15] 1750 	add	iy, sp
   0BE7 FD F9         [10] 1751 	ld	sp, iy
   0BE9 DD 75 FD      [19] 1752 	ld	-3 (ix), l
                           1753 ;src\CFG8266.c:355: iRetries--;
   0BEC DD 6E FE      [19] 1754 	ld	l, -2 (ix)
   0BEF DD 66 FF      [19] 1755 	ld	h, -1 (ix)
   0BF2 2B            [ 6] 1756 	dec	hl
   0BF3 DD 75 FE      [19] 1757 	ld	-2 (ix), l
   0BF6 DD 74 FF      [19] 1758 	ld	-1 (ix), h
                           1759 ;src\CFG8266.c:357: while ((!bRet)&&(iRetries));
   0BF9 DD 7E FD      [19] 1760 	ld	a, -3 (ix)
   0BFC B7            [ 4] 1761 	or	a, a
   0BFD 20 08         [12] 1762 	jr	NZ,00120$
   0BFF DD 7E FF      [19] 1763 	ld	a, -1 (ix)
   0C02 DD B6 FE      [19] 1764 	or	a, -2 (ix)
   0C05 20 B0         [12] 1765 	jr	NZ,00162$
   0C07                    1766 00120$:
                           1767 ;src\CFG8266.c:358: if (bRet)
   0C07 DD 7E FD      [19] 1768 	ld	a, -3 (ix)
   0C0A B7            [ 4] 1769 	or	a, a
   0C0B 28 0A         [12] 1770 	jr	Z,00122$
                           1771 ;src\CFG8266.c:359: printf("\rDone!                                \r\n");
   0C0D 21r41r0D      [10] 1772 	ld	hl, #___str_21
   0C10 E5            [11] 1773 	push	hl
   0C11 CDr00r00      [17] 1774 	call	_puts
   0C14 F1            [10] 1775 	pop	af
   0C15 18 29         [12] 1776 	jr	00137$
   0C17                    1777 00122$:
                           1778 ;src\CFG8266.c:361: printf("\rDone, but time-out on creating certificates index file!\r\n");
   0C17 21r69r0D      [10] 1779 	ld	hl, #___str_23
   0C1A E5            [11] 1780 	push	hl
   0C1B CDr00r00      [17] 1781 	call	_puts
   0C1E F1            [10] 1782 	pop	af
   0C1F 18 1F         [12] 1783 	jr	00137$
   0C21                    1784 00125$:
                           1785 ;src\CFG8266.c:364: printf("\rDone!                              \r\n");
   0C21 21rA3r0D      [10] 1786 	ld	hl, #___str_25
   0C24 E5            [11] 1787 	push	hl
   0C25 CDr00r00      [17] 1788 	call	_puts
   0C28 F1            [10] 1789 	pop	af
                           1790 ;src\CFG8266.c:365: break;
   0C29 18 15         [12] 1791 	jr	00137$
   0C2B                    1792 00130$:
                           1793 ;src\CFG8266.c:368: if (!ucRetries)
   0C2B DD 7E FF      [19] 1794 	ld	a, -1 (ix)
   0C2E B7            [ 4] 1795 	or	a, a
   0C2F 20 08         [12] 1796 	jr	NZ,00136$
                           1797 ;src\CFG8266.c:369: printf("\rTimeout error\r\n");
   0C31 21rC9r0D      [10] 1798 	ld	hl, #___str_27
   0C34 E5            [11] 1799 	push	hl
   0C35 CDr00r00      [17] 1800 	call	_puts
   0C38 F1            [10] 1801 	pop	af
   0C39                    1802 00136$:
                           1803 ;src\CFG8266.c:372: while (ucRetries);
   0C39 DD 7E FF      [19] 1804 	ld	a, -1 (ix)
   0C3C B7            [ 4] 1805 	or	a, a
   0C3D C2rEAr0A      [10] 1806 	jp	NZ, 00135$
   0C40                    1807 00137$:
                           1808 ;src\CFG8266.c:374: return;
                           1809 ;src\CFG8266.c:375: }
   0C40 DD F9         [10] 1810 	ld	sp, ix
   0C42 DD E1         [14] 1811 	pop	ix
   0C44 C9            [10] 1812 	ret
   0C45                    1813 ___str_11:
   0C45 0D                 1814 	.db 0x0d
   0C46 46 69 6E 69 73 68  1815 	.ascii "Finishing flash, this will take some time, WAIT!"
        69 6E 67 20 66 6C
        61 73 68 2C 20 74
        68 69 73 20 77 69
        6C 6C 20 74 61 6B
        65 20 73 6F 6D 65
        20 74 69 6D 65 2C
        20 57 41 49 54 21
   0C76 0D                 1816 	.db 0x0d
   0C77 00                 1817 	.db 0x00
   0C78                    1818 ___str_13:
   0C78 0D                 1819 	.db 0x0d
   0C79 54 69 6D 65 6F 75  1820 	.ascii "Timeout waiting to end update..."
        74 20 77 61 69 74
        69 6E 67 20 74 6F
        20 65 6E 64 20 75
        70 64 61 74 65 2E
        2E 2E
   0C99 0D                 1821 	.db 0x0d
   0C9A 00                 1822 	.db 0x00
   0C9B                    1823 ___str_15:
   0C9B 0D                 1824 	.db 0x0d
   0C9C 46 69 72 6D 77 61  1825 	.ascii "Firmware Update done, ESP is restarting, WAIT..."
        72 65 20 55 70 64
        61 74 65 20 64 6F
        6E 65 2C 20 45 53
        50 20 69 73 20 72
        65 73 74 61 72 74
        69 6E 67 2C 20 57
        41 49 54 2E 2E 2E
   0CCC 0D                 1826 	.db 0x0d
   0CCD 00                 1827 	.db 0x00
   0CCE                    1828 ___str_17:
   0CCE 0D                 1829 	.db 0x0d
   0CCF 43 65 72 74 69 66  1830 	.ascii "Certificates Update done, ESP is restarting, WAIT..."
        69 63 61 74 65 73
        20 55 70 64 61 74
        65 20 64 6F 6E 65
        2C 20 45 53 50 20
        69 73 20 72 65 73
        74 61 72 74 69 6E
        67 2C 20 57 41 49
        54 2E 2E 2E
   0D03 0D                 1831 	.db 0x0d
   0D04 00                 1832 	.db 0x00
   0D05                    1833 ___str_19:
   0D05 0D                 1834 	.db 0x0d
   0D06 45 53 50 20 52 65  1835 	.ascii "ESP Reset Ok, now let's request creation of index file..."
        73 65 74 20 4F 6B
        2C 20 6E 6F 77 20
        6C 65 74 27 73 20
        72 65 71 75 65 73
        74 20 63 72 65 61
        74 69 6F 6E 20 6F
        66 20 69 6E 64 65
        78 20 66 69 6C 65
        2E 2E 2E
   0D3F 0D                 1836 	.db 0x0d
   0D40 00                 1837 	.db 0x00
   0D41                    1838 ___str_21:
   0D41 0D                 1839 	.db 0x0d
   0D42 44 6F 6E 65 21 20  1840 	.ascii "Done!                                "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20
   0D67 0D                 1841 	.db 0x0d
   0D68 00                 1842 	.db 0x00
   0D69                    1843 ___str_23:
   0D69 0D                 1844 	.db 0x0d
   0D6A 44 6F 6E 65 2C 20  1845 	.ascii "Done, but time-out on creating certificates index file!"
        62 75 74 20 74 69
        6D 65 2D 6F 75 74
        20 6F 6E 20 63 72
        65 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 69 6E 64 65
        78 20 66 69 6C 65
        21
   0DA1 0D                 1846 	.db 0x0d
   0DA2 00                 1847 	.db 0x00
   0DA3                    1848 ___str_25:
   0DA3 0D                 1849 	.db 0x0d
   0DA4 44 6F 6E 65 21 20  1850 	.ascii "Done!                              "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20
   0DC7 0D                 1851 	.db 0x0d
   0DC8 00                 1852 	.db 0x00
   0DC9                    1853 ___str_27:
   0DC9 0D                 1854 	.db 0x0d
   0DCA 54 69 6D 65 6F 75  1855 	.ascii "Timeout error"
        74 20 65 72 72 6F
        72
   0DD7 0D                 1856 	.db 0x0d
   0DD8 00                 1857 	.db 0x00
                           1858 ;src\CFG8266.c:377: int main(char** argv, int argc)
                           1859 ;	---------------------------------
                           1860 ; Function main
                           1861 ; ---------------------------------
   0DD9                    1862 _main::
   0DD9 CDr00r00      [17] 1863 	call	___sdcc_enter_ix
   0DDC 21 01 F2      [10] 1864 	ld	hl, #-3583
   0DDF 39            [11] 1865 	add	hl, sp
   0DE0 F9            [ 6] 1866 	ld	sp, hl
                           1867 ;src\CFG8266.c:386: unsigned char advance[3] = {'-','+','*'};
   0DE1 21 99 0D      [10] 1868 	ld	hl, #3481
   0DE4 39            [11] 1869 	add	hl, sp
   0DE5 DD 75 F5      [19] 1870 	ld	-11 (ix), l
   0DE8 DD 74 F6      [19] 1871 	ld	-10 (ix), h
   0DEB 36 2D         [10] 1872 	ld	(hl), #0x2d
   0DED DD 6E F5      [19] 1873 	ld	l, -11 (ix)
   0DF0 DD 66 F6      [19] 1874 	ld	h, -10 (ix)
   0DF3 23            [ 6] 1875 	inc	hl
   0DF4 36 2B         [10] 1876 	ld	(hl), #0x2b
   0DF6 DD 6E F5      [19] 1877 	ld	l, -11 (ix)
   0DF9 DD 66 F6      [19] 1878 	ld	h, -10 (ix)
   0DFC 23            [ 6] 1879 	inc	hl
   0DFD 23            [ 6] 1880 	inc	hl
   0DFE 36 2A         [10] 1881 	ld	(hl), #0x2a
                           1882 ;src\CFG8266.c:395: unsigned char ucFirstBlock = 1;
   0E00 DD 36 F7 01   [19] 1883 	ld	-9 (ix), #0x01
                           1884 ;src\CFG8266.c:409: ucLocalUpdate = 0;
   0E04 21r65r02      [10] 1885 	ld	hl,#_ucLocalUpdate + 0
   0E07 36 00         [10] 1886 	ld	(hl), #0x00
                           1887 ;src\CFG8266.c:410: ucNagleOff = 0;
   0E09 21r67r02      [10] 1888 	ld	hl,#_ucNagleOff + 0
   0E0C 36 00         [10] 1889 	ld	(hl), #0x00
                           1890 ;src\CFG8266.c:411: ucNagleOn = 0;
   0E0E 21r68r02      [10] 1891 	ld	hl,#_ucNagleOn + 0
   0E11 36 00         [10] 1892 	ld	(hl), #0x00
                           1893 ;src\CFG8266.c:412: ucRadioOff = 0;
   0E13 21r69r02      [10] 1894 	ld	hl,#_ucRadioOff + 0
   0E16 36 00         [10] 1895 	ld	(hl), #0x00
                           1896 ;src\CFG8266.c:413: ucSetTimeout = 0;
   0E18 21r6Ar02      [10] 1897 	ld	hl,#_ucSetTimeout + 0
   0E1B 36 00         [10] 1898 	ld	(hl), #0x00
                           1899 ;src\CFG8266.c:414: ucScanPage = 0;
   0E1D AF            [ 4] 1900 	xor	a, a
   0E1E DD 77 EF      [19] 1901 	ld	-17 (ix), a
                           1902 ;src\CFG8266.c:416: ucVerMajor = 0;
   0E21 AF            [ 4] 1903 	xor	a, a
   0E22 DD 77 FF      [19] 1904 	ld	-1 (ix), a
                           1905 ;src\CFG8266.c:417: ucVerMinor = 0;
   0E25 AF            [ 4] 1906 	xor	a, a
   0E26 DD 77 FE      [19] 1907 	ld	-2 (ix), a
                           1908 ;src\CFG8266.c:418: TickCount = 0; //this guarantees no leap for 18 minutes, more than enough so we do not need to check for jiffy leaping
   0E29 21 00 00      [10] 1909 	ld	hl, #0x0000
   0E2C 22 9E FC      [16] 1910 	ld	(_TickCount), hl
                           1911 ;src\CFG8266.c:420: printf("> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <\r\n(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com\r\n\n");
   0E2F 21r88r1F      [10] 1912 	ld	hl, #___str_29
   0E32 E5            [11] 1913 	push	hl
   0E33 CDr00r00      [17] 1914 	call	_puts
   0E36 F1            [10] 1915 	pop	af
                           1916 ;src\CFG8266.c:422: if (IsValidInput(argv, argc))
   0E37 DD 6E 06      [19] 1917 	ld	l, 6 (ix)
   0E3A DD 66 07      [19] 1918 	ld	h, 7 (ix)
   0E3D E5            [11] 1919 	push	hl
   0E3E DD 6E 04      [19] 1920 	ld	l, 4 (ix)
   0E41 DD 66 05      [19] 1921 	ld	h, 5 (ix)
   0E44 E5            [11] 1922 	push	hl
   0E45 CDrC6r03      [17] 1923 	call	_IsValidInput
   0E48 F1            [10] 1924 	pop	af
   0E49 F1            [10] 1925 	pop	af
   0E4A DD 75 FC      [19] 1926 	ld	-4 (ix), l
   0E4D DD 74 FD      [19] 1927 	ld	-3 (ix), h
   0E50 7C            [ 4] 1928 	ld	a, h
   0E51 DD B6 FC      [19] 1929 	or	a, -4 (ix)
   0E54 CAr78r1F      [10] 1930 	jp	Z, 00374$
                           1931 ;src\CFG8266.c:424: do
   0E57 AF            [ 4] 1932 	xor	a, a
   0E58 DD 77 FD      [19] 1933 	ld	-3 (ix), a
   0E5B                    1934 00103$:
                           1935 ;src\CFG8266.c:427: myPort6 = speed;
   0E5B DD 7E FD      [19] 1936 	ld	a, -3 (ix)
   0E5E D3 06         [11] 1937 	out	(_myPort6), a
                           1938 ;src\CFG8266.c:428: ClearUartData();
   0E60 3E 14         [ 7] 1939 	ld	a, #0x14
   0E62 D3 06         [11] 1940 	out	(_myPort6), a
                           1941 ;src\CFG8266.c:429: TxByte('?');
   0E64 3E 3F         [ 7] 1942 	ld	a, #0x3f
   0E66 F5            [11] 1943 	push	af
   0E67 33            [ 6] 1944 	inc	sp
   0E68 CDr89r06      [17] 1945 	call	_TxByte
   0E6B 33            [ 6] 1946 	inc	sp
                           1947 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   0E6C 76            [ 4] 1948 	halt
                           1949 ;src\CFG8266.c:432: bResponse = WaitForRXData(responseOK,2,60,false,false,NULL,0);
   0E6D 21 00 00      [10] 1950 	ld	hl, #0x0000
   0E70 E5            [11] 1951 	push	hl
   0E71 2E 00         [ 7] 1952 	ld	l, #0x00
   0E73 E5            [11] 1953 	push	hl
   0E74 AF            [ 4] 1954 	xor	a, a
   0E75 F5            [11] 1955 	push	af
   0E76 33            [ 6] 1956 	inc	sp
   0E77 AF            [ 4] 1957 	xor	a, a
   0E78 F5            [11] 1958 	push	af
   0E79 33            [ 6] 1959 	inc	sp
   0E7A 2E 3C         [ 7] 1960 	ld	l, #0x3c
   0E7C E5            [11] 1961 	push	hl
   0E7D 2E 02         [ 7] 1962 	ld	l, #0x02
   0E7F E5            [11] 1963 	push	hl
   0E80 21r10r01      [10] 1964 	ld	hl, #_responseOK
   0E83 E5            [11] 1965 	push	hl
   0E84 CDr19r08      [17] 1966 	call	_WaitForRXData
   0E87 FD 21 0C 00   [14] 1967 	ld	iy, #12
   0E8B FD 39         [15] 1968 	add	iy, sp
   0E8D FD F9         [10] 1969 	ld	sp, iy
   0E8F DD 75 FC      [19] 1970 	ld	-4 (ix), l
   0E92 7D            [ 4] 1971 	ld	a, l
                           1972 ;src\CFG8266.c:434: if (bResponse)
   0E93 B7            [ 4] 1973 	or	a, a
   0E94 20 0A         [12] 1974 	jr	NZ,00105$
                           1975 ;src\CFG8266.c:436: ++speed;
   0E96 DD 34 FD      [23] 1976 	inc	-3 (ix)
                           1977 ;src\CFG8266.c:438: while (speed<10);
   0E99 DD 7E FD      [19] 1978 	ld	a, -3 (ix)
   0E9C D6 0A         [ 7] 1979 	sub	a, #0x0a
   0E9E 38 BB         [12] 1980 	jr	C,00103$
   0EA0                    1981 00105$:
                           1982 ;src\CFG8266.c:440: if (speed<10)
   0EA0 DD 7E FD      [19] 1983 	ld	a, -3 (ix)
   0EA3 D6 0A         [ 7] 1984 	sub	a, #0x0a
   0EA5 D2r6Er1F      [10] 1985 	jp	NC, 00371$
                           1986 ;src\CFG8266.c:442: printf ("Using Baud Rate #%u\r\n",speed);
   0EA8 DD 7E FD      [19] 1987 	ld	a, -3 (ix)
   0EAB DD 77 FC      [19] 1988 	ld	-4 (ix), a
   0EAE AF            [ 4] 1989 	xor	a, a
   0EAF DD 77 FD      [19] 1990 	ld	-3 (ix), a
   0EB2 DD 6E FC      [19] 1991 	ld	l, -4 (ix)
   0EB5 DD 66 FD      [19] 1992 	ld	h, -3 (ix)
   0EB8 E5            [11] 1993 	push	hl
   0EB9 21rEFr1F      [10] 1994 	ld	hl, #___str_30
   0EBC E5            [11] 1995 	push	hl
   0EBD CDr00r00      [17] 1996 	call	_printf
   0EC0 F1            [10] 1997 	pop	af
                           1998 ;src\CFG8266.c:443: TxByte('V'); //Request version
   0EC1 26 56         [ 7] 1999 	ld	h,#0x56
   0EC3 E3            [19] 2000 	ex	(sp),hl
   0EC4 33            [ 6] 2001 	inc	sp
   0EC5 CDr89r06      [17] 2002 	call	_TxByte
   0EC8 33            [ 6] 2003 	inc	sp
                           2004 ;src\CFG8266.c:444: bResponse = WaitForRXData(versionResponse,1,20,true,false,NULL,0);
   0EC9 21 00 00      [10] 2005 	ld	hl, #0x0000
   0ECC E5            [11] 2006 	push	hl
   0ECD 2E 00         [ 7] 2007 	ld	l, #0x00
   0ECF E5            [11] 2008 	push	hl
   0ED0 AF            [ 4] 2009 	xor	a, a
   0ED1 57            [ 4] 2010 	ld	d,a
   0ED2 1E 01         [ 7] 2011 	ld	e,#0x01
   0ED4 D5            [11] 2012 	push	de
   0ED5 2E 14         [ 7] 2013 	ld	l, #0x14
   0ED7 E5            [11] 2014 	push	hl
   0ED8 2E 01         [ 7] 2015 	ld	l, #0x01
   0EDA E5            [11] 2016 	push	hl
   0EDB 21r0Dr01      [10] 2017 	ld	hl, #_versionResponse
   0EDE E5            [11] 2018 	push	hl
   0EDF CDr19r08      [17] 2019 	call	_WaitForRXData
   0EE2 FD 21 0C 00   [14] 2020 	ld	iy, #12
   0EE6 FD 39         [15] 2021 	add	iy, sp
   0EE8 FD F9         [10] 2022 	ld	sp, iy
                           2023 ;src\CFG8266.c:445: if (bResponse)
   0EEA DD 75 FD      [19] 2024 	ld	-3 (ix), l
   0EED 7D            [ 4] 2025 	ld	a, l
   0EEE B7            [ 4] 2026 	or	a, a
   0EEF 28 20         [12] 2027 	jr	Z,00113$
                           2028 ;src\CFG8266.c:447: while(!UartRXData());
   0EF1                    2029 00106$:
   0EF1 DB 07         [11] 2030 	in	a, (_myPort7)
   0EF3 D6 01         [ 7] 2031 	sub	a,#0x01
   0EF5 3E 00         [ 7] 2032 	ld	a, #0x00
   0EF7 17            [ 4] 2033 	rla
   0EF8 CB 47         [ 8] 2034 	bit	0, a
   0EFA 20 F5         [12] 2035 	jr	NZ,00106$
                           2036 ;src\CFG8266.c:448: ucVerMajor = GetUARTData();
   0EFC DB 06         [11] 2037 	in	a, (_myPort6)
   0EFE DD 77 FF      [19] 2038 	ld	-1 (ix), a
                           2039 ;src\CFG8266.c:449: while(!UartRXData());
   0F01                    2040 00109$:
   0F01 DB 07         [11] 2041 	in	a, (_myPort7)
   0F03 D6 01         [ 7] 2042 	sub	a,#0x01
   0F05 3E 00         [ 7] 2043 	ld	a, #0x00
   0F07 17            [ 4] 2044 	rla
   0F08 CB 47         [ 8] 2045 	bit	0, a
   0F0A 20 F5         [12] 2046 	jr	NZ,00109$
                           2047 ;src\CFG8266.c:450: ucVerMinor = GetUARTData();
   0F0C DB 06         [11] 2048 	in	a, (_myPort6)
   0F0E DD 77 FE      [19] 2049 	ld	-2 (ix), a
   0F11                    2050 00113$:
                           2051 ;src\CFG8266.c:453: if ((ucScan)||(ucNagleOff)||(ucNagleOn)||(ucRadioOff)||(ucSetTimeout))
   0F11 3Ar00r00      [13] 2052 	ld	a,(#_ucScan + 0)
   0F14 B7            [ 4] 2053 	or	a, a
   0F15 20 19         [12] 2054 	jr	NZ,00363$
   0F17 3Ar67r02      [13] 2055 	ld	a,(#_ucNagleOff + 0)
   0F1A B7            [ 4] 2056 	or	a, a
   0F1B 20 13         [12] 2057 	jr	NZ,00363$
   0F1D 3Ar68r02      [13] 2058 	ld	a,(#_ucNagleOn + 0)
   0F20 B7            [ 4] 2059 	or	a, a
   0F21 20 0D         [12] 2060 	jr	NZ,00363$
   0F23 3Ar69r02      [13] 2061 	ld	a,(#_ucRadioOff + 0)
   0F26 B7            [ 4] 2062 	or	a, a
   0F27 20 07         [12] 2063 	jr	NZ,00363$
   0F29 3Ar6Ar02      [13] 2064 	ld	a,(#_ucSetTimeout + 0)
   0F2C B7            [ 4] 2065 	or	a, a
   0F2D CAr7Dr17      [10] 2066 	jp	Z, 00364$
   0F30                    2067 00363$:
                           2068 ;src\CFG8266.c:456: if (ucScan)
   0F30 3Ar00r00      [13] 2069 	ld	a,(#_ucScan + 0)
   0F33 B7            [ 4] 2070 	or	a, a
   0F34 CArB5r0F      [10] 2071 	jp	Z, 00143$
                           2072 ;src\CFG8266.c:458: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   0F37 DD 7E FF      [19] 2073 	ld	a, -1 (ix)
   0F3A D6 01         [ 7] 2074 	sub	a, #0x01
   0F3C 38 6C         [12] 2075 	jr	C,00126$
   0F3E DD 7E FE      [19] 2076 	ld	a, -2 (ix)
   0F41 D6 02         [ 7] 2077 	sub	a, #0x02
   0F43 38 65         [12] 2078 	jr	C,00126$
                           2079 ;src\CFG8266.c:460: TxByte('g'); //Request current AP status
   0F45 3E 67         [ 7] 2080 	ld	a, #0x67
   0F47 F5            [11] 2081 	push	af
   0F48 33            [ 6] 2082 	inc	sp
   0F49 CDr89r06      [17] 2083 	call	_TxByte
   0F4C 33            [ 6] 2084 	inc	sp
                           2085 ;src\CFG8266.c:461: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   0F4D 21 00 00      [10] 2086 	ld	hl, #0x0000
   0F50 E5            [11] 2087 	push	hl
   0F51 2E 00         [ 7] 2088 	ld	l, #0x00
   0F53 E5            [11] 2089 	push	hl
   0F54 AF            [ 4] 2090 	xor	a, a
   0F55 57            [ 4] 2091 	ld	d,a
   0F56 1E 01         [ 7] 2092 	ld	e,#0x01
   0F58 D5            [11] 2093 	push	de
   0F59 2E 1E         [ 7] 2094 	ld	l, #0x1e
   0F5B E5            [11] 2095 	push	hl
   0F5C 2E 03         [ 7] 2096 	ld	l, #0x03
   0F5E E5            [11] 2097 	push	hl
   0F5F 21r1Er01      [10] 2098 	ld	hl, #_apstsResponse
   0F62 E5            [11] 2099 	push	hl
   0F63 CDr19r08      [17] 2100 	call	_WaitForRXData
   0F66 FD 21 0C 00   [14] 2101 	ld	iy, #12
   0F6A FD 39         [15] 2102 	add	iy, sp
   0F6C FD F9         [10] 2103 	ld	sp, iy
                           2104 ;src\CFG8266.c:462: if (bResponse)
   0F6E DD 75 FD      [19] 2105 	ld	-3 (ix), l
   0F71 7D            [ 4] 2106 	ld	a, l
   0F72 B7            [ 4] 2107 	or	a, a
   0F73 28 35         [12] 2108 	jr	Z,00126$
                           2109 ;src\CFG8266.c:464: while(!UartRXData());
   0F75                    2110 00114$:
   0F75 DB 07         [11] 2111 	in	a, (_myPort7)
   0F77 D6 01         [ 7] 2112 	sub	a,#0x01
   0F79 3E 00         [ 7] 2113 	ld	a, #0x00
   0F7B 17            [ 4] 2114 	rla
   0F7C CB 47         [ 8] 2115 	bit	0, a
   0F7E 20 F5         [12] 2116 	jr	NZ,00114$
                           2117 ;src\CFG8266.c:465: ucAPstsRspSize=GetUARTData();
   0F80 DB 06         [11] 2118 	in	a, (_myPort6)
   0F82 DD 77 FC      [19] 2119 	ld	-4 (ix), a
                           2120 ;src\CFG8266.c:469: while(!UartRXData());
   0F85 21 C6 0D      [10] 2121 	ld	hl, #3526
   0F88 39            [11] 2122 	add	hl, sp
   0F89 EB            [ 4] 2123 	ex	de, hl
   0F8A 01 00 00      [10] 2124 	ld	bc, #0x0000
   0F8D                    2125 00117$:
   0F8D DB 07         [11] 2126 	in	a, (_myPort7)
   0F8F D6 01         [ 7] 2127 	sub	a,#0x01
   0F91 3E 00         [ 7] 2128 	ld	a, #0x00
   0F93 17            [ 4] 2129 	rla
   0F94 CB 47         [ 8] 2130 	bit	0, a
   0F96 20 F5         [12] 2131 	jr	NZ,00117$
                           2132 ;src\CFG8266.c:470: chAPStsInfo[i]=GetUARTData();
   0F98 6B            [ 4] 2133 	ld	l, e
   0F99 62            [ 4] 2134 	ld	h, d
   0F9A 09            [11] 2135 	add	hl, bc
   0F9B DB 06         [11] 2136 	in	a, (_myPort6)
   0F9D 77            [ 7] 2137 	ld	(hl), a
                           2138 ;src\CFG8266.c:471: ++i;
   0F9E 03            [ 6] 2139 	inc	bc
                           2140 ;src\CFG8266.c:473: while(i<ucAPstsRspSize);
   0F9F DD 6E FC      [19] 2141 	ld	l, -4 (ix)
   0FA2 26 00         [ 7] 2142 	ld	h, #0x00
   0FA4 79            [ 4] 2143 	ld	a, c
   0FA5 95            [ 4] 2144 	sub	a, l
   0FA6 78            [ 4] 2145 	ld	a, b
   0FA7 9C            [ 4] 2146 	sbc	a, h
   0FA8 38 E3         [12] 2147 	jr	C,00117$
   0FAA                    2148 00126$:
                           2149 ;src\CFG8266.c:476: TxByte('S'); //Request SCAN
   0FAA 3E 53         [ 7] 2150 	ld	a, #0x53
   0FAC F5            [11] 2151 	push	af
   0FAD 33            [ 6] 2152 	inc	sp
   0FAE CDr89r06      [17] 2153 	call	_TxByte
   0FB1 33            [ 6] 2154 	inc	sp
   0FB2 C3r44r10      [10] 2155 	jp	00144$
   0FB5                    2156 00143$:
                           2157 ;src\CFG8266.c:478: else if (ucNagleOff)
   0FB5 3Ar67r02      [13] 2158 	ld	a,(#_ucNagleOff + 0)
   0FB8 B7            [ 4] 2159 	or	a, a
   0FB9 28 0B         [12] 2160 	jr	Z,00140$
                           2161 ;src\CFG8266.c:479: TxByte('N'); //Request nagle off for future connections
   0FBB 3E 4E         [ 7] 2162 	ld	a, #0x4e
   0FBD F5            [11] 2163 	push	af
   0FBE 33            [ 6] 2164 	inc	sp
   0FBF CDr89r06      [17] 2165 	call	_TxByte
   0FC2 33            [ 6] 2166 	inc	sp
   0FC3 C3r44r10      [10] 2167 	jp	00144$
   0FC6                    2168 00140$:
                           2169 ;src\CFG8266.c:480: else if (ucNagleOn)
   0FC6 3Ar68r02      [13] 2170 	ld	a,(#_ucNagleOn + 0)
   0FC9 B7            [ 4] 2171 	or	a, a
   0FCA 28 0A         [12] 2172 	jr	Z,00137$
                           2173 ;src\CFG8266.c:481: TxByte('D'); //Request nagle on for future connections
   0FCC 3E 44         [ 7] 2174 	ld	a, #0x44
   0FCE F5            [11] 2175 	push	af
   0FCF 33            [ 6] 2176 	inc	sp
   0FD0 CDr89r06      [17] 2177 	call	_TxByte
   0FD3 33            [ 6] 2178 	inc	sp
   0FD4 18 6E         [12] 2179 	jr	00144$
   0FD6                    2180 00137$:
                           2181 ;src\CFG8266.c:482: else if (ucRadioOff)
   0FD6 3Ar69r02      [13] 2182 	ld	a,(#_ucRadioOff + 0)
   0FD9 B7            [ 4] 2183 	or	a, a
   0FDA 28 0A         [12] 2184 	jr	Z,00134$
                           2185 ;src\CFG8266.c:483: TxByte('O'); //Request to turn off Wi-Fi radio immediately
   0FDC 3E 4F         [ 7] 2186 	ld	a, #0x4f
   0FDE F5            [11] 2187 	push	af
   0FDF 33            [ 6] 2188 	inc	sp
   0FE0 CDr89r06      [17] 2189 	call	_TxByte
   0FE3 33            [ 6] 2190 	inc	sp
   0FE4 18 5E         [12] 2191 	jr	00144$
   0FE6                    2192 00134$:
                           2193 ;src\CFG8266.c:484: else if (ucSetTimeout)
   0FE6 3Ar6Ar02      [13] 2194 	ld	a,(#_ucSetTimeout + 0)
   0FE9 B7            [ 4] 2195 	or	a, a
   0FEA 28 58         [12] 2196 	jr	Z,00144$
                           2197 ;src\CFG8266.c:486: ucTimeOutMSB = ((unsigned char)((uiTimeout&0xff00)>>8));
   0FEC FD 21r6Br02   [14] 2198 	ld	iy, #_uiTimeout
   0FF0 FD 4E 01      [19] 2199 	ld	c, 1 (iy)
   0FF3 DD 71 FB      [19] 2200 	ld	-5 (ix), c
                           2201 ;src\CFG8266.c:487: ucTimeOutLSB = ((unsigned char)(uiTimeout&0xff));
   0FF6 FD 7E 00      [19] 2202 	ld	a, 0 (iy)
   0FF9 DD 77 FC      [19] 2203 	ld	-4 (ix), a
                           2204 ;src\CFG8266.c:488: if (uiTimeout)
   0FFC FD 7E 01      [19] 2205 	ld	a, 1 (iy)
   0FFF FD B6 00      [19] 2206 	or	a, 0 (iy)
   1002 28 0F         [12] 2207 	jr	Z,00129$
                           2208 ;src\CFG8266.c:489: printf("\r\nSetting Wi-Fi idle timeout to %u...\r\n",uiTimeout);
   1004 2Ar6Br02      [16] 2209 	ld	hl, (_uiTimeout)
   1007 E5            [11] 2210 	push	hl
   1008 21r05r20      [10] 2211 	ld	hl, #___str_31
   100B E5            [11] 2212 	push	hl
   100C CDr00r00      [17] 2213 	call	_printf
   100F F1            [10] 2214 	pop	af
   1010 F1            [10] 2215 	pop	af
   1011 18 08         [12] 2216 	jr	00130$
   1013                    2217 00129$:
                           2218 ;src\CFG8266.c:491: printf("\r\nSetting Wi-Fi to always on!\r\n");
   1013 21r2Dr20      [10] 2219 	ld	hl, #___str_33
   1016 E5            [11] 2220 	push	hl
   1017 CDr00r00      [17] 2221 	call	_puts
   101A F1            [10] 2222 	pop	af
   101B                    2223 00130$:
                           2224 ;src\CFG8266.c:492: TxByte('T'); //Request to set time-out
   101B 3E 54         [ 7] 2225 	ld	a, #0x54
   101D F5            [11] 2226 	push	af
   101E 33            [ 6] 2227 	inc	sp
   101F CDr89r06      [17] 2228 	call	_TxByte
   1022 33            [ 6] 2229 	inc	sp
                           2230 ;src\CFG8266.c:493: TxByte(0);
   1023 AF            [ 4] 2231 	xor	a, a
   1024 F5            [11] 2232 	push	af
   1025 33            [ 6] 2233 	inc	sp
   1026 CDr89r06      [17] 2234 	call	_TxByte
   1029 33            [ 6] 2235 	inc	sp
                           2236 ;src\CFG8266.c:494: TxByte(2);
   102A 3E 02         [ 7] 2237 	ld	a, #0x02
   102C F5            [11] 2238 	push	af
   102D 33            [ 6] 2239 	inc	sp
   102E CDr89r06      [17] 2240 	call	_TxByte
   1031 33            [ 6] 2241 	inc	sp
                           2242 ;src\CFG8266.c:495: TxByte(ucTimeOutMSB);
   1032 DD 7E FB      [19] 2243 	ld	a, -5 (ix)
   1035 F5            [11] 2244 	push	af
   1036 33            [ 6] 2245 	inc	sp
   1037 CDr89r06      [17] 2246 	call	_TxByte
   103A 33            [ 6] 2247 	inc	sp
                           2248 ;src\CFG8266.c:496: TxByte(ucTimeOutLSB);
   103B DD 7E FC      [19] 2249 	ld	a, -4 (ix)
   103E F5            [11] 2250 	push	af
   103F 33            [ 6] 2251 	inc	sp
   1040 CDr89r06      [17] 2252 	call	_TxByte
   1043 33            [ 6] 2253 	inc	sp
   1044                    2254 00144$:
                           2255 ;src\CFG8266.c:499: if (ucScan)
   1044 3Ar00r00      [13] 2256 	ld	a,(#_ucScan + 0)
   1047 B7            [ 4] 2257 	or	a, a
   1048 28 27         [12] 2258 	jr	Z,00157$
                           2259 ;src\CFG8266.c:500: bResponse = WaitForRXData(scanResponse,2,60,true,false,NULL,0);
   104A 21 00 00      [10] 2260 	ld	hl, #0x0000
   104D E5            [11] 2261 	push	hl
   104E 2E 00         [ 7] 2262 	ld	l, #0x00
   1050 E5            [11] 2263 	push	hl
   1051 AF            [ 4] 2264 	xor	a, a
   1052 57            [ 4] 2265 	ld	d,a
   1053 1E 01         [ 7] 2266 	ld	e,#0x01
   1055 D5            [11] 2267 	push	de
   1056 2E 3C         [ 7] 2268 	ld	l, #0x3c
   1058 E5            [11] 2269 	push	hl
   1059 2E 02         [ 7] 2270 	ld	l, #0x02
   105B E5            [11] 2271 	push	hl
   105C 21r12r01      [10] 2272 	ld	hl, #_scanResponse
   105F E5            [11] 2273 	push	hl
   1060 CDr19r08      [17] 2274 	call	_WaitForRXData
   1063 FD 21 0C 00   [14] 2275 	ld	iy, #12
   1067 FD 39         [15] 2276 	add	iy, sp
   1069 FD F9         [10] 2277 	ld	sp, iy
   106B DD 75 FD      [19] 2278 	ld	-3 (ix), l
   106E C3r20r11      [10] 2279 	jp	00158$
   1071                    2280 00157$:
                           2281 ;src\CFG8266.c:501: else if (ucNagleOff)
   1071 3Ar67r02      [13] 2282 	ld	a,(#_ucNagleOff + 0)
   1074 B7            [ 4] 2283 	or	a, a
   1075 28 27         [12] 2284 	jr	Z,00154$
                           2285 ;src\CFG8266.c:502: bResponse = WaitForRXData(nagleoffResponse,2,60,true,false,NULL,0);
   1077 21 00 00      [10] 2286 	ld	hl, #0x0000
   107A E5            [11] 2287 	push	hl
   107B 2E 00         [ 7] 2288 	ld	l, #0x00
   107D E5            [11] 2289 	push	hl
   107E AF            [ 4] 2290 	xor	a, a
   107F 57            [ 4] 2291 	ld	d,a
   1080 1E 01         [ 7] 2292 	ld	e,#0x01
   1082 D5            [11] 2293 	push	de
   1083 2E 3C         [ 7] 2294 	ld	l, #0x3c
   1085 E5            [11] 2295 	push	hl
   1086 2E 02         [ 7] 2296 	ld	l, #0x02
   1088 E5            [11] 2297 	push	hl
   1089 21r18r01      [10] 2298 	ld	hl, #_nagleoffResponse
   108C E5            [11] 2299 	push	hl
   108D CDr19r08      [17] 2300 	call	_WaitForRXData
   1090 FD 21 0C 00   [14] 2301 	ld	iy, #12
   1094 FD 39         [15] 2302 	add	iy, sp
   1096 FD F9         [10] 2303 	ld	sp, iy
   1098 DD 75 FD      [19] 2304 	ld	-3 (ix), l
   109B C3r20r11      [10] 2305 	jp	00158$
   109E                    2306 00154$:
                           2307 ;src\CFG8266.c:503: else if (ucNagleOn)
   109E 3Ar68r02      [13] 2308 	ld	a,(#_ucNagleOn + 0)
   10A1 B7            [ 4] 2309 	or	a, a
   10A2 28 26         [12] 2310 	jr	Z,00151$
                           2311 ;src\CFG8266.c:504: bResponse = WaitForRXData(nagleonResponse,2,60,true,false,NULL,0);
   10A4 21 00 00      [10] 2312 	ld	hl, #0x0000
   10A7 E5            [11] 2313 	push	hl
   10A8 2E 00         [ 7] 2314 	ld	l, #0x00
   10AA E5            [11] 2315 	push	hl
   10AB AF            [ 4] 2316 	xor	a, a
   10AC 57            [ 4] 2317 	ld	d,a
   10AD 1E 01         [ 7] 2318 	ld	e,#0x01
   10AF D5            [11] 2319 	push	de
   10B0 2E 3C         [ 7] 2320 	ld	l, #0x3c
   10B2 E5            [11] 2321 	push	hl
   10B3 2E 02         [ 7] 2322 	ld	l, #0x02
   10B5 E5            [11] 2323 	push	hl
   10B6 21r16r01      [10] 2324 	ld	hl, #_nagleonResponse
   10B9 E5            [11] 2325 	push	hl
   10BA CDr19r08      [17] 2326 	call	_WaitForRXData
   10BD FD 21 0C 00   [14] 2327 	ld	iy, #12
   10C1 FD 39         [15] 2328 	add	iy, sp
   10C3 FD F9         [10] 2329 	ld	sp, iy
   10C5 DD 75 FD      [19] 2330 	ld	-3 (ix), l
   10C8 18 56         [12] 2331 	jr	00158$
   10CA                    2332 00151$:
                           2333 ;src\CFG8266.c:505: else if (ucRadioOff)
   10CA 3Ar69r02      [13] 2334 	ld	a,(#_ucRadioOff + 0)
   10CD B7            [ 4] 2335 	or	a, a
   10CE 28 26         [12] 2336 	jr	Z,00148$
                           2337 ;src\CFG8266.c:506: bResponse = WaitForRXData(radioOffResponse,2,60,true,false,NULL,0);
   10D0 21 00 00      [10] 2338 	ld	hl, #0x0000
   10D3 E5            [11] 2339 	push	hl
   10D4 2E 00         [ 7] 2340 	ld	l, #0x00
   10D6 E5            [11] 2341 	push	hl
   10D7 AF            [ 4] 2342 	xor	a, a
   10D8 57            [ 4] 2343 	ld	d,a
   10D9 1E 01         [ 7] 2344 	ld	e,#0x01
   10DB D5            [11] 2345 	push	de
   10DC 2E 3C         [ 7] 2346 	ld	l, #0x3c
   10DE E5            [11] 2347 	push	hl
   10DF 2E 02         [ 7] 2348 	ld	l, #0x02
   10E1 E5            [11] 2349 	push	hl
   10E2 21r2Dr01      [10] 2350 	ld	hl, #_radioOffResponse
   10E5 E5            [11] 2351 	push	hl
   10E6 CDr19r08      [17] 2352 	call	_WaitForRXData
   10E9 FD 21 0C 00   [14] 2353 	ld	iy, #12
   10ED FD 39         [15] 2354 	add	iy, sp
   10EF FD F9         [10] 2355 	ld	sp, iy
   10F1 DD 75 FD      [19] 2356 	ld	-3 (ix), l
   10F4 18 2A         [12] 2357 	jr	00158$
   10F6                    2358 00148$:
                           2359 ;src\CFG8266.c:507: else if (ucSetTimeout)
   10F6 3Ar6Ar02      [13] 2360 	ld	a,(#_ucSetTimeout + 0)
   10F9 B7            [ 4] 2361 	or	a, a
   10FA 28 24         [12] 2362 	jr	Z,00158$
                           2363 ;src\CFG8266.c:508: bResponse = WaitForRXData(responseRadioOnTimeout,2,60,true,false,NULL,0);
   10FC 21 00 00      [10] 2364 	ld	hl, #0x0000
   10FF E5            [11] 2365 	push	hl
   1100 2E 00         [ 7] 2366 	ld	l, #0x00
   1102 E5            [11] 2367 	push	hl
   1103 AF            [ 4] 2368 	xor	a, a
   1104 57            [ 4] 2369 	ld	d,a
   1105 1E 01         [ 7] 2370 	ld	e,#0x01
   1107 D5            [11] 2371 	push	de
   1108 2E 3C         [ 7] 2372 	ld	l, #0x3c
   110A E5            [11] 2373 	push	hl
   110B 2E 02         [ 7] 2374 	ld	l, #0x02
   110D E5            [11] 2375 	push	hl
   110E 21r2Br01      [10] 2376 	ld	hl, #_responseRadioOnTimeout
   1111 E5            [11] 2377 	push	hl
   1112 CDr19r08      [17] 2378 	call	_WaitForRXData
   1115 FD 21 0C 00   [14] 2379 	ld	iy, #12
   1119 FD 39         [15] 2380 	add	iy, sp
   111B FD F9         [10] 2381 	ld	sp, iy
   111D DD 75 FD      [19] 2382 	ld	-3 (ix), l
   1120                    2383 00158$:
                           2384 ;src\CFG8266.c:511: if ((bResponse)&&(ucScan))
   1120 DD 7E FD      [19] 2385 	ld	a, -3 (ix)
   1123 B7            [ 4] 2386 	or	a, a
   1124 CArE9r16      [10] 2387 	jp	Z, 00294$
   1127 FD 21r00r00   [14] 2388 	ld	iy, #_ucScan
   112B FD 7E 00      [19] 2389 	ld	a, 0 (iy)
   112E B7            [ 4] 2390 	or	a, a
   112F CArE9r16      [10] 2391 	jp	Z, 00294$
                           2392 ;src\CFG8266.c:514: do
   1132 0E 14         [ 7] 2393 	ld	c, #0x14
   1134                    2394 00161$:
                           2395 ;src\CFG8266.c:516: --ucRetries;
   1134 0D            [ 4] 2396 	dec	c
                           2397 ;src\CFG8266.c:517: for (ucHalt = 30;ucHalt>0;--ucHalt)
   1135 06 1E         [ 7] 2398 	ld	b, #0x1e
   1137                    2399 00379$:
                           2400 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   1137 76            [ 4] 2401 	halt
                           2402 ;src\CFG8266.c:517: for (ucHalt = 30;ucHalt>0;--ucHalt)
   1138 78            [ 4] 2403 	ld	a, b
   1139 3D            [ 4] 2404 	dec	a
   113A 47            [ 4] 2405 	ld	b, a
   113B B7            [ 4] 2406 	or	a, a
   113C 20 F9         [12] 2407 	jr	NZ,00379$
                           2408 ;src\CFG8266.c:519: TxByte('s'); //Request SCAN result
   113E C5            [11] 2409 	push	bc
   113F 3E 73         [ 7] 2410 	ld	a, #0x73
   1141 F5            [11] 2411 	push	af
   1142 33            [ 6] 2412 	inc	sp
   1143 CDr89r06      [17] 2413 	call	_TxByte
   1146 33            [ 6] 2414 	inc	sp
   1147 21 02 00      [10] 2415 	ld	hl, #0x0002
   114A E5            [11] 2416 	push	hl
   114B 21r14r01      [10] 2417 	ld	hl, #_scanresNoNetwork
   114E E5            [11] 2418 	push	hl
   114F AF            [ 4] 2419 	xor	a, a
   1150 F5            [11] 2420 	push	af
   1151 33            [ 6] 2421 	inc	sp
   1152 AF            [ 4] 2422 	xor	a, a
   1153 F5            [11] 2423 	push	af
   1154 33            [ 6] 2424 	inc	sp
   1155 21 3C 00      [10] 2425 	ld	hl, #0x003c
   1158 E5            [11] 2426 	push	hl
   1159 2E 02         [ 7] 2427 	ld	l, #0x02
   115B E5            [11] 2428 	push	hl
   115C 21r1Ar01      [10] 2429 	ld	hl, #_scanresResponse
   115F E5            [11] 2430 	push	hl
   1160 CDr19r08      [17] 2431 	call	_WaitForRXData
   1163 FD 21 0C 00   [14] 2432 	ld	iy, #12
   1167 FD 39         [15] 2433 	add	iy, sp
   1169 FD F9         [10] 2434 	ld	sp, iy
   116B C1            [10] 2435 	pop	bc
                           2436 ;src\CFG8266.c:522: while ((ucRetries)&&(!bResponse));
   116C 79            [ 4] 2437 	ld	a, c
   116D B7            [ 4] 2438 	or	a, a
   116E 28 04         [12] 2439 	jr	Z,00163$
   1170 7D            [ 4] 2440 	ld	a, l
   1171 B7            [ 4] 2441 	or	a, a
   1172 28 C0         [12] 2442 	jr	Z,00161$
   1174                    2443 00163$:
                           2444 ;src\CFG8266.c:524: if (bResponse==1)
   1174 2D            [ 4] 2445 	dec	l
   1175 C2rDEr16      [10] 2446 	jp	NZ,00268$
                           2447 ;src\CFG8266.c:527: while(!UartRXData());
   1178                    2448 00164$:
   1178 DB 07         [11] 2449 	in	a, (_myPort7)
   117A D6 01         [ 7] 2450 	sub	a,#0x01
   117C 3E 00         [ 7] 2451 	ld	a, #0x00
   117E 17            [ 4] 2452 	rla
   117F CB 47         [ 8] 2453 	bit	0, a
   1181 20 F5         [12] 2454 	jr	NZ,00164$
                           2455 ;src\CFG8266.c:528: ucAPs = GetUARTData();
   1183 DB 06         [11] 2456 	in	a, (_myPort6)
   1185 DD 77 F0      [19] 2457 	ld	-16 (ix), a
                           2458 ;src\CFG8266.c:529: if (ucAPs>100)
   1188 3E 64         [ 7] 2459 	ld	a, #0x64
   118A DD 96 F0      [19] 2460 	sub	a, -16 (ix)
   118D 30 04         [12] 2461 	jr	NC,00168$
                           2462 ;src\CFG8266.c:530: ucAPs=100;
   118F DD 36 F0 64   [19] 2463 	ld	-16 (ix), #0x64
   1193                    2464 00168$:
                           2465 ;src\CFG8266.c:532: printf ("\r\n");
   1193 21r4Cr20      [10] 2466 	ld	hl, #___str_35
   1196 E5            [11] 2467 	push	hl
   1197 CDr00r00      [17] 2468 	call	_puts
   119A F1            [10] 2469 	pop	af
                           2470 ;src\CFG8266.c:533: do
   119B 21 51 00      [10] 2471 	ld	hl, #81
   119E 39            [11] 2472 	add	hl, sp
   119F DD 75 F1      [19] 2473 	ld	-15 (ix), l
   11A2 DD 74 F2      [19] 2474 	ld	-14 (ix), h
   11A5 AF            [ 4] 2475 	xor	a, a
   11A6 DD 77 FD      [19] 2476 	ld	-3 (ix), a
                           2477 ;src\CFG8266.c:538: while(!UartRXData());
   11A9                    2478 00433$:
   11A9 DD 4E FD      [19] 2479 	ld	c, -3 (ix)
   11AC 06 00         [ 7] 2480 	ld	b, #0x00
   11AE 69            [ 4] 2481 	ld	l, c
   11AF 60            [ 4] 2482 	ld	h, b
   11B0 29            [11] 2483 	add	hl, hl
   11B1 29            [11] 2484 	add	hl, hl
   11B2 29            [11] 2485 	add	hl, hl
   11B3 29            [11] 2486 	add	hl, hl
   11B4 09            [11] 2487 	add	hl, bc
   11B5 29            [11] 2488 	add	hl, hl
   11B6 EB            [ 4] 2489 	ex	de, hl
   11B7 7B            [ 4] 2490 	ld	a, e
   11B8 DD 86 F1      [19] 2491 	add	a, -15 (ix)
   11BB 4F            [ 4] 2492 	ld	c, a
   11BC 7A            [ 4] 2493 	ld	a, d
   11BD DD 8E F2      [19] 2494 	adc	a, -14 (ix)
   11C0 47            [ 4] 2495 	ld	b, a
   11C1 1E 00         [ 7] 2496 	ld	e, #0x00
   11C3                    2497 00169$:
   11C3 DB 07         [11] 2498 	in	a, (_myPort7)
   11C5 D6 01         [ 7] 2499 	sub	a,#0x01
   11C7 3E 00         [ 7] 2500 	ld	a, #0x00
   11C9 17            [ 4] 2501 	rla
   11CA CB 47         [ 8] 2502 	bit	0, a
   11CC 20 F5         [12] 2503 	jr	NZ,00169$
                           2504 ;src\CFG8266.c:539: rx_data=GetUARTData();
   11CE DB 06         [11] 2505 	in	a, (_myPort6)
   11D0 DD 77 FC      [19] 2506 	ld	-4 (ix), a
                           2507 ;src\CFG8266.c:540: stAP[tx_data].APName[ucIndex++]=rx_data;
   11D3 7B            [ 4] 2508 	ld	a, e
   11D4 1C            [ 4] 2509 	inc	e
   11D5 6F            [ 4] 2510 	ld	l, a
   11D6 26 00         [ 7] 2511 	ld	h, #0x00
   11D8 09            [11] 2512 	add	hl, bc
   11D9 DD 7E FC      [19] 2513 	ld	a, -4 (ix)
   11DC 77            [ 7] 2514 	ld	(hl), a
                           2515 ;src\CFG8266.c:542: while(rx_data!=0);
   11DD DD 7E FC      [19] 2516 	ld	a, -4 (ix)
   11E0 B7            [ 4] 2517 	or	a, a
   11E1 20 E0         [12] 2518 	jr	NZ,00169$
                           2519 ;src\CFG8266.c:543: while(!UartRXData());
   11E3                    2520 00175$:
   11E3 DB 07         [11] 2521 	in	a, (_myPort7)
   11E5 D6 01         [ 7] 2522 	sub	a,#0x01
   11E7 3E 00         [ 7] 2523 	ld	a, #0x00
   11E9 17            [ 4] 2524 	rla
   11EA CB 47         [ 8] 2525 	bit	0, a
   11EC 20 F5         [12] 2526 	jr	NZ,00175$
                           2527 ;src\CFG8266.c:544: rx_data=GetUARTData();
   11EE DB 06         [11] 2528 	in	a, (_myPort6)
   11F0 4F            [ 4] 2529 	ld	c, a
                           2530 ;src\CFG8266.c:545: stAP[tx_data].isEncrypted = (rx_data == 'E') ? 1 : 0;
   11F1 DD 5E FD      [19] 2531 	ld	e, -3 (ix)
   11F4 16 00         [ 7] 2532 	ld	d, #0x00
   11F6 6B            [ 4] 2533 	ld	l, e
   11F7 62            [ 4] 2534 	ld	h, d
   11F8 29            [11] 2535 	add	hl, hl
   11F9 29            [11] 2536 	add	hl, hl
   11FA 29            [11] 2537 	add	hl, hl
   11FB 29            [11] 2538 	add	hl, hl
   11FC 19            [11] 2539 	add	hl, de
   11FD 29            [11] 2540 	add	hl, hl
   11FE EB            [ 4] 2541 	ex	de, hl
   11FF DD 7E F1      [19] 2542 	ld	a, -15 (ix)
   1202 83            [ 4] 2543 	add	a, e
   1203 5F            [ 4] 2544 	ld	e, a
   1204 DD 7E F2      [19] 2545 	ld	a, -14 (ix)
   1207 8A            [ 4] 2546 	adc	a, d
   1208 57            [ 4] 2547 	ld	d, a
   1209 21 21 00      [10] 2548 	ld	hl, #0x0021
   120C 19            [11] 2549 	add	hl, de
   120D DD 75 F9      [19] 2550 	ld	-7 (ix), l
   1210 DD 74 FA      [19] 2551 	ld	-6 (ix), h
   1213 79            [ 4] 2552 	ld	a, c
   1214 D6 45         [ 7] 2553 	sub	a, #0x45
   1216 20 0A         [12] 2554 	jr	NZ,00392$
   1218 DD 36 FB 01   [19] 2555 	ld	-5 (ix), #0x01
   121C AF            [ 4] 2556 	xor	a, a
   121D DD 77 FC      [19] 2557 	ld	-4 (ix), a
   1220 18 07         [12] 2558 	jr	00393$
   1222                    2559 00392$:
   1222 AF            [ 4] 2560 	xor	a, a
   1223 DD 77 FB      [19] 2561 	ld	-5 (ix), a
   1226 DD 77 FC      [19] 2562 	ld	-4 (ix), a
   1229                    2563 00393$:
   1229 DD 7E FB      [19] 2564 	ld	a, -5 (ix)
   122C DD 6E F9      [19] 2565 	ld	l, -7 (ix)
   122F DD 66 FA      [19] 2566 	ld	h, -6 (ix)
   1232 77            [ 7] 2567 	ld	(hl), a
                           2568 ;src\CFG8266.c:546: ++tx_data;
   1233 DD 34 FD      [23] 2569 	inc	-3 (ix)
                           2570 ;src\CFG8266.c:548: while (tx_data!=ucAPs);
   1236 DD 7E FD      [19] 2571 	ld	a, -3 (ix)
   1239 DD 96 F0      [19] 2572 	sub	a, -16 (ix)
   123C C2rA9r11      [10] 2573 	jp	NZ,00433$
                           2574 ;src\CFG8266.c:549: ClearUartData();
   123F 3E 14         [ 7] 2575 	ld	a, #0x14
   1241 D3 06         [11] 2576 	out	(_myPort6), a
                           2577 ;src\CFG8266.c:551: do
   1243 DD 7E FE      [19] 2578 	ld	a, -2 (ix)
   1246 D6 02         [ 7] 2579 	sub	a, #0x02
   1248 3E 00         [ 7] 2580 	ld	a, #0x00
   124A 17            [ 4] 2581 	rla
   124B DD 77 F3      [19] 2582 	ld	-13 (ix), a
   124E DD 7E FF      [19] 2583 	ld	a, -1 (ix)
   1251 D6 01         [ 7] 2584 	sub	a, #0x01
   1253 3E 00         [ 7] 2585 	ld	a, #0x00
   1255 17            [ 4] 2586 	rla
   1256 DD 77 F4      [19] 2587 	ld	-12 (ix), a
   1259 21 C6 0D      [10] 2588 	ld	hl, #3526
   125C 39            [11] 2589 	add	hl, sp
   125D DD 75 F5      [19] 2590 	ld	-11 (ix), l
   1260 DD 74 F6      [19] 2591 	ld	-10 (ix), h
   1263 DD 7E F5      [19] 2592 	ld	a, -11 (ix)
   1266 C6 01         [ 7] 2593 	add	a, #0x01
   1268 DD 77 F7      [19] 2594 	ld	-9 (ix), a
   126B DD 7E F6      [19] 2595 	ld	a, -10 (ix)
   126E CE 00         [ 7] 2596 	adc	a, #0x00
   1270 DD 77 F8      [19] 2597 	ld	-8 (ix), a
   1273 AF            [ 4] 2598 	xor	a, a
   1274 DD 77 FE      [19] 2599 	ld	-2 (ix), a
   1277                    2600 00264$:
                           2601 ;src\CFG8266.c:553: Cls();
   1277 CDr00r00      [17] 2602 	call	_Cls
                           2603 ;src\CFG8266.c:554: printf("%s%s\r\n\n",strAPSts[chAPStsInfo[0]],&chAPStsInfo[1]);
   127A DD 7E F7      [19] 2604 	ld	a, -9 (ix)
   127D DD 77 FA      [19] 2605 	ld	-6 (ix), a
   1280 DD 7E F8      [19] 2606 	ld	a, -8 (ix)
   1283 DD 77 FB      [19] 2607 	ld	-5 (ix), a
   1286 DD 6E F5      [19] 2608 	ld	l, -11 (ix)
   1289 DD 66 F6      [19] 2609 	ld	h, -10 (ix)
   128C 7E            [ 7] 2610 	ld	a, (hl)
   128D DD 77 FF      [19] 2611 	ld	-1 (ix), a
   1290 DD 77 FC      [19] 2612 	ld	-4 (ix), a
   1293 AF            [ 4] 2613 	xor	a, a
   1294 DD 77 FD      [19] 2614 	ld	-3 (ix), a
   1297 DD 7E FC      [19] 2615 	ld	a, -4 (ix)
   129A FD 21 0E 00   [14] 2616 	ld	iy, #14
   129E FD 39         [15] 2617 	add	iy, sp
   12A0 FD 77 00      [19] 2618 	ld	0 (iy), a
   12A3 DD 7E FD      [19] 2619 	ld	a, -3 (ix)
   12A6 FD 77 01      [19] 2620 	ld	1 (iy), a
   12A9 FD CB 00 26   [23] 2621 	sla	0 (iy)
   12AD FD CB 01 16   [23] 2622 	rl	1 (iy)
   12B1 3Er00         [ 7] 2623 	ld	a, #<(_strAPSts)
   12B3 21 0E 00      [10] 2624 	ld	hl, #14
   12B6 39            [11] 2625 	add	hl, sp
   12B7 86            [ 7] 2626 	add	a, (hl)
   12B8 DD 77 FC      [19] 2627 	ld	-4 (ix), a
   12BB 3Es00         [ 7] 2628 	ld	a, #>(_strAPSts)
   12BD 23            [ 6] 2629 	inc	hl
   12BE 8E            [ 7] 2630 	adc	a, (hl)
   12BF DD 77 FD      [19] 2631 	ld	-3 (ix), a
   12C2 DD 6E FC      [19] 2632 	ld	l, -4 (ix)
   12C5 DD 66 FD      [19] 2633 	ld	h, -3 (ix)
   12C8 7E            [ 7] 2634 	ld	a, (hl)
   12C9 DD 77 FC      [19] 2635 	ld	-4 (ix), a
   12CC 23            [ 6] 2636 	inc	hl
   12CD 7E            [ 7] 2637 	ld	a, (hl)
   12CE DD 77 FD      [19] 2638 	ld	-3 (ix), a
   12D1 DD 6E FA      [19] 2639 	ld	l, -6 (ix)
   12D4 DD 66 FB      [19] 2640 	ld	h, -5 (ix)
   12D7 E5            [11] 2641 	push	hl
   12D8 DD 6E FC      [19] 2642 	ld	l, -4 (ix)
   12DB DD 66 FD      [19] 2643 	ld	h, -3 (ix)
   12DE E5            [11] 2644 	push	hl
   12DF 21r4Er20      [10] 2645 	ld	hl, #___str_36
   12E2 E5            [11] 2646 	push	hl
   12E3 CDr00r00      [17] 2647 	call	_printf
   12E6 F1            [10] 2648 	pop	af
   12E7 F1            [10] 2649 	pop	af
                           2650 ;src\CFG8266.c:555: printf("Choose AP:\r\n\n");
   12E8 21r56r20      [10] 2651 	ld	hl, #___str_38
   12EB E3            [19] 2652 	ex	(sp),hl
   12EC CDr00r00      [17] 2653 	call	_puts
   12EF F1            [10] 2654 	pop	af
                           2655 ;src\CFG8266.c:557: ucIndex = scanPageLimit*ucScanPage;
   12F0 DD 7E FE      [19] 2656 	ld	a, -2 (ix)
   12F3 4F            [ 4] 2657 	ld	c, a
   12F4 87            [ 4] 2658 	add	a, a
   12F5 87            [ 4] 2659 	add	a, a
   12F6 81            [ 4] 2660 	add	a, c
   12F7 87            [ 4] 2661 	add	a, a
   12F8 DD 77 FF      [19] 2662 	ld	-1 (ix), a
                           2663 ;src\CFG8266.c:559: if ((ucAPs-ucIndex)<=scanPageLimit)
   12FB DD 7E F0      [19] 2664 	ld	a, -16 (ix)
   12FE DD 77 F9      [19] 2665 	ld	-7 (ix), a
   1301 AF            [ 4] 2666 	xor	a, a
   1302 DD 77 FA      [19] 2667 	ld	-6 (ix), a
   1305 DD 7E FF      [19] 2668 	ld	a, -1 (ix)
   1308 FD 21 0E 00   [14] 2669 	ld	iy, #14
   130C FD 39         [15] 2670 	add	iy, sp
   130E FD 77 00      [19] 2671 	ld	0 (iy), a
   1311 AF            [ 4] 2672 	xor	a, a
   1312 FD 77 01      [19] 2673 	ld	1 (iy), a
   1315 21 0E 00      [10] 2674 	ld	hl, #14
   1318 39            [11] 2675 	add	hl, sp
   1319 DD 7E F9      [19] 2676 	ld	a, -7 (ix)
   131C 96            [ 7] 2677 	sub	a, (hl)
   131D DD 77 FC      [19] 2678 	ld	-4 (ix), a
   1320 DD 7E FA      [19] 2679 	ld	a, -6 (ix)
   1323 23            [ 6] 2680 	inc	hl
   1324 9E            [ 7] 2681 	sbc	a, (hl)
   1325 DD 77 FD      [19] 2682 	ld	-3 (ix), a
   1328 3E 0A         [ 7] 2683 	ld	a, #0x0a
   132A DD BE FC      [19] 2684 	cp	a, -4 (ix)
   132D 3E 00         [ 7] 2685 	ld	a, #0x00
   132F DD 9E FD      [19] 2686 	sbc	a, -3 (ix)
   1332 E2r37r13      [10] 2687 	jp	PO, 01007$
   1335 EE 80         [ 7] 2688 	xor	a, #0x80
   1337                    2689 01007$:
   1337 FAr42r13      [10] 2690 	jp	M, 00182$
                           2691 ;src\CFG8266.c:560: ucPageCheck = ucAPs;
   133A DD 7E F0      [19] 2692 	ld	a, -16 (ix)
   133D DD 77 FB      [19] 2693 	ld	-5 (ix), a
   1340 18 0B         [12] 2694 	jr	00443$
   1342                    2695 00182$:
                           2696 ;src\CFG8266.c:562: ucPageCheck = ucIndex + scanPageLimit;
   1342 DD 7E FF      [19] 2697 	ld	a, -1 (ix)
   1345 DD 77 FD      [19] 2698 	ld	-3 (ix), a
   1348 C6 0A         [ 7] 2699 	add	a, #0x0a
   134A DD 77 FB      [19] 2700 	ld	-5 (ix), a
   134D                    2701 00443$:
   134D                    2702 00382$:
                           2703 ;src\CFG8266.c:564: for (;ucIndex<ucPageCheck;ucIndex++)
   134D DD 7E FF      [19] 2704 	ld	a, -1 (ix)
   1350 DD 96 FB      [19] 2705 	sub	a, -5 (ix)
   1353 30 64         [12] 2706 	jr	NC,00187$
                           2707 ;src\CFG8266.c:566: printf("%u - %s",(ucIndex%scanPageLimit),stAP[ucIndex].APName);
   1355 DD 4E FF      [19] 2708 	ld	c, -1 (ix)
   1358 06 00         [ 7] 2709 	ld	b, #0x00
   135A 69            [ 4] 2710 	ld	l, c
   135B 60            [ 4] 2711 	ld	h, b
   135C 29            [11] 2712 	add	hl, hl
   135D 29            [11] 2713 	add	hl, hl
   135E 29            [11] 2714 	add	hl, hl
   135F 29            [11] 2715 	add	hl, hl
   1360 09            [11] 2716 	add	hl, bc
   1361 29            [11] 2717 	add	hl, hl
   1362 EB            [ 4] 2718 	ex	de, hl
   1363 DD 6E F1      [19] 2719 	ld	l, -15 (ix)
   1366 DD 66 F2      [19] 2720 	ld	h, -14 (ix)
   1369 19            [11] 2721 	add	hl, de
   136A DD 75 FC      [19] 2722 	ld	-4 (ix), l
   136D DD 74 FD      [19] 2723 	ld	-3 (ix), h
   1370 DD 4E FF      [19] 2724 	ld	c, -1 (ix)
   1373 06 00         [ 7] 2725 	ld	b, #0x00
   1375 D5            [11] 2726 	push	de
   1376 21 0A 00      [10] 2727 	ld	hl, #0x000a
   1379 E5            [11] 2728 	push	hl
   137A C5            [11] 2729 	push	bc
   137B CDr00r00      [17] 2730 	call	__modsint
   137E F1            [10] 2731 	pop	af
   137F F1            [10] 2732 	pop	af
   1380 DD 4E FC      [19] 2733 	ld	c, -4 (ix)
   1383 DD 46 FD      [19] 2734 	ld	b, -3 (ix)
   1386 C5            [11] 2735 	push	bc
   1387 E5            [11] 2736 	push	hl
   1388 21r63r20      [10] 2737 	ld	hl, #___str_39
   138B E5            [11] 2738 	push	hl
   138C CDr00r00      [17] 2739 	call	_printf
   138F F1            [10] 2740 	pop	af
   1390 F1            [10] 2741 	pop	af
   1391 F1            [10] 2742 	pop	af
   1392 D1            [10] 2743 	pop	de
                           2744 ;src\CFG8266.c:567: if (stAP[ucIndex].isEncrypted)
   1393 DD 6E F1      [19] 2745 	ld	l, -15 (ix)
   1396 DD 66 F2      [19] 2746 	ld	h, -14 (ix)
   1399 19            [11] 2747 	add	hl, de
   139A 11 21 00      [10] 2748 	ld	de, #0x0021
   139D 19            [11] 2749 	add	hl, de
   139E 7E            [ 7] 2750 	ld	a, (hl)
   139F B7            [ 4] 2751 	or	a, a
   13A0 28 0A         [12] 2752 	jr	Z,00185$
                           2753 ;src\CFG8266.c:568: printf(" (PWD)\r\n");
   13A2 21r6Br20      [10] 2754 	ld	hl, #___str_41
   13A5 E5            [11] 2755 	push	hl
   13A6 CDr00r00      [17] 2756 	call	_puts
   13A9 F1            [10] 2757 	pop	af
   13AA 18 08         [12] 2758 	jr	00383$
   13AC                    2759 00185$:
                           2760 ;src\CFG8266.c:570: printf(" (OPEN)\r\n");
   13AC 21r73r20      [10] 2761 	ld	hl, #___str_43
   13AF E5            [11] 2762 	push	hl
   13B0 CDr00r00      [17] 2763 	call	_puts
   13B3 F1            [10] 2764 	pop	af
   13B4                    2765 00383$:
                           2766 ;src\CFG8266.c:564: for (;ucIndex<ucPageCheck;ucIndex++)
   13B4 DD 34 FF      [23] 2767 	inc	-1 (ix)
   13B7 18 94         [12] 2768 	jr	00382$
   13B9                    2769 00187$:
                           2770 ;src\CFG8266.c:573: if (ucAPs-ucIndex) // still APs left to list?
   13B9 DD 4E FF      [19] 2771 	ld	c, -1 (ix)
   13BC 06 00         [ 7] 2772 	ld	b, #0x00
   13BE DD 7E F9      [19] 2773 	ld	a, -7 (ix)
   13C1 91            [ 4] 2774 	sub	a, c
   13C2 DD 77 FC      [19] 2775 	ld	-4 (ix), a
   13C5 DD 7E FA      [19] 2776 	ld	a, -6 (ix)
   13C8 98            [ 4] 2777 	sbc	a, b
   13C9 DD 77 FD      [19] 2778 	ld	-3 (ix), a
   13CC DD B6 FC      [19] 2779 	or	a, -4 (ix)
   13CF 28 0A         [12] 2780 	jr	Z,00189$
                           2781 ;src\CFG8266.c:574: printf("\r\nWhich one to connect? (ESC exit/SPACE BAR next page)");
   13D1 21r7Cr20      [10] 2782 	ld	hl, #___str_44
   13D4 E5            [11] 2783 	push	hl
   13D5 CDr00r00      [17] 2784 	call	_printf
   13D8 F1            [10] 2785 	pop	af
   13D9 18 08         [12] 2786 	jr	00204$
   13DB                    2787 00189$:
                           2788 ;src\CFG8266.c:576: printf("\r\nWhich one to connect? (ESC exit)");
   13DB 21rB3r20      [10] 2789 	ld	hl, #___str_45
   13DE E5            [11] 2790 	push	hl
   13DF CDr00r00      [17] 2791 	call	_printf
   13E2 F1            [10] 2792 	pop	af
                           2793 ;src\CFG8266.c:578: do
   13E3                    2794 00204$:
                           2795 ;src\CFG8266.c:580: tx_data = Inkey ();
   13E3 CDr00r00      [17] 2796 	call	_Inkey
   13E6 4D            [ 4] 2797 	ld	c, l
                           2798 ;src\CFG8266.c:582: if (tx_data==0x1b)
                           2799 ;src\CFG8266.c:585: if ((tx_data==' ')&&(ucAPs-ucIndex))
   13E7 79            [ 4] 2800 	ld	a,c
   13E8 FE 1B         [ 7] 2801 	cp	a,#0x1b
   13EA 28 54         [12] 2802 	jr	Z,00206$
   13EC D6 20         [ 7] 2803 	sub	a, #0x20
   13EE 20 08         [12] 2804 	jr	NZ,00194$
   13F0 DD 7E FD      [19] 2805 	ld	a, -3 (ix)
   13F3 DD B6 FC      [19] 2806 	or	a, -4 (ix)
   13F6 20 48         [12] 2807 	jr	NZ,00206$
                           2808 ;src\CFG8266.c:586: break;
   13F8                    2809 00194$:
                           2810 ;src\CFG8266.c:588: if ((tx_data>='0')&&(tx_data<='9'))
   13F8 79            [ 4] 2811 	ld	a, c
   13F9 D6 30         [ 7] 2812 	sub	a, #0x30
   13FB 38 3A         [12] 2813 	jr	C,00200$
   13FD 3E 39         [ 7] 2814 	ld	a, #0x39
   13FF 91            [ 4] 2815 	sub	a, c
   1400 38 35         [12] 2816 	jr	C,00200$
                           2817 ;src\CFG8266.c:590: if (((tx_data-'0')<scanPageLimit)&&(((scanPageLimit*ucScanPage)+(tx_data-'0'))<ucAPs))
   1402 41            [ 4] 2818 	ld	b, c
   1403 16 00         [ 7] 2819 	ld	d, #0x00
   1405 78            [ 4] 2820 	ld	a, b
   1406 C6 D0         [ 7] 2821 	add	a, #0xd0
   1408 5F            [ 4] 2822 	ld	e, a
   1409 7A            [ 4] 2823 	ld	a, d
   140A CE FF         [ 7] 2824 	adc	a, #0xff
   140C 57            [ 4] 2825 	ld	d, a
   140D 7B            [ 4] 2826 	ld	a, e
   140E D6 0A         [ 7] 2827 	sub	a, #0x0a
   1410 7A            [ 4] 2828 	ld	a, d
   1411 17            [ 4] 2829 	rla
   1412 3F            [ 4] 2830 	ccf
   1413 1F            [ 4] 2831 	rra
   1414 DE 80         [ 7] 2832 	sbc	a, #0x80
   1416 30 1F         [12] 2833 	jr	NC,00200$
   1418 DD 6E FE      [19] 2834 	ld	l, -2 (ix)
   141B 26 00         [ 7] 2835 	ld	h, #0x00
   141D D5            [11] 2836 	push	de
   141E 5D            [ 4] 2837 	ld	e, l
   141F 54            [ 4] 2838 	ld	d, h
   1420 29            [11] 2839 	add	hl, hl
   1421 29            [11] 2840 	add	hl, hl
   1422 19            [11] 2841 	add	hl, de
   1423 29            [11] 2842 	add	hl, hl
   1424 D1            [10] 2843 	pop	de
   1425 19            [11] 2844 	add	hl, de
   1426 EB            [ 4] 2845 	ex	de, hl
   1427 7B            [ 4] 2846 	ld	a, e
   1428 DD 96 F9      [19] 2847 	sub	a, -7 (ix)
   142B 7A            [ 4] 2848 	ld	a, d
   142C DD 9E FA      [19] 2849 	sbc	a, -6 (ix)
   142F E2r34r14      [10] 2850 	jp	PO, 01011$
   1432 EE 80         [ 7] 2851 	xor	a, #0x80
   1434                    2852 01011$:
   1434 FAr40r14      [10] 2853 	jp	M, 00206$
                           2854 ;src\CFG8266.c:591: break;
   1437                    2855 00200$:
                           2856 ;src\CFG8266.c:593: if (tx_data)
   1437 79            [ 4] 2857 	ld	a, c
   1438 B7            [ 4] 2858 	or	a, a
   1439 28 A8         [12] 2859 	jr	Z,00204$
                           2860 ;src\CFG8266.c:594: Beep();
   143B CDr00r00      [17] 2861 	call	_Beep
                           2862 ;src\CFG8266.c:596: while (1);
   143E 18 A3         [12] 2863 	jr	00204$
   1440                    2864 00206$:
                           2865 ;src\CFG8266.c:598: if ((tx_data!=0x1b)&&(tx_data!=' ')) // AP Choosen?
   1440 79            [ 4] 2866 	ld	a,c
   1441 FE 1B         [ 7] 2867 	cp	a,#0x1b
   1443 CAr55r16      [10] 2868 	jp	Z,00261$
   1446 D6 20         [ 7] 2869 	sub	a, #0x20
   1448 CAr55r16      [10] 2870 	jp	Z,00261$
                           2871 ;src\CFG8266.c:601: printf(" %c\r\n\n",tx_data); // Print accepted char
   144B 59            [ 4] 2872 	ld	e, c
   144C 16 00         [ 7] 2873 	ld	d, #0x00
   144E C5            [11] 2874 	push	bc
   144F D5            [11] 2875 	push	de
   1450 21rD6r20      [10] 2876 	ld	hl, #___str_46
   1453 E5            [11] 2877 	push	hl
   1454 CDr00r00      [17] 2878 	call	_printf
   1457 F1            [10] 2879 	pop	af
   1458 F1            [10] 2880 	pop	af
   1459 C1            [10] 2881 	pop	bc
                           2882 ;src\CFG8266.c:602: ucIndex = (scanPageLimit*ucScanPage) + (tx_data-'0');
   145A DD 7E EF      [19] 2883 	ld	a, -17 (ix)
   145D 5F            [ 4] 2884 	ld	e, a
   145E 87            [ 4] 2885 	add	a, a
   145F 87            [ 4] 2886 	add	a, a
   1460 83            [ 4] 2887 	add	a, e
   1461 87            [ 4] 2888 	add	a, a
   1462 5F            [ 4] 2889 	ld	e, a
   1463 79            [ 4] 2890 	ld	a, c
   1464 C6 D0         [ 7] 2891 	add	a, #0xd0
   1466 83            [ 4] 2892 	add	a, e
                           2893 ;src\CFG8266.c:603: if (stAP[ucIndex].isEncrypted)
   1467 4F            [ 4] 2894 	ld	c, a
   1468 06 00         [ 7] 2895 	ld	b, #0x00
   146A 69            [ 4] 2896 	ld	l, c
   146B 60            [ 4] 2897 	ld	h, b
   146C 29            [11] 2898 	add	hl, hl
   146D 29            [11] 2899 	add	hl, hl
   146E 29            [11] 2900 	add	hl, hl
   146F 29            [11] 2901 	add	hl, hl
   1470 09            [11] 2902 	add	hl, bc
   1471 29            [11] 2903 	add	hl, hl
   1472 DD 75 FC      [19] 2904 	ld	-4 (ix), l
   1475 DD 74 FD      [19] 2905 	ld	-3 (ix), h
   1478 DD 7E F1      [19] 2906 	ld	a, -15 (ix)
   147B DD 86 FC      [19] 2907 	add	a, -4 (ix)
   147E 4F            [ 4] 2908 	ld	c, a
   147F DD 7E F2      [19] 2909 	ld	a, -14 (ix)
   1482 DD 8E FD      [19] 2910 	adc	a, -3 (ix)
   1485 47            [ 4] 2911 	ld	b, a
   1486 21 21 00      [10] 2912 	ld	hl, #0x0021
   1489 09            [11] 2913 	add	hl, bc
   148A DD 75 FE      [19] 2914 	ld	-2 (ix), l
   148D DD 74 FF      [19] 2915 	ld	-1 (ix), h
   1490 7E            [ 7] 2916 	ld	a, (hl)
   1491 B7            [ 4] 2917 	or	a, a
   1492 28 21         [12] 2918 	jr	Z,00208$
                           2919 ;src\CFG8266.c:606: printf("Password? ");
   1494 C5            [11] 2920 	push	bc
   1495 21rDDr20      [10] 2921 	ld	hl, #___str_47
   1498 E5            [11] 2922 	push	hl
   1499 CDr00r00      [17] 2923 	call	_printf
   149C F1            [10] 2924 	pop	af
   149D C1            [10] 2925 	pop	bc
                           2926 ;src\CFG8266.c:607: InputString(ucPWD,64);
   149E 21 10 00      [10] 2927 	ld	hl, #16
   14A1 39            [11] 2928 	add	hl, sp
   14A2 C5            [11] 2929 	push	bc
   14A3 11 40 00      [10] 2930 	ld	de, #0x0040
   14A6 D5            [11] 2931 	push	de
   14A7 E5            [11] 2932 	push	hl
   14A8 CDr00r00      [17] 2933 	call	_InputString
   14AB F1            [10] 2934 	pop	af
   14AC 21r4Cr20      [10] 2935 	ld	hl, #___str_35
   14AF E3            [19] 2936 	ex	(sp),hl
   14B0 CDr00r00      [17] 2937 	call	_puts
   14B3 F1            [10] 2938 	pop	af
   14B4 C1            [10] 2939 	pop	bc
   14B5                    2940 00208$:
                           2941 ;src\CFG8266.c:611: printf("Connecting to: %s \r\n",stAP[ucIndex].APName);
   14B5 59            [ 4] 2942 	ld	e, c
   14B6 50            [ 4] 2943 	ld	d, b
   14B7 C5            [11] 2944 	push	bc
   14B8 D5            [11] 2945 	push	de
   14B9 21rE8r20      [10] 2946 	ld	hl, #___str_49
   14BC E5            [11] 2947 	push	hl
   14BD CDr00r00      [17] 2948 	call	_printf
   14C0 F1            [10] 2949 	pop	af
   14C1 F1            [10] 2950 	pop	af
   14C2 CDr00r00      [17] 2951 	call	_strlen
   14C5 F1            [10] 2952 	pop	af
   14C6 23            [ 6] 2953 	inc	hl
   14C7 4D            [ 4] 2954 	ld	c,l
   14C8 44            [ 4] 2955 	ld	b,h
                           2956 ;src\CFG8266.c:614: if (stAP[ucIndex].isEncrypted)
   14C9 DD 6E FE      [19] 2957 	ld	l, -2 (ix)
   14CC DD 66 FF      [19] 2958 	ld	h, -1 (ix)
   14CF 7E            [ 7] 2959 	ld	a, (hl)
   14D0 B7            [ 4] 2960 	or	a, a
   14D1 28 0E         [12] 2961 	jr	Z,00210$
                           2962 ;src\CFG8266.c:615: uiCMDLen += strlen(ucPWD);
   14D3 21 10 00      [10] 2963 	ld	hl, #16
   14D6 39            [11] 2964 	add	hl, sp
   14D7 C5            [11] 2965 	push	bc
   14D8 E5            [11] 2966 	push	hl
   14D9 CDr00r00      [17] 2967 	call	_strlen
   14DC F1            [10] 2968 	pop	af
   14DD C1            [10] 2969 	pop	bc
   14DE 09            [11] 2970 	add	hl, bc
   14DF 4D            [ 4] 2971 	ld	c, l
   14E0 44            [ 4] 2972 	ld	b, h
   14E1                    2973 00210$:
                           2974 ;src\CFG8266.c:616: TxByte('A'); //Request connect AP
   14E1 C5            [11] 2975 	push	bc
   14E2 3E 41         [ 7] 2976 	ld	a, #0x41
   14E4 F5            [11] 2977 	push	af
   14E5 33            [ 6] 2978 	inc	sp
   14E6 CDr89r06      [17] 2979 	call	_TxByte
   14E9 33            [ 6] 2980 	inc	sp
   14EA C1            [10] 2981 	pop	bc
                           2982 ;src\CFG8266.c:617: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   14EB 78            [ 4] 2983 	ld	a, b
   14EC C5            [11] 2984 	push	bc
   14ED F5            [11] 2985 	push	af
   14EE 33            [ 6] 2986 	inc	sp
   14EF CDr89r06      [17] 2987 	call	_TxByte
   14F2 33            [ 6] 2988 	inc	sp
   14F3 C1            [10] 2989 	pop	bc
                           2990 ;src\CFG8266.c:618: TxByte((unsigned char)(uiCMDLen&0xff));
   14F4 79            [ 4] 2991 	ld	a, c
   14F5 C5            [11] 2992 	push	bc
   14F6 F5            [11] 2993 	push	af
   14F7 33            [ 6] 2994 	inc	sp
   14F8 CDr89r06      [17] 2995 	call	_TxByte
   14FB 33            [ 6] 2996 	inc	sp
   14FC C1            [10] 2997 	pop	bc
                           2998 ;src\CFG8266.c:620: do
   14FD DD 7E FC      [19] 2999 	ld	a, -4 (ix)
   1500 DD 86 F1      [19] 3000 	add	a, -15 (ix)
   1503 DD 77 FE      [19] 3001 	ld	-2 (ix), a
   1506 DD 7E FD      [19] 3002 	ld	a, -3 (ix)
   1509 DD 8E F2      [19] 3003 	adc	a, -14 (ix)
   150C DD 77 FF      [19] 3004 	ld	-1 (ix), a
   150F 1E 00         [ 7] 3005 	ld	e, #0x00
   1511                    3006 00212$:
                           3007 ;src\CFG8266.c:622: tx_data = stAP[ucIndex].APName[rx_data];
   1511 DD 7E FE      [19] 3008 	ld	a, -2 (ix)
   1514 83            [ 4] 3009 	add	a, e
   1515 57            [ 4] 3010 	ld	d, a
   1516 DD 7E FF      [19] 3011 	ld	a, -1 (ix)
   1519 CE 00         [ 7] 3012 	adc	a, #0x00
   151B 6A            [ 4] 3013 	ld	l, d
   151C 67            [ 4] 3014 	ld	h, a
   151D 56            [ 7] 3015 	ld	d, (hl)
                           3016 ;src\CFG8266.c:623: TxByte(tx_data);
   151E C5            [11] 3017 	push	bc
   151F D5            [11] 3018 	push	de
   1520 D5            [11] 3019 	push	de
   1521 33            [ 6] 3020 	inc	sp
   1522 CDr89r06      [17] 3021 	call	_TxByte
   1525 33            [ 6] 3022 	inc	sp
   1526 D1            [10] 3023 	pop	de
   1527 C1            [10] 3024 	pop	bc
                           3025 ;src\CFG8266.c:624: --uiCMDLen;
   1528 0B            [ 6] 3026 	dec	bc
                           3027 ;src\CFG8266.c:625: ++rx_data;
   1529 1C            [ 4] 3028 	inc	e
                           3029 ;src\CFG8266.c:627: while((uiCMDLen)&&(tx_data!=0));
   152A 78            [ 4] 3030 	ld	a, b
   152B B1            [ 4] 3031 	or	a, c
   152C 28 04         [12] 3032 	jr	Z,00214$
   152E 7A            [ 4] 3033 	ld	a, d
   152F B7            [ 4] 3034 	or	a, a
   1530 20 DF         [12] 3035 	jr	NZ,00212$
   1532                    3036 00214$:
                           3037 ;src\CFG8266.c:628: if(uiCMDLen)
   1532 78            [ 4] 3038 	ld	a, b
   1533 B1            [ 4] 3039 	or	a, c
   1534 28 2C         [12] 3040 	jr	Z,00219$
                           3041 ;src\CFG8266.c:631: do
   1536 21 10 00      [10] 3042 	ld	hl, #16
   1539 39            [11] 3043 	add	hl, sp
   153A DD 75 FD      [19] 3044 	ld	-3 (ix), l
   153D DD 74 FE      [19] 3045 	ld	-2 (ix), h
   1540 AF            [ 4] 3046 	xor	a, a
   1541 DD 77 FF      [19] 3047 	ld	-1 (ix), a
   1544                    3048 00215$:
                           3049 ;src\CFG8266.c:633: tx_data = ucPWD[rx_data];
   1544 DD 7E FD      [19] 3050 	ld	a, -3 (ix)
   1547 DD 86 FF      [19] 3051 	add	a, -1 (ix)
   154A 5F            [ 4] 3052 	ld	e, a
   154B DD 7E FE      [19] 3053 	ld	a, -2 (ix)
   154E CE 00         [ 7] 3054 	adc	a, #0x00
   1550 57            [ 4] 3055 	ld	d, a
   1551 1A            [ 7] 3056 	ld	a, (de)
                           3057 ;src\CFG8266.c:634: TxByte(tx_data);
   1552 C5            [11] 3058 	push	bc
   1553 F5            [11] 3059 	push	af
   1554 33            [ 6] 3060 	inc	sp
   1555 CDr89r06      [17] 3061 	call	_TxByte
   1558 33            [ 6] 3062 	inc	sp
   1559 C1            [10] 3063 	pop	bc
                           3064 ;src\CFG8266.c:635: --uiCMDLen;
   155A 0B            [ 6] 3065 	dec	bc
                           3066 ;src\CFG8266.c:636: ++rx_data;
   155B DD 34 FF      [23] 3067 	inc	-1 (ix)
                           3068 ;src\CFG8266.c:638: while(uiCMDLen);
   155E 78            [ 4] 3069 	ld	a, b
   155F B1            [ 4] 3070 	or	a, c
   1560 20 E2         [12] 3071 	jr	NZ,00215$
   1562                    3072 00219$:
                           3073 ;src\CFG8266.c:642: bResponse = WaitForRXData(apconfigurationResponse,2,600,true,false,NULL,0); //Wait up to 10s
   1562 21 00 00      [10] 3074 	ld	hl, #0x0000
   1565 E5            [11] 3075 	push	hl
   1566 2E 00         [ 7] 3076 	ld	l, #0x00
   1568 E5            [11] 3077 	push	hl
   1569 AF            [ 4] 3078 	xor	a, a
   156A 57            [ 4] 3079 	ld	d,a
   156B 1E 01         [ 7] 3080 	ld	e,#0x01
   156D D5            [11] 3081 	push	de
   156E 21 58 02      [10] 3082 	ld	hl, #0x0258
   1571 E5            [11] 3083 	push	hl
   1572 21 02 00      [10] 3084 	ld	hl, #0x0002
   1575 E5            [11] 3085 	push	hl
   1576 21r1Cr01      [10] 3086 	ld	hl, #_apconfigurationResponse
   1579 E5            [11] 3087 	push	hl
   157A CDr19r08      [17] 3088 	call	_WaitForRXData
   157D FD 21 0C 00   [14] 3089 	ld	iy, #12
   1581 FD 39         [15] 3090 	add	iy, sp
   1583 FD F9         [10] 3091 	ld	sp, iy
   1585 7D            [ 4] 3092 	ld	a, l
                           3093 ;src\CFG8266.c:643: if (bResponse)
   1586 B7            [ 4] 3094 	or	a, a
   1587 28 0B         [12] 3095 	jr	Z,00241$
                           3096 ;src\CFG8266.c:644: printf("Success, AP configured to be used.\r\n");
   1589 21rFDr20      [10] 3097 	ld	hl, #___str_51
   158C E5            [11] 3098 	push	hl
   158D CDr00r00      [17] 3099 	call	_puts
   1590 F1            [10] 3100 	pop	af
   1591 C3r80r1F      [10] 3101 	jp	00375$
   1594                    3102 00241$:
                           3103 ;src\CFG8266.c:647: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   1594 DD CB F4 46   [20] 3104 	bit	0, -12 (ix)
   1598 C2r4Ar16      [10] 3105 	jp	NZ, 00237$
   159B DD CB F3 46   [20] 3106 	bit	0, -13 (ix)
   159F C2r4Ar16      [10] 3107 	jp	NZ, 00237$
                           3108 ;src\CFG8266.c:649: for (i=90;i>0;--i)
   15A2 01 5A 00      [10] 3109 	ld	bc, #0x005a
   15A5                    3110 00384$:
                           3111 ;c:/fusion-c/fusion-c/header/../../fusion-c/header/msx_fusion.h:301: __endasm; 
   15A5 76            [ 4] 3112 	halt
                           3113 ;src\CFG8266.c:649: for (i=90;i>0;--i)
   15A6 0B            [ 6] 3114 	dec	bc
   15A7 78            [ 4] 3115 	ld	a, b
   15A8 B1            [ 4] 3116 	or	a, c
   15A9 20 FA         [12] 3117 	jr	NZ,00384$
                           3118 ;src\CFG8266.c:651: TxByte('g'); //Request current AP status
   15AB 3E 67         [ 7] 3119 	ld	a, #0x67
   15AD F5            [11] 3120 	push	af
   15AE 33            [ 6] 3121 	inc	sp
   15AF CDr89r06      [17] 3122 	call	_TxByte
   15B2 33            [ 6] 3123 	inc	sp
                           3124 ;src\CFG8266.c:652: bResponse = WaitForRXData(apstsResponse,3,120,true,false,NULL,0);
   15B3 21 00 00      [10] 3125 	ld	hl, #0x0000
   15B6 E5            [11] 3126 	push	hl
   15B7 2E 00         [ 7] 3127 	ld	l, #0x00
   15B9 E5            [11] 3128 	push	hl
   15BA AF            [ 4] 3129 	xor	a, a
   15BB 57            [ 4] 3130 	ld	d,a
   15BC 1E 01         [ 7] 3131 	ld	e,#0x01
   15BE D5            [11] 3132 	push	de
   15BF 2E 78         [ 7] 3133 	ld	l, #0x78
   15C1 E5            [11] 3134 	push	hl
   15C2 2E 03         [ 7] 3135 	ld	l, #0x03
   15C4 E5            [11] 3136 	push	hl
   15C5 21r1Er01      [10] 3137 	ld	hl, #_apstsResponse
   15C8 E5            [11] 3138 	push	hl
   15C9 CDr19r08      [17] 3139 	call	_WaitForRXData
   15CC FD 21 0C 00   [14] 3140 	ld	iy, #12
   15D0 FD 39         [15] 3141 	add	iy, sp
   15D2 FD F9         [10] 3142 	ld	sp, iy
   15D4 7D            [ 4] 3143 	ld	a, l
                           3144 ;src\CFG8266.c:653: if (bResponse)
   15D5 B7            [ 4] 3145 	or	a, a
   15D6 28 67         [12] 3146 	jr	Z,00234$
                           3147 ;src\CFG8266.c:655: while(!UartRXData());
   15D8                    3148 00221$:
   15D8 DB 07         [11] 3149 	in	a, (_myPort7)
   15DA D6 01         [ 7] 3150 	sub	a,#0x01
   15DC 3E 00         [ 7] 3151 	ld	a, #0x00
   15DE 17            [ 4] 3152 	rla
   15DF CB 47         [ 8] 3153 	bit	0, a
   15E1 20 F5         [12] 3154 	jr	NZ,00221$
                           3155 ;src\CFG8266.c:656: ucAPstsRspSize=GetUARTData();
   15E3 DB 06         [11] 3156 	in	a, (_myPort6)
   15E5 4F            [ 4] 3157 	ld	c, a
                           3158 ;src\CFG8266.c:660: while(!UartRXData());
   15E6 AF            [ 4] 3159 	xor	a, a
   15E7 DD 77 FE      [19] 3160 	ld	-2 (ix), a
   15EA DD 77 FF      [19] 3161 	ld	-1 (ix), a
   15ED                    3162 00224$:
   15ED DB 07         [11] 3163 	in	a, (_myPort7)
   15EF D6 01         [ 7] 3164 	sub	a,#0x01
   15F1 3E 00         [ 7] 3165 	ld	a, #0x00
   15F3 17            [ 4] 3166 	rla
   15F4 CB 47         [ 8] 3167 	bit	0, a
   15F6 20 F5         [12] 3168 	jr	NZ,00224$
                           3169 ;src\CFG8266.c:661: chAPStsInfo[i]=GetUARTData();
   15F8 DD 7E F5      [19] 3170 	ld	a, -11 (ix)
   15FB DD 86 FE      [19] 3171 	add	a, -2 (ix)
   15FE 5F            [ 4] 3172 	ld	e, a
   15FF DD 7E F6      [19] 3173 	ld	a, -10 (ix)
   1602 DD 8E FF      [19] 3174 	adc	a, -1 (ix)
   1605 57            [ 4] 3175 	ld	d, a
   1606 DB 06         [11] 3176 	in	a, (_myPort6)
   1608 12            [ 7] 3177 	ld	(de), a
                           3178 ;src\CFG8266.c:662: ++i;
   1609 DD 34 FE      [23] 3179 	inc	-2 (ix)
   160C 20 03         [12] 3180 	jr	NZ,01014$
   160E DD 34 FF      [23] 3181 	inc	-1 (ix)
   1611                    3182 01014$:
                           3183 ;src\CFG8266.c:664: while(i<ucAPstsRspSize);
   1611 41            [ 4] 3184 	ld	b, c
   1612 1E 00         [ 7] 3185 	ld	e, #0x00
   1614 DD 7E FE      [19] 3186 	ld	a, -2 (ix)
   1617 90            [ 4] 3187 	sub	a, b
   1618 DD 7E FF      [19] 3188 	ld	a, -1 (ix)
   161B 9B            [ 4] 3189 	sbc	a, e
   161C 38 CF         [12] 3190 	jr	C,00224$
                           3191 ;src\CFG8266.c:666: if (chAPStsInfo[0]==2)
   161E DD 6E F5      [19] 3192 	ld	l, -11 (ix)
   1621 DD 66 F6      [19] 3193 	ld	h, -10 (ix)
   1624 7E            [ 7] 3194 	ld	a, (hl)
   1625 D6 02         [ 7] 3195 	sub	a, #0x02
   1627 20 0B         [12] 3196 	jr	NZ,00231$
                           3197 ;src\CFG8266.c:667: printf("Error, wrong password!\r\n");
   1629 21r21r21      [10] 3198 	ld	hl, #___str_53
   162C E5            [11] 3199 	push	hl
   162D CDr00r00      [17] 3200 	call	_puts
   1630 F1            [10] 3201 	pop	af
   1631 C3r80r1F      [10] 3202 	jp	00375$
   1634                    3203 00231$:
                           3204 ;src\CFG8266.c:669: printf("Error, if protected network, check password.\r\n");
   1634 21r39r21      [10] 3205 	ld	hl, #___str_55
   1637 E5            [11] 3206 	push	hl
   1638 CDr00r00      [17] 3207 	call	_puts
   163B F1            [10] 3208 	pop	af
   163C C3r80r1F      [10] 3209 	jp	00375$
   163F                    3210 00234$:
                           3211 ;src\CFG8266.c:672: printf("Error, if protected network, check password.\r\n");
   163F 21r39r21      [10] 3212 	ld	hl, #___str_55
   1642 E5            [11] 3213 	push	hl
   1643 CDr00r00      [17] 3214 	call	_puts
   1646 F1            [10] 3215 	pop	af
   1647 C3r80r1F      [10] 3216 	jp	00375$
   164A                    3217 00237$:
                           3218 ;src\CFG8266.c:675: printf("Error, if protected network, check password.\r\n");
   164A 21r39r21      [10] 3219 	ld	hl, #___str_55
   164D E5            [11] 3220 	push	hl
   164E CDr00r00      [17] 3221 	call	_puts
   1651 F1            [10] 3222 	pop	af
                           3223 ;src\CFG8266.c:678: break;
   1652 C3r80r1F      [10] 3224 	jp	00375$
   1655                    3225 00261$:
                           3226 ;src\CFG8266.c:680: else if (tx_data==0x1b)
   1655 79            [ 4] 3227 	ld	a, c
   1656 D6 1B         [ 7] 3228 	sub	a, #0x1b
   1658 20 0B         [12] 3229 	jr	NZ,00258$
                           3230 ;src\CFG8266.c:682: printf("\r\nUser canceled by ESC key...\r\n");
   165A 21r67r21      [10] 3231 	ld	hl, #___str_59
   165D E5            [11] 3232 	push	hl
   165E CDr00r00      [17] 3233 	call	_puts
   1661 F1            [10] 3234 	pop	af
                           3235 ;src\CFG8266.c:683: break;
   1662 C3r80r1F      [10] 3236 	jp	00375$
   1665                    3237 00258$:
                           3238 ;src\CFG8266.c:687: if ((ucVerMajor>=1)&&(ucVerMinor>=2)) // new firmware allow get current ap and connection status
   1665 DD CB F4 46   [20] 3239 	bit	0, -12 (ix)
   1669 20 67         [12] 3240 	jr	NZ,00255$
   166B DD CB F3 46   [20] 3241 	bit	0, -13 (ix)
   166F 20 61         [12] 3242 	jr	NZ,00255$
                           3243 ;src\CFG8266.c:689: TxByte('g'); //Request current AP status
   1671 3E 67         [ 7] 3244 	ld	a, #0x67
   1673 F5            [11] 3245 	push	af
   1674 33            [ 6] 3246 	inc	sp
   1675 CDr89r06      [17] 3247 	call	_TxByte
   1678 33            [ 6] 3248 	inc	sp
                           3249 ;src\CFG8266.c:690: bResponse = WaitForRXData(apstsResponse,3,30,true,false,NULL,0);
   1679 21 00 00      [10] 3250 	ld	hl, #0x0000
   167C E5            [11] 3251 	push	hl
   167D 2E 00         [ 7] 3252 	ld	l, #0x00
   167F E5            [11] 3253 	push	hl
   1680 AF            [ 4] 3254 	xor	a, a
   1681 57            [ 4] 3255 	ld	d,a
   1682 1E 01         [ 7] 3256 	ld	e,#0x01
   1684 D5            [11] 3257 	push	de
   1685 2E 1E         [ 7] 3258 	ld	l, #0x1e
   1687 E5            [11] 3259 	push	hl
   1688 2E 03         [ 7] 3260 	ld	l, #0x03
   168A E5            [11] 3261 	push	hl
   168B 21r1Er01      [10] 3262 	ld	hl, #_apstsResponse
   168E E5            [11] 3263 	push	hl
   168F CDr19r08      [17] 3264 	call	_WaitForRXData
   1692 FD 21 0C 00   [14] 3265 	ld	iy, #12
   1696 FD 39         [15] 3266 	add	iy, sp
   1698 FD F9         [10] 3267 	ld	sp, iy
   169A 7D            [ 4] 3268 	ld	a, l
                           3269 ;src\CFG8266.c:691: if (bResponse)
   169B B7            [ 4] 3270 	or	a, a
   169C 28 34         [12] 3271 	jr	Z,00255$
                           3272 ;src\CFG8266.c:693: while(!UartRXData());
   169E                    3273 00243$:
   169E DB 07         [11] 3274 	in	a, (_myPort7)
   16A0 D6 01         [ 7] 3275 	sub	a,#0x01
   16A2 3E 00         [ 7] 3276 	ld	a, #0x00
   16A4 17            [ 4] 3277 	rla
   16A5 CB 47         [ 8] 3278 	bit	0, a
   16A7 20 F5         [12] 3279 	jr	NZ,00243$
                           3280 ;src\CFG8266.c:694: ucAPstsRspSize=GetUARTData();
   16A9 DB 06         [11] 3281 	in	a, (_myPort6)
   16AB DD 77 FF      [19] 3282 	ld	-1 (ix), a
                           3283 ;src\CFG8266.c:698: while(!UartRXData());
   16AE 11 00 00      [10] 3284 	ld	de, #0x0000
   16B1                    3285 00246$:
   16B1 DB 07         [11] 3286 	in	a, (_myPort7)
   16B3 D6 01         [ 7] 3287 	sub	a,#0x01
   16B5 3E 00         [ 7] 3288 	ld	a, #0x00
   16B7 17            [ 4] 3289 	rla
   16B8 CB 47         [ 8] 3290 	bit	0, a
   16BA 20 F5         [12] 3291 	jr	NZ,00246$
                           3292 ;src\CFG8266.c:699: chAPStsInfo[i]=GetUARTData();
   16BC DD 6E F5      [19] 3293 	ld	l, -11 (ix)
   16BF DD 66 F6      [19] 3294 	ld	h, -10 (ix)
   16C2 19            [11] 3295 	add	hl, de
   16C3 DB 06         [11] 3296 	in	a, (_myPort6)
   16C5 77            [ 7] 3297 	ld	(hl), a
                           3298 ;src\CFG8266.c:700: ++i;
   16C6 13            [ 6] 3299 	inc	de
                           3300 ;src\CFG8266.c:702: while(i<ucAPstsRspSize);
   16C7 DD 4E FF      [19] 3301 	ld	c, -1 (ix)
   16CA 06 00         [ 7] 3302 	ld	b, #0x00
   16CC 7B            [ 4] 3303 	ld	a, e
   16CD 91            [ 4] 3304 	sub	a, c
   16CE 7A            [ 4] 3305 	ld	a, d
   16CF 98            [ 4] 3306 	sbc	a, b
   16D0 38 DF         [12] 3307 	jr	C,00246$
   16D2                    3308 00255$:
                           3309 ;src\CFG8266.c:705: ++ucScanPage;
   16D2 DD 34 FE      [23] 3310 	inc	-2 (ix)
   16D5 DD 7E FE      [19] 3311 	ld	a, -2 (ix)
   16D8 DD 77 EF      [19] 3312 	ld	-17 (ix), a
                           3313 ;src\CFG8266.c:708: while(1);
   16DB C3r77r12      [10] 3314 	jp	00264$
   16DE                    3315 00268$:
                           3316 ;src\CFG8266.c:711: printf("\r\nScan results: no answer...\r\n");
   16DE 21r86r21      [10] 3317 	ld	hl, #___str_61
   16E1 E5            [11] 3318 	push	hl
   16E2 CDr00r00      [17] 3319 	call	_puts
   16E5 F1            [10] 3320 	pop	af
   16E6 C3r80r1F      [10] 3321 	jp	00375$
   16E9                    3322 00294$:
                           3323 ;src\CFG8266.c:715: if (ucScan)
   16E9 3Ar00r00      [13] 3324 	ld	a,(#_ucScan + 0)
   16EC B7            [ 4] 3325 	or	a, a
   16ED 28 0B         [12] 3326 	jr	Z,00291$
                           3327 ;src\CFG8266.c:716: printf ("\rScan request: no answer...\n");
   16EF 21rA4r21      [10] 3328 	ld	hl, #___str_63
   16F2 E5            [11] 3329 	push	hl
   16F3 CDr00r00      [17] 3330 	call	_puts
   16F6 F1            [10] 3331 	pop	af
   16F7 C3r80r1F      [10] 3332 	jp	00375$
   16FA                    3333 00291$:
                           3334 ;src\CFG8266.c:717: else if (((ucNagleOff)||(ucNagleOn))&&(bResponse))
   16FA 3Ar67r02      [13] 3335 	ld	a,(#_ucNagleOff + 0)
   16FD B7            [ 4] 3336 	or	a, a
   16FE 20 06         [12] 3337 	jr	NZ,00289$
   1700 3Ar68r02      [13] 3338 	ld	a,(#_ucNagleOn + 0)
   1703 B7            [ 4] 3339 	or	a, a
   1704 28 14         [12] 3340 	jr	Z,00286$
   1706                    3341 00289$:
   1706 DD 7E FD      [19] 3342 	ld	a, -3 (ix)
   1709 B7            [ 4] 3343 	or	a, a
   170A 28 0E         [12] 3344 	jr	Z,00286$
                           3345 ;src\CFG8266.c:719: printf("\rNagle set as requested...\n");
   170C 21rC0r21      [10] 3346 	ld	hl, #___str_65
   170F E5            [11] 3347 	push	hl
   1710 CDr00r00      [17] 3348 	call	_puts
   1713 F1            [10] 3349 	pop	af
                           3350 ;src\CFG8266.c:720: return 0;
   1714 21 00 00      [10] 3351 	ld	hl, #0x0000
   1717 C3r83r1F      [10] 3352 	jp	00388$
   171A                    3353 00286$:
                           3354 ;src\CFG8266.c:722: else if ((ucNagleOff)||(ucNagleOn))
   171A 3Ar67r02      [13] 3355 	ld	a,(#_ucNagleOff + 0)
   171D B7            [ 4] 3356 	or	a, a
   171E 20 06         [12] 3357 	jr	NZ,00281$
   1720 3Ar68r02      [13] 3358 	ld	a,(#_ucNagleOn + 0)
   1723 B7            [ 4] 3359 	or	a, a
   1724 28 0E         [12] 3360 	jr	Z,00282$
   1726                    3361 00281$:
                           3362 ;src\CFG8266.c:724: printf("\rNagle not set as requested, error!\n");
   1726 21rDBr21      [10] 3363 	ld	hl, #___str_67
   1729 E5            [11] 3364 	push	hl
   172A CDr00r00      [17] 3365 	call	_puts
   172D F1            [10] 3366 	pop	af
                           3367 ;src\CFG8266.c:725: return 0;
   172E 21 00 00      [10] 3368 	ld	hl, #0x0000
   1731 C3r83r1F      [10] 3369 	jp	00388$
   1734                    3370 00282$:
                           3371 ;src\CFG8266.c:727: else if (ucRadioOff)
   1734 3Ar69r02      [13] 3372 	ld	a,(#_ucRadioOff + 0)
   1737 B7            [ 4] 3373 	or	a, a
   1738 28 1E         [12] 3374 	jr	Z,00279$
                           3375 ;src\CFG8266.c:729: if (bResponse)
   173A DD 7E FD      [19] 3376 	ld	a, -3 (ix)
   173D B7            [ 4] 3377 	or	a, a
   173E 28 0A         [12] 3378 	jr	Z,00271$
                           3379 ;src\CFG8266.c:730: printf("\rRequested to turn off Wi-Fi Radio...\n");
   1740 21rFFr21      [10] 3380 	ld	hl, #___str_69
   1743 E5            [11] 3381 	push	hl
   1744 CDr00r00      [17] 3382 	call	_puts
   1747 F1            [10] 3383 	pop	af
   1748 18 08         [12] 3384 	jr	00272$
   174A                    3385 00271$:
                           3386 ;src\CFG8266.c:732: printf("\rRequest to turnoff Wi-Fi Radio error!\n");
   174A 21r25r22      [10] 3387 	ld	hl, #___str_71
   174D E5            [11] 3388 	push	hl
   174E CDr00r00      [17] 3389 	call	_puts
   1751 F1            [10] 3390 	pop	af
   1752                    3391 00272$:
                           3392 ;src\CFG8266.c:733: return 0;
   1752 21 00 00      [10] 3393 	ld	hl, #0x0000
   1755 C3r83r1F      [10] 3394 	jp	00388$
   1758                    3395 00279$:
                           3396 ;src\CFG8266.c:735: else if (ucSetTimeout)
   1758 3Ar6Ar02      [13] 3397 	ld	a,(#_ucSetTimeout + 0)
   175B B7            [ 4] 3398 	or	a, a
   175C CAr80r1F      [10] 3399 	jp	Z, 00375$
                           3400 ;src\CFG8266.c:737: if (bResponse)
   175F DD 7E FD      [19] 3401 	ld	a, -3 (ix)
   1762 B7            [ 4] 3402 	or	a, a
   1763 28 0A         [12] 3403 	jr	Z,00274$
                           3404 ;src\CFG8266.c:738: printf("\rWi-Fi radio on Time-out set successfully...\n");
   1765 21r4Cr22      [10] 3405 	ld	hl, #___str_73
   1768 E5            [11] 3406 	push	hl
   1769 CDr00r00      [17] 3407 	call	_puts
   176C F1            [10] 3408 	pop	af
   176D 18 08         [12] 3409 	jr	00275$
   176F                    3410 00274$:
                           3411 ;src\CFG8266.c:740: printf("\rError setting Wi-Fi radio on Time-out!\n");
   176F 21r79r22      [10] 3412 	ld	hl, #___str_75
   1772 E5            [11] 3413 	push	hl
   1773 CDr00r00      [17] 3414 	call	_puts
   1776 F1            [10] 3415 	pop	af
   1777                    3416 00275$:
                           3417 ;src\CFG8266.c:741: return 0;
   1777 21 00 00      [10] 3418 	ld	hl, #0x0000
   177A C3r83r1F      [10] 3419 	jp	00388$
   177D                    3420 00364$:
                           3421 ;src\CFG8266.c:745: else if (ucLocalUpdate)
   177D 3Ar65r02      [13] 3422 	ld	a,(#_ucLocalUpdate + 0)
   1780 B7            [ 4] 3423 	or	a, a
   1781 CAr8Fr1D      [10] 3424 	jp	Z, 00361$
                           3425 ;src\CFG8266.c:748: iFile = Open (ucFile,O_RDONLY);
   1784 21 00 00      [10] 3426 	ld	hl, #0x0000
   1787 E5            [11] 3427 	push	hl
   1788 21r2Dr01      [10] 3428 	ld	hl, #_ucFile
   178B E5            [11] 3429 	push	hl
   178C CDr00r00      [17] 3430 	call	_Open
   178F F1            [10] 3431 	pop	af
   1790 F1            [10] 3432 	pop	af
   1791 DD 75 F3      [19] 3433 	ld	-13 (ix), l
   1794 DD 74 F4      [19] 3434 	ld	-12 (ix), h
                           3435 ;src\CFG8266.c:750: if (iFile!=-1)
   1797 DD 7E F3      [19] 3436 	ld	a, -13 (ix)
   179A DD A6 F4      [19] 3437 	and	a, -12 (ix)
   179D 3C            [ 4] 3438 	inc	a
   179E CAr7Cr1D      [10] 3439 	jp	Z,00334$
                           3440 ;src\CFG8266.c:757: regs.Words.HL = 0; //set pointer as 0
   17A1 21 9C 0D      [10] 3441 	ld	hl, #3484
   17A4 39            [11] 3442 	add	hl, sp
   17A5 EB            [ 4] 3443 	ex	de, hl
   17A6 21 06 00      [10] 3444 	ld	hl, #0x0006
   17A9 19            [11] 3445 	add	hl, de
   17AA AF            [ 4] 3446 	xor	a, a
   17AB 77            [ 7] 3447 	ld	(hl), a
   17AC 23            [ 6] 3448 	inc	hl
   17AD 77            [ 7] 3449 	ld	(hl), a
                           3450 ;src\CFG8266.c:758: regs.Words.DE = 0; //so it will return the position
   17AE 13            [ 6] 3451 	inc	de
   17AF 13            [ 6] 3452 	inc	de
   17B0 13            [ 6] 3453 	inc	de
   17B1 13            [ 6] 3454 	inc	de
   17B2 AF            [ 4] 3455 	xor	a, a
   17B3 12            [ 7] 3456 	ld	(de), a
   17B4 13            [ 6] 3457 	inc	de
   17B5 12            [ 7] 3458 	ld	(de), a
                           3459 ;src\CFG8266.c:759: regs.Bytes.A = 2; //relative to the end of file, i.e.:file size
   17B6 21 9C 0D      [10] 3460 	ld	hl, #3484
   17B9 39            [11] 3461 	add	hl, sp
   17BA EB            [ 4] 3462 	ex	de, hl
   17BB 6B            [ 4] 3463 	ld	l, e
   17BC 62            [ 4] 3464 	ld	h, d
   17BD 23            [ 6] 3465 	inc	hl
   17BE 36 02         [10] 3466 	ld	(hl), #0x02
                           3467 ;src\CFG8266.c:760: regs.Bytes.B = (unsigned char)(iFile&0xff);
   17C0 13            [ 6] 3468 	inc	de
   17C1 13            [ 6] 3469 	inc	de
   17C2 13            [ 6] 3470 	inc	de
   17C3 7A            [ 4] 3471 	ld	a, d
   17C4 DD 4E F3      [19] 3472 	ld	c, -13 (ix)
   17C7 6B            [ 4] 3473 	ld	l, e
   17C8 67            [ 4] 3474 	ld	h, a
   17C9 71            [ 7] 3475 	ld	(hl), c
                           3476 ;src\CFG8266.c:761: DosCall(0x4A, &regs, REGS_ALL, REGS_ALL); // MOVE FILE HANDLER
   17CA 21 9C 0D      [10] 3477 	ld	hl, #3484
   17CD 39            [11] 3478 	add	hl, sp
   17CE DD 75 FE      [19] 3479 	ld	-2 (ix), l
   17D1 DD 74 FF      [19] 3480 	ld	-1 (ix), h
   17D4 4D            [ 4] 3481 	ld	c, l
   17D5 44            [ 4] 3482 	ld	b, h
   17D6 11 03 03      [10] 3483 	ld	de, #0x0303
   17D9 D5            [11] 3484 	push	de
   17DA C5            [11] 3485 	push	bc
   17DB 3E 4A         [ 7] 3486 	ld	a, #0x4a
   17DD F5            [11] 3487 	push	af
   17DE 33            [ 6] 3488 	inc	sp
   17DF CDr00r00      [17] 3489 	call	_DosCall
   17E2 F1            [10] 3490 	pop	af
   17E3 F1            [10] 3491 	pop	af
   17E4 33            [ 6] 3492 	inc	sp
                           3493 ;src\CFG8266.c:762: if (regs.Bytes.A == 0) //moved, now get the file handler position, i.e.: size
   17E5 DD 6E FE      [19] 3494 	ld	l, -2 (ix)
   17E8 DD 66 FF      [19] 3495 	ld	h, -1 (ix)
   17EB 23            [ 6] 3496 	inc	hl
   17EC 7E            [ 7] 3497 	ld	a, (hl)
   17ED DD 77 FD      [19] 3498 	ld	-3 (ix), a
   17F0 B7            [ 4] 3499 	or	a, a
   17F1 C2rBEr18      [10] 3500 	jp	NZ, 00298$
                           3501 ;src\CFG8266.c:763: SentFileSize = (unsigned long)(regs.Words.HL)&0xffff | ((unsigned long)(regs.Words.DE)<<16)&0xffff0000;
   17F4 DD 7E FE      [19] 3502 	ld	a, -2 (ix)
   17F7 DD 77 FC      [19] 3503 	ld	-4 (ix), a
   17FA DD 7E FF      [19] 3504 	ld	a, -1 (ix)
   17FD DD 77 FD      [19] 3505 	ld	-3 (ix), a
   1800 DD 6E FC      [19] 3506 	ld	l, -4 (ix)
   1803 DD 66 FD      [19] 3507 	ld	h, -3 (ix)
   1806 11 06 00      [10] 3508 	ld	de, #0x0006
   1809 19            [11] 3509 	add	hl, de
   180A 7E            [ 7] 3510 	ld	a, (hl)
   180B DD 77 FC      [19] 3511 	ld	-4 (ix), a
   180E 23            [ 6] 3512 	inc	hl
   180F 7E            [ 7] 3513 	ld	a, (hl)
   1810 DD 77 FD      [19] 3514 	ld	-3 (ix), a
   1813 DD 7E FC      [19] 3515 	ld	a, -4 (ix)
   1816 DD 77 FA      [19] 3516 	ld	-6 (ix), a
   1819 DD 7E FD      [19] 3517 	ld	a, -3 (ix)
   181C DD 77 FB      [19] 3518 	ld	-5 (ix), a
   181F 17            [ 4] 3519 	rla
   1820 9F            [ 4] 3520 	sbc	a, a
   1821 DD 77 FC      [19] 3521 	ld	-4 (ix), a
   1824 DD 77 FD      [19] 3522 	ld	-3 (ix), a
   1827 DD 7E FA      [19] 3523 	ld	a, -6 (ix)
   182A DD 77 EF      [19] 3524 	ld	-17 (ix), a
   182D DD 7E FB      [19] 3525 	ld	a, -5 (ix)
   1830 DD 77 F0      [19] 3526 	ld	-16 (ix), a
   1833 DD 36 F1 00   [19] 3527 	ld	-15 (ix), #0x00
   1837 DD 36 F2 00   [19] 3528 	ld	-14 (ix), #0x00
   183B DD 6E FE      [19] 3529 	ld	l, -2 (ix)
   183E DD 66 FF      [19] 3530 	ld	h, -1 (ix)
   1841 11 04 00      [10] 3531 	ld	de, #0x0004
   1844 19            [11] 3532 	add	hl, de
   1845 7E            [ 7] 3533 	ld	a, (hl)
   1846 DD 77 FE      [19] 3534 	ld	-2 (ix), a
   1849 23            [ 6] 3535 	inc	hl
   184A 7E            [ 7] 3536 	ld	a, (hl)
   184B DD 77 FF      [19] 3537 	ld	-1 (ix), a
   184E DD 7E FE      [19] 3538 	ld	a, -2 (ix)
   1851 DD 77 FC      [19] 3539 	ld	-4 (ix), a
   1854 DD 7E FF      [19] 3540 	ld	a, -1 (ix)
   1857 DD 77 FD      [19] 3541 	ld	-3 (ix), a
   185A 17            [ 4] 3542 	rla
   185B 9F            [ 4] 3543 	sbc	a, a
   185C DD 77 FE      [19] 3544 	ld	-2 (ix), a
   185F DD 77 FF      [19] 3545 	ld	-1 (ix), a
   1862 06 10         [ 7] 3546 	ld	b, #0x10
   1864                    3547 01020$:
   1864 DD CB FC 26   [23] 3548 	sla	-4 (ix)
   1868 DD CB FD 16   [23] 3549 	rl	-3 (ix)
   186C DD CB FE 16   [23] 3550 	rl	-2 (ix)
   1870 DD CB FF 16   [23] 3551 	rl	-1 (ix)
   1874 10 EE         [13] 3552 	djnz	01020$
   1876 DD 36 F8 00   [19] 3553 	ld	-8 (ix), #0x00
   187A DD 36 F9 00   [19] 3554 	ld	-7 (ix), #0x00
   187E DD 7E FE      [19] 3555 	ld	a, -2 (ix)
   1881 DD 77 FA      [19] 3556 	ld	-6 (ix), a
   1884 DD 7E FF      [19] 3557 	ld	a, -1 (ix)
   1887 DD 77 FB      [19] 3558 	ld	-5 (ix), a
   188A DD 7E EF      [19] 3559 	ld	a, -17 (ix)
   188D DD B6 F8      [19] 3560 	or	a, -8 (ix)
   1890 DD 77 FC      [19] 3561 	ld	-4 (ix), a
   1893 DD 7E F0      [19] 3562 	ld	a, -16 (ix)
   1896 DD B6 F9      [19] 3563 	or	a, -7 (ix)
   1899 DD 77 FD      [19] 3564 	ld	-3 (ix), a
   189C DD 7E F1      [19] 3565 	ld	a, -15 (ix)
   189F DD B6 FA      [19] 3566 	or	a, -6 (ix)
   18A2 DD 77 FE      [19] 3567 	ld	-2 (ix), a
   18A5 DD 7E F2      [19] 3568 	ld	a, -14 (ix)
   18A8 DD B6 FB      [19] 3569 	or	a, -5 (ix)
   18AB DD 77 FF      [19] 3570 	ld	-1 (ix), a
   18AE 21 F7 0D      [10] 3571 	ld	hl, #3575
   18B1 39            [11] 3572 	add	hl, sp
   18B2 EB            [ 4] 3573 	ex	de, hl
   18B3 21 FB 0D      [10] 3574 	ld	hl, #3579
   18B6 39            [11] 3575 	add	hl, sp
   18B7 01 04 00      [10] 3576 	ld	bc, #4
   18BA ED B0         [21] 3577 	ldir
   18BC 18 0D         [12] 3578 	jr	00299$
   18BE                    3579 00298$:
                           3580 ;src\CFG8266.c:765: SentFileSize = 0;
   18BE AF            [ 4] 3581 	xor	a, a
   18BF DD 77 F8      [19] 3582 	ld	-8 (ix), a
   18C2 DD 77 F9      [19] 3583 	ld	-7 (ix), a
   18C5 DD 77 FA      [19] 3584 	ld	-6 (ix), a
   18C8 DD 77 FB      [19] 3585 	ld	-5 (ix), a
   18CB                    3586 00299$:
                           3587 ;src\CFG8266.c:767: ultostr(SentFileSize,chFileSize,10);
   18CB 21 A8 0D      [10] 3588 	ld	hl, #3496
   18CE 39            [11] 3589 	add	hl, sp
   18CF 4D            [ 4] 3590 	ld	c, l
   18D0 44            [ 4] 3591 	ld	b, h
   18D1 E5            [11] 3592 	push	hl
   18D2 11 0A 00      [10] 3593 	ld	de, #0x000a
   18D5 D5            [11] 3594 	push	de
   18D6 C5            [11] 3595 	push	bc
   18D7 DD 6E FA      [19] 3596 	ld	l, -6 (ix)
   18DA DD 66 FB      [19] 3597 	ld	h, -5 (ix)
   18DD E5            [11] 3598 	push	hl
   18DE DD 6E F8      [19] 3599 	ld	l, -8 (ix)
   18E1 DD 66 F9      [19] 3600 	ld	h, -7 (ix)
   18E4 E5            [11] 3601 	push	hl
   18E5 CDr97r06      [17] 3602 	call	_ultostr
   18E8 F1            [10] 3603 	pop	af
   18E9 F1            [10] 3604 	pop	af
   18EA F1            [10] 3605 	pop	af
   18EB F1            [10] 3606 	pop	af
   18EC DD 4E F3      [19] 3607 	ld	c, -13 (ix)
   18EF DD 46 F4      [19] 3608 	ld	b, -12 (ix)
   18F2 C5            [11] 3609 	push	bc
   18F3 CDr00r00      [17] 3610 	call	_Close
   18F6 F1            [10] 3611 	pop	af
   18F7 E1            [10] 3612 	pop	hl
                           3613 ;src\CFG8266.c:769: printf ("File: %s Size: %s \r\n",ucFile,chFileSize);
   18F8 01rA1r22      [10] 3614 	ld	bc, #___str_76+0
   18FB E5            [11] 3615 	push	hl
   18FC 21r2Dr01      [10] 3616 	ld	hl, #_ucFile
   18FF E5            [11] 3617 	push	hl
   1900 C5            [11] 3618 	push	bc
   1901 CDr00r00      [17] 3619 	call	_printf
   1904 F1            [10] 3620 	pop	af
   1905 F1            [10] 3621 	pop	af
   1906 F1            [10] 3622 	pop	af
                           3623 ;src\CFG8266.c:770: if (SentFileSize)
   1907 DD 7E FB      [19] 3624 	ld	a, -5 (ix)
   190A DD B6 FA      [19] 3625 	or	a, -6 (ix)
   190D DD B6 F9      [19] 3626 	or	a, -7 (ix)
   1910 DD B6 F8      [19] 3627 	or	a, -8 (ix)
   1913 CAr69r1D      [10] 3628 	jp	Z, 00331$
                           3629 ;src\CFG8266.c:772: iFile = Open (ucFile,O_RDONLY);
   1916 21 00 00      [10] 3630 	ld	hl, #0x0000
   1919 E5            [11] 3631 	push	hl
   191A 21r2Dr01      [10] 3632 	ld	hl, #_ucFile
   191D E5            [11] 3633 	push	hl
   191E CDr00r00      [17] 3634 	call	_Open
   1921 F1            [10] 3635 	pop	af
   1922 F1            [10] 3636 	pop	af
   1923 DD 75 F0      [19] 3637 	ld	-16 (ix), l
   1926 DD 74 F1      [19] 3638 	ld	-15 (ix), h
                           3639 ;src\CFG8266.c:773: if (iFile!=-1)
   1929 DD 7E F0      [19] 3640 	ld	a, -16 (ix)
   192C DD A6 F1      [19] 3641 	and	a, -15 (ix)
   192F 3C            [ 4] 3642 	inc	a
   1930 CAr56r1D      [10] 3643 	jp	Z,00328$
                           3644 ;src\CFG8266.c:775: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1933 21 00 01      [10] 3645 	ld	hl, #0x0100
   1936 E5            [11] 3646 	push	hl
   1937 21r01r00      [10] 3647 	ld	hl, #_ucServer
   193A E5            [11] 3648 	push	hl
   193B DD 6E F0      [19] 3649 	ld	l, -16 (ix)
   193E DD 66 F1      [19] 3650 	ld	h, -15 (ix)
   1941 E5            [11] 3651 	push	hl
   1942 CDr00r00      [17] 3652 	call	_MyRead
   1945 F1            [10] 3653 	pop	af
   1946 F1            [10] 3654 	pop	af
   1947 F1            [10] 3655 	pop	af
   1948 DD 75 F2      [19] 3656 	ld	-14 (ix), l
   194B DD 74 F3      [19] 3657 	ld	-13 (ix), h
                           3658 ;src\CFG8266.c:776: if (FileRead == 256)
   194E DD 7E F2      [19] 3659 	ld	a, -14 (ix)
   1951 B7            [ 4] 3660 	or	a, a
   1952 C2r40r1D      [10] 3661 	jp	NZ,00325$
   1955 DD 7E F3      [19] 3662 	ld	a, -13 (ix)
   1958 3D            [ 4] 3663 	dec	a
   1959 C2r40r1D      [10] 3664 	jp	NZ,00325$
                           3665 ;src\CFG8266.c:779: if (ucIsFw)
   195C 3Ar66r02      [13] 3666 	ld	a,(#_ucIsFw + 0)
   195F B7            [ 4] 3667 	or	a, a
   1960 28 0A         [12] 3668 	jr	Z,00301$
                           3669 ;src\CFG8266.c:780: TxByte('Z'); //Request start of RS232 update
   1962 3E 5A         [ 7] 3670 	ld	a, #0x5a
   1964 F5            [11] 3671 	push	af
   1965 33            [ 6] 3672 	inc	sp
   1966 CDr89r06      [17] 3673 	call	_TxByte
   1969 33            [ 6] 3674 	inc	sp
   196A 18 08         [12] 3675 	jr	00302$
   196C                    3676 00301$:
                           3677 ;src\CFG8266.c:782: TxByte('Y'); //Request start of RS232 cert update
   196C 3E 59         [ 7] 3678 	ld	a, #0x59
   196E F5            [11] 3679 	push	af
   196F 33            [ 6] 3680 	inc	sp
   1970 CDr89r06      [17] 3681 	call	_TxByte
   1973 33            [ 6] 3682 	inc	sp
   1974                    3683 00302$:
                           3684 ;src\CFG8266.c:783: TxByte(0);
   1974 AF            [ 4] 3685 	xor	a, a
   1975 F5            [11] 3686 	push	af
   1976 33            [ 6] 3687 	inc	sp
   1977 CDr89r06      [17] 3688 	call	_TxByte
   197A 33            [ 6] 3689 	inc	sp
                           3690 ;src\CFG8266.c:784: TxByte(12);
   197B 3E 0C         [ 7] 3691 	ld	a, #0x0c
   197D F5            [11] 3692 	push	af
   197E 33            [ 6] 3693 	inc	sp
   197F CDr89r06      [17] 3694 	call	_TxByte
   1982 33            [ 6] 3695 	inc	sp
                           3696 ;src\CFG8266.c:785: TxByte((unsigned char)(SentFileSize&0xff));
   1983 DD 7E F8      [19] 3697 	ld	a, -8 (ix)
   1986 F5            [11] 3698 	push	af
   1987 33            [ 6] 3699 	inc	sp
   1988 CDr89r06      [17] 3700 	call	_TxByte
   198B 33            [ 6] 3701 	inc	sp
                           3702 ;src\CFG8266.c:786: TxByte((unsigned char)((SentFileSize&0xff00)>>8));
   198C DD 46 F9      [19] 3703 	ld	b, -7 (ix)
   198F 0E 00         [ 7] 3704 	ld	c, #0x00
   1991 C5            [11] 3705 	push	bc
   1992 33            [ 6] 3706 	inc	sp
   1993 CDr89r06      [17] 3707 	call	_TxByte
   1996 33            [ 6] 3708 	inc	sp
                           3709 ;src\CFG8266.c:787: TxByte((unsigned char)((SentFileSize&0xff0000)>>16));
   1997 DD 7E FA      [19] 3710 	ld	a, -6 (ix)
   199A F5            [11] 3711 	push	af
   199B 33            [ 6] 3712 	inc	sp
   199C CDr89r06      [17] 3713 	call	_TxByte
   199F 33            [ 6] 3714 	inc	sp
                           3715 ;src\CFG8266.c:788: TxByte((unsigned char)((SentFileSize&0xff000000)>>24));
   19A0 DD 7E FB      [19] 3716 	ld	a, -5 (ix)
   19A3 F5            [11] 3717 	push	af
   19A4 33            [ 6] 3718 	inc	sp
   19A5 CDr89r06      [17] 3719 	call	_TxByte
   19A8 33            [ 6] 3720 	inc	sp
                           3721 ;src\CFG8266.c:789: TxByte((unsigned char)((SentFileSize&0xff00000000)>>32));
   19A9 DD 7E F8      [19] 3722 	ld	a, -8 (ix)
   19AC FD 21 00 00   [14] 3723 	ld	iy, #0
   19B0 FD 39         [15] 3724 	add	iy, sp
   19B2 FD 77 00      [19] 3725 	ld	0 (iy), a
   19B5 DD 7E F9      [19] 3726 	ld	a, -7 (ix)
   19B8 FD 77 01      [19] 3727 	ld	1 (iy), a
   19BB DD 7E FA      [19] 3728 	ld	a, -6 (ix)
   19BE FD 77 02      [19] 3729 	ld	2 (iy), a
   19C1 DD 7E FB      [19] 3730 	ld	a, -5 (ix)
   19C4 FD 77 03      [19] 3731 	ld	3 (iy), a
   19C7 AF            [ 4] 3732 	xor	a, a
   19C8 FD 77 04      [19] 3733 	ld	4 (iy), a
   19CB FD 77 05      [19] 3734 	ld	5 (iy), a
   19CE FD 77 06      [19] 3735 	ld	6 (iy), a
   19D1 FD 77 07      [19] 3736 	ld	7 (iy), a
   19D4 FD 21 08 00   [14] 3737 	ld	iy, #8
   19D8 FD 39         [15] 3738 	add	iy, sp
   19DA FD 36 00 00   [19] 3739 	ld	0 (iy), #0x00
   19DE FD 36 01 00   [19] 3740 	ld	1 (iy), #0x00
   19E2 FD 36 02 00   [19] 3741 	ld	2 (iy), #0x00
   19E6 FD 36 03 00   [19] 3742 	ld	3 (iy), #0x00
   19EA 21 04 00      [10] 3743 	ld	hl, #0+4
   19ED 39            [11] 3744 	add	hl, sp
   19EE 7E            [ 7] 3745 	ld	a, (hl)
   19EF FD 21 08 00   [14] 3746 	ld	iy, #8
   19F3 FD 39         [15] 3747 	add	iy, sp
   19F5 FD 77 04      [19] 3748 	ld	4 (iy), a
   19F8 FD 36 05 00   [19] 3749 	ld	5 (iy), #0x00
   19FC FD 36 06 00   [19] 3750 	ld	6 (iy), #0x00
   1A00 FD 36 07 00   [19] 3751 	ld	7 (iy), #0x00
   1A04 06 20         [ 7] 3752 	ld	b, #0x20
   1A06                    3753 01029$:
   1A06 FD CB 07 2E   [23] 3754 	sra	7 (iy)
   1A0A FD CB 06 1E   [23] 3755 	rr	6 (iy)
   1A0E FD CB 05 1E   [23] 3756 	rr	5 (iy)
   1A12 FD CB 04 1E   [23] 3757 	rr	4 (iy)
   1A16 FD CB 03 1E   [23] 3758 	rr	3 (iy)
   1A1A FD CB 02 1E   [23] 3759 	rr	2 (iy)
   1A1E FD CB 01 1E   [23] 3760 	rr	1 (iy)
   1A22 FD CB 00 1E   [23] 3761 	rr	0 (iy)
   1A26 10 DE         [13] 3762 	djnz	01029$
   1A28 FD 7E 00      [19] 3763 	ld	a, 0 (iy)
   1A2B F5            [11] 3764 	push	af
   1A2C 33            [ 6] 3765 	inc	sp
   1A2D CDr89r06      [17] 3766 	call	_TxByte
   1A30 33            [ 6] 3767 	inc	sp
                           3768 ;src\CFG8266.c:790: TxByte((unsigned char)((SentFileSize&0xff0000000000)>>40));
   1A31 FD 21 08 00   [14] 3769 	ld	iy, #8
   1A35 FD 39         [15] 3770 	add	iy, sp
   1A37 FD 36 00 00   [19] 3771 	ld	0 (iy), #0x00
   1A3B FD 36 01 00   [19] 3772 	ld	1 (iy), #0x00
   1A3F FD 36 02 00   [19] 3773 	ld	2 (iy), #0x00
   1A43 FD 36 03 00   [19] 3774 	ld	3 (iy), #0x00
   1A47 FD 36 04 00   [19] 3775 	ld	4 (iy), #0x00
   1A4B 21 05 00      [10] 3776 	ld	hl, #0+5
   1A4E 39            [11] 3777 	add	hl, sp
   1A4F 7E            [ 7] 3778 	ld	a, (hl)
   1A50 FD 21 08 00   [14] 3779 	ld	iy, #8
   1A54 FD 39         [15] 3780 	add	iy, sp
   1A56 FD 77 05      [19] 3781 	ld	5 (iy), a
   1A59 FD 36 06 00   [19] 3782 	ld	6 (iy), #0x00
   1A5D FD 36 07 00   [19] 3783 	ld	7 (iy), #0x00
   1A61 06 28         [ 7] 3784 	ld	b, #0x28
   1A63                    3785 01031$:
   1A63 FD CB 07 2E   [23] 3786 	sra	7 (iy)
   1A67 FD CB 06 1E   [23] 3787 	rr	6 (iy)
   1A6B FD CB 05 1E   [23] 3788 	rr	5 (iy)
   1A6F FD CB 04 1E   [23] 3789 	rr	4 (iy)
   1A73 FD CB 03 1E   [23] 3790 	rr	3 (iy)
   1A77 FD CB 02 1E   [23] 3791 	rr	2 (iy)
   1A7B FD CB 01 1E   [23] 3792 	rr	1 (iy)
   1A7F FD CB 00 1E   [23] 3793 	rr	0 (iy)
   1A83 10 DE         [13] 3794 	djnz	01031$
   1A85 FD 7E 00      [19] 3795 	ld	a, 0 (iy)
   1A88 F5            [11] 3796 	push	af
   1A89 33            [ 6] 3797 	inc	sp
   1A8A CDr89r06      [17] 3798 	call	_TxByte
   1A8D 33            [ 6] 3799 	inc	sp
                           3800 ;src\CFG8266.c:791: TxByte((unsigned char)((SentFileSize&0xff000000000000)>>48));
   1A8E FD 21 08 00   [14] 3801 	ld	iy, #8
   1A92 FD 39         [15] 3802 	add	iy, sp
   1A94 FD 36 00 00   [19] 3803 	ld	0 (iy), #0x00
   1A98 FD 36 01 00   [19] 3804 	ld	1 (iy), #0x00
   1A9C FD 36 02 00   [19] 3805 	ld	2 (iy), #0x00
   1AA0 FD 36 03 00   [19] 3806 	ld	3 (iy), #0x00
   1AA4 FD 36 04 00   [19] 3807 	ld	4 (iy), #0x00
   1AA8 FD 36 05 00   [19] 3808 	ld	5 (iy), #0x00
   1AAC 21 06 00      [10] 3809 	ld	hl, #0+6
   1AAF 39            [11] 3810 	add	hl, sp
   1AB0 7E            [ 7] 3811 	ld	a, (hl)
   1AB1 FD 21 08 00   [14] 3812 	ld	iy, #8
   1AB5 FD 39         [15] 3813 	add	iy, sp
   1AB7 FD 77 06      [19] 3814 	ld	6 (iy), a
   1ABA FD 36 07 00   [19] 3815 	ld	7 (iy), #0x00
   1ABE 06 30         [ 7] 3816 	ld	b, #0x30
   1AC0                    3817 01033$:
   1AC0 FD CB 07 2E   [23] 3818 	sra	7 (iy)
   1AC4 FD CB 06 1E   [23] 3819 	rr	6 (iy)
   1AC8 FD CB 05 1E   [23] 3820 	rr	5 (iy)
   1ACC FD CB 04 1E   [23] 3821 	rr	4 (iy)
   1AD0 FD CB 03 1E   [23] 3822 	rr	3 (iy)
   1AD4 FD CB 02 1E   [23] 3823 	rr	2 (iy)
   1AD8 FD CB 01 1E   [23] 3824 	rr	1 (iy)
   1ADC FD CB 00 1E   [23] 3825 	rr	0 (iy)
   1AE0 10 DE         [13] 3826 	djnz	01033$
   1AE2 FD 7E 00      [19] 3827 	ld	a, 0 (iy)
   1AE5 F5            [11] 3828 	push	af
   1AE6 33            [ 6] 3829 	inc	sp
   1AE7 CDr89r06      [17] 3830 	call	_TxByte
   1AEA 33            [ 6] 3831 	inc	sp
                           3832 ;src\CFG8266.c:792: TxByte((unsigned char)((SentFileSize&0xff00000000000000)>>56));
   1AEB DD 7E F8      [19] 3833 	ld	a, -8 (ix)
   1AEE FD 21 08 00   [14] 3834 	ld	iy, #8
   1AF2 FD 39         [15] 3835 	add	iy, sp
   1AF4 FD 77 00      [19] 3836 	ld	0 (iy), a
   1AF7 DD 7E F9      [19] 3837 	ld	a, -7 (ix)
   1AFA FD 77 01      [19] 3838 	ld	1 (iy), a
   1AFD DD 7E FA      [19] 3839 	ld	a, -6 (ix)
   1B00 FD 77 02      [19] 3840 	ld	2 (iy), a
   1B03 DD 7E FB      [19] 3841 	ld	a, -5 (ix)
   1B06 FD 77 03      [19] 3842 	ld	3 (iy), a
   1B09 AF            [ 4] 3843 	xor	a, a
   1B0A FD 77 04      [19] 3844 	ld	4 (iy), a
   1B0D FD 77 05      [19] 3845 	ld	5 (iy), a
   1B10 FD 77 06      [19] 3846 	ld	6 (iy), a
   1B13 FD 77 07      [19] 3847 	ld	7 (iy), a
   1B16 FD 36 00 00   [19] 3848 	ld	0 (iy), #0x00
   1B1A FD 36 01 00   [19] 3849 	ld	1 (iy), #0x00
   1B1E FD 36 02 00   [19] 3850 	ld	2 (iy), #0x00
   1B22 FD 36 03 00   [19] 3851 	ld	3 (iy), #0x00
   1B26 FD 36 04 00   [19] 3852 	ld	4 (iy), #0x00
   1B2A FD 36 05 00   [19] 3853 	ld	5 (iy), #0x00
   1B2E FD 36 06 00   [19] 3854 	ld	6 (iy), #0x00
   1B32 FD 7E 07      [19] 3855 	ld	a, 7 (iy)
   1B35 FD 77 07      [19] 3856 	ld	7 (iy), a
   1B38 06 38         [ 7] 3857 	ld	b, #0x38
   1B3A                    3858 01035$:
   1B3A FD CB 07 3E   [23] 3859 	srl	7 (iy)
   1B3E FD CB 06 1E   [23] 3860 	rr	6 (iy)
   1B42 FD CB 05 1E   [23] 3861 	rr	5 (iy)
   1B46 FD CB 04 1E   [23] 3862 	rr	4 (iy)
   1B4A FD CB 03 1E   [23] 3863 	rr	3 (iy)
   1B4E FD CB 02 1E   [23] 3864 	rr	2 (iy)
   1B52 FD CB 01 1E   [23] 3865 	rr	1 (iy)
   1B56 FD CB 00 1E   [23] 3866 	rr	0 (iy)
   1B5A 10 DE         [13] 3867 	djnz	01035$
   1B5C FD 7E 00      [19] 3868 	ld	a, 0 (iy)
   1B5F F5            [11] 3869 	push	af
   1B60 33            [ 6] 3870 	inc	sp
   1B61 CDr89r06      [17] 3871 	call	_TxByte
   1B64 33            [ 6] 3872 	inc	sp
                           3873 ;src\CFG8266.c:793: TxByte(ucServer[0]);
   1B65 3Ar01r00      [13] 3874 	ld	a, (#_ucServer + 0)
   1B68 F5            [11] 3875 	push	af
   1B69 33            [ 6] 3876 	inc	sp
   1B6A CDr89r06      [17] 3877 	call	_TxByte
   1B6D 33            [ 6] 3878 	inc	sp
                           3879 ;src\CFG8266.c:794: TxByte(ucServer[1]);
   1B6E 3Ar02r00      [13] 3880 	ld	a, (#_ucServer + 1)
   1B71 F5            [11] 3881 	push	af
   1B72 33            [ 6] 3882 	inc	sp
   1B73 CDr89r06      [17] 3883 	call	_TxByte
   1B76 33            [ 6] 3884 	inc	sp
                           3885 ;src\CFG8266.c:795: TxByte(ucServer[2]);
   1B77 3Ar03r00      [13] 3886 	ld	a, (#_ucServer + 2)
   1B7A F5            [11] 3887 	push	af
   1B7B 33            [ 6] 3888 	inc	sp
   1B7C CDr89r06      [17] 3889 	call	_TxByte
   1B7F 33            [ 6] 3890 	inc	sp
                           3891 ;src\CFG8266.c:796: TxByte(ucServer[3]);
   1B80 3Ar04r00      [13] 3892 	ld	a, (#_ucServer + 3)
   1B83 F5            [11] 3893 	push	af
   1B84 33            [ 6] 3894 	inc	sp
   1B85 CDr89r06      [17] 3895 	call	_TxByte
   1B88 33            [ 6] 3896 	inc	sp
                           3897 ;src\CFG8266.c:798: if (ucIsFw)
   1B89 3Ar66r02      [13] 3898 	ld	a,(#_ucIsFw + 0)
   1B8C B7            [ 4] 3899 	or	a, a
   1B8D 28 26         [12] 3900 	jr	Z,00304$
                           3901 ;src\CFG8266.c:799: bResponse = WaitForRXData(responseRSFWUpdate,2,60,true,false,NULL,0);
   1B8F 21 00 00      [10] 3902 	ld	hl, #0x0000
   1B92 E5            [11] 3903 	push	hl
   1B93 2E 00         [ 7] 3904 	ld	l, #0x00
   1B95 E5            [11] 3905 	push	hl
   1B96 AF            [ 4] 3906 	xor	a, a
   1B97 57            [ 4] 3907 	ld	d,a
   1B98 1E 01         [ 7] 3908 	ld	e,#0x01
   1B9A D5            [11] 3909 	push	de
   1B9B 2E 3C         [ 7] 3910 	ld	l, #0x3c
   1B9D E5            [11] 3911 	push	hl
   1B9E 2E 02         [ 7] 3912 	ld	l, #0x02
   1BA0 E5            [11] 3913 	push	hl
   1BA1 21r21r01      [10] 3914 	ld	hl, #_responseRSFWUpdate
   1BA4 E5            [11] 3915 	push	hl
   1BA5 CDr19r08      [17] 3916 	call	_WaitForRXData
   1BA8 FD 21 0C 00   [14] 3917 	ld	iy, #12
   1BAC FD 39         [15] 3918 	add	iy, sp
   1BAE FD F9         [10] 3919 	ld	sp, iy
   1BB0 DD 75 F4      [19] 3920 	ld	-12 (ix), l
   1BB3 18 24         [12] 3921 	jr	00305$
   1BB5                    3922 00304$:
                           3923 ;src\CFG8266.c:801: bResponse = WaitForRXData(responseRSCERTUpdate,2,60,true,false,NULL,0);
   1BB5 21 00 00      [10] 3924 	ld	hl, #0x0000
   1BB8 E5            [11] 3925 	push	hl
   1BB9 2E 00         [ 7] 3926 	ld	l, #0x00
   1BBB E5            [11] 3927 	push	hl
   1BBC AF            [ 4] 3928 	xor	a, a
   1BBD 57            [ 4] 3929 	ld	d,a
   1BBE 1E 01         [ 7] 3930 	ld	e,#0x01
   1BC0 D5            [11] 3931 	push	de
   1BC1 2E 3C         [ 7] 3932 	ld	l, #0x3c
   1BC3 E5            [11] 3933 	push	hl
   1BC4 2E 02         [ 7] 3934 	ld	l, #0x02
   1BC6 E5            [11] 3935 	push	hl
   1BC7 21r23r01      [10] 3936 	ld	hl, #_responseRSCERTUpdate
   1BCA E5            [11] 3937 	push	hl
   1BCB CDr19r08      [17] 3938 	call	_WaitForRXData
   1BCE FD 21 0C 00   [14] 3939 	ld	iy, #12
   1BD2 FD 39         [15] 3940 	add	iy, sp
   1BD4 FD F9         [10] 3941 	ld	sp, iy
   1BD6 DD 75 F4      [19] 3942 	ld	-12 (ix), l
   1BD9                    3943 00305$:
                           3944 ;src\CFG8266.c:803: if (!bResponse)
   1BD9 DD 7E F4      [19] 3945 	ld	a, -12 (ix)
   1BDC B7            [ 4] 3946 	or	a, a
   1BDD 20 0B         [12] 3947 	jr	NZ,00322$
                           3948 ;src\CFG8266.c:804: printf("Error requesting to start firmware update.\r\n");
   1BDF 21rB6r22      [10] 3949 	ld	hl, #___str_78
   1BE2 E5            [11] 3950 	push	hl
   1BE3 CDr00r00      [17] 3951 	call	_puts
   1BE6 F1            [10] 3952 	pop	af
   1BE7 C3r48r1D      [10] 3953 	jp	00326$
   1BEA                    3954 00322$:
                           3955 ;src\CFG8266.c:807: PrintChar('U');
   1BEA 3E 55         [ 7] 3956 	ld	a, #0x55
   1BEC F5            [11] 3957 	push	af
   1BED 33            [ 6] 3958 	inc	sp
   1BEE CDr00r00      [17] 3959 	call	_PrintChar
   1BF1 33            [ 6] 3960 	inc	sp
                           3961 ;src\CFG8266.c:808: uiAnimationTimeOut = TickCount + 30;
   1BF2 FD 21 9E FC   [14] 3962 	ld	iy, #_TickCount
   1BF6 FD 7E 00      [19] 3963 	ld	a, 0 (iy)
   1BF9 C6 1E         [ 7] 3964 	add	a, #0x1e
   1BFB DD 77 FC      [19] 3965 	ld	-4 (ix), a
   1BFE FD 7E 01      [19] 3966 	ld	a, 1 (iy)
   1C01 CE 00         [ 7] 3967 	adc	a, #0x00
   1C03 DD 77 FD      [19] 3968 	ld	-3 (ix), a
                           3969 ;src\CFG8266.c:809: do
   1C06 AF            [ 4] 3970 	xor	a, a
   1C07 DD 77 FE      [19] 3971 	ld	-2 (ix), a
   1C0A DD 77 FF      [19] 3972 	ld	-1 (ix), a
   1C0D                    3973 00316$:
                           3974 ;src\CFG8266.c:811: --uiAnimationTimeOut;
   1C0D DD 6E FC      [19] 3975 	ld	l, -4 (ix)
   1C10 DD 66 FD      [19] 3976 	ld	h, -3 (ix)
   1C13 2B            [ 6] 3977 	dec	hl
   1C14 DD 75 FC      [19] 3978 	ld	-4 (ix), l
   1C17 DD 74 FD      [19] 3979 	ld	-3 (ix), h
                           3980 ;src\CFG8266.c:812: if (TickCount>=uiAnimationTimeOut)
   1C1A FD 21 9E FC   [14] 3981 	ld	iy, #_TickCount
   1C1E FD 7E 00      [19] 3982 	ld	a, 0 (iy)
   1C21 DD 96 FC      [19] 3983 	sub	a, -4 (ix)
   1C24 FD 7E 01      [19] 3984 	ld	a, 1 (iy)
   1C27 DD 9E FD      [19] 3985 	sbc	a, -3 (ix)
   1C2A 38 38         [12] 3986 	jr	C,00307$
                           3987 ;src\CFG8266.c:814: uiAnimationTimeOut = 30;
   1C2C DD 36 FC 1E   [19] 3988 	ld	-4 (ix), #0x1e
   1C30 AF            [ 4] 3989 	xor	a, a
   1C31 DD 77 FD      [19] 3990 	ld	-3 (ix), a
                           3991 ;src\CFG8266.c:816: PrintChar(8); //backspace
   1C34 3E 08         [ 7] 3992 	ld	a, #0x08
   1C36 F5            [11] 3993 	push	af
   1C37 33            [ 6] 3994 	inc	sp
   1C38 CDr00r00      [17] 3995 	call	_PrintChar
   1C3B 33            [ 6] 3996 	inc	sp
                           3997 ;src\CFG8266.c:817: PrintChar(advance[i%3]); // next char
   1C3C 21 03 00      [10] 3998 	ld	hl, #0x0003
   1C3F E5            [11] 3999 	push	hl
   1C40 DD 6E FE      [19] 4000 	ld	l, -2 (ix)
   1C43 DD 66 FF      [19] 4001 	ld	h, -1 (ix)
   1C46 E5            [11] 4002 	push	hl
   1C47 CDr00r00      [17] 4003 	call	__moduint
   1C4A F1            [10] 4004 	pop	af
   1C4B F1            [10] 4005 	pop	af
   1C4C 4D            [ 4] 4006 	ld	c, l
   1C4D 44            [ 4] 4007 	ld	b, h
   1C4E DD 6E F5      [19] 4008 	ld	l, -11 (ix)
   1C51 DD 66 F6      [19] 4009 	ld	h, -10 (ix)
   1C54 09            [11] 4010 	add	hl, bc
   1C55 7E            [ 7] 4011 	ld	a, (hl)
   1C56 F5            [11] 4012 	push	af
   1C57 33            [ 6] 4013 	inc	sp
   1C58 CDr00r00      [17] 4014 	call	_PrintChar
   1C5B 33            [ 6] 4015 	inc	sp
                           4016 ;src\CFG8266.c:818: ++i;
   1C5C DD 34 FE      [23] 4017 	inc	-2 (ix)
   1C5F 20 03         [12] 4018 	jr	NZ,01037$
   1C61 DD 34 FF      [23] 4019 	inc	-1 (ix)
   1C64                    4020 01037$:
   1C64                    4021 00307$:
                           4022 ;src\CFG8266.c:820: if (!ucFirstBlock)
   1C64 DD 7E F7      [19] 4023 	ld	a, -9 (ix)
   1C67 B7            [ 4] 4024 	or	a, a
   1C68 20 2C         [12] 4025 	jr	NZ,00311$
                           4026 ;src\CFG8266.c:822: FileRead = MyRead(iFile, ucServer,256); //try to read 256 bytes of data
   1C6A 21 00 01      [10] 4027 	ld	hl, #0x0100
   1C6D E5            [11] 4028 	push	hl
   1C6E 21r01r00      [10] 4029 	ld	hl, #_ucServer
   1C71 E5            [11] 4030 	push	hl
   1C72 DD 6E F0      [19] 4031 	ld	l, -16 (ix)
   1C75 DD 66 F1      [19] 4032 	ld	h, -15 (ix)
   1C78 E5            [11] 4033 	push	hl
   1C79 CDr00r00      [17] 4034 	call	_MyRead
   1C7C F1            [10] 4035 	pop	af
   1C7D F1            [10] 4036 	pop	af
   1C7E F1            [10] 4037 	pop	af
   1C7F DD 75 F2      [19] 4038 	ld	-14 (ix), l
                           4039 ;src\CFG8266.c:823: if (FileRead ==0)
   1C82 DD 74 F3      [19] 4040 	ld	-13 (ix), h
   1C85 7C            [ 4] 4041 	ld	a, h
   1C86 DD B6 F2      [19] 4042 	or	a, -14 (ix)
   1C89 20 0F         [12] 4043 	jr	NZ,00312$
                           4044 ;src\CFG8266.c:825: printf("\rError reading file...\r\n");
   1C8B 21rE2r22      [10] 4045 	ld	hl, #___str_80
   1C8E E5            [11] 4046 	push	hl
   1C8F CDr00r00      [17] 4047 	call	_puts
   1C92 F1            [10] 4048 	pop	af
                           4049 ;src\CFG8266.c:826: break;
   1C93 C3r31r1D      [10] 4050 	jp	00318$
   1C96                    4051 00311$:
                           4052 ;src\CFG8266.c:830: ucFirstBlock = 0;
   1C96 AF            [ 4] 4053 	xor	a, a
   1C97 DD 77 F7      [19] 4054 	ld	-9 (ix), a
   1C9A                    4055 00312$:
                           4056 ;src\CFG8266.c:832: TxByte('z'); //Write block
   1C9A 3E 7A         [ 7] 4057 	ld	a, #0x7a
   1C9C F5            [11] 4058 	push	af
   1C9D 33            [ 6] 4059 	inc	sp
   1C9E CDr89r06      [17] 4060 	call	_TxByte
   1CA1 33            [ 6] 4061 	inc	sp
                           4062 ;src\CFG8266.c:833: TxByte((unsigned char)((FileRead&0xff00)>>8));
   1CA2 DD 46 F3      [19] 4063 	ld	b, -13 (ix)
   1CA5 0E 00         [ 7] 4064 	ld	c, #0x00
   1CA7 C5            [11] 4065 	push	bc
   1CA8 33            [ 6] 4066 	inc	sp
   1CA9 CDr89r06      [17] 4067 	call	_TxByte
   1CAC 33            [ 6] 4068 	inc	sp
                           4069 ;src\CFG8266.c:834: TxByte((unsigned char)(FileRead&0xff));
   1CAD DD 7E F2      [19] 4070 	ld	a, -14 (ix)
   1CB0 F5            [11] 4071 	push	af
   1CB1 33            [ 6] 4072 	inc	sp
   1CB2 CDr89r06      [17] 4073 	call	_TxByte
   1CB5 33            [ 6] 4074 	inc	sp
                           4075 ;src\CFG8266.c:835: for (ii=0;ii<256;ii++)
   1CB6 01 00 00      [10] 4076 	ld	bc, #0x0000
   1CB9                    4077 00386$:
                           4078 ;src\CFG8266.c:836: TxByte(ucServer[ii]);
   1CB9 21r01r00      [10] 4079 	ld	hl, #_ucServer
   1CBC 09            [11] 4080 	add	hl, bc
   1CBD 7E            [ 7] 4081 	ld	a, (hl)
   1CBE C5            [11] 4082 	push	bc
   1CBF F5            [11] 4083 	push	af
   1CC0 33            [ 6] 4084 	inc	sp
   1CC1 CDr89r06      [17] 4085 	call	_TxByte
   1CC4 33            [ 6] 4086 	inc	sp
   1CC5 C1            [10] 4087 	pop	bc
                           4088 ;src\CFG8266.c:835: for (ii=0;ii<256;ii++)
   1CC6 03            [ 6] 4089 	inc	bc
   1CC7 78            [ 4] 4090 	ld	a, b
   1CC8 D6 01         [ 7] 4091 	sub	a, #0x01
   1CCA 38 ED         [12] 4092 	jr	C,00386$
                           4093 ;src\CFG8266.c:838: bResponse = WaitForRXData(responseWRBlock,2,600,true,false,NULL,0);
   1CCC 21 00 00      [10] 4094 	ld	hl, #0x0000
   1CCF E5            [11] 4095 	push	hl
   1CD0 2E 00         [ 7] 4096 	ld	l, #0x00
   1CD2 E5            [11] 4097 	push	hl
   1CD3 AF            [ 4] 4098 	xor	a, a
   1CD4 57            [ 4] 4099 	ld	d,a
   1CD5 1E 01         [ 7] 4100 	ld	e,#0x01
   1CD7 D5            [11] 4101 	push	de
   1CD8 21 58 02      [10] 4102 	ld	hl, #0x0258
   1CDB E5            [11] 4103 	push	hl
   1CDC 21 02 00      [10] 4104 	ld	hl, #0x0002
   1CDF E5            [11] 4105 	push	hl
   1CE0 21r25r01      [10] 4106 	ld	hl, #_responseWRBlock
   1CE3 E5            [11] 4107 	push	hl
   1CE4 CDr19r08      [17] 4108 	call	_WaitForRXData
   1CE7 FD 21 0C 00   [14] 4109 	ld	iy, #12
   1CEB FD 39         [15] 4110 	add	iy, sp
   1CED FD F9         [10] 4111 	ld	sp, iy
                           4112 ;src\CFG8266.c:840: if (!bResponse)
   1CEF DD 75 F4      [19] 4113 	ld	-12 (ix), l
   1CF2 7D            [ 4] 4114 	ld	a, l
   1CF3 B7            [ 4] 4115 	or	a, a
   1CF4 20 0A         [12] 4116 	jr	NZ,00315$
                           4117 ;src\CFG8266.c:842: printf("\rError requesting to write firmware block.\r\n");
   1CF6 21rFAr22      [10] 4118 	ld	hl, #___str_82
   1CF9 E5            [11] 4119 	push	hl
   1CFA CDr00r00      [17] 4120 	call	_puts
   1CFD F1            [10] 4121 	pop	af
                           4122 ;src\CFG8266.c:843: break;
   1CFE 18 31         [12] 4123 	jr	00318$
   1D00                    4124 00315$:
                           4125 ;src\CFG8266.c:845: SentFileSize = SentFileSize - FileRead;
   1D00 DD 4E F2      [19] 4126 	ld	c, -14 (ix)
   1D03 DD 46 F3      [19] 4127 	ld	b, -13 (ix)
   1D06 11 00 00      [10] 4128 	ld	de, #0x0000
   1D09 DD 7E F8      [19] 4129 	ld	a, -8 (ix)
   1D0C 91            [ 4] 4130 	sub	a, c
   1D0D DD 77 F8      [19] 4131 	ld	-8 (ix), a
   1D10 DD 7E F9      [19] 4132 	ld	a, -7 (ix)
   1D13 98            [ 4] 4133 	sbc	a, b
   1D14 DD 77 F9      [19] 4134 	ld	-7 (ix), a
   1D17 DD 7E FA      [19] 4135 	ld	a, -6 (ix)
   1D1A 9B            [ 4] 4136 	sbc	a, e
   1D1B DD 77 FA      [19] 4137 	ld	-6 (ix), a
   1D1E DD 7E FB      [19] 4138 	ld	a, -5 (ix)
   1D21 9A            [ 4] 4139 	sbc	a, d
                           4140 ;src\CFG8266.c:847: while(SentFileSize);
   1D22 DD 77 FB      [19] 4141 	ld	-5 (ix), a
   1D25 DD B6 FA      [19] 4142 	or	a, -6 (ix)
   1D28 DD B6 F9      [19] 4143 	or	a, -7 (ix)
   1D2B DD B6 F8      [19] 4144 	or	a, -8 (ix)
   1D2E C2r0Dr1C      [10] 4145 	jp	NZ, 00316$
   1D31                    4146 00318$:
                           4147 ;src\CFG8266.c:850: if (bResponse)
   1D31 DD 7E F4      [19] 4148 	ld	a, -12 (ix)
   1D34 B7            [ 4] 4149 	or	a, a
   1D35 28 11         [12] 4150 	jr	Z,00326$
                           4151 ;src\CFG8266.c:851: FinishUpdate(false);
   1D37 AF            [ 4] 4152 	xor	a, a
   1D38 F5            [11] 4153 	push	af
   1D39 33            [ 6] 4154 	inc	sp
   1D3A CDrCFr0A      [17] 4155 	call	_FinishUpdate
   1D3D 33            [ 6] 4156 	inc	sp
   1D3E 18 08         [12] 4157 	jr	00326$
   1D40                    4158 00325$:
                           4159 ;src\CFG8266.c:855: Print("\rError reading firmware file!\n");
   1D40 21r26r23      [10] 4160 	ld	hl, #___str_83
   1D43 E5            [11] 4161 	push	hl
   1D44 CDr00r00      [17] 4162 	call	_Print
   1D47 F1            [10] 4163 	pop	af
   1D48                    4164 00326$:
                           4165 ;src\CFG8266.c:856: Close(iFile);
   1D48 DD 6E F0      [19] 4166 	ld	l, -16 (ix)
   1D4B DD 66 F1      [19] 4167 	ld	h, -15 (ix)
   1D4E E5            [11] 4168 	push	hl
   1D4F CDr00r00      [17] 4169 	call	_Close
   1D52 F1            [10] 4170 	pop	af
   1D53 C3r80r1F      [10] 4171 	jp	00375$
   1D56                    4172 00328$:
                           4173 ;src\CFG8266.c:860: printf("Error, couldn't open %s ...\r\n",ucFile);
   1D56 21r2Dr01      [10] 4174 	ld	hl, #_ucFile
   1D59 E5            [11] 4175 	push	hl
   1D5A 21r45r23      [10] 4176 	ld	hl, #___str_84
   1D5D E5            [11] 4177 	push	hl
   1D5E CDr00r00      [17] 4178 	call	_printf
   1D61 F1            [10] 4179 	pop	af
   1D62 F1            [10] 4180 	pop	af
                           4181 ;src\CFG8266.c:861: return 0;
   1D63 21 00 00      [10] 4182 	ld	hl, #0x0000
   1D66 C3r83r1F      [10] 4183 	jp	00388$
   1D69                    4184 00331$:
                           4185 ;src\CFG8266.c:866: printf("Error, %s is 0 bytes long...\r\n",ucFile);
   1D69 21r2Dr01      [10] 4186 	ld	hl, #_ucFile
   1D6C E5            [11] 4187 	push	hl
   1D6D 21r63r23      [10] 4188 	ld	hl, #___str_85
   1D70 E5            [11] 4189 	push	hl
   1D71 CDr00r00      [17] 4190 	call	_printf
   1D74 F1            [10] 4191 	pop	af
   1D75 F1            [10] 4192 	pop	af
                           4193 ;src\CFG8266.c:867: return 0;
   1D76 21 00 00      [10] 4194 	ld	hl, #0x0000
   1D79 C3r83r1F      [10] 4195 	jp	00388$
   1D7C                    4196 00334$:
                           4197 ;src\CFG8266.c:872: printf("Error, couldn't open %s ...\r\n",ucFile);
   1D7C 21r2Dr01      [10] 4198 	ld	hl, #_ucFile
   1D7F E5            [11] 4199 	push	hl
   1D80 21r45r23      [10] 4200 	ld	hl, #___str_84
   1D83 E5            [11] 4201 	push	hl
   1D84 CDr00r00      [17] 4202 	call	_printf
   1D87 F1            [10] 4203 	pop	af
   1D88 F1            [10] 4204 	pop	af
                           4205 ;src\CFG8266.c:873: return 0;
   1D89 21 00 00      [10] 4206 	ld	hl, #0x0000
   1D8C C3r83r1F      [10] 4207 	jp	00388$
   1D8F                    4208 00361$:
                           4209 ;src\CFG8266.c:878: if (ucIsFw)
   1D8F 3Ar66r02      [13] 4210 	ld	a,(#_ucIsFw + 0)
   1D92 B7            [ 4] 4211 	or	a, a
   1D93 28 19         [12] 4212 	jr	Z,00337$
                           4213 ;src\CFG8266.c:879: printf ("Ok, updating FW using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1D95 21r2Dr01      [10] 4214 	ld	hl, #_ucFile
   1D98 E5            [11] 4215 	push	hl
   1D99 2Ar5Fr02      [16] 4216 	ld	hl, (_uiPort)
   1D9C E5            [11] 4217 	push	hl
   1D9D 21r01r00      [10] 4218 	ld	hl, #_ucServer
   1DA0 E5            [11] 4219 	push	hl
   1DA1 21r82r23      [10] 4220 	ld	hl, #___str_86
   1DA4 E5            [11] 4221 	push	hl
   1DA5 CDr00r00      [17] 4222 	call	_printf
   1DA8 F1            [10] 4223 	pop	af
   1DA9 F1            [10] 4224 	pop	af
   1DAA F1            [10] 4225 	pop	af
   1DAB F1            [10] 4226 	pop	af
   1DAC 18 17         [12] 4227 	jr	00338$
   1DAE                    4228 00337$:
                           4229 ;src\CFG8266.c:881: printf ("Ok, updating certificates using server: %s port: %u\r\nFile path: %s\nPlease Wait, it can take up to a few minutes!\r\n",ucServer,uiPort,ucFile);
   1DAE 21r2Dr01      [10] 4230 	ld	hl, #_ucFile
   1DB1 E5            [11] 4231 	push	hl
   1DB2 2Ar5Fr02      [16] 4232 	ld	hl, (_uiPort)
   1DB5 E5            [11] 4233 	push	hl
   1DB6 21r01r00      [10] 4234 	ld	hl, #_ucServer
   1DB9 E5            [11] 4235 	push	hl
   1DBA 21rEBr23      [10] 4236 	ld	hl, #___str_87
   1DBD E5            [11] 4237 	push	hl
   1DBE CDr00r00      [17] 4238 	call	_printf
   1DC1 F1            [10] 4239 	pop	af
   1DC2 F1            [10] 4240 	pop	af
   1DC3 F1            [10] 4241 	pop	af
   1DC4 F1            [10] 4242 	pop	af
   1DC5                    4243 00338$:
                           4244 ;src\CFG8266.c:882: uiCMDLen = strlen(ucServer) + 3; //3 = 0 terminator + 2 bytes port
   1DC5 21r01r00      [10] 4245 	ld	hl, #_ucServer
   1DC8 E5            [11] 4246 	push	hl
   1DC9 CDr00r00      [17] 4247 	call	_strlen
   1DCC F1            [10] 4248 	pop	af
   1DCD 23            [ 6] 4249 	inc	hl
   1DCE 23            [ 6] 4250 	inc	hl
   1DCF 23            [ 6] 4251 	inc	hl
   1DD0 DD 75 FA      [19] 4252 	ld	-6 (ix), l
   1DD3 DD 74 FB      [19] 4253 	ld	-5 (ix), h
                           4254 ;src\CFG8266.c:883: uiCMDLen += strlen(ucFile);
   1DD6 21r2Dr01      [10] 4255 	ld	hl, #_ucFile
   1DD9 E5            [11] 4256 	push	hl
   1DDA CDr00r00      [17] 4257 	call	_strlen
   1DDD F1            [10] 4258 	pop	af
   1DDE DD 75 FC      [19] 4259 	ld	-4 (ix), l
   1DE1 DD 74 FD      [19] 4260 	ld	-3 (ix), h
   1DE4 DD 7E FC      [19] 4261 	ld	a, -4 (ix)
   1DE7 DD 86 FA      [19] 4262 	add	a, -6 (ix)
   1DEA DD 77 FE      [19] 4263 	ld	-2 (ix), a
   1DED DD 7E FD      [19] 4264 	ld	a, -3 (ix)
   1DF0 DD 8E FB      [19] 4265 	adc	a, -5 (ix)
   1DF3 DD 77 FF      [19] 4266 	ld	-1 (ix), a
                           4267 ;src\CFG8266.c:884: if (ucIsFw)
   1DF6 3Ar66r02      [13] 4268 	ld	a,(#_ucIsFw + 0)
   1DF9 B7            [ 4] 4269 	or	a, a
   1DFA 28 0A         [12] 4270 	jr	Z,00340$
                           4271 ;src\CFG8266.c:885: TxByte('U'); //Request Update Main Firmware remotely
   1DFC 3E 55         [ 7] 4272 	ld	a, #0x55
   1DFE F5            [11] 4273 	push	af
   1DFF 33            [ 6] 4274 	inc	sp
   1E00 CDr89r06      [17] 4275 	call	_TxByte
   1E03 33            [ 6] 4276 	inc	sp
   1E04 18 08         [12] 4277 	jr	00341$
   1E06                    4278 00340$:
                           4279 ;src\CFG8266.c:887: TxByte('u'); //Request Update spiffs remotely
   1E06 3E 75         [ 7] 4280 	ld	a, #0x75
   1E08 F5            [11] 4281 	push	af
   1E09 33            [ 6] 4282 	inc	sp
   1E0A CDr89r06      [17] 4283 	call	_TxByte
   1E0D 33            [ 6] 4284 	inc	sp
   1E0E                    4285 00341$:
                           4286 ;src\CFG8266.c:888: TxByte((unsigned char)((uiCMDLen&0xff00)>>8));
   1E0E DD 36 FC 00   [19] 4287 	ld	-4 (ix), #0x00
   1E12 DD 7E FF      [19] 4288 	ld	a, -1 (ix)
   1E15 DD 77 FD      [19] 4289 	ld	-3 (ix), a
   1E18 DD 77 FC      [19] 4290 	ld	-4 (ix), a
   1E1B DD 36 FD 00   [19] 4291 	ld	-3 (ix), #0x00
   1E1F DD 7E FC      [19] 4292 	ld	a, -4 (ix)
   1E22 DD 77 FD      [19] 4293 	ld	-3 (ix), a
   1E25 F5            [11] 4294 	push	af
   1E26 33            [ 6] 4295 	inc	sp
   1E27 CDr89r06      [17] 4296 	call	_TxByte
   1E2A 33            [ 6] 4297 	inc	sp
                           4298 ;src\CFG8266.c:889: TxByte((unsigned char)(uiCMDLen&0xff));
   1E2B DD 7E FE      [19] 4299 	ld	a, -2 (ix)
   1E2E F5            [11] 4300 	push	af
   1E2F 33            [ 6] 4301 	inc	sp
   1E30 CDr89r06      [17] 4302 	call	_TxByte
   1E33 33            [ 6] 4303 	inc	sp
                           4304 ;src\CFG8266.c:890: TxByte((unsigned char)(uiPort&0xff));
   1E34 3Ar5Fr02      [13] 4305 	ld	a,(#_uiPort + 0)
   1E37 F5            [11] 4306 	push	af
   1E38 33            [ 6] 4307 	inc	sp
   1E39 CDr89r06      [17] 4308 	call	_TxByte
   1E3C 33            [ 6] 4309 	inc	sp
                           4310 ;src\CFG8266.c:891: TxByte((unsigned char)((uiPort&0xff00)>>8));
   1E3D DD 36 FC 00   [19] 4311 	ld	-4 (ix), #0x00
   1E41 3Ar60r02      [13] 4312 	ld	a,(#_uiPort + 1)
   1E44 DD 77 FD      [19] 4313 	ld	-3 (ix), a
   1E47 DD 77 FC      [19] 4314 	ld	-4 (ix), a
   1E4A DD 36 FD 00   [19] 4315 	ld	-3 (ix), #0x00
   1E4E DD 7E FC      [19] 4316 	ld	a, -4 (ix)
   1E51 DD 77 FD      [19] 4317 	ld	-3 (ix), a
   1E54 F5            [11] 4318 	push	af
   1E55 33            [ 6] 4319 	inc	sp
   1E56 CDr89r06      [17] 4320 	call	_TxByte
   1E59 33            [ 6] 4321 	inc	sp
                           4322 ;src\CFG8266.c:893: do
   1E5A DD 7E FE      [19] 4323 	ld	a, -2 (ix)
   1E5D DD 77 FA      [19] 4324 	ld	-6 (ix), a
   1E60 DD 7E FF      [19] 4325 	ld	a, -1 (ix)
   1E63 DD 77 FB      [19] 4326 	ld	-5 (ix), a
   1E66 AF            [ 4] 4327 	xor	a, a
   1E67 DD 77 FF      [19] 4328 	ld	-1 (ix), a
   1E6A                    4329 00343$:
                           4330 ;src\CFG8266.c:895: tx_data = ucServer[rx_data];
   1E6A 3Er01         [ 7] 4331 	ld	a, #<(_ucServer)
   1E6C DD 86 FF      [19] 4332 	add	a, -1 (ix)
   1E6F DD 77 FD      [19] 4333 	ld	-3 (ix), a
   1E72 3Es00         [ 7] 4334 	ld	a, #>(_ucServer)
   1E74 CE 00         [ 7] 4335 	adc	a, #0x00
   1E76 DD 77 FE      [19] 4336 	ld	-2 (ix), a
   1E79 DD 6E FD      [19] 4337 	ld	l, -3 (ix)
   1E7C DD 66 FE      [19] 4338 	ld	h, -2 (ix)
   1E7F 46            [ 7] 4339 	ld	b, (hl)
                           4340 ;src\CFG8266.c:896: TxByte(tx_data);
   1E80 C5            [11] 4341 	push	bc
   1E81 C5            [11] 4342 	push	bc
   1E82 33            [ 6] 4343 	inc	sp
   1E83 CDr89r06      [17] 4344 	call	_TxByte
   1E86 33            [ 6] 4345 	inc	sp
   1E87 C1            [10] 4346 	pop	bc
                           4347 ;src\CFG8266.c:897: --uiCMDLen;
   1E88 DD 6E FA      [19] 4348 	ld	l, -6 (ix)
   1E8B DD 66 FB      [19] 4349 	ld	h, -5 (ix)
   1E8E 2B            [ 6] 4350 	dec	hl
   1E8F DD 75 FA      [19] 4351 	ld	-6 (ix), l
   1E92 DD 74 FB      [19] 4352 	ld	-5 (ix), h
                           4353 ;src\CFG8266.c:898: ++rx_data;
   1E95 DD 34 FF      [23] 4354 	inc	-1 (ix)
                           4355 ;src\CFG8266.c:900: while((uiCMDLen)&&(tx_data!=0));
   1E98 DD 7E FB      [19] 4356 	ld	a, -5 (ix)
   1E9B DD B6 FA      [19] 4357 	or	a, -6 (ix)
   1E9E 28 04         [12] 4358 	jr	Z,00345$
   1EA0 78            [ 4] 4359 	ld	a, b
   1EA1 B7            [ 4] 4360 	or	a, a
   1EA2 20 C6         [12] 4361 	jr	NZ,00343$
   1EA4                    4362 00345$:
                           4363 ;src\CFG8266.c:902: do
   1EA4 DD 7E FA      [19] 4364 	ld	a, -6 (ix)
   1EA7 DD 77 FD      [19] 4365 	ld	-3 (ix), a
   1EAA DD 7E FB      [19] 4366 	ld	a, -5 (ix)
   1EAD DD 77 FE      [19] 4367 	ld	-2 (ix), a
   1EB0 AF            [ 4] 4368 	xor	a, a
   1EB1 DD 77 FF      [19] 4369 	ld	-1 (ix), a
   1EB4                    4370 00348$:
                           4371 ;src\CFG8266.c:904: tx_data = ucFile[rx_data];
   1EB4 3Er2D         [ 7] 4372 	ld	a, #<(_ucFile)
   1EB6 DD 86 FF      [19] 4373 	add	a, -1 (ix)
   1EB9 DD 77 FB      [19] 4374 	ld	-5 (ix), a
   1EBC 3Es01         [ 7] 4375 	ld	a, #>(_ucFile)
   1EBE CE 00         [ 7] 4376 	adc	a, #0x00
   1EC0 DD 77 FC      [19] 4377 	ld	-4 (ix), a
   1EC3 DD 6E FB      [19] 4378 	ld	l, -5 (ix)
   1EC6 DD 66 FC      [19] 4379 	ld	h, -4 (ix)
   1EC9 7E            [ 7] 4380 	ld	a, (hl)
                           4381 ;src\CFG8266.c:905: if (tx_data==0)
   1ECA B7            [ 4] 4382 	or	a, a
   1ECB 28 1E         [12] 4383 	jr	Z,00350$
                           4384 ;src\CFG8266.c:907: TxByte(tx_data);
   1ECD F5            [11] 4385 	push	af
   1ECE 33            [ 6] 4386 	inc	sp
   1ECF CDr89r06      [17] 4387 	call	_TxByte
   1ED2 33            [ 6] 4388 	inc	sp
                           4389 ;src\CFG8266.c:908: --uiCMDLen;
   1ED3 DD 6E FD      [19] 4390 	ld	l, -3 (ix)
   1ED6 DD 66 FE      [19] 4391 	ld	h, -2 (ix)
   1ED9 2B            [ 6] 4392 	dec	hl
   1EDA DD 75 FD      [19] 4393 	ld	-3 (ix), l
   1EDD DD 74 FE      [19] 4394 	ld	-2 (ix), h
                           4395 ;src\CFG8266.c:909: ++rx_data;
   1EE0 DD 34 FF      [23] 4396 	inc	-1 (ix)
                           4397 ;src\CFG8266.c:911: while(uiCMDLen);
   1EE3 DD 7E FE      [19] 4398 	ld	a, -2 (ix)
   1EE6 DD B6 FD      [19] 4399 	or	a, -3 (ix)
   1EE9 20 C9         [12] 4400 	jr	NZ,00348$
   1EEB                    4401 00350$:
                           4402 ;src\CFG8266.c:913: if (ucIsFw)
   1EEB 3Ar66r02      [13] 4403 	ld	a,(#_ucIsFw + 0)
   1EEE B7            [ 4] 4404 	or	a, a
   1EEF 28 26         [12] 4405 	jr	Z,00352$
                           4406 ;src\CFG8266.c:914: bResponse = WaitForRXData(responseOTAFW,2,18000,true,false,NULL,0);
   1EF1 21 00 00      [10] 4407 	ld	hl, #0x0000
   1EF4 E5            [11] 4408 	push	hl
   1EF5 2E 00         [ 7] 4409 	ld	l, #0x00
   1EF7 E5            [11] 4410 	push	hl
   1EF8 AF            [ 4] 4411 	xor	a, a
   1EF9 57            [ 4] 4412 	ld	d,a
   1EFA 1E 01         [ 7] 4413 	ld	e,#0x01
   1EFC D5            [11] 4414 	push	de
   1EFD 21 50 46      [10] 4415 	ld	hl, #0x4650
   1F00 E5            [11] 4416 	push	hl
   1F01 21 02 00      [10] 4417 	ld	hl, #0x0002
   1F04 E5            [11] 4418 	push	hl
   1F05 21r27r01      [10] 4419 	ld	hl, #_responseOTAFW
   1F08 E5            [11] 4420 	push	hl
   1F09 CDr19r08      [17] 4421 	call	_WaitForRXData
   1F0C FD 21 0C 00   [14] 4422 	ld	iy, #12
   1F10 FD 39         [15] 4423 	add	iy, sp
   1F12 FD F9         [10] 4424 	ld	sp, iy
   1F14 4D            [ 4] 4425 	ld	c, l
   1F15 18 24         [12] 4426 	jr	00353$
   1F17                    4427 00352$:
                           4428 ;src\CFG8266.c:916: bResponse = WaitForRXData(responseOTASPIFF,2,18000,true,false,NULL,0);
   1F17 21 00 00      [10] 4429 	ld	hl, #0x0000
   1F1A E5            [11] 4430 	push	hl
   1F1B 2E 00         [ 7] 4431 	ld	l, #0x00
   1F1D E5            [11] 4432 	push	hl
   1F1E AF            [ 4] 4433 	xor	a, a
   1F1F 57            [ 4] 4434 	ld	d,a
   1F20 1E 01         [ 7] 4435 	ld	e,#0x01
   1F22 D5            [11] 4436 	push	de
   1F23 21 50 46      [10] 4437 	ld	hl, #0x4650
   1F26 E5            [11] 4438 	push	hl
   1F27 21 02 00      [10] 4439 	ld	hl, #0x0002
   1F2A E5            [11] 4440 	push	hl
   1F2B 21r29r01      [10] 4441 	ld	hl, #_responseOTASPIFF
   1F2E E5            [11] 4442 	push	hl
   1F2F CDr19r08      [17] 4443 	call	_WaitForRXData
   1F32 FD 21 0C 00   [14] 4444 	ld	iy, #12
   1F36 FD 39         [15] 4445 	add	iy, sp
   1F38 FD F9         [10] 4446 	ld	sp, iy
   1F3A 4D            [ 4] 4447 	ld	c, l
   1F3B                    4448 00353$:
                           4449 ;src\CFG8266.c:918: if (bResponse)
   1F3B 79            [ 4] 4450 	ld	a, c
   1F3C B7            [ 4] 4451 	or	a, a
   1F3D 28 25         [12] 4452 	jr	Z,00358$
                           4453 ;src\CFG8266.c:920: if ((!ucIsFw))
   1F3F 3Ar66r02      [13] 4454 	ld	a,(#_ucIsFw + 0)
   1F42 B7            [ 4] 4455 	or	a, a
   1F43 20 0A         [12] 4456 	jr	NZ,00355$
                           4457 ;src\CFG8266.c:921: printf("\rSuccess updating certificates!\r\n");
   1F45 21r5Er24      [10] 4458 	ld	hl, #___str_89
   1F48 E5            [11] 4459 	push	hl
   1F49 CDr00r00      [17] 4460 	call	_puts
   1F4C F1            [10] 4461 	pop	af
   1F4D 18 08         [12] 4462 	jr	00356$
   1F4F                    4463 00355$:
                           4464 ;src\CFG8266.c:923: printf("\rSuccess, firmware updated, wait a minute so it is fully flashed.\r\n");
   1F4F 21r7Fr24      [10] 4465 	ld	hl, #___str_91
   1F52 E5            [11] 4466 	push	hl
   1F53 CDr00r00      [17] 4467 	call	_puts
   1F56 F1            [10] 4468 	pop	af
   1F57                    4469 00356$:
                           4470 ;src\CFG8266.c:924: FinishUpdate(true);
   1F57 3E 01         [ 7] 4471 	ld	a, #0x01
   1F59 F5            [11] 4472 	push	af
   1F5A 33            [ 6] 4473 	inc	sp
   1F5B CDrCFr0A      [17] 4474 	call	_FinishUpdate
   1F5E 33            [ 6] 4475 	inc	sp
                           4476 ;src\CFG8266.c:925: return 0;
   1F5F 21 00 00      [10] 4477 	ld	hl, #0x0000
   1F62 18 1F         [12] 4478 	jr	00388$
   1F64                    4479 00358$:
                           4480 ;src\CFG8266.c:928: printf("\rFailed to update from remote server...\r\n");
   1F64 21rC2r24      [10] 4481 	ld	hl, #___str_93
   1F67 E5            [11] 4482 	push	hl
   1F68 CDr00r00      [17] 4483 	call	_puts
   1F6B F1            [10] 4484 	pop	af
   1F6C 18 12         [12] 4485 	jr	00375$
   1F6E                    4486 00371$:
                           4487 ;src\CFG8266.c:932: printf("ESP device not found...\r\n");
   1F6E 21rEBr24      [10] 4488 	ld	hl, #___str_95
   1F71 E5            [11] 4489 	push	hl
   1F72 CDr00r00      [17] 4490 	call	_puts
   1F75 F1            [10] 4491 	pop	af
   1F76 18 08         [12] 4492 	jr	00375$
   1F78                    4493 00374$:
                           4494 ;src\CFG8266.c:935: printf(strUsage);
   1F78 21r36r01      [10] 4495 	ld	hl, #_strUsage
   1F7B E5            [11] 4496 	push	hl
   1F7C CDr00r00      [17] 4497 	call	_printf
   1F7F F1            [10] 4498 	pop	af
   1F80                    4499 00375$:
                           4500 ;src\CFG8266.c:937: return 0;
   1F80 21 00 00      [10] 4501 	ld	hl, #0x0000
   1F83                    4502 00388$:
                           4503 ;src\CFG8266.c:938: }
   1F83 DD F9         [10] 4504 	ld	sp, ix
   1F85 DD E1         [14] 4505 	pop	ix
   1F87 C9            [10] 4506 	ret
   1F88                    4507 ___str_29:
   1F88 3E 20 53 4D 2D 58  4508 	.ascii "> SM-X ESP8266 Wi-Fi Module Configuration v1.30 <"
        20 45 53 50 38 32
        36 36 20 57 69 2D
        46 69 20 4D 6F 64
        75 6C 65 20 43 6F
        6E 66 69 67 75 72
        61 74 69 6F 6E 20
        76 31 2E 33 30 20
        3C
   1FB9 0D                 4509 	.db 0x0d
   1FBA 0A                 4510 	.db 0x0a
   1FBB 28 63 29 20 32 30  4511 	.ascii "(c) 2020 Oduvaldo Pavan Junior - ducasp@gmail.com"
        32 30 20 4F 64 75
        76 61 6C 64 6F 20
        50 61 76 61 6E 20
        4A 75 6E 69 6F 72
        20 2D 20 64 75 63
        61 73 70 40 67 6D
        61 69 6C 2E 63 6F
        6D
   1FEC 0D                 4512 	.db 0x0d
   1FED 0A                 4513 	.db 0x0a
   1FEE 00                 4514 	.db 0x00
   1FEF                    4515 ___str_30:
   1FEF 55 73 69 6E 67 20  4516 	.ascii "Using Baud Rate #%u"
        42 61 75 64 20 52
        61 74 65 20 23 25
        75
   2002 0D                 4517 	.db 0x0d
   2003 0A                 4518 	.db 0x0a
   2004 00                 4519 	.db 0x00
   2005                    4520 ___str_31:
   2005 0D                 4521 	.db 0x0d
   2006 0A                 4522 	.db 0x0a
   2007 53 65 74 74 69 6E  4523 	.ascii "Setting Wi-Fi idle timeout to %u..."
        67 20 57 69 2D 46
        69 20 69 64 6C 65
        20 74 69 6D 65 6F
        75 74 20 74 6F 20
        25 75 2E 2E 2E
   202A 0D                 4524 	.db 0x0d
   202B 0A                 4525 	.db 0x0a
   202C 00                 4526 	.db 0x00
   202D                    4527 ___str_33:
   202D 0D                 4528 	.db 0x0d
   202E 0A                 4529 	.db 0x0a
   202F 53 65 74 74 69 6E  4530 	.ascii "Setting Wi-Fi to always on!"
        67 20 57 69 2D 46
        69 20 74 6F 20 61
        6C 77 61 79 73 20
        6F 6E 21
   204A 0D                 4531 	.db 0x0d
   204B 00                 4532 	.db 0x00
   204C                    4533 ___str_35:
   204C 0D                 4534 	.db 0x0d
   204D 00                 4535 	.db 0x00
   204E                    4536 ___str_36:
   204E 25 73 25 73        4537 	.ascii "%s%s"
   2052 0D                 4538 	.db 0x0d
   2053 0A                 4539 	.db 0x0a
   2054 0A                 4540 	.db 0x0a
   2055 00                 4541 	.db 0x00
   2056                    4542 ___str_38:
   2056 43 68 6F 6F 73 65  4543 	.ascii "Choose AP:"
        20 41 50 3A
   2060 0D                 4544 	.db 0x0d
   2061 0A                 4545 	.db 0x0a
   2062 00                 4546 	.db 0x00
   2063                    4547 ___str_39:
   2063 25 75 20 2D 20 25  4548 	.ascii "%u - %s"
        73
   206A 00                 4549 	.db 0x00
   206B                    4550 ___str_41:
   206B 20 28 50 57 44 29  4551 	.ascii " (PWD)"
   2071 0D                 4552 	.db 0x0d
   2072 00                 4553 	.db 0x00
   2073                    4554 ___str_43:
   2073 20 28 4F 50 45 4E  4555 	.ascii " (OPEN)"
        29
   207A 0D                 4556 	.db 0x0d
   207B 00                 4557 	.db 0x00
   207C                    4558 ___str_44:
   207C 0D                 4559 	.db 0x0d
   207D 0A                 4560 	.db 0x0a
   207E 57 68 69 63 68 20  4561 	.ascii "Which one to connect? (ESC exit/SPACE BAR next page)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 2F 53 50 41 43
        45 20 42 41 52 20
        6E 65 78 74 20 70
        61 67 65 29
   20B2 00                 4562 	.db 0x00
   20B3                    4563 ___str_45:
   20B3 0D                 4564 	.db 0x0d
   20B4 0A                 4565 	.db 0x0a
   20B5 57 68 69 63 68 20  4566 	.ascii "Which one to connect? (ESC exit)"
        6F 6E 65 20 74 6F
        20 63 6F 6E 6E 65
        63 74 3F 20 28 45
        53 43 20 65 78 69
        74 29
   20D5 00                 4567 	.db 0x00
   20D6                    4568 ___str_46:
   20D6 20 25 63           4569 	.ascii " %c"
   20D9 0D                 4570 	.db 0x0d
   20DA 0A                 4571 	.db 0x0a
   20DB 0A                 4572 	.db 0x0a
   20DC 00                 4573 	.db 0x00
   20DD                    4574 ___str_47:
   20DD 50 61 73 73 77 6F  4575 	.ascii "Password? "
        72 64 3F 20
   20E7 00                 4576 	.db 0x00
   20E8                    4577 ___str_49:
   20E8 43 6F 6E 6E 65 63  4578 	.ascii "Connecting to: %s "
        74 69 6E 67 20 74
        6F 3A 20 25 73 20
   20FA 0D                 4579 	.db 0x0d
   20FB 0A                 4580 	.db 0x0a
   20FC 00                 4581 	.db 0x00
   20FD                    4582 ___str_51:
   20FD 53 75 63 63 65 73  4583 	.ascii "Success, AP configured to be used."
        73 2C 20 41 50 20
        63 6F 6E 66 69 67
        75 72 65 64 20 74
        6F 20 62 65 20 75
        73 65 64 2E
   211F 0D                 4584 	.db 0x0d
   2120 00                 4585 	.db 0x00
   2121                    4586 ___str_53:
   2121 45 72 72 6F 72 2C  4587 	.ascii "Error, wrong password!"
        20 77 72 6F 6E 67
        20 70 61 73 73 77
        6F 72 64 21
   2137 0D                 4588 	.db 0x0d
   2138 00                 4589 	.db 0x00
   2139                    4590 ___str_55:
   2139 45 72 72 6F 72 2C  4591 	.ascii "Error, if protected network, check password."
        20 69 66 20 70 72
        6F 74 65 63 74 65
        64 20 6E 65 74 77
        6F 72 6B 2C 20 63
        68 65 63 6B 20 70
        61 73 73 77 6F 72
        64 2E
   2165 0D                 4592 	.db 0x0d
   2166 00                 4593 	.db 0x00
   2167                    4594 ___str_59:
   2167 0D                 4595 	.db 0x0d
   2168 0A                 4596 	.db 0x0a
   2169 55 73 65 72 20 63  4597 	.ascii "User canceled by ESC key..."
        61 6E 63 65 6C 65
        64 20 62 79 20 45
        53 43 20 6B 65 79
        2E 2E 2E
   2184 0D                 4598 	.db 0x0d
   2185 00                 4599 	.db 0x00
   2186                    4600 ___str_61:
   2186 0D                 4601 	.db 0x0d
   2187 0A                 4602 	.db 0x0a
   2188 53 63 61 6E 20 72  4603 	.ascii "Scan results: no answer..."
        65 73 75 6C 74 73
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   21A2 0D                 4604 	.db 0x0d
   21A3 00                 4605 	.db 0x00
   21A4                    4606 ___str_63:
   21A4 0D                 4607 	.db 0x0d
   21A5 53 63 61 6E 20 72  4608 	.ascii "Scan request: no answer..."
        65 71 75 65 73 74
        3A 20 6E 6F 20 61
        6E 73 77 65 72 2E
        2E 2E
   21BF 00                 4609 	.db 0x00
   21C0                    4610 ___str_65:
   21C0 0D                 4611 	.db 0x0d
   21C1 4E 61 67 6C 65 20  4612 	.ascii "Nagle set as requested..."
        73 65 74 20 61 73
        20 72 65 71 75 65
        73 74 65 64 2E 2E
        2E
   21DA 00                 4613 	.db 0x00
   21DB                    4614 ___str_67:
   21DB 0D                 4615 	.db 0x0d
   21DC 4E 61 67 6C 65 20  4616 	.ascii "Nagle not set as requested, error!"
        6E 6F 74 20 73 65
        74 20 61 73 20 72
        65 71 75 65 73 74
        65 64 2C 20 65 72
        72 6F 72 21
   21FE 00                 4617 	.db 0x00
   21FF                    4618 ___str_69:
   21FF 0D                 4619 	.db 0x0d
   2200 52 65 71 75 65 73  4620 	.ascii "Requested to turn off Wi-Fi Radio..."
        74 65 64 20 74 6F
        20 74 75 72 6E 20
        6F 66 66 20 57 69
        2D 46 69 20 52 61
        64 69 6F 2E 2E 2E
   2224 00                 4621 	.db 0x00
   2225                    4622 ___str_71:
   2225 0D                 4623 	.db 0x0d
   2226 52 65 71 75 65 73  4624 	.ascii "Request to turnoff Wi-Fi Radio error!"
        74 20 74 6F 20 74
        75 72 6E 6F 66 66
        20 57 69 2D 46 69
        20 52 61 64 69 6F
        20 65 72 72 6F 72
        21
   224B 00                 4625 	.db 0x00
   224C                    4626 ___str_73:
   224C 0D                 4627 	.db 0x0d
   224D 57 69 2D 46 69 20  4628 	.ascii "Wi-Fi radio on Time-out set successfully..."
        72 61 64 69 6F 20
        6F 6E 20 54 69 6D
        65 2D 6F 75 74 20
        73 65 74 20 73 75
        63 63 65 73 73 66
        75 6C 6C 79 2E 2E
        2E
   2278 00                 4629 	.db 0x00
   2279                    4630 ___str_75:
   2279 0D                 4631 	.db 0x0d
   227A 45 72 72 6F 72 20  4632 	.ascii "Error setting Wi-Fi radio on Time-out!"
        73 65 74 74 69 6E
        67 20 57 69 2D 46
        69 20 72 61 64 69
        6F 20 6F 6E 20 54
        69 6D 65 2D 6F 75
        74 21
   22A0 00                 4633 	.db 0x00
   22A1                    4634 ___str_76:
   22A1 46 69 6C 65 3A 20  4635 	.ascii "File: %s Size: %s "
        25 73 20 53 69 7A
        65 3A 20 25 73 20
   22B3 0D                 4636 	.db 0x0d
   22B4 0A                 4637 	.db 0x0a
   22B5 00                 4638 	.db 0x00
   22B6                    4639 ___str_78:
   22B6 45 72 72 6F 72 20  4640 	.ascii "Error requesting to start firmware update."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 73 74 61 72
        74 20 66 69 72 6D
        77 61 72 65 20 75
        70 64 61 74 65 2E
   22E0 0D                 4641 	.db 0x0d
   22E1 00                 4642 	.db 0x00
   22E2                    4643 ___str_80:
   22E2 0D                 4644 	.db 0x0d
   22E3 45 72 72 6F 72 20  4645 	.ascii "Error reading file..."
        72 65 61 64 69 6E
        67 20 66 69 6C 65
        2E 2E 2E
   22F8 0D                 4646 	.db 0x0d
   22F9 00                 4647 	.db 0x00
   22FA                    4648 ___str_82:
   22FA 0D                 4649 	.db 0x0d
   22FB 45 72 72 6F 72 20  4650 	.ascii "Error requesting to write firmware block."
        72 65 71 75 65 73
        74 69 6E 67 20 74
        6F 20 77 72 69 74
        65 20 66 69 72 6D
        77 61 72 65 20 62
        6C 6F 63 6B 2E
   2324 0D                 4651 	.db 0x0d
   2325 00                 4652 	.db 0x00
   2326                    4653 ___str_83:
   2326 0D                 4654 	.db 0x0d
   2327 45 72 72 6F 72 20  4655 	.ascii "Error reading firmware file!"
        72 65 61 64 69 6E
        67 20 66 69 72 6D
        77 61 72 65 20 66
        69 6C 65 21
   2343 0A                 4656 	.db 0x0a
   2344 00                 4657 	.db 0x00
   2345                    4658 ___str_84:
   2345 45 72 72 6F 72 2C  4659 	.ascii "Error, couldn't open %s ..."
        20 63 6F 75 6C 64
        6E 27 74 20 6F 70
        65 6E 20 25 73 20
        2E 2E 2E
   2360 0D                 4660 	.db 0x0d
   2361 0A                 4661 	.db 0x0a
   2362 00                 4662 	.db 0x00
   2363                    4663 ___str_85:
   2363 45 72 72 6F 72 2C  4664 	.ascii "Error, %s is 0 bytes long..."
        20 25 73 20 69 73
        20 30 20 62 79 74
        65 73 20 6C 6F 6E
        67 2E 2E 2E
   237F 0D                 4665 	.db 0x0d
   2380 0A                 4666 	.db 0x0a
   2381 00                 4667 	.db 0x00
   2382                    4668 ___str_86:
   2382 4F 6B 2C 20 75 70  4669 	.ascii "Ok, updating FW using server: %s port: %u"
        64 61 74 69 6E 67
        20 46 57 20 75 73
        69 6E 67 20 73 65
        72 76 65 72 3A 20
        25 73 20 70 6F 72
        74 3A 20 25 75
   23AB 0D                 4670 	.db 0x0d
   23AC 0A                 4671 	.db 0x0a
   23AD 46 69 6C 65 20 70  4672 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   23BA 0A                 4673 	.db 0x0a
   23BB 50 6C 65 61 73 65  4674 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   23E8 0D                 4675 	.db 0x0d
   23E9 0A                 4676 	.db 0x0a
   23EA 00                 4677 	.db 0x00
   23EB                    4678 ___str_87:
   23EB 4F 6B 2C 20 75 70  4679 	.ascii "Ok, updating certificates using server: %s port: %u"
        64 61 74 69 6E 67
        20 63 65 72 74 69
        66 69 63 61 74 65
        73 20 75 73 69 6E
        67 20 73 65 72 76
        65 72 3A 20 25 73
        20 70 6F 72 74 3A
        20 25 75
   241E 0D                 4680 	.db 0x0d
   241F 0A                 4681 	.db 0x0a
   2420 46 69 6C 65 20 70  4682 	.ascii "File path: %s"
        61 74 68 3A 20 25
        73
   242D 0A                 4683 	.db 0x0a
   242E 50 6C 65 61 73 65  4684 	.ascii "Please Wait, it can take up to a few minutes!"
        20 57 61 69 74 2C
        20 69 74 20 63 61
        6E 20 74 61 6B 65
        20 75 70 20 74 6F
        20 61 20 66 65 77
        20 6D 69 6E 75 74
        65 73 21
   245B 0D                 4685 	.db 0x0d
   245C 0A                 4686 	.db 0x0a
   245D 00                 4687 	.db 0x00
   245E                    4688 ___str_89:
   245E 0D                 4689 	.db 0x0d
   245F 53 75 63 63 65 73  4690 	.ascii "Success updating certificates!"
        73 20 75 70 64 61
        74 69 6E 67 20 63
        65 72 74 69 66 69
        63 61 74 65 73 21
   247D 0D                 4691 	.db 0x0d
   247E 00                 4692 	.db 0x00
   247F                    4693 ___str_91:
   247F 0D                 4694 	.db 0x0d
   2480 53 75 63 63 65 73  4695 	.ascii "Success, firmware updated, wait a minute so it is fully flas"
        73 2C 20 66 69 72
        6D 77 61 72 65 20
        75 70 64 61 74 65
        64 2C 20 77 61 69
        74 20 61 20 6D 69
        6E 75 74 65 20 73
        6F 20 69 74 20 69
        73 20 66 75 6C 6C
        79 20 66 6C 61 73
   24BC 68 65 64 2E        4696 	.ascii "hed."
   24C0 0D                 4697 	.db 0x0d
   24C1 00                 4698 	.db 0x00
   24C2                    4699 ___str_93:
   24C2 0D                 4700 	.db 0x0d
   24C3 46 61 69 6C 65 64  4701 	.ascii "Failed to update from remote server..."
        20 74 6F 20 75 70
        64 61 74 65 20 66
        72 6F 6D 20 72 65
        6D 6F 74 65 20 73
        65 72 76 65 72 2E
        2E 2E
   24E9 0D                 4702 	.db 0x0d
   24EA 00                 4703 	.db 0x00
   24EB                    4704 ___str_95:
   24EB 45 53 50 20 64 65  4705 	.ascii "ESP device not found..."
        76 69 63 65 20 6E
        6F 74 20 66 6F 75
        6E 64 2E 2E 2E
   2502 0D                 4706 	.db 0x0d
   2503 00                 4707 	.db 0x00
                           4708 	.area _CODE
   2504                    4709 ___str_96:
   2504 57 69 2D 46 69 20  4710 	.ascii "Wi-Fi is Idle, AP: "
        69 73 20 49 64 6C
        65 2C 20 41 50 3A
        20
   2517 00                 4711 	.db 0x00
   2518                    4712 ___str_97:
   2518 57 69 2D 46 69 20  4713 	.ascii "Wi-Fi Connecting to AP: "
        43 6F 6E 6E 65 63
        74 69 6E 67 20 74
        6F 20 41 50 3A 20
   2530 00                 4714 	.db 0x00
   2531                    4715 ___str_98:
   2531 57 69 2D 46 69 20  4716 	.ascii "Wi-Fi Wrong Password for AP: "
        57 72 6F 6E 67 20
        50 61 73 73 77 6F
        72 64 20 66 6F 72
        20 41 50 3A 20
   254E 00                 4717 	.db 0x00
   254F                    4718 ___str_99:
   254F 57 69 2D 46 69 20  4719 	.ascii "Wi-Fi Did not find AP: "
        44 69 64 20 6E 6F
        74 20 66 69 6E 64
        20 41 50 3A 20
   2566 00                 4720 	.db 0x00
   2567                    4721 ___str_100:
   2567 57 69 2D 46 69 20  4722 	.ascii "Wi-Fi Failed to connect to: "
        46 61 69 6C 65 64
        20 74 6F 20 63 6F
        6E 6E 65 63 74 20
        74 6F 3A 20
   2583 00                 4723 	.db 0x00
   2584                    4724 ___str_101:
   2584 57 69 2D 46 69 20  4725 	.ascii "Wi-Fi Connected to: "
        43 6F 6E 6E 65 63
        74 65 64 20 74 6F
        3A 20
   2598 00                 4726 	.db 0x00
                           4727 	.area _INITIALIZER
   0000                    4728 __xinit__strAPSts:
   0000r04r25              4729 	.dw ___str_96
   0002r18r25              4730 	.dw ___str_97
   0004r31r25              4731 	.dw ___str_98
   0006r4Fr25              4732 	.dw ___str_99
   0008r67r25              4733 	.dw ___str_100
   000Ar84r25              4734 	.dw ___str_101
                           4735 	.area _CABS (ABS)
