# MC2+

Do you like what I do and want to pay me a Coffee as a thank you? 
https://ko-fi.com/R6R2BRGX6
Just do it if you feel like it :)

IMPORTANTE! MULTICORE 2+ NÃO USA FLASH PARA O FIRMWARE OCM! O FIRMWARE OCM É O
ARQUIVO DO CORE (.MCP). AO TROCAR SEU ANTIGO .MCP POR ESSE, A ATUALIZAÇÃO FOI
FEITA!

NÃO USE SMXFLASH.COM!!! RESULTADOS SÃO IMPREVISÍVEIS! VOCÊ FOI AVISADO!

Multicore 2+ tem duas possibilidades:

    1 - Use um SD dedicado para MSX. Esse SD TEM que ter uma SD-BIOS e recomendo
    utilizar o kit do KdL para fazer um SD com SD-BIOS. Esse kit está
    disponível a pedido, acesse http://gnogni.altervista.org/index.html e clique
    no link OCM-SDBIOS Pack, irá redirecionar para pedir acesso ao arquivo. KdL
    é muito atencioso e geralmente responde no mesmo dia ou no dia seguinte.
    Após fazer o SD utilizando o kit, copie o arquivo OCM_SM.MCP para a raiz do
    cartão e renomeie para CORE.MCP, então copie o arquivo CORE.INI para a raiz
    do cartão. Se não fizer isso, irá assumir que tem que carregar uma imagem
    e não irá funcionar com o SD.

    2 - Use um arquivo IMG que é a imagem de um cartão como o criado no passo
    um, exceto que não precisa ter os arquivos MCP e INI na imagem, (tudo bem
    se tiver esses arquivos). Tanto pode criar seu cartão SD e então fazer a
    imagem usando uma ferramenta como Win32DiskImager, ou, pode tentar uma das
    imagens já pré-construídas disponíves no git lab do Victor Trucco:

    https://gitlab.com/victor.trucco/Multicore_Bitstreams/-/tree/master/Multicore%202%20Plus/Computers/SM-X/sdimg

    No caso da opção 2 seu SD pode ser formato como FAT, FAT32 ou FATX (melhor)
    , você copiará o arquivo da imagem, ocm_sm.mcp e ocm_sm.ini na mesma pasta
    e acessar o SM-X escolhendo OCM_SM no menu do Multicore. Após um tempo,
    provavelmente terá uma tela preta, aperte F12 e escolha LOAD IMAGE, escolha
    o arquivo IMG e responda YES quando perguntado se o arquivo deve ser usado
    automaticamente da próxima vez.

    NOTA: coloquei um arquivo de imagem de disco baseado na imagem que o Focosi
    liberou, provavelmente é ok liberar ela como não tem software pago já que
    o Nishi permitiu a todos usarem o MSX-DOS2 e o Nextor a ser criado e
    distribuido gratuitamente. Se houver algum problema com essa imagem eu irei
    remover a mesma assim que for notificado. Essa imagem é um bom ponto de
    partida desde que você tenha a expansão SM-X (ou a ZX Next e o ESP de MSX)
    e ela esteja conectada, visto que nela é utilizada uma SD-BIOS com a BIOS
    do Wi-Fi. Se não tiver essa extensão ou ela não estiver conectada, o boot
    irá demorar mais devido a BIOS esperar o ESP responder. Se tiver a extensão
    , pressione o botão vermelho no MC2+ enquanto mantém F1 pressionado, solte
    o botão vermelho e mantenha F1 pressionado até aparecer o menu da BIOS
    Wi-Fi. Configure sua rede e também configure o Wi-Fi para atualizar data e
    hora automaticamente no boot, é bem mais rápido que carregar o driver
    ESP8266.COM e usar SNTP.COM para atualizar a data e hora. :)

NOTA: Você precisa pelo menos da versão 1.07 do Menu Multicore e versão 2.00
do Firmware STM. Não está no escopo dessa documentação esse tipo de atualização
, procure ajuda no Git Lab do Victor Trucco ou em um dos grupos dedicados sobre
o Multicore no Facebook.

OCM-PLD v3.9d

Notas de liberação da versão

OCM-PLD v3.9d é uma extensão da OCM v3.9 do KdL. O que essa versão tem de
diferente:

    - Multicore 2+: parecido com o MiSTER, porém com um FPGA menor que o mesmo(
    mais que o dobro dos OCM segunda geração, mas cerca da metade do MiSTER) e
    sem o ARM embutido no FPGA que é utilizado para interface com dispositivos
    USB (MC2+ usa controles SEGA, Mega Drive ou Master System e mouse/teclados
    PS/2). Uma vantagem sobre o MiSTER é o slot de expansão aonde podem ser
    colocadas expansões que permitem utilizar cartuchos/interfaces reais dos
    dispositivos. Existe uma expansão SM-X que dá três slots de MSX e o Wi-Fi
    usando ESP-01.

        - Legado: tudo que a versão OCM 3.8 do Roberto Focosi e Victor Trucco
        tem a mais foi trazido, então tem suporte a extensão SM-X, uso de
        imagens de disco para não ter que dedicar um cartão SD para MSX, mapas
        do teclado todos em uma única versão escolhidos pelo menu OSD, etc.

        - Correção: no uso de imagens ao invés do cartão SD dedicado, erros de
        escrita occorriam às vezes, agora deve estar funcionando sempre.

        - Melhoria: MC2+ usa controles SEGA. Inicialmente, a versão 3.7.1 que
        eu havia feito primeiro usava apenas dois botões de qualquer cotrole, e
        permitia chamar o OSD com MODE + START usando controle de 8 botões, o
        Focosi na 3.8 dele optou por uma solução simples que também usava apenas
        dois botões mas não permitia mais chamar o OSD. Agora nessa versão eu
        fiz com que os dois controles fossem mapeados internamentes para um 
        "Joymega" interno. Com isso, dá para usar 4 ou 8 botões aonde o Joymega
        funciona (desde que use um controle com 4 ou 8 botões), chamar o OSD na
        combinação de START + MODE, tudo automático.

        - Comportamento único: o MC2+ não tem DIP switch, utiliza um OSD que é
        chamado pela tecla F12, portanto alterar o turbo da CPU com F12 key foi
        desabilitado e pode ser ajustado apenas pelo menu OSD (F12 ou MODE+START
        no controle 1) ou utilizando I/O chaveado ou software que configure a
        velocidade da CPU. Como o uso de F12 é necessário para chamar e depois 
        tirar o OSD da tela, ter a velocidade da CPU sendo alterada por essa
        tecla não funcionava bem.

        - Comportamento único: a emulação de paddle é ligada/desligada apenas
        pelo menu OSD, os comandos SETSMART para paddle não tem efeito no MC2+.

        - Melhoria: as configurações do DIP são feitas pelo OSD. Se estiver
        utilizando uma imagem de disco, as mudanças são salvas no cartão SD e
        retauradas novamente quando o OSD é chamado ou ao religar. Ao usar um
        cartão SD diretamente, como o cartão é "controlado" pelo MSX, não é
        possível ao microcontrolador do OSD salvar configurações no cartão,
        então nesse caso sempre que o menu OSD é chamado as configurações que
        aparecem são configurações padrão, já que o microcontrolador do OSD não
        sabe das mudanças no FPGA e não pode salvar as mesmas no cartão que
        está dedicado para o MSX. Por isso alterei algumas das configurações
        de forma que os valores padrões atendam a maioria. Lembre: ao usar um
        cartão dedicado ao MSX ao invés de imagem, configure tudo que deseja
        ANTES de sair do OSD. Ao entrar novamente no OSD, as configurações
        padrão serão restauradas, então terá que configurar tudo novamente.
        Infelizmente, no momento não há maneira de contornar isso (a não ser
        utilizar uma imagem de SD ao invés de um SD dedicado).

        - Novidade: se tiver a expansão "ZX Next" do MC2+ mas não tiver a
        expansão SM-X, poderá usar a do ZX Next após habilitar a mesma no OSD.
        Atualmente a única característica adicionada com isso é o uso de Wi-Fi.
        IMPORTANTE: SM-X / dipositivos OCM de segunda geração usam um firmware
        customizado para o ESP, e o ZX Nest utiliza um firmware "AT" padrão da
        Espressif. Para o Wi-Fi funcionar no MSX, necessita um segundo módulo
        ESP-01 com o firmware customizado, assim pode colocar o ESP do MSX na
        extensão quando for usar MSX, e colocar o ESP original de volta quando
        for usar a extensão para ZX Next. Instruções de como gravar o firmware
        customizado do ESP estão disponíveis em:
        https://youtu.be/uoaiEamWUUg

- OPL3:

    - Correção: Arrumei a OPL3, tinha dois problemas que faziam OPL3 não
      funcionar com a última versão do VGMPlay:

        - IRQ estava desconectado, então os temporizadores programados não
          geravam interrupção, e com apenas a interrupção do VDP, a música 
          tocava muito devagar.

        - Mesmo com IRQ conectado, a velocidade melhorou mas estava lenta. O
          temporizador tem uma escala que estava com valor incorreto para o
          clock utilizado, causando os temporizadores demorarem mais que o
          programado para acionar a interrupção.

      O VGMPlay 1.3 depende dos temporizadores da OPL3 quando a mesma está
      presente, como um temporizador de alta resolução, e não ter o IRQ ligado
      e não ter a escala correta nos temporizadores causava o mal funcionamento
      do mesmo...

    - Melhoria pro MC2+: originalmente a OPL3 estava apenas com um canal
      conectado, descartando qualquer som tocando apenas no canal desconectado.
      Como o MC2+ tem um FPGA enorme, a OPL3 funciona em estéreo real. Permiti
      que a OPL3 possa ser usada em MONO pelo OSD.

- SN76489 e 2xPSG:

    - Novidade: suporte parcial a uma "Franky" embutida. Esse suporte parcial
      é suficiente para que SG1000, COL4MMM (usando as versões COM\Franky),
      VGMPLAY, ROBOPLAY e Sofarun (lembre de configurar de forma que use o VDP
      do MSX e PSG do Franky para SMS/SG1000). Como a Franky utiliza as portas
      0x48 e 0x49 que fazem parte das portas reservadas para I/O chaveado, irá
      estar desabilitado inicialmente, já que o módulo que carrega a BIOS MSX
      deixa o dispositivo de I/O chaveado selecionado após o boot. Há várias
      opções para habilitar o som da Franky:

        - A última versão do COL4MMM automaticamente desabilita o I/O chaveado,
        então não é necessário nada para que funcione. :)re.

        - VGMPLAY também desabilita automaticante o I/O chaveado, então se usar
        o VGMPLAY e tocar uma música que usa o SN76489, após sair do VGMPLAY
        poderá utilizar qualquer outro software que o som irá funcionar.

        - Enviar pelo BASIC o comando OUT &H40,0 que desabilita o I/O chaveado.

        - Usar SETSMART -8C para reservar as portas 0x48 e 0x49 para o Franky,
        ao fazer isso qualquer programa que dependa dessas portas para ler
        informações do OCM não irá obter a informação correta.

    - Novidade: Segundo PSG nas porta 0x10-0x13. Também permite que os
      registradores do segundo PSG sejam lidos.

- Outras atualizações:

    - Melhoria: Victor Trucco fez melhorias no controlador de SDRAM que agora é
      capaz de trabalhar com diferentes chips. Alguns SM-X mini e SMX-HB usam
      chips que precisam dessa melhoria pra funcionar. O KdL gentilmente ajudou
      trabalhando no código do Victor Trucco e extrapolando ele para alguns
      cenários não cobertos, agora o controlador é compatível com o mapa de RAM
      da OCM 3.9, obrigado KdL! :)

    - Novidade: Emulação de Paddle usando um mouse PS/2. Para habilitar o modo
      VAUS (Arkanoid/Taito) ou o modo MSX use o menu OSD (F12 ou MODE + START
      no controle 1). Note que um paddle MSX apenas funciona corretamente se
      o Z80 estiver a 3.58MHz, como um veradeiro paddle MSX em um MSX com CPU
      turbo.

    - Correção: Não era possível mover apenas um ponto no eixo X. Também
      adicionei quatro níveis de sensibilidade que podem ser alternados com o
      clique do terceiro botão do mouse (se seu mouse não for compatível com o
      padrão intellimouse / três botões, a sensibilidade estará fixa próximo ao
      que era originalmente).

    - Correção: ao mudar de controle para mouse e vice versa, agora a porta de
      controles é "desconectada" por 1 segundo. Em um MSX real não é possível
      mudar de controle para mouse (e vice versa) sem desconectar o mesmo da
      porta, HIDTEST e jogos/programas que usem a HIDLIB dependem desse evento
      de desconexão e posterior conexão para detectar a troca de dispositivo.

    - Correção: havia um bug no z80 causando alguns problemas ao tentar jogar
      Lilly's Saga, correção feita pelo Hara-san

- Futuro:

    - Novidade: ainda está em desenvolvimente, por favor aguarde, logo teremos
      o Franky com VDP e PSG :P

Todo código fonte e binários alterados em relação ao OCM 3.9:
(c)2022 Oduvaldo Pavan Junior - ducasp@gmail.com

Todo código fonte do OCM 3.9 é um trabalho de muitas pessoas, incluindo KdL e
Hara-san que são grandes contribuidores!

Todo código adcional pode ser reutilizado, re-escrito, trabalhos derivados
podem ser vendidos DESDE QUE o código fonte das mudanças seja publicado também.
Para o código original do OCM 3.9, verifique a licença do mesmo.

